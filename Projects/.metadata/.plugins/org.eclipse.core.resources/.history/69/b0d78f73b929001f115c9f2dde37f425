/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "Sensor/stts22h_reg.h"
#include "Sensor/iis3dwb_reg.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

#ifndef HSEM_ID_0
#define HSEM_ID_0 (0U) /* HW semaphore 0*/
#endif

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
#define    BOOT_TIME        10 //ms
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

COM_InitTypeDef BspCOMInit;

I2C_HandleTypeDef hi2c2;

SPI_HandleTypeDef hspi1;

TIM_HandleTypeDef htim2;

/* USER CODE BEGIN PV */
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C2_Init(void);
static void MX_SPI1_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

//SPI
static int32_t platform_write_SPI(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len);
static int32_t platform_read_SPI(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len);

int8_t float_to_int8_t(float value);


static uint8_t whoamI_SPI, rst;
static int16_t data_raw_acceleration[3];
static int16_t data_raw_temperature;
static float acceleration_mg[3];
static float temperature_degC;
static uint8_t tx_buffer[1000];

static float offset[3];
static int16_t data_raw_offset[3];
static int32_t sum[3];

//uint8_t dataFlag = 0;

//I2C
//static uint8_t whoamI_I2C;

//All usages
static void platform_delay(uint32_t ms);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
    /* Wait until CPU2 boots and enters in stop mode or timeout*/
    int32_t timeout;
    timeout = 0xFFFF;
    while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
    if ( timeout < 0 )
    {
    Error_Handler();
    }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
  /* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
  HSEM notification */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
  /*Take HSEM */
  HAL_HSEM_FastTake(HSEM_ID_0);
  /*Release HSEM in order to notify the CPU2(CM4)*/
  HAL_HSEM_Release(HSEM_ID_0,0);
  /* wait until CPU2 wakes up from stop mode */
  timeout = 0xFFFF;
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
  if ( timeout < 0 )
  {
  Error_Handler();
  }
/* USER CODE END Boot_Mode_Sequence_2 */

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C2_Init();
  MX_SPI1_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  GPIOA->BSRR = (1U << 4); //!!!ENABLE CC PIN FROM START!!!!
  HAL_Delay(100);
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
  BSP_LED_Init(LED_YELLOW);
  BSP_LED_Init(LED_RED);

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 256000;
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
  BspCOMInit.StopBits   = COM_STOPBITS_1;
  BspCOMInit.Parity     = COM_PARITY_NONE;
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
  {
    Error_Handler();
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //-----INIT STTS22H------
  //STTS22H VARIBELS
  //stmdev_ctx_t dev_ctx_STTS22H;


  //-----INIT IIS3DWB------p
  //IIS3DWB VARIBELS
  stmdev_ctx_t dev_ctx_IIS3DWB;
  iis3dwb_pin_int1_route_t int1_route;
  dev_ctx_IIS3DWB.write_reg = platform_write_SPI;
  dev_ctx_IIS3DWB.read_reg = platform_read_SPI;
  dev_ctx_IIS3DWB.mdelay = platform_delay;
  dev_ctx_IIS3DWB.handle = &hspi1;


  //delay
  platform_delay(BOOT_TIME);

  //check communcation
  iis3dwb_device_id_get(&dev_ctx_IIS3DWB, &whoamI_SPI);

    if (whoamI_SPI != IIS3DWB_ID)
      while (1);

  /* Restore default configuration */
  iis3dwb_reset_set(&dev_ctx_IIS3DWB, PROPERTY_ENABLE);

  do {
      iis3dwb_reset_get(&dev_ctx_IIS3DWB, &rst);
  } while (rst);

  /* Enable INT1 data ready interrupt */
  iis3dwb_pin_int1_route_get(&dev_ctx_IIS3DWB, &int1_route);
  int1_route.drdy_xl = PROPERTY_ENABLE; // enable data ready interrupt on INT1
  iis3dwb_pin_int1_route_set(&dev_ctx_IIS3DWB, &int1_route);
  iis3dwb_rst_batch_counter_set(&dev_ctx_IIS3DWB, 0x80); // enable pulsed (not latched) data ready interrupt


  /* Enable Block Data Update */
  iis3dwb_block_data_update_set(&dev_ctx_IIS3DWB, PROPERTY_ENABLE);
  /* Set Output Data Rate */
  iis3dwb_xl_data_rate_set(&dev_ctx_IIS3DWB, IIS3DWB_XL_ODR_26k7Hz);
  /* Set full scale */
  iis3dwb_xl_full_scale_set(&dev_ctx_IIS3DWB, IIS3DWB_4g);
  /* Configure filtering chain(No aux interface)
   * Accelerometer low pass filter path
   */
  iis3dwb_xl_filt_path_on_out_set(&dev_ctx_IIS3DWB, IIS3DWB_LP_ODR_DIV_100);

  /*mask data ready until filter settle complete
   * (bit 3 == 1), disable I2C (bit 2 == 1)*/
  //iis3dwb_all_on_int1_set(&dev_ctx_IIS3DWB, (0x08 | 0x04));

  /*Read dummy data*/
  //iis3dwb_acceleration_raw_get(&dev_ctx_IIS3DWB, data_raw_acceleration);

  //offset enable
  //iis3dwb_usr_offset_block_set(&dev_ctx_IIS3DWB, PROPERTY_ENABLE); //bit 4 enable

  //calculate offset

  for (uint8_t ii = 0; ii < 128; ii++)
  {
      memset(data_raw_offset, 0x00, 3 * sizeof(int16_t));
      iis3dwb_acceleration_raw_get(&dev_ctx_IIS3DWB, data_raw_offset);
      sum[0] += data_raw_offset[0];
      sum[1] += data_raw_offset[1];
      sum[2] += data_raw_offset[2];
      HAL_Delay(10); //make sure sample is ready
  }

  // !!!assuming 4g!!! 0.061 for 2g
  offset[0] = (sum[0] * 0.122f) / 129.0f;
  offset[1] = (sum[1] * 0.122f) / 129.0f;
  offset[2] = (sum[2] * 0.122f) / 129.0f;

  if (offset[0] > 0.85f)  {
    offset[0] -= 1.0f; // Remove gravity from the x-axis accelerometer bias calculation
  }
  if (offset[0] < -0.85f) {
    offset[0] += 1.0f; // Remove gravity from the x-axis accelerometer bias calculation
  }
  if (offset[1] > 0.85f)  {
    offset[1] -= 1.0f; // Remove gravity from the y-axis accelerometer bias calculation
  }
  if (offset[1] < -0.85f) {
    offset[1] += 1.0f; // Remove gravity from the y-axis accelerometer bias calculation
  }
  if (offset[2] > 0.85f)  {
    offset[2] -= 1.0f; // Remove gravity from the z-axis accelerometer bias calculation
  }
  if (offset[2] < -0.85f) {
    offset[2] += 1.0f; // Remove gravity from the z-axis accelerometer bias calculation
  }

  /*// Prepare buffer to store int8_t offsets
  uint8_t offset_buffer[3];
  offset_buffer[0] = (uint8_t)float_to_int8_t(offset[0]);
  offset_buffer[1] = (uint8_t)float_to_int8_t(offset[1]);
  offset_buffer[2] = (uint8_t)float_to_int8_t(offset[2]);

  // Set offsets
  iis3dwb_xl_usr_offset_x_set(&dev_ctx_IIS3DWB, &offset_buffer[0]);
  iis3dwb_xl_usr_offset_y_set(&dev_ctx_IIS3DWB, &offset_buffer[1]);
  iis3dwb_xl_usr_offset_z_set(&dev_ctx_IIS3DWB, &offset_buffer[2]);*/


  while(1)
  {
      uint8_t reg;
      /* Read output only if new xl value is available */
      //iis3dwb_xl_flag_data_ready_get(&dev_ctx_IIS3DWB, &reg);

      //if (reg) {
        //dataFlag = 0;
        // Start the timer
        /*
         * Sending 23 bytes takes p=0,00077966101694915254s with 256000
         * so if we need 0.002s for 500hz we do 0.002s - p
         * and setup timer for that is prescaler 121 and Period 1000 with 100MHZ
         */
        __HAL_TIM_SET_COUNTER(&htim2, 0); // Reset the timer counter
        HAL_TIM_Base_Start(&htim2);
        // Wait for the timer to expire by polling the update flag
        while (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE) == RESET) {}

        // Clear the update flag
        __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);

        // Stop the timer
        HAL_TIM_Base_Stop(&htim2);

        /* Read acceleration field data */
        memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
        iis3dwb_acceleration_raw_get(&dev_ctx_IIS3DWB, data_raw_acceleration);
        acceleration_mg[0] =
          iis3dwb_from_fs4g_to_mg(data_raw_acceleration[0]) - offset[0];
        acceleration_mg[1] =
          iis3dwb_from_fs4g_to_mg(data_raw_acceleration[1]) - offset[1];
        acceleration_mg[2] =
          iis3dwb_from_fs4g_to_mg(data_raw_acceleration[2]) - offset[2];
        sprintf((char *)tx_buffer,
                "%4.2f\t%4.2f\t%4.2f\t\r\n",
                acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);

        /*sprintf((char *)tx_buffer,
                        "%d\t%d\t%d\t\r\n",
                        data_raw_acceleration[0], data_raw_acceleration[1], data_raw_acceleration[2]);*/

        printf("%s", (char *)tx_buffer);
      //}

      //iis3dwb_temp_flag_data_ready_get(&dev_ctx_IIS3DWB, &reg);

      /*if (reg) {
        // Read temperature data
        memset(&data_raw_temperature, 0x00, sizeof(int16_t));
        iis3dwb_temperature_raw_get(&dev_ctx_IIS3DWB, &data_raw_temperature);
        temperature_degC = iis3dwb_from_lsb_to_celsius(data_raw_temperature);
        //sprintf((char *)tx_buffer,
        //        "T:%6.2f\r\n", temperature_degC);
        //printf("%s", (char *)tx_buffer);

      }*/

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 200;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
  hi2c2.Init.Timing = 0x00C0EAFF;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 121;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 1000;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  //dataFlag = 1;
}

int8_t float_to_int8_t(float value) {
    // Step 1: Scale down the float by 2^10
    float scaled_value = value / (float)(1 << 10);

    // Step 2: Clamp the value to be within [-128, 128]
    if (scaled_value > 127) {
        scaled_value = 127;
    } else if (scaled_value < -127) {
        scaled_value = -127;
    }

    // Step 3: Round the value to the nearest integer
    int32_t rounded_value = (int32_t)round(scaled_value);

    // Step 4: Cast to int8_t
    int8_t result = (int8_t)rounded_value;

    return result;
}

static int32_t platform_write_SPI(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
    uint8_t tx_buf[len + 1];
    uint8_t rx_buf[len + 1];  // Dummy receive buffer

    tx_buf[0] = reg;
    memcpy(&tx_buf[1], bufp, len);

    GPIOA->BSRR = (1U << (4 + 16));  // Reset PA4
    HAL_SPI_TransmitReceive((SPI_HandleTypeDef*)handle, tx_buf, rx_buf, len + 1, HAL_MAX_DELAY);
    GPIOA->BSRR = (1U << 4);  // Set PA4

    return 0;
}

/**
 * @brief  Read generic device register (platform dependent).
 */
static int32_t platform_read_SPI(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
    reg |= 0x80; // Multi-byte read bit for SPI

    uint8_t tx_buf[len + 1];
    uint8_t rx_buf[len + 1];

    tx_buf[0] = reg;
    memset(&tx_buf[1], 0, len);  // Fill the rest of tx_buf with dummy bytes

    GPIOA->BSRR = (1U << (4 + 16));  // Reset PA4
    HAL_SPI_TransmitReceive((SPI_HandleTypeDef*)handle, tx_buf, rx_buf, len + 1, HAL_MAX_DELAY);
    GPIOA->BSRR = (1U << 4);  // Set PA4

    memcpy(bufp, &rx_buf[1], len);

    return 0;
}
/**
 * @brief  Platform specific delay (platform dependent).
 */
static void platform_delay(uint32_t ms)
{
    HAL_Delay(ms);
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
