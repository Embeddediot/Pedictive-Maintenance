
data_gather_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000610c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080063a4  080063a4  000073a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006404  08006404  00008088  2**0
                  CONTENTS
  4 .ARM          00000008  08006404  08006404  00007404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800640c  0800640c  00008088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800640c  0800640c  0000740c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006410  08006410  00007410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  24000000  08006414  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  24000088  0800649c  00008088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400033c  0800649c  0000833c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012906  00000000  00000000  000080b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002660  00000000  00000000  0001a9bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  0001d020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d2  00000000  00000000  0001dd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a811  00000000  00000000  0001e6da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001200f  00000000  00000000  00058eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017d703  00000000  00000000  0006aefa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e85fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a9c  00000000  00000000  001e8640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000c4  00000000  00000000  001ec0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000088 	.word	0x24000088
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800638c 	.word	0x0800638c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400008c 	.word	0x2400008c
 80002d4:	0800638c 	.word	0x0800638c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80006fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006fe:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000700:	bf00      	nop
 8000702:	4b36      	ldr	r3, [pc, #216]	@ (80007dc <main+0xe8>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800070a:	2b00      	cmp	r3, #0
 800070c:	d004      	beq.n	8000718 <main+0x24>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	1e5a      	subs	r2, r3, #1
 8000712:	607a      	str	r2, [r7, #4]
 8000714:	2b00      	cmp	r3, #0
 8000716:	dcf4      	bgt.n	8000702 <main+0xe>
  if ( timeout < 0 )
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b00      	cmp	r3, #0
 800071c:	da01      	bge.n	8000722 <main+0x2e>
  {
  Error_Handler();
 800071e:	f000 fa17 	bl	8000b50 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000722:	f000 fd87 	bl	8001234 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000726:	f000 f85f 	bl	80007e8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800072a:	4b2c      	ldr	r3, [pc, #176]	@ (80007dc <main+0xe8>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000730:	4a2a      	ldr	r2, [pc, #168]	@ (80007dc <main+0xe8>)
 8000732:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000736:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800073a:	4b28      	ldr	r3, [pc, #160]	@ (80007dc <main+0xe8>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000748:	2000      	movs	r0, #0
 800074a:	f001 f96f 	bl	8001a2c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800074e:	2100      	movs	r1, #0
 8000750:	2000      	movs	r0, #0
 8000752:	f001 f985 	bl	8001a60 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000756:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800075a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800075c:	bf00      	nop
 800075e:	4b1f      	ldr	r3, [pc, #124]	@ (80007dc <main+0xe8>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000766:	2b00      	cmp	r3, #0
 8000768:	d104      	bne.n	8000774 <main+0x80>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	1e5a      	subs	r2, r3, #1
 800076e:	607a      	str	r2, [r7, #4]
 8000770:	2b00      	cmp	r3, #0
 8000772:	dcf4      	bgt.n	800075e <main+0x6a>
if ( timeout < 0 )
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b00      	cmp	r3, #0
 8000778:	da01      	bge.n	800077e <main+0x8a>
{
Error_Handler();
 800077a:	f000 f9e9 	bl	8000b50 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077e:	f000 f92f 	bl	80009e0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000782:	f000 f8e1 	bl	8000948 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000786:	2000      	movs	r0, #0
 8000788:	f000 fb70 	bl	8000e6c <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 800078c:	2001      	movs	r0, #1
 800078e:	f000 fb6d 	bl	8000e6c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000792:	2002      	movs	r0, #2
 8000794:	f000 fb6a 	bl	8000e6c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000798:	2101      	movs	r1, #1
 800079a:	2000      	movs	r0, #0
 800079c:	f000 fbdc 	bl	8000f58 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <main+0xec>)
 80007a2:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007a6:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80007a8:	4b0d      	ldr	r3, [pc, #52]	@ (80007e0 <main+0xec>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80007ae:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <main+0xec>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	@ (80007e0 <main+0xec>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80007ba:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <main+0xec>)
 80007bc:	2200      	movs	r2, #0
 80007be:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80007c0:	4907      	ldr	r1, [pc, #28]	@ (80007e0 <main+0xec>)
 80007c2:	2000      	movs	r0, #0
 80007c4:	f000 fc58 	bl	8001078 <BSP_COM_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <main+0xde>
  {
    Error_Handler();
 80007ce:	f000 f9bf 	bl	8000b50 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("[INFO] COM PORT IS OPEN\r\n");
 80007d2:	4804      	ldr	r0, [pc, #16]	@ (80007e4 <main+0xf0>)
 80007d4:	f005 fa46 	bl	8005c64 <puts>
  while (1)
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <main+0xe4>
 80007dc:	58024400 	.word	0x58024400
 80007e0:	240000a4 	.word	0x240000a4
 80007e4:	080063a4 	.word	0x080063a4

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b09e      	sub	sp, #120	@ 0x78
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007f2:	224c      	movs	r2, #76	@ 0x4c
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f005 fb14 	bl	8005e24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	2220      	movs	r2, #32
 8000802:	2100      	movs	r1, #0
 8000804:	4618      	mov	r0, r3
 8000806:	f005 fb0d 	bl	8005e24 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800080a:	2002      	movs	r0, #2
 800080c:	f001 f93c 	bl	8001a88 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000810:	2300      	movs	r3, #0
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	4b49      	ldr	r3, [pc, #292]	@ (800093c <SystemClock_Config+0x154>)
 8000816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000818:	4a48      	ldr	r2, [pc, #288]	@ (800093c <SystemClock_Config+0x154>)
 800081a:	f023 0301 	bic.w	r3, r3, #1
 800081e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000820:	4b46      	ldr	r3, [pc, #280]	@ (800093c <SystemClock_Config+0x154>)
 8000822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000824:	f003 0301 	and.w	r3, r3, #1
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	4b45      	ldr	r3, [pc, #276]	@ (8000940 <SystemClock_Config+0x158>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	4a44      	ldr	r2, [pc, #272]	@ (8000940 <SystemClock_Config+0x158>)
 8000830:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000834:	6193      	str	r3, [r2, #24]
 8000836:	4b42      	ldr	r3, [pc, #264]	@ (8000940 <SystemClock_Config+0x158>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000842:	bf00      	nop
 8000844:	4b3e      	ldr	r3, [pc, #248]	@ (8000940 <SystemClock_Config+0x158>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800084c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000850:	d1f8      	bne.n	8000844 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000852:	4b3c      	ldr	r3, [pc, #240]	@ (8000944 <SystemClock_Config+0x15c>)
 8000854:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000858:	4a3a      	ldr	r2, [pc, #232]	@ (8000944 <SystemClock_Config+0x15c>)
 800085a:	f043 0302 	orr.w	r3, r3, #2
 800085e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000862:	4b38      	ldr	r3, [pc, #224]	@ (8000944 <SystemClock_Config+0x15c>)
 8000864:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000868:	f003 0302 	and.w	r3, r3, #2
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000870:	2300      	movs	r3, #0
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	4b32      	ldr	r3, [pc, #200]	@ (8000940 <SystemClock_Config+0x158>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	4a31      	ldr	r2, [pc, #196]	@ (8000940 <SystemClock_Config+0x158>)
 800087a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	4b2f      	ldr	r3, [pc, #188]	@ (8000940 <SystemClock_Config+0x158>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4b2c      	ldr	r3, [pc, #176]	@ (800093c <SystemClock_Config+0x154>)
 800088c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800088e:	4a2b      	ldr	r2, [pc, #172]	@ (800093c <SystemClock_Config+0x154>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000896:	4b29      	ldr	r3, [pc, #164]	@ (800093c <SystemClock_Config+0x154>)
 8000898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008a2:	bf00      	nop
 80008a4:	4b26      	ldr	r3, [pc, #152]	@ (8000940 <SystemClock_Config+0x158>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008b0:	d1f8      	bne.n	80008a4 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b2:	2302      	movs	r3, #2
 80008b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008b6:	2301      	movs	r3, #1
 80008b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ba:	2340      	movs	r3, #64	@ 0x40
 80008bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008be:	2302      	movs	r3, #2
 80008c0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c2:	2300      	movs	r3, #0
 80008c4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008c6:	2304      	movs	r3, #4
 80008c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 80008ca:	233c      	movs	r3, #60	@ 0x3c
 80008cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008ce:	2302      	movs	r3, #2
 80008d0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80008d2:	2306      	movs	r3, #6
 80008d4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008d6:	2302      	movs	r3, #2
 80008d8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008da:	230c      	movs	r3, #12
 80008dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008de:	2300      	movs	r3, #0
 80008e0:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008ea:	4618      	mov	r0, r3
 80008ec:	f001 f926 	bl	8001b3c <HAL_RCC_OscConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0x112>
  {
    Error_Handler();
 80008f6:	f000 f92b 	bl	8000b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fa:	233f      	movs	r3, #63	@ 0x3f
 80008fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fe:	2303      	movs	r3, #3
 8000900:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000906:	2308      	movs	r3, #8
 8000908:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800090a:	2340      	movs	r3, #64	@ 0x40
 800090c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800090e:	2340      	movs	r3, #64	@ 0x40
 8000910:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000912:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000918:	2340      	movs	r3, #64	@ 0x40
 800091a:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	2104      	movs	r1, #4
 8000922:	4618      	mov	r0, r3
 8000924:	f001 fd64 	bl	80023f0 <HAL_RCC_ClockConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 800092e:	f000 f90f 	bl	8000b50 <Error_Handler>
  }
}
 8000932:	bf00      	nop
 8000934:	3778      	adds	r7, #120	@ 0x78
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	58000400 	.word	0x58000400
 8000940:	58024800 	.word	0x58024800
 8000944:	58024400 	.word	0x58024400

08000948 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800094c:	4b22      	ldr	r3, [pc, #136]	@ (80009d8 <MX_USART3_UART_Init+0x90>)
 800094e:	4a23      	ldr	r2, [pc, #140]	@ (80009dc <MX_USART3_UART_Init+0x94>)
 8000950:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000952:	4b21      	ldr	r3, [pc, #132]	@ (80009d8 <MX_USART3_UART_Init+0x90>)
 8000954:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000958:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800095a:	4b1f      	ldr	r3, [pc, #124]	@ (80009d8 <MX_USART3_UART_Init+0x90>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000960:	4b1d      	ldr	r3, [pc, #116]	@ (80009d8 <MX_USART3_UART_Init+0x90>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000966:	4b1c      	ldr	r3, [pc, #112]	@ (80009d8 <MX_USART3_UART_Init+0x90>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800096c:	4b1a      	ldr	r3, [pc, #104]	@ (80009d8 <MX_USART3_UART_Init+0x90>)
 800096e:	220c      	movs	r2, #12
 8000970:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000972:	4b19      	ldr	r3, [pc, #100]	@ (80009d8 <MX_USART3_UART_Init+0x90>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000978:	4b17      	ldr	r3, [pc, #92]	@ (80009d8 <MX_USART3_UART_Init+0x90>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097e:	4b16      	ldr	r3, [pc, #88]	@ (80009d8 <MX_USART3_UART_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000984:	4b14      	ldr	r3, [pc, #80]	@ (80009d8 <MX_USART3_UART_Init+0x90>)
 8000986:	2200      	movs	r2, #0
 8000988:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098a:	4b13      	ldr	r3, [pc, #76]	@ (80009d8 <MX_USART3_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000990:	4811      	ldr	r0, [pc, #68]	@ (80009d8 <MX_USART3_UART_Init+0x90>)
 8000992:	f003 fee5 	bl	8004760 <HAL_UART_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800099c:	f000 f8d8 	bl	8000b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a0:	2100      	movs	r1, #0
 80009a2:	480d      	ldr	r0, [pc, #52]	@ (80009d8 <MX_USART3_UART_Init+0x90>)
 80009a4:	f004 ff7b 	bl	800589e <HAL_UARTEx_SetTxFifoThreshold>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009ae:	f000 f8cf 	bl	8000b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b2:	2100      	movs	r1, #0
 80009b4:	4808      	ldr	r0, [pc, #32]	@ (80009d8 <MX_USART3_UART_Init+0x90>)
 80009b6:	f004 ffb0 	bl	800591a <HAL_UARTEx_SetRxFifoThreshold>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009c0:	f000 f8c6 	bl	8000b50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009c4:	4804      	ldr	r0, [pc, #16]	@ (80009d8 <MX_USART3_UART_Init+0x90>)
 80009c6:	f004 ff31 	bl	800582c <HAL_UARTEx_DisableFifoMode>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009d0:	f000 f8be 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	240000b4 	.word	0x240000b4
 80009dc:	40004800 	.word	0x40004800

080009e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	@ 0x28
 80009e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	4b51      	ldr	r3, [pc, #324]	@ (8000b3c <MX_GPIO_Init+0x15c>)
 80009f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fc:	4a4f      	ldr	r2, [pc, #316]	@ (8000b3c <MX_GPIO_Init+0x15c>)
 80009fe:	f043 0304 	orr.w	r3, r3, #4
 8000a02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a06:	4b4d      	ldr	r3, [pc, #308]	@ (8000b3c <MX_GPIO_Init+0x15c>)
 8000a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a0c:	f003 0304 	and.w	r3, r3, #4
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a14:	4b49      	ldr	r3, [pc, #292]	@ (8000b3c <MX_GPIO_Init+0x15c>)
 8000a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a1a:	4a48      	ldr	r2, [pc, #288]	@ (8000b3c <MX_GPIO_Init+0x15c>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a24:	4b45      	ldr	r3, [pc, #276]	@ (8000b3c <MX_GPIO_Init+0x15c>)
 8000a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	4b42      	ldr	r3, [pc, #264]	@ (8000b3c <MX_GPIO_Init+0x15c>)
 8000a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a38:	4a40      	ldr	r2, [pc, #256]	@ (8000b3c <MX_GPIO_Init+0x15c>)
 8000a3a:	f043 0302 	orr.w	r3, r3, #2
 8000a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a42:	4b3e      	ldr	r3, [pc, #248]	@ (8000b3c <MX_GPIO_Init+0x15c>)
 8000a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a48:	f003 0302 	and.w	r3, r3, #2
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a50:	4b3a      	ldr	r3, [pc, #232]	@ (8000b3c <MX_GPIO_Init+0x15c>)
 8000a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a56:	4a39      	ldr	r2, [pc, #228]	@ (8000b3c <MX_GPIO_Init+0x15c>)
 8000a58:	f043 0308 	orr.w	r3, r3, #8
 8000a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a60:	4b36      	ldr	r3, [pc, #216]	@ (8000b3c <MX_GPIO_Init+0x15c>)
 8000a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a66:	f003 0308 	and.w	r3, r3, #8
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a6e:	4b33      	ldr	r3, [pc, #204]	@ (8000b3c <MX_GPIO_Init+0x15c>)
 8000a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a74:	4a31      	ldr	r2, [pc, #196]	@ (8000b3c <MX_GPIO_Init+0x15c>)
 8000a76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a7e:	4b2f      	ldr	r3, [pc, #188]	@ (8000b3c <MX_GPIO_Init+0x15c>)
 8000a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000a8c:	2332      	movs	r3, #50	@ 0x32
 8000a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a9c:	230b      	movs	r3, #11
 8000a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4826      	ldr	r0, [pc, #152]	@ (8000b40 <MX_GPIO_Init+0x160>)
 8000aa8:	f000 fdf6 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000aac:	2386      	movs	r3, #134	@ 0x86
 8000aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000abc:	230b      	movs	r3, #11
 8000abe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	481f      	ldr	r0, [pc, #124]	@ (8000b44 <MX_GPIO_Init+0x164>)
 8000ac8:	f000 fde6 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000acc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ade:	230b      	movs	r3, #11
 8000ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4817      	ldr	r0, [pc, #92]	@ (8000b48 <MX_GPIO_Init+0x168>)
 8000aea:	f000 fdd5 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000aee:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000b00:	230a      	movs	r3, #10
 8000b02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	480e      	ldr	r0, [pc, #56]	@ (8000b44 <MX_GPIO_Init+0x164>)
 8000b0c:	f000 fdc4 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000b10:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b22:	230b      	movs	r3, #11
 8000b24:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4807      	ldr	r0, [pc, #28]	@ (8000b4c <MX_GPIO_Init+0x16c>)
 8000b2e:	f000 fdb3 	bl	8001698 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b32:	bf00      	nop
 8000b34:	3728      	adds	r7, #40	@ 0x28
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	58024400 	.word	0x58024400
 8000b40:	58020800 	.word	0x58020800
 8000b44:	58020000 	.word	0x58020000
 8000b48:	58020400 	.word	0x58020400
 8000b4c:	58021800 	.word	0x58021800

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <Error_Handler+0x8>

08000b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	4b0a      	ldr	r3, [pc, #40]	@ (8000b8c <HAL_MspInit+0x30>)
 8000b64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b68:	4a08      	ldr	r2, [pc, #32]	@ (8000b8c <HAL_MspInit+0x30>)
 8000b6a:	f043 0302 	orr.w	r3, r3, #2
 8000b6e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b72:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <HAL_MspInit+0x30>)
 8000b74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b78:	f003 0302 	and.w	r3, r3, #2
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	58024400 	.word	0x58024400

08000b90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b0ba      	sub	sp, #232	@ 0xe8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ba8:	f107 0310 	add.w	r3, r7, #16
 8000bac:	22c0      	movs	r2, #192	@ 0xc0
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f005 f937 	bl	8005e24 <memset>
  if(huart->Instance==USART3)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a27      	ldr	r2, [pc, #156]	@ (8000c58 <HAL_UART_MspInit+0xc8>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d146      	bne.n	8000c4e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bc0:	f04f 0202 	mov.w	r2, #2
 8000bc4:	f04f 0300 	mov.w	r3, #0
 8000bc8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd2:	f107 0310 	add.w	r3, r7, #16
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f001 ff96 	bl	8002b08 <HAL_RCCEx_PeriphCLKConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000be2:	f7ff ffb5 	bl	8000b50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000be6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c5c <HAL_UART_MspInit+0xcc>)
 8000be8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bec:	4a1b      	ldr	r2, [pc, #108]	@ (8000c5c <HAL_UART_MspInit+0xcc>)
 8000bee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bf2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000bf6:	4b19      	ldr	r3, [pc, #100]	@ (8000c5c <HAL_UART_MspInit+0xcc>)
 8000bf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bfc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c04:	4b15      	ldr	r3, [pc, #84]	@ (8000c5c <HAL_UART_MspInit+0xcc>)
 8000c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c0a:	4a14      	ldr	r2, [pc, #80]	@ (8000c5c <HAL_UART_MspInit+0xcc>)
 8000c0c:	f043 0308 	orr.w	r3, r3, #8
 8000c10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c14:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <HAL_UART_MspInit+0xcc>)
 8000c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c1a:	f003 0308 	and.w	r3, r3, #8
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c22:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c3c:	2307      	movs	r3, #7
 8000c3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c42:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c46:	4619      	mov	r1, r3
 8000c48:	4805      	ldr	r0, [pc, #20]	@ (8000c60 <HAL_UART_MspInit+0xd0>)
 8000c4a:	f000 fd25 	bl	8001698 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c4e:	bf00      	nop
 8000c50:	37e8      	adds	r7, #232	@ 0xe8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40004800 	.word	0x40004800
 8000c5c:	58024400 	.word	0x58024400
 8000c60:	58020c00 	.word	0x58020c00

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <NMI_Handler+0x4>

08000c6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <HardFault_Handler+0x4>

08000c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <MemManage_Handler+0x4>

08000c7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <BusFault_Handler+0x4>

08000c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <UsageFault_Handler+0x4>

08000c8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cba:	f000 fb2d 	bl	8001318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f000 f9b8 	bl	800103c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	e00a      	b.n	8000cf8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ce2:	f3af 8000 	nop.w
 8000ce6:	4601      	mov	r1, r0
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	1c5a      	adds	r2, r3, #1
 8000cec:	60ba      	str	r2, [r7, #8]
 8000cee:	b2ca      	uxtb	r2, r1
 8000cf0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	dbf0      	blt.n	8000ce2 <_read+0x12>
  }

  return len;
 8000d00:	687b      	ldr	r3, [r7, #4]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b086      	sub	sp, #24
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	60f8      	str	r0, [r7, #12]
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	e009      	b.n	8000d30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	1c5a      	adds	r2, r3, #1
 8000d20:	60ba      	str	r2, [r7, #8]
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 fa09 	bl	800113c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	697a      	ldr	r2, [r7, #20]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	dbf1      	blt.n	8000d1c <_write+0x12>
  }
  return len;
 8000d38:	687b      	ldr	r3, [r7, #4]
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <_close>:

int _close(int file)
{
 8000d42:	b480      	push	{r7}
 8000d44:	b083      	sub	sp, #12
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
 8000d62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d6a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <_isatty>:

int _isatty(int file)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d82:	2301      	movs	r3, #1
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db4:	4a14      	ldr	r2, [pc, #80]	@ (8000e08 <_sbrk+0x5c>)
 8000db6:	4b15      	ldr	r3, [pc, #84]	@ (8000e0c <_sbrk+0x60>)
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc0:	4b13      	ldr	r3, [pc, #76]	@ (8000e10 <_sbrk+0x64>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d102      	bne.n	8000dce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc8:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <_sbrk+0x64>)
 8000dca:	4a12      	ldr	r2, [pc, #72]	@ (8000e14 <_sbrk+0x68>)
 8000dcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dce:	4b10      	ldr	r3, [pc, #64]	@ (8000e10 <_sbrk+0x64>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d207      	bcs.n	8000dec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ddc:	f005 f870 	bl	8005ec0 <__errno>
 8000de0:	4603      	mov	r3, r0
 8000de2:	220c      	movs	r2, #12
 8000de4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dea:	e009      	b.n	8000e00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dec:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <_sbrk+0x64>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df2:	4b07      	ldr	r3, [pc, #28]	@ (8000e10 <_sbrk+0x64>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	4a05      	ldr	r2, [pc, #20]	@ (8000e10 <_sbrk+0x64>)
 8000dfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	24080000 	.word	0x24080000
 8000e0c:	00000400 	.word	0x00000400
 8000e10:	24000148 	.word	0x24000148
 8000e14:	24000340 	.word	0x24000340

08000e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e1c:	f7ff fbd4 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e20:	480c      	ldr	r0, [pc, #48]	@ (8000e54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e22:	490d      	ldr	r1, [pc, #52]	@ (8000e58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e24:	4a0d      	ldr	r2, [pc, #52]	@ (8000e5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e28:	e002      	b.n	8000e30 <LoopCopyDataInit>

08000e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2e:	3304      	adds	r3, #4

08000e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e34:	d3f9      	bcc.n	8000e2a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e36:	4a0a      	ldr	r2, [pc, #40]	@ (8000e60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e38:	4c0a      	ldr	r4, [pc, #40]	@ (8000e64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e3c:	e001      	b.n	8000e42 <LoopFillZerobss>

08000e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e40:	3204      	adds	r2, #4

08000e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e44:	d3fb      	bcc.n	8000e3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e46:	f005 f841 	bl	8005ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4a:	f7ff fc53 	bl	80006f4 <main>
  bx  lr
 8000e4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e50:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000e54:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e58:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8000e5c:	08006414 	.word	0x08006414
  ldr r2, =_sbss
 8000e60:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8000e64:	2400033c 	.word	0x2400033c

08000e68 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC3_IRQHandler>
	...

08000e6c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08c      	sub	sp, #48	@ 0x30
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d009      	beq.n	8000e94 <BSP_LED_Init+0x28>
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d006      	beq.n	8000e94 <BSP_LED_Init+0x28>
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d003      	beq.n	8000e94 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000e8c:	f06f 0301 	mvn.w	r3, #1
 8000e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e92:	e055      	b.n	8000f40 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d10f      	bne.n	8000eba <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000e9a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f4c <BSP_LED_Init+0xe0>)
 8000e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea0:	4a2a      	ldr	r2, [pc, #168]	@ (8000f4c <BSP_LED_Init+0xe0>)
 8000ea2:	f043 0302 	orr.w	r3, r3, #2
 8000ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eaa:	4b28      	ldr	r3, [pc, #160]	@ (8000f4c <BSP_LED_Init+0xe0>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	617b      	str	r3, [r7, #20]
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	e021      	b.n	8000efe <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d10f      	bne.n	8000ee0 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000ec0:	4b22      	ldr	r3, [pc, #136]	@ (8000f4c <BSP_LED_Init+0xe0>)
 8000ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec6:	4a21      	ldr	r2, [pc, #132]	@ (8000f4c <BSP_LED_Init+0xe0>)
 8000ec8:	f043 0310 	orr.w	r3, r3, #16
 8000ecc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ed0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f4c <BSP_LED_Init+0xe0>)
 8000ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed6:	f003 0310 	and.w	r3, r3, #16
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	e00e      	b.n	8000efe <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f4c <BSP_LED_Init+0xe0>)
 8000ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee6:	4a19      	ldr	r2, [pc, #100]	@ (8000f4c <BSP_LED_Init+0xe0>)
 8000ee8:	f043 0302 	orr.w	r3, r3, #2
 8000eec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ef0:	4b16      	ldr	r3, [pc, #88]	@ (8000f4c <BSP_LED_Init+0xe0>)
 8000ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	4a13      	ldr	r2, [pc, #76]	@ (8000f50 <BSP_LED_Init+0xe4>)
 8000f02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f06:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f10:	2303      	movs	r3, #3
 8000f12:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	4a0f      	ldr	r2, [pc, #60]	@ (8000f54 <BSP_LED_Init+0xe8>)
 8000f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1c:	f107 0218 	add.w	r2, r7, #24
 8000f20:	4611      	mov	r1, r2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 fbb8 	bl	8001698 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f54 <BSP_LED_Init+0xe8>)
 8000f2c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	4a07      	ldr	r2, [pc, #28]	@ (8000f50 <BSP_LED_Init+0xe4>)
 8000f34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f000 fd5c 	bl	80019f8 <HAL_GPIO_WritePin>
  }

  return ret;
 8000f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3730      	adds	r7, #48	@ 0x30
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	58024400 	.word	0x58024400
 8000f50:	080063d0 	.word	0x080063d0
 8000f54:	2400000c 	.word	0x2400000c

08000f58 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	460a      	mov	r2, r1
 8000f62:	71fb      	strb	r3, [r7, #7]
 8000f64:	4613      	mov	r3, r2
 8000f66:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000f68:	4b2e      	ldr	r3, [pc, #184]	@ (8001024 <BSP_PB_Init+0xcc>)
 8000f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6e:	4a2d      	ldr	r2, [pc, #180]	@ (8001024 <BSP_PB_Init+0xcc>)
 8000f70:	f043 0304 	orr.w	r3, r3, #4
 8000f74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f78:	4b2a      	ldr	r3, [pc, #168]	@ (8001024 <BSP_PB_Init+0xcc>)
 8000f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7e:	f003 0304 	and.w	r3, r3, #4
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000f86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f8a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f90:	2302      	movs	r3, #2
 8000f92:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000f94:	79bb      	ldrb	r3, [r7, #6]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d10c      	bne.n	8000fb4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	4a21      	ldr	r2, [pc, #132]	@ (8001028 <BSP_PB_Init+0xd0>)
 8000fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa6:	f107 020c 	add.w	r2, r7, #12
 8000faa:	4611      	mov	r1, r2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 fb73 	bl	8001698 <HAL_GPIO_Init>
 8000fb2:	e031      	b.n	8001018 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000fb4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000fb8:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	4a1a      	ldr	r2, [pc, #104]	@ (8001028 <BSP_PB_Init+0xd0>)
 8000fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc2:	f107 020c 	add.w	r2, r7, #12
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 fb65 	bl	8001698 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	4a16      	ldr	r2, [pc, #88]	@ (800102c <BSP_PB_Init+0xd4>)
 8000fd4:	441a      	add	r2, r3
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	4915      	ldr	r1, [pc, #84]	@ (8001030 <BSP_PB_Init+0xd8>)
 8000fda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	f000 fb08 	bl	80015f6 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	4a10      	ldr	r2, [pc, #64]	@ (800102c <BSP_PB_Init+0xd4>)
 8000fec:	1898      	adds	r0, r3, r2
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	4a10      	ldr	r2, [pc, #64]	@ (8001034 <BSP_PB_Init+0xdc>)
 8000ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	f000 fadd 	bl	80015b8 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000ffe:	2028      	movs	r0, #40	@ 0x28
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	4a0d      	ldr	r2, [pc, #52]	@ (8001038 <BSP_PB_Init+0xe0>)
 8001004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001008:	2200      	movs	r2, #0
 800100a:	4619      	mov	r1, r3
 800100c:	f000 fa8b 	bl	8001526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001010:	2328      	movs	r3, #40	@ 0x28
 8001012:	4618      	mov	r0, r3
 8001014:	f000 faa1 	bl	800155a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3720      	adds	r7, #32
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	58024400 	.word	0x58024400
 8001028:	24000018 	.word	0x24000018
 800102c:	2400014c 	.word	0x2400014c
 8001030:	080063d8 	.word	0x080063d8
 8001034:	2400001c 	.word	0x2400001c
 8001038:	24000020 	.word	0x24000020

0800103c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	4a04      	ldr	r2, [pc, #16]	@ (800105c <BSP_PB_IRQHandler+0x20>)
 800104c:	4413      	add	r3, r2
 800104e:	4618      	mov	r0, r3
 8001050:	f000 fae6 	bl	8001620 <HAL_EXTI_IRQHandler>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	2400014c 	.word	0x2400014c

08001060 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800108e:	f06f 0301 	mvn.w	r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	e018      	b.n	80010c8 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2294      	movs	r2, #148	@ 0x94
 800109a:	fb02 f303 	mul.w	r3, r2, r3
 800109e:	4a0d      	ldr	r2, [pc, #52]	@ (80010d4 <BSP_COM_Init+0x5c>)
 80010a0:	4413      	add	r3, r2
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f86e 	bl	8001184 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	2294      	movs	r2, #148	@ 0x94
 80010ac:	fb02 f303 	mul.w	r3, r2, r3
 80010b0:	4a08      	ldr	r2, [pc, #32]	@ (80010d4 <BSP_COM_Init+0x5c>)
 80010b2:	4413      	add	r3, r2
 80010b4:	6839      	ldr	r1, [r7, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f80e 	bl	80010d8 <MX_USART3_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d002      	beq.n	80010c8 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80010c2:	f06f 0303 	mvn.w	r3, #3
 80010c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80010c8:	68fb      	ldr	r3, [r7, #12]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	24000154 	.word	0x24000154

080010d8 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80010e2:	4b15      	ldr	r3, [pc, #84]	@ (8001138 <MX_USART3_Init+0x60>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	220c      	movs	r2, #12
 80010f6:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	895b      	ldrh	r3, [r3, #10]
 80010fc:	461a      	mov	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	891b      	ldrh	r3, [r3, #8]
 800110e:	461a      	mov	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	899b      	ldrh	r3, [r3, #12]
 8001118:	461a      	mov	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001124:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f003 fb1a 	bl	8004760 <HAL_UART_Init>
 800112c:	4603      	mov	r3, r0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	24000008 	.word	0x24000008

0800113c <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001144:	4b09      	ldr	r3, [pc, #36]	@ (800116c <__io_putchar+0x30>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	2394      	movs	r3, #148	@ 0x94
 800114c:	fb02 f303 	mul.w	r3, r2, r3
 8001150:	4a07      	ldr	r2, [pc, #28]	@ (8001170 <__io_putchar+0x34>)
 8001152:	1898      	adds	r0, r3, r2
 8001154:	1d39      	adds	r1, r7, #4
 8001156:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800115a:	2201      	movs	r2, #1
 800115c:	f003 fb50 	bl	8004800 <HAL_UART_Transmit>
  return ch;
 8001160:	687b      	ldr	r3, [r7, #4]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	240001e8 	.word	0x240001e8
 8001170:	24000154 	.word	0x24000154

08001174 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001178:	2000      	movs	r0, #0
 800117a:	f7ff ff71 	bl	8001060 <BSP_PB_Callback>
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	@ 0x28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 800118c:	4b27      	ldr	r3, [pc, #156]	@ (800122c <COM1_MspInit+0xa8>)
 800118e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001192:	4a26      	ldr	r2, [pc, #152]	@ (800122c <COM1_MspInit+0xa8>)
 8001194:	f043 0308 	orr.w	r3, r3, #8
 8001198:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800119c:	4b23      	ldr	r3, [pc, #140]	@ (800122c <COM1_MspInit+0xa8>)
 800119e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a2:	f003 0308 	and.w	r3, r3, #8
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80011aa:	4b20      	ldr	r3, [pc, #128]	@ (800122c <COM1_MspInit+0xa8>)
 80011ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b0:	4a1e      	ldr	r2, [pc, #120]	@ (800122c <COM1_MspInit+0xa8>)
 80011b2:	f043 0308 	orr.w	r3, r3, #8
 80011b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011ba:	4b1c      	ldr	r3, [pc, #112]	@ (800122c <COM1_MspInit+0xa8>)
 80011bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011c0:	f003 0308 	and.w	r3, r3, #8
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80011c8:	4b18      	ldr	r3, [pc, #96]	@ (800122c <COM1_MspInit+0xa8>)
 80011ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011ce:	4a17      	ldr	r2, [pc, #92]	@ (800122c <COM1_MspInit+0xa8>)
 80011d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011d4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80011d8:	4b14      	ldr	r3, [pc, #80]	@ (800122c <COM1_MspInit+0xa8>)
 80011da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80011e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011ea:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f0:	2302      	movs	r3, #2
 80011f2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80011f4:	2301      	movs	r3, #1
 80011f6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80011f8:	2307      	movs	r3, #7
 80011fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4619      	mov	r1, r3
 8001202:	480b      	ldr	r0, [pc, #44]	@ (8001230 <COM1_MspInit+0xac>)
 8001204:	f000 fa48 	bl	8001698 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001208:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800120c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001212:	2307      	movs	r3, #7
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4619      	mov	r1, r3
 800121c:	4804      	ldr	r0, [pc, #16]	@ (8001230 <COM1_MspInit+0xac>)
 800121e:	f000 fa3b 	bl	8001698 <HAL_GPIO_Init>
}
 8001222:	bf00      	nop
 8001224:	3728      	adds	r7, #40	@ 0x28
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	58024400 	.word	0x58024400
 8001230:	58020c00 	.word	0x58020c00

08001234 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800123a:	2003      	movs	r0, #3
 800123c:	f000 f968 	bl	8001510 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001240:	f001 fa8c 	bl	800275c <HAL_RCC_GetSysClockFreq>
 8001244:	4602      	mov	r2, r0
 8001246:	4b15      	ldr	r3, [pc, #84]	@ (800129c <HAL_Init+0x68>)
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	0a1b      	lsrs	r3, r3, #8
 800124c:	f003 030f 	and.w	r3, r3, #15
 8001250:	4913      	ldr	r1, [pc, #76]	@ (80012a0 <HAL_Init+0x6c>)
 8001252:	5ccb      	ldrb	r3, [r1, r3]
 8001254:	f003 031f 	and.w	r3, r3, #31
 8001258:	fa22 f303 	lsr.w	r3, r2, r3
 800125c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800125e:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <HAL_Init+0x68>)
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	4a0e      	ldr	r2, [pc, #56]	@ (80012a0 <HAL_Init+0x6c>)
 8001268:	5cd3      	ldrb	r3, [r2, r3]
 800126a:	f003 031f 	and.w	r3, r3, #31
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	fa22 f303 	lsr.w	r3, r2, r3
 8001274:	4a0b      	ldr	r2, [pc, #44]	@ (80012a4 <HAL_Init+0x70>)
 8001276:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001278:	4a0b      	ldr	r2, [pc, #44]	@ (80012a8 <HAL_Init+0x74>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800127e:	2000      	movs	r0, #0
 8001280:	f000 f814 	bl	80012ac <HAL_InitTick>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e002      	b.n	8001294 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800128e:	f7ff fc65 	bl	8000b5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	58024400 	.word	0x58024400
 80012a0:	080063c0 	.word	0x080063c0
 80012a4:	24000004 	.word	0x24000004
 80012a8:	24000000 	.word	0x24000000

080012ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012b4:	4b15      	ldr	r3, [pc, #84]	@ (800130c <HAL_InitTick+0x60>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d101      	bne.n	80012c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e021      	b.n	8001304 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012c0:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <HAL_InitTick+0x64>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b11      	ldr	r3, [pc, #68]	@ (800130c <HAL_InitTick+0x60>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4619      	mov	r1, r3
 80012ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80012d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 f94d 	bl	8001576 <HAL_SYSTICK_Config>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e00e      	b.n	8001304 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b0f      	cmp	r3, #15
 80012ea:	d80a      	bhi.n	8001302 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ec:	2200      	movs	r2, #0
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	f04f 30ff 	mov.w	r0, #4294967295
 80012f4:	f000 f917 	bl	8001526 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f8:	4a06      	ldr	r2, [pc, #24]	@ (8001314 <HAL_InitTick+0x68>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
 8001300:	e000      	b.n	8001304 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
}
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	24000028 	.word	0x24000028
 8001310:	24000000 	.word	0x24000000
 8001314:	24000024 	.word	0x24000024

08001318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800131c:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <HAL_IncTick+0x20>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	4b06      	ldr	r3, [pc, #24]	@ (800133c <HAL_IncTick+0x24>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4413      	add	r3, r2
 8001328:	4a04      	ldr	r2, [pc, #16]	@ (800133c <HAL_IncTick+0x24>)
 800132a:	6013      	str	r3, [r2, #0]
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	24000028 	.word	0x24000028
 800133c:	240001ec 	.word	0x240001ec

08001340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return uwTick;
 8001344:	4b03      	ldr	r3, [pc, #12]	@ (8001354 <HAL_GetTick+0x14>)
 8001346:	681b      	ldr	r3, [r3, #0]
}
 8001348:	4618      	mov	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	240001ec 	.word	0x240001ec

08001358 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800135c:	4b03      	ldr	r3, [pc, #12]	@ (800136c <HAL_GetREVID+0x14>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	0c1b      	lsrs	r3, r3, #16
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	5c001000 	.word	0x5c001000

08001370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001380:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <__NVIC_SetPriorityGrouping+0x40>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001386:	68ba      	ldr	r2, [r7, #8]
 8001388:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800138c:	4013      	ands	r3, r2
 800138e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001398:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <__NVIC_SetPriorityGrouping+0x44>)
 800139a:	4313      	orrs	r3, r2
 800139c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139e:	4a04      	ldr	r2, [pc, #16]	@ (80013b0 <__NVIC_SetPriorityGrouping+0x40>)
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	60d3      	str	r3, [r2, #12]
}
 80013a4:	bf00      	nop
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000ed00 	.word	0xe000ed00
 80013b4:	05fa0000 	.word	0x05fa0000

080013b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013bc:	4b04      	ldr	r3, [pc, #16]	@ (80013d0 <__NVIC_GetPriorityGrouping+0x18>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	0a1b      	lsrs	r3, r3, #8
 80013c2:	f003 0307 	and.w	r3, r3, #7
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	db0b      	blt.n	80013fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	f003 021f 	and.w	r2, r3, #31
 80013ec:	4907      	ldr	r1, [pc, #28]	@ (800140c <__NVIC_EnableIRQ+0x38>)
 80013ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013f2:	095b      	lsrs	r3, r3, #5
 80013f4:	2001      	movs	r0, #1
 80013f6:	fa00 f202 	lsl.w	r2, r0, r2
 80013fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000e100 	.word	0xe000e100

08001410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	6039      	str	r1, [r7, #0]
 800141a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800141c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001420:	2b00      	cmp	r3, #0
 8001422:	db0a      	blt.n	800143a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	b2da      	uxtb	r2, r3
 8001428:	490c      	ldr	r1, [pc, #48]	@ (800145c <__NVIC_SetPriority+0x4c>)
 800142a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800142e:	0112      	lsls	r2, r2, #4
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	440b      	add	r3, r1
 8001434:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001438:	e00a      	b.n	8001450 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	b2da      	uxtb	r2, r3
 800143e:	4908      	ldr	r1, [pc, #32]	@ (8001460 <__NVIC_SetPriority+0x50>)
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	3b04      	subs	r3, #4
 8001448:	0112      	lsls	r2, r2, #4
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	440b      	add	r3, r1
 800144e:	761a      	strb	r2, [r3, #24]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000e100 	.word	0xe000e100
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001464:	b480      	push	{r7}
 8001466:	b089      	sub	sp, #36	@ 0x24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f1c3 0307 	rsb	r3, r3, #7
 800147e:	2b04      	cmp	r3, #4
 8001480:	bf28      	it	cs
 8001482:	2304      	movcs	r3, #4
 8001484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3304      	adds	r3, #4
 800148a:	2b06      	cmp	r3, #6
 800148c:	d902      	bls.n	8001494 <NVIC_EncodePriority+0x30>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3b03      	subs	r3, #3
 8001492:	e000      	b.n	8001496 <NVIC_EncodePriority+0x32>
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	f04f 32ff 	mov.w	r2, #4294967295
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43da      	mvns	r2, r3
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	401a      	ands	r2, r3
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ac:	f04f 31ff 	mov.w	r1, #4294967295
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	fa01 f303 	lsl.w	r3, r1, r3
 80014b6:	43d9      	mvns	r1, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	4313      	orrs	r3, r2
         );
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3724      	adds	r7, #36	@ 0x24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
	...

080014cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014dc:	d301      	bcc.n	80014e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014de:	2301      	movs	r3, #1
 80014e0:	e00f      	b.n	8001502 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e2:	4a0a      	ldr	r2, [pc, #40]	@ (800150c <SysTick_Config+0x40>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ea:	210f      	movs	r1, #15
 80014ec:	f04f 30ff 	mov.w	r0, #4294967295
 80014f0:	f7ff ff8e 	bl	8001410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f4:	4b05      	ldr	r3, [pc, #20]	@ (800150c <SysTick_Config+0x40>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fa:	4b04      	ldr	r3, [pc, #16]	@ (800150c <SysTick_Config+0x40>)
 80014fc:	2207      	movs	r2, #7
 80014fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	e000e010 	.word	0xe000e010

08001510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ff29 	bl	8001370 <__NVIC_SetPriorityGrouping>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b086      	sub	sp, #24
 800152a:	af00      	add	r7, sp, #0
 800152c:	4603      	mov	r3, r0
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
 8001532:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001534:	f7ff ff40 	bl	80013b8 <__NVIC_GetPriorityGrouping>
 8001538:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	68b9      	ldr	r1, [r7, #8]
 800153e:	6978      	ldr	r0, [r7, #20]
 8001540:	f7ff ff90 	bl	8001464 <NVIC_EncodePriority>
 8001544:	4602      	mov	r2, r0
 8001546:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800154a:	4611      	mov	r1, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff5f 	bl	8001410 <__NVIC_SetPriority>
}
 8001552:	bf00      	nop
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001564:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff33 	bl	80013d4 <__NVIC_EnableIRQ>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff ffa4 	bl	80014cc <SysTick_Config>
 8001584:	4603      	mov	r3, r0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001594:	4b07      	ldr	r3, [pc, #28]	@ (80015b4 <HAL_GetCurrentCPUID+0x24>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	091b      	lsrs	r3, r3, #4
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	2b07      	cmp	r3, #7
 80015a0:	d101      	bne.n	80015a6 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e000      	b.n	80015a8 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 80015a6:	2301      	movs	r3, #1
  }
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80015b8:	b480      	push	{r7}
 80015ba:	b087      	sub	sp, #28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	460b      	mov	r3, r1
 80015c2:	607a      	str	r2, [r7, #4]
 80015c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e00a      	b.n	80015ea <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80015d4:	7afb      	ldrb	r3, [r7, #11]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d103      	bne.n	80015e2 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	605a      	str	r2, [r3, #4]
      break;
 80015e0:	e002      	b.n	80015e8 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	75fb      	strb	r3, [r7, #23]
      break;
 80015e6:	bf00      	nop
  }

  return status;
 80015e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	371c      	adds	r7, #28
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e003      	b.n	8001612 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001610:	2300      	movs	r3, #0
  }
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	0c1b      	lsrs	r3, r3, #16
 800162e:	f003 0303 	and.w	r3, r3, #3
 8001632:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 031f 	and.w	r3, r3, #31
 800163c:	2201      	movs	r2, #1
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8001644:	f7ff ffa4 	bl	8001590 <HAL_GetCurrentCPUID>
 8001648:	4603      	mov	r3, r0
 800164a:	2b03      	cmp	r3, #3
 800164c:	d105      	bne.n	800165a <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	011a      	lsls	r2, r3, #4
 8001652:	4b0f      	ldr	r3, [pc, #60]	@ (8001690 <HAL_EXTI_IRQHandler+0x70>)
 8001654:	4413      	add	r3, r2
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	e004      	b.n	8001664 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	011a      	lsls	r2, r3, #4
 800165e:	4b0d      	ldr	r3, [pc, #52]	@ (8001694 <HAL_EXTI_IRQHandler+0x74>)
 8001660:	4413      	add	r3, r2
 8001662:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	4013      	ands	r3, r2
 800166c:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d009      	beq.n	8001688 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d002      	beq.n	8001688 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	4798      	blx	r3
    }
  }
}
 8001688:	bf00      	nop
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	58000088 	.word	0x58000088
 8001694:	580000c8 	.word	0x580000c8

08001698 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001698:	b480      	push	{r7}
 800169a:	b089      	sub	sp, #36	@ 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80016a6:	4b89      	ldr	r3, [pc, #548]	@ (80018cc <HAL_GPIO_Init+0x234>)
 80016a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016aa:	e194      	b.n	80019d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	2101      	movs	r1, #1
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	4013      	ands	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 8186 	beq.w	80019d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d005      	beq.n	80016dc <HAL_GPIO_Init+0x44>
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d130      	bne.n	800173e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	2203      	movs	r2, #3
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	68da      	ldr	r2, [r3, #12]
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001712:	2201      	movs	r2, #1
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43db      	mvns	r3, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4013      	ands	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	091b      	lsrs	r3, r3, #4
 8001728:	f003 0201 	and.w	r2, r3, #1
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4313      	orrs	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 0303 	and.w	r3, r3, #3
 8001746:	2b03      	cmp	r3, #3
 8001748:	d017      	beq.n	800177a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	2203      	movs	r2, #3
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43db      	mvns	r3, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4013      	ands	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	689a      	ldr	r2, [r3, #8]
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4313      	orrs	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d123      	bne.n	80017ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	08da      	lsrs	r2, r3, #3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3208      	adds	r2, #8
 800178e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001792:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	220f      	movs	r2, #15
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43db      	mvns	r3, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4013      	ands	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	691a      	ldr	r2, [r3, #16]
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4313      	orrs	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	08da      	lsrs	r2, r3, #3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3208      	adds	r2, #8
 80017c8:	69b9      	ldr	r1, [r7, #24]
 80017ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	2203      	movs	r2, #3
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f003 0203 	and.w	r2, r3, #3
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 80e0 	beq.w	80019d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001810:	4b2f      	ldr	r3, [pc, #188]	@ (80018d0 <HAL_GPIO_Init+0x238>)
 8001812:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001816:	4a2e      	ldr	r2, [pc, #184]	@ (80018d0 <HAL_GPIO_Init+0x238>)
 8001818:	f043 0302 	orr.w	r3, r3, #2
 800181c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001820:	4b2b      	ldr	r3, [pc, #172]	@ (80018d0 <HAL_GPIO_Init+0x238>)
 8001822:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800182e:	4a29      	ldr	r2, [pc, #164]	@ (80018d4 <HAL_GPIO_Init+0x23c>)
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	089b      	lsrs	r3, r3, #2
 8001834:	3302      	adds	r3, #2
 8001836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	220f      	movs	r2, #15
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43db      	mvns	r3, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4013      	ands	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a20      	ldr	r2, [pc, #128]	@ (80018d8 <HAL_GPIO_Init+0x240>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d052      	beq.n	8001900 <HAL_GPIO_Init+0x268>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a1f      	ldr	r2, [pc, #124]	@ (80018dc <HAL_GPIO_Init+0x244>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d031      	beq.n	80018c6 <HAL_GPIO_Init+0x22e>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a1e      	ldr	r2, [pc, #120]	@ (80018e0 <HAL_GPIO_Init+0x248>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d02b      	beq.n	80018c2 <HAL_GPIO_Init+0x22a>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a1d      	ldr	r2, [pc, #116]	@ (80018e4 <HAL_GPIO_Init+0x24c>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d025      	beq.n	80018be <HAL_GPIO_Init+0x226>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a1c      	ldr	r2, [pc, #112]	@ (80018e8 <HAL_GPIO_Init+0x250>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d01f      	beq.n	80018ba <HAL_GPIO_Init+0x222>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a1b      	ldr	r2, [pc, #108]	@ (80018ec <HAL_GPIO_Init+0x254>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d019      	beq.n	80018b6 <HAL_GPIO_Init+0x21e>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a1a      	ldr	r2, [pc, #104]	@ (80018f0 <HAL_GPIO_Init+0x258>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d013      	beq.n	80018b2 <HAL_GPIO_Init+0x21a>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a19      	ldr	r2, [pc, #100]	@ (80018f4 <HAL_GPIO_Init+0x25c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d00d      	beq.n	80018ae <HAL_GPIO_Init+0x216>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a18      	ldr	r2, [pc, #96]	@ (80018f8 <HAL_GPIO_Init+0x260>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d007      	beq.n	80018aa <HAL_GPIO_Init+0x212>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a17      	ldr	r2, [pc, #92]	@ (80018fc <HAL_GPIO_Init+0x264>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d101      	bne.n	80018a6 <HAL_GPIO_Init+0x20e>
 80018a2:	2309      	movs	r3, #9
 80018a4:	e02d      	b.n	8001902 <HAL_GPIO_Init+0x26a>
 80018a6:	230a      	movs	r3, #10
 80018a8:	e02b      	b.n	8001902 <HAL_GPIO_Init+0x26a>
 80018aa:	2308      	movs	r3, #8
 80018ac:	e029      	b.n	8001902 <HAL_GPIO_Init+0x26a>
 80018ae:	2307      	movs	r3, #7
 80018b0:	e027      	b.n	8001902 <HAL_GPIO_Init+0x26a>
 80018b2:	2306      	movs	r3, #6
 80018b4:	e025      	b.n	8001902 <HAL_GPIO_Init+0x26a>
 80018b6:	2305      	movs	r3, #5
 80018b8:	e023      	b.n	8001902 <HAL_GPIO_Init+0x26a>
 80018ba:	2304      	movs	r3, #4
 80018bc:	e021      	b.n	8001902 <HAL_GPIO_Init+0x26a>
 80018be:	2303      	movs	r3, #3
 80018c0:	e01f      	b.n	8001902 <HAL_GPIO_Init+0x26a>
 80018c2:	2302      	movs	r3, #2
 80018c4:	e01d      	b.n	8001902 <HAL_GPIO_Init+0x26a>
 80018c6:	2301      	movs	r3, #1
 80018c8:	e01b      	b.n	8001902 <HAL_GPIO_Init+0x26a>
 80018ca:	bf00      	nop
 80018cc:	58000080 	.word	0x58000080
 80018d0:	58024400 	.word	0x58024400
 80018d4:	58000400 	.word	0x58000400
 80018d8:	58020000 	.word	0x58020000
 80018dc:	58020400 	.word	0x58020400
 80018e0:	58020800 	.word	0x58020800
 80018e4:	58020c00 	.word	0x58020c00
 80018e8:	58021000 	.word	0x58021000
 80018ec:	58021400 	.word	0x58021400
 80018f0:	58021800 	.word	0x58021800
 80018f4:	58021c00 	.word	0x58021c00
 80018f8:	58022000 	.word	0x58022000
 80018fc:	58022400 	.word	0x58022400
 8001900:	2300      	movs	r3, #0
 8001902:	69fa      	ldr	r2, [r7, #28]
 8001904:	f002 0203 	and.w	r2, r2, #3
 8001908:	0092      	lsls	r2, r2, #2
 800190a:	4093      	lsls	r3, r2
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001912:	4938      	ldr	r1, [pc, #224]	@ (80019f4 <HAL_GPIO_Init+0x35c>)
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	089b      	lsrs	r3, r3, #2
 8001918:	3302      	adds	r3, #2
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001920:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	43db      	mvns	r3, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4013      	ands	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001946:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800194e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001974:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	4313      	orrs	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4013      	ands	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	3301      	adds	r3, #1
 80019d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	fa22 f303 	lsr.w	r3, r2, r3
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f47f ae63 	bne.w	80016ac <HAL_GPIO_Init+0x14>
  }
}
 80019e6:	bf00      	nop
 80019e8:	bf00      	nop
 80019ea:	3724      	adds	r7, #36	@ 0x24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	58000400 	.word	0x58000400

080019f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	807b      	strh	r3, [r7, #2]
 8001a04:	4613      	mov	r3, r2
 8001a06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a08:	787b      	ldrb	r3, [r7, #1]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a0e:	887a      	ldrh	r2, [r7, #2]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001a14:	e003      	b.n	8001a1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001a16:	887b      	ldrh	r3, [r7, #2]
 8001a18:	041a      	lsls	r2, r3, #16
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	619a      	str	r2, [r3, #24]
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
	...

08001a2c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001a34:	4a08      	ldr	r2, [pc, #32]	@ (8001a58 <HAL_HSEM_FastTake+0x2c>)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3320      	adds	r3, #32
 8001a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3e:	4a07      	ldr	r2, [pc, #28]	@ (8001a5c <HAL_HSEM_FastTake+0x30>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d101      	bne.n	8001a48 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001a44:	2300      	movs	r3, #0
 8001a46:	e000      	b.n	8001a4a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	58026400 	.word	0x58026400
 8001a5c:	80000300 	.word	0x80000300

08001a60 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001a6a:	4906      	ldr	r1, [pc, #24]	@ (8001a84 <HAL_HSEM_Release+0x24>)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	58026400 	.word	0x58026400

08001a88 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001a90:	4b29      	ldr	r3, [pc, #164]	@ (8001b38 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	2b06      	cmp	r3, #6
 8001a9a:	d00a      	beq.n	8001ab2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001a9c:	4b26      	ldr	r3, [pc, #152]	@ (8001b38 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d001      	beq.n	8001aae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e040      	b.n	8001b30 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e03e      	b.n	8001b30 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001ab2:	4b21      	ldr	r3, [pc, #132]	@ (8001b38 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001aba:	491f      	ldr	r1, [pc, #124]	@ (8001b38 <HAL_PWREx_ConfigSupply+0xb0>)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001ac2:	f7ff fc3d 	bl	8001340 <HAL_GetTick>
 8001ac6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ac8:	e009      	b.n	8001ade <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001aca:	f7ff fc39 	bl	8001340 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ad8:	d901      	bls.n	8001ade <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e028      	b.n	8001b30 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ade:	4b16      	ldr	r3, [pc, #88]	@ (8001b38 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ae6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001aea:	d1ee      	bne.n	8001aca <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b1e      	cmp	r3, #30
 8001af0:	d008      	beq.n	8001b04 <HAL_PWREx_ConfigSupply+0x7c>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b2e      	cmp	r3, #46	@ 0x2e
 8001af6:	d005      	beq.n	8001b04 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b1d      	cmp	r3, #29
 8001afc:	d002      	beq.n	8001b04 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b2d      	cmp	r3, #45	@ 0x2d
 8001b02:	d114      	bne.n	8001b2e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001b04:	f7ff fc1c 	bl	8001340 <HAL_GetTick>
 8001b08:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001b0a:	e009      	b.n	8001b20 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b0c:	f7ff fc18 	bl	8001340 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b1a:	d901      	bls.n	8001b20 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e007      	b.n	8001b30 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001b20:	4b05      	ldr	r3, [pc, #20]	@ (8001b38 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b2c:	d1ee      	bne.n	8001b0c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	58024800 	.word	0x58024800

08001b3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08c      	sub	sp, #48	@ 0x30
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d102      	bne.n	8001b50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	f000 bc48 	b.w	80023e0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 8088 	beq.w	8001c6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b5e:	4b99      	ldr	r3, [pc, #612]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b68:	4b96      	ldr	r3, [pc, #600]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b70:	2b10      	cmp	r3, #16
 8001b72:	d007      	beq.n	8001b84 <HAL_RCC_OscConfig+0x48>
 8001b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b76:	2b18      	cmp	r3, #24
 8001b78:	d111      	bne.n	8001b9e <HAL_RCC_OscConfig+0x62>
 8001b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d10c      	bne.n	8001b9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b84:	4b8f      	ldr	r3, [pc, #572]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d06d      	beq.n	8001c6c <HAL_RCC_OscConfig+0x130>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d169      	bne.n	8001c6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	f000 bc21 	b.w	80023e0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ba6:	d106      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x7a>
 8001ba8:	4b86      	ldr	r3, [pc, #536]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a85      	ldr	r2, [pc, #532]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001bae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	e02e      	b.n	8001c14 <HAL_RCC_OscConfig+0xd8>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10c      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x9c>
 8001bbe:	4b81      	ldr	r3, [pc, #516]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a80      	ldr	r2, [pc, #512]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001bc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	4b7e      	ldr	r3, [pc, #504]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a7d      	ldr	r2, [pc, #500]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001bd0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	e01d      	b.n	8001c14 <HAL_RCC_OscConfig+0xd8>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001be0:	d10c      	bne.n	8001bfc <HAL_RCC_OscConfig+0xc0>
 8001be2:	4b78      	ldr	r3, [pc, #480]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a77      	ldr	r2, [pc, #476]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001be8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	4b75      	ldr	r3, [pc, #468]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a74      	ldr	r2, [pc, #464]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001bf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	e00b      	b.n	8001c14 <HAL_RCC_OscConfig+0xd8>
 8001bfc:	4b71      	ldr	r3, [pc, #452]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a70      	ldr	r2, [pc, #448]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001c02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	4b6e      	ldr	r3, [pc, #440]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a6d      	ldr	r2, [pc, #436]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001c0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d013      	beq.n	8001c44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1c:	f7ff fb90 	bl	8001340 <HAL_GetTick>
 8001c20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c24:	f7ff fb8c 	bl	8001340 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b64      	cmp	r3, #100	@ 0x64
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e3d4      	b.n	80023e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c36:	4b63      	ldr	r3, [pc, #396]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCC_OscConfig+0xe8>
 8001c42:	e014      	b.n	8001c6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c44:	f7ff fb7c 	bl	8001340 <HAL_GetTick>
 8001c48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c4c:	f7ff fb78 	bl	8001340 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b64      	cmp	r3, #100	@ 0x64
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e3c0      	b.n	80023e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c5e:	4b59      	ldr	r3, [pc, #356]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f0      	bne.n	8001c4c <HAL_RCC_OscConfig+0x110>
 8001c6a:	e000      	b.n	8001c6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 80ca 	beq.w	8001e10 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c7c:	4b51      	ldr	r3, [pc, #324]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c84:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c86:	4b4f      	ldr	r3, [pc, #316]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c8a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d007      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x166>
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	2b18      	cmp	r3, #24
 8001c96:	d156      	bne.n	8001d46 <HAL_RCC_OscConfig+0x20a>
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d151      	bne.n	8001d46 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ca2:	4b48      	ldr	r3, [pc, #288]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d005      	beq.n	8001cba <HAL_RCC_OscConfig+0x17e>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e392      	b.n	80023e0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001cba:	4b42      	ldr	r3, [pc, #264]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f023 0219 	bic.w	r2, r3, #25
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	493f      	ldr	r1, [pc, #252]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ccc:	f7ff fb38 	bl	8001340 <HAL_GetTick>
 8001cd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd4:	f7ff fb34 	bl	8001340 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e37c      	b.n	80023e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ce6:	4b37      	ldr	r3, [pc, #220]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0f0      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf2:	f7ff fb31 	bl	8001358 <HAL_GetREVID>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d817      	bhi.n	8001d30 <HAL_RCC_OscConfig+0x1f4>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	2b40      	cmp	r3, #64	@ 0x40
 8001d06:	d108      	bne.n	8001d1a <HAL_RCC_OscConfig+0x1de>
 8001d08:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001d10:	4a2c      	ldr	r2, [pc, #176]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001d12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d16:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d18:	e07a      	b.n	8001e10 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1a:	4b2a      	ldr	r3, [pc, #168]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	031b      	lsls	r3, r3, #12
 8001d28:	4926      	ldr	r1, [pc, #152]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d2e:	e06f      	b.n	8001e10 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d30:	4b24      	ldr	r3, [pc, #144]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	061b      	lsls	r3, r3, #24
 8001d3e:	4921      	ldr	r1, [pc, #132]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d44:	e064      	b.n	8001e10 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d047      	beq.n	8001dde <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f023 0219 	bic.w	r2, r3, #25
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	491a      	ldr	r1, [pc, #104]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d60:	f7ff faee 	bl	8001340 <HAL_GetTick>
 8001d64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d68:	f7ff faea 	bl	8001340 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e332      	b.n	80023e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d7a:	4b12      	ldr	r3, [pc, #72]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0304 	and.w	r3, r3, #4
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f0      	beq.n	8001d68 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d86:	f7ff fae7 	bl	8001358 <HAL_GetREVID>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d819      	bhi.n	8001dc8 <HAL_RCC_OscConfig+0x28c>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	2b40      	cmp	r3, #64	@ 0x40
 8001d9a:	d108      	bne.n	8001dae <HAL_RCC_OscConfig+0x272>
 8001d9c:	4b09      	ldr	r3, [pc, #36]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001da4:	4a07      	ldr	r2, [pc, #28]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001da6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001daa:	6053      	str	r3, [r2, #4]
 8001dac:	e030      	b.n	8001e10 <HAL_RCC_OscConfig+0x2d4>
 8001dae:	4b05      	ldr	r3, [pc, #20]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	031b      	lsls	r3, r3, #12
 8001dbc:	4901      	ldr	r1, [pc, #4]	@ (8001dc4 <HAL_RCC_OscConfig+0x288>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	604b      	str	r3, [r1, #4]
 8001dc2:	e025      	b.n	8001e10 <HAL_RCC_OscConfig+0x2d4>
 8001dc4:	58024400 	.word	0x58024400
 8001dc8:	4b9a      	ldr	r3, [pc, #616]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	061b      	lsls	r3, r3, #24
 8001dd6:	4997      	ldr	r1, [pc, #604]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]
 8001ddc:	e018      	b.n	8001e10 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dde:	4b95      	ldr	r3, [pc, #596]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a94      	ldr	r2, [pc, #592]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001de4:	f023 0301 	bic.w	r3, r3, #1
 8001de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7ff faa9 	bl	8001340 <HAL_GetTick>
 8001dee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001df2:	f7ff faa5 	bl	8001340 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e2ed      	b.n	80023e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e04:	4b8b      	ldr	r3, [pc, #556]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0310 	and.w	r3, r3, #16
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 80a9 	beq.w	8001f70 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e1e:	4b85      	ldr	r3, [pc, #532]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e26:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e28:	4b82      	ldr	r3, [pc, #520]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d007      	beq.n	8001e44 <HAL_RCC_OscConfig+0x308>
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	2b18      	cmp	r3, #24
 8001e38:	d13a      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x374>
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f003 0303 	and.w	r3, r3, #3
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d135      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e44:	4b7b      	ldr	r3, [pc, #492]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d005      	beq.n	8001e5c <HAL_RCC_OscConfig+0x320>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69db      	ldr	r3, [r3, #28]
 8001e54:	2b80      	cmp	r3, #128	@ 0x80
 8001e56:	d001      	beq.n	8001e5c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e2c1      	b.n	80023e0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e5c:	f7ff fa7c 	bl	8001358 <HAL_GetREVID>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d817      	bhi.n	8001e9a <HAL_RCC_OscConfig+0x35e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	2b20      	cmp	r3, #32
 8001e70:	d108      	bne.n	8001e84 <HAL_RCC_OscConfig+0x348>
 8001e72:	4b70      	ldr	r3, [pc, #448]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001e7a:	4a6e      	ldr	r2, [pc, #440]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001e7c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001e80:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e82:	e075      	b.n	8001f70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e84:	4b6b      	ldr	r3, [pc, #428]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	069b      	lsls	r3, r3, #26
 8001e92:	4968      	ldr	r1, [pc, #416]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e98:	e06a      	b.n	8001f70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e9a:	4b66      	ldr	r3, [pc, #408]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	061b      	lsls	r3, r3, #24
 8001ea8:	4962      	ldr	r1, [pc, #392]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001eae:	e05f      	b.n	8001f70 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d042      	beq.n	8001f3e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001eb8:	4b5e      	ldr	r3, [pc, #376]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a5d      	ldr	r2, [pc, #372]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001ebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec4:	f7ff fa3c 	bl	8001340 <HAL_GetTick>
 8001ec8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001ecc:	f7ff fa38 	bl	8001340 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e280      	b.n	80023e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ede:	4b55      	ldr	r3, [pc, #340]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001eea:	f7ff fa35 	bl	8001358 <HAL_GetREVID>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d817      	bhi.n	8001f28 <HAL_RCC_OscConfig+0x3ec>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	2b20      	cmp	r3, #32
 8001efe:	d108      	bne.n	8001f12 <HAL_RCC_OscConfig+0x3d6>
 8001f00:	4b4c      	ldr	r3, [pc, #304]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001f08:	4a4a      	ldr	r2, [pc, #296]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001f0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001f0e:	6053      	str	r3, [r2, #4]
 8001f10:	e02e      	b.n	8001f70 <HAL_RCC_OscConfig+0x434>
 8001f12:	4b48      	ldr	r3, [pc, #288]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	069b      	lsls	r3, r3, #26
 8001f20:	4944      	ldr	r1, [pc, #272]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	604b      	str	r3, [r1, #4]
 8001f26:	e023      	b.n	8001f70 <HAL_RCC_OscConfig+0x434>
 8001f28:	4b42      	ldr	r3, [pc, #264]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	061b      	lsls	r3, r3, #24
 8001f36:	493f      	ldr	r1, [pc, #252]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	60cb      	str	r3, [r1, #12]
 8001f3c:	e018      	b.n	8001f70 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001f3e:	4b3d      	ldr	r3, [pc, #244]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a3c      	ldr	r2, [pc, #240]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001f44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4a:	f7ff f9f9 	bl	8001340 <HAL_GetTick>
 8001f4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001f52:	f7ff f9f5 	bl	8001340 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e23d      	b.n	80023e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f64:	4b33      	ldr	r3, [pc, #204]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1f0      	bne.n	8001f52 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0308 	and.w	r3, r3, #8
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d036      	beq.n	8001fea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d019      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f84:	4b2b      	ldr	r3, [pc, #172]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001f86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f88:	4a2a      	ldr	r2, [pc, #168]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f90:	f7ff f9d6 	bl	8001340 <HAL_GetTick>
 8001f94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f98:	f7ff f9d2 	bl	8001340 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e21a      	b.n	80023e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001faa:	4b22      	ldr	r3, [pc, #136]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001fac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0f0      	beq.n	8001f98 <HAL_RCC_OscConfig+0x45c>
 8001fb6:	e018      	b.n	8001fea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fb8:	4b1e      	ldr	r3, [pc, #120]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001fba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fbc:	4a1d      	ldr	r2, [pc, #116]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001fbe:	f023 0301 	bic.w	r3, r3, #1
 8001fc2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc4:	f7ff f9bc 	bl	8001340 <HAL_GetTick>
 8001fc8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fcc:	f7ff f9b8 	bl	8001340 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e200      	b.n	80023e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fde:	4b15      	ldr	r3, [pc, #84]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8001fe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f0      	bne.n	8001fcc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0320 	and.w	r3, r3, #32
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d039      	beq.n	800206a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d01c      	beq.n	8002038 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a0c      	ldr	r2, [pc, #48]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8002004:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002008:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800200a:	f7ff f999 	bl	8001340 <HAL_GetTick>
 800200e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002012:	f7ff f995 	bl	8001340 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e1dd      	b.n	80023e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002024:	4b03      	ldr	r3, [pc, #12]	@ (8002034 <HAL_RCC_OscConfig+0x4f8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0x4d6>
 8002030:	e01b      	b.n	800206a <HAL_RCC_OscConfig+0x52e>
 8002032:	bf00      	nop
 8002034:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002038:	4b9b      	ldr	r3, [pc, #620]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a9a      	ldr	r2, [pc, #616]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 800203e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002042:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002044:	f7ff f97c 	bl	8001340 <HAL_GetTick>
 8002048:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800204c:	f7ff f978 	bl	8001340 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e1c0      	b.n	80023e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800205e:	4b92      	ldr	r3, [pc, #584]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 8081 	beq.w	800217a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002078:	4b8c      	ldr	r3, [pc, #560]	@ (80022ac <HAL_RCC_OscConfig+0x770>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a8b      	ldr	r2, [pc, #556]	@ (80022ac <HAL_RCC_OscConfig+0x770>)
 800207e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002082:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002084:	f7ff f95c 	bl	8001340 <HAL_GetTick>
 8002088:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800208c:	f7ff f958 	bl	8001340 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b64      	cmp	r3, #100	@ 0x64
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e1a0      	b.n	80023e0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800209e:	4b83      	ldr	r3, [pc, #524]	@ (80022ac <HAL_RCC_OscConfig+0x770>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d106      	bne.n	80020c0 <HAL_RCC_OscConfig+0x584>
 80020b2:	4b7d      	ldr	r3, [pc, #500]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 80020b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b6:	4a7c      	ldr	r2, [pc, #496]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80020be:	e02d      	b.n	800211c <HAL_RCC_OscConfig+0x5e0>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10c      	bne.n	80020e2 <HAL_RCC_OscConfig+0x5a6>
 80020c8:	4b77      	ldr	r3, [pc, #476]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 80020ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020cc:	4a76      	ldr	r2, [pc, #472]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 80020ce:	f023 0301 	bic.w	r3, r3, #1
 80020d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80020d4:	4b74      	ldr	r3, [pc, #464]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 80020d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d8:	4a73      	ldr	r2, [pc, #460]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 80020da:	f023 0304 	bic.w	r3, r3, #4
 80020de:	6713      	str	r3, [r2, #112]	@ 0x70
 80020e0:	e01c      	b.n	800211c <HAL_RCC_OscConfig+0x5e0>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	2b05      	cmp	r3, #5
 80020e8:	d10c      	bne.n	8002104 <HAL_RCC_OscConfig+0x5c8>
 80020ea:	4b6f      	ldr	r3, [pc, #444]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 80020ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ee:	4a6e      	ldr	r2, [pc, #440]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 80020f0:	f043 0304 	orr.w	r3, r3, #4
 80020f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80020f6:	4b6c      	ldr	r3, [pc, #432]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 80020f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020fa:	4a6b      	ldr	r2, [pc, #428]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6713      	str	r3, [r2, #112]	@ 0x70
 8002102:	e00b      	b.n	800211c <HAL_RCC_OscConfig+0x5e0>
 8002104:	4b68      	ldr	r3, [pc, #416]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 8002106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002108:	4a67      	ldr	r2, [pc, #412]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 800210a:	f023 0301 	bic.w	r3, r3, #1
 800210e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002110:	4b65      	ldr	r3, [pc, #404]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 8002112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002114:	4a64      	ldr	r2, [pc, #400]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 8002116:	f023 0304 	bic.w	r3, r3, #4
 800211a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d015      	beq.n	8002150 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002124:	f7ff f90c 	bl	8001340 <HAL_GetTick>
 8002128:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800212a:	e00a      	b.n	8002142 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212c:	f7ff f908 	bl	8001340 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800213a:	4293      	cmp	r3, r2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e14e      	b.n	80023e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002142:	4b59      	ldr	r3, [pc, #356]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 8002144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0ee      	beq.n	800212c <HAL_RCC_OscConfig+0x5f0>
 800214e:	e014      	b.n	800217a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002150:	f7ff f8f6 	bl	8001340 <HAL_GetTick>
 8002154:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002156:	e00a      	b.n	800216e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002158:	f7ff f8f2 	bl	8001340 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002166:	4293      	cmp	r3, r2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e138      	b.n	80023e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800216e:	4b4e      	ldr	r3, [pc, #312]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 8002170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1ee      	bne.n	8002158 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 812d 	beq.w	80023de <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002184:	4b48      	ldr	r3, [pc, #288]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800218c:	2b18      	cmp	r3, #24
 800218e:	f000 80bd 	beq.w	800230c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002196:	2b02      	cmp	r3, #2
 8002198:	f040 809e 	bne.w	80022d8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800219c:	4b42      	ldr	r3, [pc, #264]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a41      	ldr	r2, [pc, #260]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 80021a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a8:	f7ff f8ca 	bl	8001340 <HAL_GetTick>
 80021ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b0:	f7ff f8c6 	bl	8001340 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e10e      	b.n	80023e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021c2:	4b39      	ldr	r3, [pc, #228]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ce:	4b36      	ldr	r3, [pc, #216]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 80021d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021d2:	4b37      	ldr	r3, [pc, #220]	@ (80022b0 <HAL_RCC_OscConfig+0x774>)
 80021d4:	4013      	ands	r3, r2
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80021de:	0112      	lsls	r2, r2, #4
 80021e0:	430a      	orrs	r2, r1
 80021e2:	4931      	ldr	r1, [pc, #196]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ec:	3b01      	subs	r3, #1
 80021ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021f6:	3b01      	subs	r3, #1
 80021f8:	025b      	lsls	r3, r3, #9
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	431a      	orrs	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002202:	3b01      	subs	r3, #1
 8002204:	041b      	lsls	r3, r3, #16
 8002206:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002210:	3b01      	subs	r3, #1
 8002212:	061b      	lsls	r3, r3, #24
 8002214:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002218:	4923      	ldr	r1, [pc, #140]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 800221a:	4313      	orrs	r3, r2
 800221c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800221e:	4b22      	ldr	r3, [pc, #136]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 8002220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002222:	4a21      	ldr	r2, [pc, #132]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 8002224:	f023 0301 	bic.w	r3, r3, #1
 8002228:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800222a:	4b1f      	ldr	r3, [pc, #124]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 800222c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800222e:	4b21      	ldr	r3, [pc, #132]	@ (80022b4 <HAL_RCC_OscConfig+0x778>)
 8002230:	4013      	ands	r3, r2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002236:	00d2      	lsls	r2, r2, #3
 8002238:	491b      	ldr	r1, [pc, #108]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 800223a:	4313      	orrs	r3, r2
 800223c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800223e:	4b1a      	ldr	r3, [pc, #104]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 8002240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002242:	f023 020c 	bic.w	r2, r3, #12
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	4917      	ldr	r1, [pc, #92]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 800224c:	4313      	orrs	r3, r2
 800224e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002250:	4b15      	ldr	r3, [pc, #84]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 8002252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002254:	f023 0202 	bic.w	r2, r3, #2
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225c:	4912      	ldr	r1, [pc, #72]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 800225e:	4313      	orrs	r3, r2
 8002260:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002262:	4b11      	ldr	r3, [pc, #68]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 8002264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002266:	4a10      	ldr	r2, [pc, #64]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 8002268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800226c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800226e:	4b0e      	ldr	r3, [pc, #56]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 8002270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002272:	4a0d      	ldr	r2, [pc, #52]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 8002274:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002278:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800227a:	4b0b      	ldr	r3, [pc, #44]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 800227c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800227e:	4a0a      	ldr	r2, [pc, #40]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 8002280:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002284:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002286:	4b08      	ldr	r3, [pc, #32]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 8002288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800228a:	4a07      	ldr	r2, [pc, #28]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002292:	4b05      	ldr	r3, [pc, #20]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a04      	ldr	r2, [pc, #16]	@ (80022a8 <HAL_RCC_OscConfig+0x76c>)
 8002298:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800229c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229e:	f7ff f84f 	bl	8001340 <HAL_GetTick>
 80022a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022a4:	e011      	b.n	80022ca <HAL_RCC_OscConfig+0x78e>
 80022a6:	bf00      	nop
 80022a8:	58024400 	.word	0x58024400
 80022ac:	58024800 	.word	0x58024800
 80022b0:	fffffc0c 	.word	0xfffffc0c
 80022b4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b8:	f7ff f842 	bl	8001340 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e08a      	b.n	80023e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022ca:	4b47      	ldr	r3, [pc, #284]	@ (80023e8 <HAL_RCC_OscConfig+0x8ac>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f0      	beq.n	80022b8 <HAL_RCC_OscConfig+0x77c>
 80022d6:	e082      	b.n	80023de <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d8:	4b43      	ldr	r3, [pc, #268]	@ (80023e8 <HAL_RCC_OscConfig+0x8ac>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a42      	ldr	r2, [pc, #264]	@ (80023e8 <HAL_RCC_OscConfig+0x8ac>)
 80022de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e4:	f7ff f82c 	bl	8001340 <HAL_GetTick>
 80022e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ec:	f7ff f828 	bl	8001340 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e070      	b.n	80023e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022fe:	4b3a      	ldr	r3, [pc, #232]	@ (80023e8 <HAL_RCC_OscConfig+0x8ac>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x7b0>
 800230a:	e068      	b.n	80023de <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800230c:	4b36      	ldr	r3, [pc, #216]	@ (80023e8 <HAL_RCC_OscConfig+0x8ac>)
 800230e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002310:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002312:	4b35      	ldr	r3, [pc, #212]	@ (80023e8 <HAL_RCC_OscConfig+0x8ac>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002316:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231c:	2b01      	cmp	r3, #1
 800231e:	d031      	beq.n	8002384 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	f003 0203 	and.w	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800232a:	429a      	cmp	r2, r3
 800232c:	d12a      	bne.n	8002384 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	091b      	lsrs	r3, r3, #4
 8002332:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233a:	429a      	cmp	r2, r3
 800233c:	d122      	bne.n	8002384 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002348:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800234a:	429a      	cmp	r2, r3
 800234c:	d11a      	bne.n	8002384 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	0a5b      	lsrs	r3, r3, #9
 8002352:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800235a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800235c:	429a      	cmp	r2, r3
 800235e:	d111      	bne.n	8002384 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	0c1b      	lsrs	r3, r3, #16
 8002364:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800236c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800236e:	429a      	cmp	r2, r3
 8002370:	d108      	bne.n	8002384 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	0e1b      	lsrs	r3, r3, #24
 8002376:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800237e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002380:	429a      	cmp	r2, r3
 8002382:	d001      	beq.n	8002388 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e02b      	b.n	80023e0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002388:	4b17      	ldr	r3, [pc, #92]	@ (80023e8 <HAL_RCC_OscConfig+0x8ac>)
 800238a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800238c:	08db      	lsrs	r3, r3, #3
 800238e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002392:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	429a      	cmp	r2, r3
 800239c:	d01f      	beq.n	80023de <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800239e:	4b12      	ldr	r3, [pc, #72]	@ (80023e8 <HAL_RCC_OscConfig+0x8ac>)
 80023a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a2:	4a11      	ldr	r2, [pc, #68]	@ (80023e8 <HAL_RCC_OscConfig+0x8ac>)
 80023a4:	f023 0301 	bic.w	r3, r3, #1
 80023a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023aa:	f7fe ffc9 	bl	8001340 <HAL_GetTick>
 80023ae:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80023b0:	bf00      	nop
 80023b2:	f7fe ffc5 	bl	8001340 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d0f9      	beq.n	80023b2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80023be:	4b0a      	ldr	r3, [pc, #40]	@ (80023e8 <HAL_RCC_OscConfig+0x8ac>)
 80023c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023c2:	4b0a      	ldr	r3, [pc, #40]	@ (80023ec <HAL_RCC_OscConfig+0x8b0>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80023ca:	00d2      	lsls	r2, r2, #3
 80023cc:	4906      	ldr	r1, [pc, #24]	@ (80023e8 <HAL_RCC_OscConfig+0x8ac>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80023d2:	4b05      	ldr	r3, [pc, #20]	@ (80023e8 <HAL_RCC_OscConfig+0x8ac>)
 80023d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d6:	4a04      	ldr	r2, [pc, #16]	@ (80023e8 <HAL_RCC_OscConfig+0x8ac>)
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3730      	adds	r7, #48	@ 0x30
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	58024400 	.word	0x58024400
 80023ec:	ffff0007 	.word	0xffff0007

080023f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e19c      	b.n	800273e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002404:	4b8a      	ldr	r3, [pc, #552]	@ (8002630 <HAL_RCC_ClockConfig+0x240>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 030f 	and.w	r3, r3, #15
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d910      	bls.n	8002434 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002412:	4b87      	ldr	r3, [pc, #540]	@ (8002630 <HAL_RCC_ClockConfig+0x240>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f023 020f 	bic.w	r2, r3, #15
 800241a:	4985      	ldr	r1, [pc, #532]	@ (8002630 <HAL_RCC_ClockConfig+0x240>)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	4313      	orrs	r3, r2
 8002420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002422:	4b83      	ldr	r3, [pc, #524]	@ (8002630 <HAL_RCC_ClockConfig+0x240>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d001      	beq.n	8002434 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e184      	b.n	800273e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d010      	beq.n	8002462 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691a      	ldr	r2, [r3, #16]
 8002444:	4b7b      	ldr	r3, [pc, #492]	@ (8002634 <HAL_RCC_ClockConfig+0x244>)
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800244c:	429a      	cmp	r2, r3
 800244e:	d908      	bls.n	8002462 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002450:	4b78      	ldr	r3, [pc, #480]	@ (8002634 <HAL_RCC_ClockConfig+0x244>)
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	4975      	ldr	r1, [pc, #468]	@ (8002634 <HAL_RCC_ClockConfig+0x244>)
 800245e:	4313      	orrs	r3, r2
 8002460:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	2b00      	cmp	r3, #0
 800246c:	d010      	beq.n	8002490 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	695a      	ldr	r2, [r3, #20]
 8002472:	4b70      	ldr	r3, [pc, #448]	@ (8002634 <HAL_RCC_ClockConfig+0x244>)
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800247a:	429a      	cmp	r2, r3
 800247c:	d908      	bls.n	8002490 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800247e:	4b6d      	ldr	r3, [pc, #436]	@ (8002634 <HAL_RCC_ClockConfig+0x244>)
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	496a      	ldr	r1, [pc, #424]	@ (8002634 <HAL_RCC_ClockConfig+0x244>)
 800248c:	4313      	orrs	r3, r2
 800248e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0310 	and.w	r3, r3, #16
 8002498:	2b00      	cmp	r3, #0
 800249a:	d010      	beq.n	80024be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	699a      	ldr	r2, [r3, #24]
 80024a0:	4b64      	ldr	r3, [pc, #400]	@ (8002634 <HAL_RCC_ClockConfig+0x244>)
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d908      	bls.n	80024be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80024ac:	4b61      	ldr	r3, [pc, #388]	@ (8002634 <HAL_RCC_ClockConfig+0x244>)
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	495e      	ldr	r1, [pc, #376]	@ (8002634 <HAL_RCC_ClockConfig+0x244>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0320 	and.w	r3, r3, #32
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d010      	beq.n	80024ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69da      	ldr	r2, [r3, #28]
 80024ce:	4b59      	ldr	r3, [pc, #356]	@ (8002634 <HAL_RCC_ClockConfig+0x244>)
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d908      	bls.n	80024ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80024da:	4b56      	ldr	r3, [pc, #344]	@ (8002634 <HAL_RCC_ClockConfig+0x244>)
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	4953      	ldr	r1, [pc, #332]	@ (8002634 <HAL_RCC_ClockConfig+0x244>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d010      	beq.n	800251a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	4b4d      	ldr	r3, [pc, #308]	@ (8002634 <HAL_RCC_ClockConfig+0x244>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	f003 030f 	and.w	r3, r3, #15
 8002504:	429a      	cmp	r2, r3
 8002506:	d908      	bls.n	800251a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002508:	4b4a      	ldr	r3, [pc, #296]	@ (8002634 <HAL_RCC_ClockConfig+0x244>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	f023 020f 	bic.w	r2, r3, #15
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	4947      	ldr	r1, [pc, #284]	@ (8002634 <HAL_RCC_ClockConfig+0x244>)
 8002516:	4313      	orrs	r3, r2
 8002518:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d055      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002526:	4b43      	ldr	r3, [pc, #268]	@ (8002634 <HAL_RCC_ClockConfig+0x244>)
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	4940      	ldr	r1, [pc, #256]	@ (8002634 <HAL_RCC_ClockConfig+0x244>)
 8002534:	4313      	orrs	r3, r2
 8002536:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d107      	bne.n	8002550 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002540:	4b3c      	ldr	r3, [pc, #240]	@ (8002634 <HAL_RCC_ClockConfig+0x244>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d121      	bne.n	8002590 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e0f6      	b.n	800273e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b03      	cmp	r3, #3
 8002556:	d107      	bne.n	8002568 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002558:	4b36      	ldr	r3, [pc, #216]	@ (8002634 <HAL_RCC_ClockConfig+0x244>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d115      	bne.n	8002590 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e0ea      	b.n	800273e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d107      	bne.n	8002580 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002570:	4b30      	ldr	r3, [pc, #192]	@ (8002634 <HAL_RCC_ClockConfig+0x244>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002578:	2b00      	cmp	r3, #0
 800257a:	d109      	bne.n	8002590 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e0de      	b.n	800273e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002580:	4b2c      	ldr	r3, [pc, #176]	@ (8002634 <HAL_RCC_ClockConfig+0x244>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e0d6      	b.n	800273e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002590:	4b28      	ldr	r3, [pc, #160]	@ (8002634 <HAL_RCC_ClockConfig+0x244>)
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	f023 0207 	bic.w	r2, r3, #7
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	4925      	ldr	r1, [pc, #148]	@ (8002634 <HAL_RCC_ClockConfig+0x244>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025a2:	f7fe fecd 	bl	8001340 <HAL_GetTick>
 80025a6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a8:	e00a      	b.n	80025c0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025aa:	f7fe fec9 	bl	8001340 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e0be      	b.n	800273e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002634 <HAL_RCC_ClockConfig+0x244>)
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d1eb      	bne.n	80025aa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d010      	beq.n	8002600 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	4b14      	ldr	r3, [pc, #80]	@ (8002634 <HAL_RCC_ClockConfig+0x244>)
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d208      	bcs.n	8002600 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ee:	4b11      	ldr	r3, [pc, #68]	@ (8002634 <HAL_RCC_ClockConfig+0x244>)
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	f023 020f 	bic.w	r2, r3, #15
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	490e      	ldr	r1, [pc, #56]	@ (8002634 <HAL_RCC_ClockConfig+0x244>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002600:	4b0b      	ldr	r3, [pc, #44]	@ (8002630 <HAL_RCC_ClockConfig+0x240>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 030f 	and.w	r3, r3, #15
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d214      	bcs.n	8002638 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260e:	4b08      	ldr	r3, [pc, #32]	@ (8002630 <HAL_RCC_ClockConfig+0x240>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f023 020f 	bic.w	r2, r3, #15
 8002616:	4906      	ldr	r1, [pc, #24]	@ (8002630 <HAL_RCC_ClockConfig+0x240>)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	4313      	orrs	r3, r2
 800261c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800261e:	4b04      	ldr	r3, [pc, #16]	@ (8002630 <HAL_RCC_ClockConfig+0x240>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d005      	beq.n	8002638 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e086      	b.n	800273e <HAL_RCC_ClockConfig+0x34e>
 8002630:	52002000 	.word	0x52002000
 8002634:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d010      	beq.n	8002666 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691a      	ldr	r2, [r3, #16]
 8002648:	4b3f      	ldr	r3, [pc, #252]	@ (8002748 <HAL_RCC_ClockConfig+0x358>)
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002650:	429a      	cmp	r2, r3
 8002652:	d208      	bcs.n	8002666 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002654:	4b3c      	ldr	r3, [pc, #240]	@ (8002748 <HAL_RCC_ClockConfig+0x358>)
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	4939      	ldr	r1, [pc, #228]	@ (8002748 <HAL_RCC_ClockConfig+0x358>)
 8002662:	4313      	orrs	r3, r2
 8002664:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d010      	beq.n	8002694 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	695a      	ldr	r2, [r3, #20]
 8002676:	4b34      	ldr	r3, [pc, #208]	@ (8002748 <HAL_RCC_ClockConfig+0x358>)
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800267e:	429a      	cmp	r2, r3
 8002680:	d208      	bcs.n	8002694 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002682:	4b31      	ldr	r3, [pc, #196]	@ (8002748 <HAL_RCC_ClockConfig+0x358>)
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	492e      	ldr	r1, [pc, #184]	@ (8002748 <HAL_RCC_ClockConfig+0x358>)
 8002690:	4313      	orrs	r3, r2
 8002692:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0310 	and.w	r3, r3, #16
 800269c:	2b00      	cmp	r3, #0
 800269e:	d010      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	699a      	ldr	r2, [r3, #24]
 80026a4:	4b28      	ldr	r3, [pc, #160]	@ (8002748 <HAL_RCC_ClockConfig+0x358>)
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d208      	bcs.n	80026c2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80026b0:	4b25      	ldr	r3, [pc, #148]	@ (8002748 <HAL_RCC_ClockConfig+0x358>)
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	4922      	ldr	r1, [pc, #136]	@ (8002748 <HAL_RCC_ClockConfig+0x358>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0320 	and.w	r3, r3, #32
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d010      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69da      	ldr	r2, [r3, #28]
 80026d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002748 <HAL_RCC_ClockConfig+0x358>)
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026da:	429a      	cmp	r2, r3
 80026dc:	d208      	bcs.n	80026f0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80026de:	4b1a      	ldr	r3, [pc, #104]	@ (8002748 <HAL_RCC_ClockConfig+0x358>)
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	4917      	ldr	r1, [pc, #92]	@ (8002748 <HAL_RCC_ClockConfig+0x358>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026f0:	f000 f834 	bl	800275c <HAL_RCC_GetSysClockFreq>
 80026f4:	4602      	mov	r2, r0
 80026f6:	4b14      	ldr	r3, [pc, #80]	@ (8002748 <HAL_RCC_ClockConfig+0x358>)
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	0a1b      	lsrs	r3, r3, #8
 80026fc:	f003 030f 	and.w	r3, r3, #15
 8002700:	4912      	ldr	r1, [pc, #72]	@ (800274c <HAL_RCC_ClockConfig+0x35c>)
 8002702:	5ccb      	ldrb	r3, [r1, r3]
 8002704:	f003 031f 	and.w	r3, r3, #31
 8002708:	fa22 f303 	lsr.w	r3, r2, r3
 800270c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800270e:	4b0e      	ldr	r3, [pc, #56]	@ (8002748 <HAL_RCC_ClockConfig+0x358>)
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	4a0d      	ldr	r2, [pc, #52]	@ (800274c <HAL_RCC_ClockConfig+0x35c>)
 8002718:	5cd3      	ldrb	r3, [r2, r3]
 800271a:	f003 031f 	and.w	r3, r3, #31
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	fa22 f303 	lsr.w	r3, r2, r3
 8002724:	4a0a      	ldr	r2, [pc, #40]	@ (8002750 <HAL_RCC_ClockConfig+0x360>)
 8002726:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002728:	4a0a      	ldr	r2, [pc, #40]	@ (8002754 <HAL_RCC_ClockConfig+0x364>)
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800272e:	4b0a      	ldr	r3, [pc, #40]	@ (8002758 <HAL_RCC_ClockConfig+0x368>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7fe fdba 	bl	80012ac <HAL_InitTick>
 8002738:	4603      	mov	r3, r0
 800273a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800273c:	7bfb      	ldrb	r3, [r7, #15]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	58024400 	.word	0x58024400
 800274c:	080063c0 	.word	0x080063c0
 8002750:	24000004 	.word	0x24000004
 8002754:	24000000 	.word	0x24000000
 8002758:	24000024 	.word	0x24000024

0800275c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800275c:	b480      	push	{r7}
 800275e:	b089      	sub	sp, #36	@ 0x24
 8002760:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002762:	4bb3      	ldr	r3, [pc, #716]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800276a:	2b18      	cmp	r3, #24
 800276c:	f200 8155 	bhi.w	8002a1a <HAL_RCC_GetSysClockFreq+0x2be>
 8002770:	a201      	add	r2, pc, #4	@ (adr r2, 8002778 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002776:	bf00      	nop
 8002778:	080027dd 	.word	0x080027dd
 800277c:	08002a1b 	.word	0x08002a1b
 8002780:	08002a1b 	.word	0x08002a1b
 8002784:	08002a1b 	.word	0x08002a1b
 8002788:	08002a1b 	.word	0x08002a1b
 800278c:	08002a1b 	.word	0x08002a1b
 8002790:	08002a1b 	.word	0x08002a1b
 8002794:	08002a1b 	.word	0x08002a1b
 8002798:	08002803 	.word	0x08002803
 800279c:	08002a1b 	.word	0x08002a1b
 80027a0:	08002a1b 	.word	0x08002a1b
 80027a4:	08002a1b 	.word	0x08002a1b
 80027a8:	08002a1b 	.word	0x08002a1b
 80027ac:	08002a1b 	.word	0x08002a1b
 80027b0:	08002a1b 	.word	0x08002a1b
 80027b4:	08002a1b 	.word	0x08002a1b
 80027b8:	08002809 	.word	0x08002809
 80027bc:	08002a1b 	.word	0x08002a1b
 80027c0:	08002a1b 	.word	0x08002a1b
 80027c4:	08002a1b 	.word	0x08002a1b
 80027c8:	08002a1b 	.word	0x08002a1b
 80027cc:	08002a1b 	.word	0x08002a1b
 80027d0:	08002a1b 	.word	0x08002a1b
 80027d4:	08002a1b 	.word	0x08002a1b
 80027d8:	0800280f 	.word	0x0800280f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027dc:	4b94      	ldr	r3, [pc, #592]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0320 	and.w	r3, r3, #32
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d009      	beq.n	80027fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80027e8:	4b91      	ldr	r3, [pc, #580]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	08db      	lsrs	r3, r3, #3
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	4a90      	ldr	r2, [pc, #576]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027f4:	fa22 f303 	lsr.w	r3, r2, r3
 80027f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80027fa:	e111      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80027fc:	4b8d      	ldr	r3, [pc, #564]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027fe:	61bb      	str	r3, [r7, #24]
      break;
 8002800:	e10e      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002802:	4b8d      	ldr	r3, [pc, #564]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002804:	61bb      	str	r3, [r7, #24]
      break;
 8002806:	e10b      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002808:	4b8c      	ldr	r3, [pc, #560]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800280a:	61bb      	str	r3, [r7, #24]
      break;
 800280c:	e108      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800280e:	4b88      	ldr	r3, [pc, #544]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002818:	4b85      	ldr	r3, [pc, #532]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800281a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800281c:	091b      	lsrs	r3, r3, #4
 800281e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002822:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002824:	4b82      	ldr	r3, [pc, #520]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800282e:	4b80      	ldr	r3, [pc, #512]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002832:	08db      	lsrs	r3, r3, #3
 8002834:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	fb02 f303 	mul.w	r3, r2, r3
 800283e:	ee07 3a90 	vmov	s15, r3
 8002842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002846:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 80e1 	beq.w	8002a14 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2b02      	cmp	r3, #2
 8002856:	f000 8083 	beq.w	8002960 <HAL_RCC_GetSysClockFreq+0x204>
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2b02      	cmp	r3, #2
 800285e:	f200 80a1 	bhi.w	80029a4 <HAL_RCC_GetSysClockFreq+0x248>
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <HAL_RCC_GetSysClockFreq+0x114>
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d056      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0x1c0>
 800286e:	e099      	b.n	80029a4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002870:	4b6f      	ldr	r3, [pc, #444]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0320 	and.w	r3, r3, #32
 8002878:	2b00      	cmp	r3, #0
 800287a:	d02d      	beq.n	80028d8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800287c:	4b6c      	ldr	r3, [pc, #432]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	08db      	lsrs	r3, r3, #3
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	4a6b      	ldr	r2, [pc, #428]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002888:	fa22 f303 	lsr.w	r3, r2, r3
 800288c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	ee07 3a90 	vmov	s15, r3
 8002894:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	ee07 3a90 	vmov	s15, r3
 800289e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028a6:	4b62      	ldr	r3, [pc, #392]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ae:	ee07 3a90 	vmov	s15, r3
 80028b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80028ba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002a40 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028d2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80028d6:	e087      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	ee07 3a90 	vmov	s15, r3
 80028de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028e2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002a44 <HAL_RCC_GetSysClockFreq+0x2e8>
 80028e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028ea:	4b51      	ldr	r3, [pc, #324]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028f2:	ee07 3a90 	vmov	s15, r3
 80028f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80028fe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002a40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800290a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800290e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002916:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800291a:	e065      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	ee07 3a90 	vmov	s15, r3
 8002922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002926:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002a48 <HAL_RCC_GetSysClockFreq+0x2ec>
 800292a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800292e:	4b40      	ldr	r3, [pc, #256]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002936:	ee07 3a90 	vmov	s15, r3
 800293a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800293e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002942:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002a40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800294a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800294e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800295a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800295e:	e043      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	ee07 3a90 	vmov	s15, r3
 8002966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800296a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002a4c <HAL_RCC_GetSysClockFreq+0x2f0>
 800296e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002972:	4b2f      	ldr	r3, [pc, #188]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800297a:	ee07 3a90 	vmov	s15, r3
 800297e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002982:	ed97 6a02 	vldr	s12, [r7, #8]
 8002986:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002a40 <HAL_RCC_GetSysClockFreq+0x2e4>
 800298a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800298e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002992:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800299a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800299e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029a2:	e021      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	ee07 3a90 	vmov	s15, r3
 80029aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002a48 <HAL_RCC_GetSysClockFreq+0x2ec>
 80029b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029be:	ee07 3a90 	vmov	s15, r3
 80029c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80029ca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002a40 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029e6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80029e8:	4b11      	ldr	r3, [pc, #68]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ec:	0a5b      	lsrs	r3, r3, #9
 80029ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029f2:	3301      	adds	r3, #1
 80029f4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	ee07 3a90 	vmov	s15, r3
 80029fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a00:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a0c:	ee17 3a90 	vmov	r3, s15
 8002a10:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002a12:	e005      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002a14:	2300      	movs	r3, #0
 8002a16:	61bb      	str	r3, [r7, #24]
      break;
 8002a18:	e002      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002a1a:	4b07      	ldr	r3, [pc, #28]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a1c:	61bb      	str	r3, [r7, #24]
      break;
 8002a1e:	bf00      	nop
  }

  return sysclockfreq;
 8002a20:	69bb      	ldr	r3, [r7, #24]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3724      	adds	r7, #36	@ 0x24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	58024400 	.word	0x58024400
 8002a34:	03d09000 	.word	0x03d09000
 8002a38:	003d0900 	.word	0x003d0900
 8002a3c:	017d7840 	.word	0x017d7840
 8002a40:	46000000 	.word	0x46000000
 8002a44:	4c742400 	.word	0x4c742400
 8002a48:	4a742400 	.word	0x4a742400
 8002a4c:	4bbebc20 	.word	0x4bbebc20

08002a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002a56:	f7ff fe81 	bl	800275c <HAL_RCC_GetSysClockFreq>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	4b10      	ldr	r3, [pc, #64]	@ (8002aa0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	0a1b      	lsrs	r3, r3, #8
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	490f      	ldr	r1, [pc, #60]	@ (8002aa4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002a68:	5ccb      	ldrb	r3, [r1, r3]
 8002a6a:	f003 031f 	and.w	r3, r3, #31
 8002a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a72:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a74:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	f003 030f 	and.w	r3, r3, #15
 8002a7c:	4a09      	ldr	r2, [pc, #36]	@ (8002aa4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002a7e:	5cd3      	ldrb	r3, [r2, r3]
 8002a80:	f003 031f 	and.w	r3, r3, #31
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8a:	4a07      	ldr	r2, [pc, #28]	@ (8002aa8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002a8c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a8e:	4a07      	ldr	r2, [pc, #28]	@ (8002aac <HAL_RCC_GetHCLKFreq+0x5c>)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002a94:	4b04      	ldr	r3, [pc, #16]	@ (8002aa8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002a96:	681b      	ldr	r3, [r3, #0]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	58024400 	.word	0x58024400
 8002aa4:	080063c0 	.word	0x080063c0
 8002aa8:	24000004 	.word	0x24000004
 8002aac:	24000000 	.word	0x24000000

08002ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002ab4:	f7ff ffcc 	bl	8002a50 <HAL_RCC_GetHCLKFreq>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	091b      	lsrs	r3, r3, #4
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	4904      	ldr	r1, [pc, #16]	@ (8002ad8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ac6:	5ccb      	ldrb	r3, [r1, r3]
 8002ac8:	f003 031f 	and.w	r3, r3, #31
 8002acc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	58024400 	.word	0x58024400
 8002ad8:	080063c0 	.word	0x080063c0

08002adc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002ae0:	f7ff ffb6 	bl	8002a50 <HAL_RCC_GetHCLKFreq>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	4b06      	ldr	r3, [pc, #24]	@ (8002b00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	0a1b      	lsrs	r3, r3, #8
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	4904      	ldr	r1, [pc, #16]	@ (8002b04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002af2:	5ccb      	ldrb	r3, [r1, r3]
 8002af4:	f003 031f 	and.w	r3, r3, #31
 8002af8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	58024400 	.word	0x58024400
 8002b04:	080063c0 	.word	0x080063c0

08002b08 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b0c:	b0ca      	sub	sp, #296	@ 0x128
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b14:	2300      	movs	r3, #0
 8002b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b28:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002b2c:	2500      	movs	r5, #0
 8002b2e:	ea54 0305 	orrs.w	r3, r4, r5
 8002b32:	d049      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002b3e:	d02f      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002b40:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002b44:	d828      	bhi.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002b46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b4a:	d01a      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002b4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b50:	d822      	bhi.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002b56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b5a:	d007      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b5c:	e01c      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b5e:	4bb8      	ldr	r3, [pc, #736]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b62:	4ab7      	ldr	r2, [pc, #732]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b6a:	e01a      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b70:	3308      	adds	r3, #8
 8002b72:	2102      	movs	r1, #2
 8002b74:	4618      	mov	r0, r3
 8002b76:	f001 fc8f 	bl	8004498 <RCCEx_PLL2_Config>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b80:	e00f      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b86:	3328      	adds	r3, #40	@ 0x28
 8002b88:	2102      	movs	r1, #2
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f001 fd36 	bl	80045fc <RCCEx_PLL3_Config>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b96:	e004      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b9e:	e000      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002ba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10a      	bne.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002baa:	4ba5      	ldr	r3, [pc, #660]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bb8:	4aa1      	ldr	r2, [pc, #644]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bba:	430b      	orrs	r3, r1
 8002bbc:	6513      	str	r3, [r2, #80]	@ 0x50
 8002bbe:	e003      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002bd4:	f04f 0900 	mov.w	r9, #0
 8002bd8:	ea58 0309 	orrs.w	r3, r8, r9
 8002bdc:	d047      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	d82a      	bhi.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002be8:	a201      	add	r2, pc, #4	@ (adr r2, 8002bf0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bee:	bf00      	nop
 8002bf0:	08002c05 	.word	0x08002c05
 8002bf4:	08002c13 	.word	0x08002c13
 8002bf8:	08002c29 	.word	0x08002c29
 8002bfc:	08002c47 	.word	0x08002c47
 8002c00:	08002c47 	.word	0x08002c47
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c04:	4b8e      	ldr	r3, [pc, #568]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c08:	4a8d      	ldr	r2, [pc, #564]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c10:	e01a      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c16:	3308      	adds	r3, #8
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f001 fc3c 	bl	8004498 <RCCEx_PLL2_Config>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c26:	e00f      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c2c:	3328      	adds	r3, #40	@ 0x28
 8002c2e:	2100      	movs	r1, #0
 8002c30:	4618      	mov	r0, r3
 8002c32:	f001 fce3 	bl	80045fc <RCCEx_PLL3_Config>
 8002c36:	4603      	mov	r3, r0
 8002c38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c3c:	e004      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c44:	e000      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002c46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10a      	bne.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c50:	4b7b      	ldr	r3, [pc, #492]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c54:	f023 0107 	bic.w	r1, r3, #7
 8002c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5e:	4a78      	ldr	r2, [pc, #480]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c60:	430b      	orrs	r3, r1
 8002c62:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c64:	e003      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c76:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002c7a:	f04f 0b00 	mov.w	fp, #0
 8002c7e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002c82:	d04c      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c8e:	d030      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002c90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c94:	d829      	bhi.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002c96:	2bc0      	cmp	r3, #192	@ 0xc0
 8002c98:	d02d      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002c9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002c9c:	d825      	bhi.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002c9e:	2b80      	cmp	r3, #128	@ 0x80
 8002ca0:	d018      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002ca2:	2b80      	cmp	r3, #128	@ 0x80
 8002ca4:	d821      	bhi.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d002      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002caa:	2b40      	cmp	r3, #64	@ 0x40
 8002cac:	d007      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002cae:	e01c      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cb0:	4b63      	ldr	r3, [pc, #396]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb4:	4a62      	ldr	r2, [pc, #392]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002cbc:	e01c      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cc2:	3308      	adds	r3, #8
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f001 fbe6 	bl	8004498 <RCCEx_PLL2_Config>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002cd2:	e011      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cd8:	3328      	adds	r3, #40	@ 0x28
 8002cda:	2100      	movs	r1, #0
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f001 fc8d 	bl	80045fc <RCCEx_PLL3_Config>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002ce8:	e006      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002cf0:	e002      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002cf2:	bf00      	nop
 8002cf4:	e000      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002cf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10a      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002d00:	4b4f      	ldr	r3, [pc, #316]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d04:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0e:	4a4c      	ldr	r2, [pc, #304]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d10:	430b      	orrs	r3, r1
 8002d12:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d14:	e003      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d26:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002d2a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002d34:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	d053      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002d46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d4a:	d035      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002d4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d50:	d82e      	bhi.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002d52:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002d56:	d031      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002d58:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002d5c:	d828      	bhi.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002d5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d62:	d01a      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002d64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d68:	d822      	bhi.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002d6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d72:	d007      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002d74:	e01c      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d76:	4b32      	ldr	r3, [pc, #200]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d7a:	4a31      	ldr	r2, [pc, #196]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d82:	e01c      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d88:	3308      	adds	r3, #8
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f001 fb83 	bl	8004498 <RCCEx_PLL2_Config>
 8002d92:	4603      	mov	r3, r0
 8002d94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002d98:	e011      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d9e:	3328      	adds	r3, #40	@ 0x28
 8002da0:	2100      	movs	r1, #0
 8002da2:	4618      	mov	r0, r3
 8002da4:	f001 fc2a 	bl	80045fc <RCCEx_PLL3_Config>
 8002da8:	4603      	mov	r3, r0
 8002daa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002dae:	e006      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002db6:	e002      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002db8:	bf00      	nop
 8002dba:	e000      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002dbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10b      	bne.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002dc6:	4b1e      	ldr	r3, [pc, #120]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dca:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dd2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002dd6:	4a1a      	ldr	r2, [pc, #104]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dd8:	430b      	orrs	r3, r1
 8002dda:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ddc:	e003      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002de2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dee:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002df2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002df6:	2300      	movs	r3, #0
 8002df8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002dfc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002e00:	460b      	mov	r3, r1
 8002e02:	4313      	orrs	r3, r2
 8002e04:	d056      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002e0e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e12:	d038      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002e14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e18:	d831      	bhi.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e1a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002e1e:	d034      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002e20:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002e24:	d82b      	bhi.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e2a:	d01d      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002e2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e30:	d825      	bhi.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d006      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002e36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e3a:	d00a      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002e3c:	e01f      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e3e:	bf00      	nop
 8002e40:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e44:	4ba2      	ldr	r3, [pc, #648]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e48:	4aa1      	ldr	r2, [pc, #644]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e50:	e01c      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e56:	3308      	adds	r3, #8
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f001 fb1c 	bl	8004498 <RCCEx_PLL2_Config>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002e66:	e011      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e6c:	3328      	adds	r3, #40	@ 0x28
 8002e6e:	2100      	movs	r1, #0
 8002e70:	4618      	mov	r0, r3
 8002e72:	f001 fbc3 	bl	80045fc <RCCEx_PLL3_Config>
 8002e76:	4603      	mov	r3, r0
 8002e78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e7c:	e006      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e84:	e002      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002e86:	bf00      	nop
 8002e88:	e000      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002e8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10b      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002e94:	4b8e      	ldr	r3, [pc, #568]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e98:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ea0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002ea4:	4a8a      	ldr	r2, [pc, #552]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ea6:	430b      	orrs	r3, r1
 8002ea8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002eaa:	e003      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002eb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002ec0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002eca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	d03a      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eda:	2b30      	cmp	r3, #48	@ 0x30
 8002edc:	d01f      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002ede:	2b30      	cmp	r3, #48	@ 0x30
 8002ee0:	d819      	bhi.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002ee2:	2b20      	cmp	r3, #32
 8002ee4:	d00c      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002ee6:	2b20      	cmp	r3, #32
 8002ee8:	d815      	bhi.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d019      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002eee:	2b10      	cmp	r3, #16
 8002ef0:	d111      	bne.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ef2:	4b77      	ldr	r3, [pc, #476]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef6:	4a76      	ldr	r2, [pc, #472]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ef8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002efc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002efe:	e011      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f04:	3308      	adds	r3, #8
 8002f06:	2102      	movs	r1, #2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f001 fac5 	bl	8004498 <RCCEx_PLL2_Config>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002f14:	e006      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f1c:	e002      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002f1e:	bf00      	nop
 8002f20:	e000      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002f22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10a      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002f2c:	4b68      	ldr	r3, [pc, #416]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f30:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f3a:	4a65      	ldr	r2, [pc, #404]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f40:	e003      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f52:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002f56:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002f60:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002f64:	460b      	mov	r3, r1
 8002f66:	4313      	orrs	r3, r2
 8002f68:	d051      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f74:	d035      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002f76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f7a:	d82e      	bhi.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002f7c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002f80:	d031      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002f82:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002f86:	d828      	bhi.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002f88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f8c:	d01a      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002f8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f92:	d822      	bhi.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002f98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f9c:	d007      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002f9e:	e01c      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fa0:	4b4b      	ldr	r3, [pc, #300]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa4:	4a4a      	ldr	r2, [pc, #296]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002faa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002fac:	e01c      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fb2:	3308      	adds	r3, #8
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f001 fa6e 	bl	8004498 <RCCEx_PLL2_Config>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002fc2:	e011      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fc8:	3328      	adds	r3, #40	@ 0x28
 8002fca:	2100      	movs	r1, #0
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f001 fb15 	bl	80045fc <RCCEx_PLL3_Config>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002fd8:	e006      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fe0:	e002      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002fe2:	bf00      	nop
 8002fe4:	e000      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002fe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fe8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10a      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002ff0:	4b37      	ldr	r3, [pc, #220]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ff4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ffe:	4a34      	ldr	r2, [pc, #208]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003000:	430b      	orrs	r3, r1
 8003002:	6513      	str	r3, [r2, #80]	@ 0x50
 8003004:	e003      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003006:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800300a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800300e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003016:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800301a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800301e:	2300      	movs	r3, #0
 8003020:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003024:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003028:	460b      	mov	r3, r1
 800302a:	4313      	orrs	r3, r2
 800302c:	d056      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800302e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003032:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003034:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003038:	d033      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800303a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800303e:	d82c      	bhi.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003040:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003044:	d02f      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003046:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800304a:	d826      	bhi.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800304c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003050:	d02b      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003052:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003056:	d820      	bhi.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003058:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800305c:	d012      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800305e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003062:	d81a      	bhi.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003064:	2b00      	cmp	r3, #0
 8003066:	d022      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800306c:	d115      	bne.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800306e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003072:	3308      	adds	r3, #8
 8003074:	2101      	movs	r1, #1
 8003076:	4618      	mov	r0, r3
 8003078:	f001 fa0e 	bl	8004498 <RCCEx_PLL2_Config>
 800307c:	4603      	mov	r3, r0
 800307e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003082:	e015      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003088:	3328      	adds	r3, #40	@ 0x28
 800308a:	2101      	movs	r1, #1
 800308c:	4618      	mov	r0, r3
 800308e:	f001 fab5 	bl	80045fc <RCCEx_PLL3_Config>
 8003092:	4603      	mov	r3, r0
 8003094:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003098:	e00a      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030a0:	e006      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80030a2:	bf00      	nop
 80030a4:	e004      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80030a6:	bf00      	nop
 80030a8:	e002      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80030aa:	bf00      	nop
 80030ac:	e000      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80030ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10d      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80030b8:	4b05      	ldr	r3, [pc, #20]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030bc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80030c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030c6:	4a02      	ldr	r2, [pc, #8]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030c8:	430b      	orrs	r3, r1
 80030ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80030cc:	e006      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80030ce:	bf00      	nop
 80030d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80030dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80030e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80030ec:	2300      	movs	r3, #0
 80030ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80030f2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80030f6:	460b      	mov	r3, r1
 80030f8:	4313      	orrs	r3, r2
 80030fa:	d055      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80030fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003100:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003104:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003108:	d033      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800310a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800310e:	d82c      	bhi.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003114:	d02f      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003116:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800311a:	d826      	bhi.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800311c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003120:	d02b      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003122:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003126:	d820      	bhi.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003128:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800312c:	d012      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800312e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003132:	d81a      	bhi.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003134:	2b00      	cmp	r3, #0
 8003136:	d022      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003138:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800313c:	d115      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800313e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003142:	3308      	adds	r3, #8
 8003144:	2101      	movs	r1, #1
 8003146:	4618      	mov	r0, r3
 8003148:	f001 f9a6 	bl	8004498 <RCCEx_PLL2_Config>
 800314c:	4603      	mov	r3, r0
 800314e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003152:	e015      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003158:	3328      	adds	r3, #40	@ 0x28
 800315a:	2101      	movs	r1, #1
 800315c:	4618      	mov	r0, r3
 800315e:	f001 fa4d 	bl	80045fc <RCCEx_PLL3_Config>
 8003162:	4603      	mov	r3, r0
 8003164:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003168:	e00a      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003170:	e006      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003172:	bf00      	nop
 8003174:	e004      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003176:	bf00      	nop
 8003178:	e002      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800317a:	bf00      	nop
 800317c:	e000      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800317e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003180:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10b      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003188:	4ba3      	ldr	r3, [pc, #652]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800318a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003194:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003198:	4a9f      	ldr	r2, [pc, #636]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800319a:	430b      	orrs	r3, r1
 800319c:	6593      	str	r3, [r2, #88]	@ 0x58
 800319e:	e003      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80031a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80031b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80031b8:	2300      	movs	r3, #0
 80031ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80031be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80031c2:	460b      	mov	r3, r1
 80031c4:	4313      	orrs	r3, r2
 80031c6:	d037      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80031c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031d2:	d00e      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80031d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031d8:	d816      	bhi.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d018      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80031de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031e2:	d111      	bne.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031e4:	4b8c      	ldr	r3, [pc, #560]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e8:	4a8b      	ldr	r2, [pc, #556]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80031f0:	e00f      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031f6:	3308      	adds	r3, #8
 80031f8:	2101      	movs	r1, #1
 80031fa:	4618      	mov	r0, r3
 80031fc:	f001 f94c 	bl	8004498 <RCCEx_PLL2_Config>
 8003200:	4603      	mov	r3, r0
 8003202:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003206:	e004      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800320e:	e000      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003210:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003212:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10a      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800321a:	4b7f      	ldr	r3, [pc, #508]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800321c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800321e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003228:	4a7b      	ldr	r2, [pc, #492]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800322a:	430b      	orrs	r3, r1
 800322c:	6513      	str	r3, [r2, #80]	@ 0x50
 800322e:	e003      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003230:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003234:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800323c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003240:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003244:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003248:	2300      	movs	r3, #0
 800324a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800324e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003252:	460b      	mov	r3, r1
 8003254:	4313      	orrs	r3, r2
 8003256:	d039      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800325c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800325e:	2b03      	cmp	r3, #3
 8003260:	d81c      	bhi.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003262:	a201      	add	r2, pc, #4	@ (adr r2, 8003268 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003268:	080032a5 	.word	0x080032a5
 800326c:	08003279 	.word	0x08003279
 8003270:	08003287 	.word	0x08003287
 8003274:	080032a5 	.word	0x080032a5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003278:	4b67      	ldr	r3, [pc, #412]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800327a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327c:	4a66      	ldr	r2, [pc, #408]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800327e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003282:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003284:	e00f      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800328a:	3308      	adds	r3, #8
 800328c:	2102      	movs	r1, #2
 800328e:	4618      	mov	r0, r3
 8003290:	f001 f902 	bl	8004498 <RCCEx_PLL2_Config>
 8003294:	4603      	mov	r3, r0
 8003296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800329a:	e004      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032a2:	e000      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80032a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10a      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80032ae:	4b5a      	ldr	r3, [pc, #360]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032b2:	f023 0103 	bic.w	r1, r3, #3
 80032b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032bc:	4a56      	ldr	r2, [pc, #344]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032be:	430b      	orrs	r3, r1
 80032c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032c2:	e003      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80032d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032dc:	2300      	movs	r3, #0
 80032de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032e2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80032e6:	460b      	mov	r3, r1
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f000 809f 	beq.w	800342c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032ee:	4b4b      	ldr	r3, [pc, #300]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a4a      	ldr	r2, [pc, #296]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80032f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032fa:	f7fe f821 	bl	8001340 <HAL_GetTick>
 80032fe:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003302:	e00b      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003304:	f7fe f81c 	bl	8001340 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b64      	cmp	r3, #100	@ 0x64
 8003312:	d903      	bls.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800331a:	e005      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800331c:	4b3f      	ldr	r3, [pc, #252]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0ed      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003328:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800332c:	2b00      	cmp	r3, #0
 800332e:	d179      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003330:	4b39      	ldr	r3, [pc, #228]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003332:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003338:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800333c:	4053      	eors	r3, r2
 800333e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003342:	2b00      	cmp	r3, #0
 8003344:	d015      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003346:	4b34      	ldr	r3, [pc, #208]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800334a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800334e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003352:	4b31      	ldr	r3, [pc, #196]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003356:	4a30      	ldr	r2, [pc, #192]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800335c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800335e:	4b2e      	ldr	r3, [pc, #184]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003362:	4a2d      	ldr	r2, [pc, #180]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003364:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003368:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800336a:	4a2b      	ldr	r2, [pc, #172]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800336c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003370:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003376:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800337a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800337e:	d118      	bne.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003380:	f7fd ffde 	bl	8001340 <HAL_GetTick>
 8003384:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003388:	e00d      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800338a:	f7fd ffd9 	bl	8001340 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003394:	1ad2      	subs	r2, r2, r3
 8003396:	f241 3388 	movw	r3, #5000	@ 0x1388
 800339a:	429a      	cmp	r2, r3
 800339c:	d903      	bls.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80033a4:	e005      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0eb      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80033b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d129      	bne.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80033c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033ca:	d10e      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80033cc:	4b12      	ldr	r3, [pc, #72]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80033d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80033dc:	091a      	lsrs	r2, r3, #4
 80033de:	4b10      	ldr	r3, [pc, #64]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	4a0d      	ldr	r2, [pc, #52]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033e4:	430b      	orrs	r3, r1
 80033e6:	6113      	str	r3, [r2, #16]
 80033e8:	e005      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80033ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80033f4:	6113      	str	r3, [r2, #16]
 80033f6:	4b08      	ldr	r3, [pc, #32]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033f8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80033fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003406:	4a04      	ldr	r2, [pc, #16]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003408:	430b      	orrs	r3, r1
 800340a:	6713      	str	r3, [r2, #112]	@ 0x70
 800340c:	e00e      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800340e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003412:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003416:	e009      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003418:	58024400 	.word	0x58024400
 800341c:	58024800 	.word	0x58024800
 8003420:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003424:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003428:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800342c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003434:	f002 0301 	and.w	r3, r2, #1
 8003438:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800343c:	2300      	movs	r3, #0
 800343e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003442:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003446:	460b      	mov	r3, r1
 8003448:	4313      	orrs	r3, r2
 800344a:	f000 8089 	beq.w	8003560 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800344e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003452:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003454:	2b28      	cmp	r3, #40	@ 0x28
 8003456:	d86b      	bhi.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003458:	a201      	add	r2, pc, #4	@ (adr r2, 8003460 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800345a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345e:	bf00      	nop
 8003460:	08003539 	.word	0x08003539
 8003464:	08003531 	.word	0x08003531
 8003468:	08003531 	.word	0x08003531
 800346c:	08003531 	.word	0x08003531
 8003470:	08003531 	.word	0x08003531
 8003474:	08003531 	.word	0x08003531
 8003478:	08003531 	.word	0x08003531
 800347c:	08003531 	.word	0x08003531
 8003480:	08003505 	.word	0x08003505
 8003484:	08003531 	.word	0x08003531
 8003488:	08003531 	.word	0x08003531
 800348c:	08003531 	.word	0x08003531
 8003490:	08003531 	.word	0x08003531
 8003494:	08003531 	.word	0x08003531
 8003498:	08003531 	.word	0x08003531
 800349c:	08003531 	.word	0x08003531
 80034a0:	0800351b 	.word	0x0800351b
 80034a4:	08003531 	.word	0x08003531
 80034a8:	08003531 	.word	0x08003531
 80034ac:	08003531 	.word	0x08003531
 80034b0:	08003531 	.word	0x08003531
 80034b4:	08003531 	.word	0x08003531
 80034b8:	08003531 	.word	0x08003531
 80034bc:	08003531 	.word	0x08003531
 80034c0:	08003539 	.word	0x08003539
 80034c4:	08003531 	.word	0x08003531
 80034c8:	08003531 	.word	0x08003531
 80034cc:	08003531 	.word	0x08003531
 80034d0:	08003531 	.word	0x08003531
 80034d4:	08003531 	.word	0x08003531
 80034d8:	08003531 	.word	0x08003531
 80034dc:	08003531 	.word	0x08003531
 80034e0:	08003539 	.word	0x08003539
 80034e4:	08003531 	.word	0x08003531
 80034e8:	08003531 	.word	0x08003531
 80034ec:	08003531 	.word	0x08003531
 80034f0:	08003531 	.word	0x08003531
 80034f4:	08003531 	.word	0x08003531
 80034f8:	08003531 	.word	0x08003531
 80034fc:	08003531 	.word	0x08003531
 8003500:	08003539 	.word	0x08003539
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003508:	3308      	adds	r3, #8
 800350a:	2101      	movs	r1, #1
 800350c:	4618      	mov	r0, r3
 800350e:	f000 ffc3 	bl	8004498 <RCCEx_PLL2_Config>
 8003512:	4603      	mov	r3, r0
 8003514:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003518:	e00f      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800351a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800351e:	3328      	adds	r3, #40	@ 0x28
 8003520:	2101      	movs	r1, #1
 8003522:	4618      	mov	r0, r3
 8003524:	f001 f86a 	bl	80045fc <RCCEx_PLL3_Config>
 8003528:	4603      	mov	r3, r0
 800352a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800352e:	e004      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003536:	e000      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003538:	bf00      	nop
    }

    if (ret == HAL_OK)
 800353a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10a      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003542:	4bbf      	ldr	r3, [pc, #764]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003546:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800354a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800354e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003550:	4abb      	ldr	r2, [pc, #748]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003552:	430b      	orrs	r3, r1
 8003554:	6553      	str	r3, [r2, #84]	@ 0x54
 8003556:	e003      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003558:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800355c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003568:	f002 0302 	and.w	r3, r2, #2
 800356c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003570:	2300      	movs	r3, #0
 8003572:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003576:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800357a:	460b      	mov	r3, r1
 800357c:	4313      	orrs	r3, r2
 800357e:	d041      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003584:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003586:	2b05      	cmp	r3, #5
 8003588:	d824      	bhi.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800358a:	a201      	add	r2, pc, #4	@ (adr r2, 8003590 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800358c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003590:	080035dd 	.word	0x080035dd
 8003594:	080035a9 	.word	0x080035a9
 8003598:	080035bf 	.word	0x080035bf
 800359c:	080035dd 	.word	0x080035dd
 80035a0:	080035dd 	.word	0x080035dd
 80035a4:	080035dd 	.word	0x080035dd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ac:	3308      	adds	r3, #8
 80035ae:	2101      	movs	r1, #1
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 ff71 	bl	8004498 <RCCEx_PLL2_Config>
 80035b6:	4603      	mov	r3, r0
 80035b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80035bc:	e00f      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c2:	3328      	adds	r3, #40	@ 0x28
 80035c4:	2101      	movs	r1, #1
 80035c6:	4618      	mov	r0, r3
 80035c8:	f001 f818 	bl	80045fc <RCCEx_PLL3_Config>
 80035cc:	4603      	mov	r3, r0
 80035ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80035d2:	e004      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035da:	e000      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80035dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10a      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80035e6:	4b96      	ldr	r3, [pc, #600]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ea:	f023 0107 	bic.w	r1, r3, #7
 80035ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035f4:	4a92      	ldr	r2, [pc, #584]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035f6:	430b      	orrs	r3, r1
 80035f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80035fa:	e003      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003600:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360c:	f002 0304 	and.w	r3, r2, #4
 8003610:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003614:	2300      	movs	r3, #0
 8003616:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800361a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800361e:	460b      	mov	r3, r1
 8003620:	4313      	orrs	r3, r2
 8003622:	d044      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003628:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800362c:	2b05      	cmp	r3, #5
 800362e:	d825      	bhi.n	800367c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003630:	a201      	add	r2, pc, #4	@ (adr r2, 8003638 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003636:	bf00      	nop
 8003638:	08003685 	.word	0x08003685
 800363c:	08003651 	.word	0x08003651
 8003640:	08003667 	.word	0x08003667
 8003644:	08003685 	.word	0x08003685
 8003648:	08003685 	.word	0x08003685
 800364c:	08003685 	.word	0x08003685
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003654:	3308      	adds	r3, #8
 8003656:	2101      	movs	r1, #1
 8003658:	4618      	mov	r0, r3
 800365a:	f000 ff1d 	bl	8004498 <RCCEx_PLL2_Config>
 800365e:	4603      	mov	r3, r0
 8003660:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003664:	e00f      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800366a:	3328      	adds	r3, #40	@ 0x28
 800366c:	2101      	movs	r1, #1
 800366e:	4618      	mov	r0, r3
 8003670:	f000 ffc4 	bl	80045fc <RCCEx_PLL3_Config>
 8003674:	4603      	mov	r3, r0
 8003676:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800367a:	e004      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003682:	e000      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003684:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003686:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10b      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800368e:	4b6c      	ldr	r3, [pc, #432]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003692:	f023 0107 	bic.w	r1, r3, #7
 8003696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800369a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800369e:	4a68      	ldr	r2, [pc, #416]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80036a0:	430b      	orrs	r3, r1
 80036a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80036a4:	e003      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b6:	f002 0320 	and.w	r3, r2, #32
 80036ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80036be:	2300      	movs	r3, #0
 80036c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80036c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80036c8:	460b      	mov	r3, r1
 80036ca:	4313      	orrs	r3, r2
 80036cc:	d055      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80036ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036da:	d033      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80036dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036e0:	d82c      	bhi.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80036e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036e6:	d02f      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80036e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036ec:	d826      	bhi.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80036ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80036f2:	d02b      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80036f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80036f8:	d820      	bhi.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80036fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036fe:	d012      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003700:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003704:	d81a      	bhi.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003706:	2b00      	cmp	r3, #0
 8003708:	d022      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800370a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800370e:	d115      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003714:	3308      	adds	r3, #8
 8003716:	2100      	movs	r1, #0
 8003718:	4618      	mov	r0, r3
 800371a:	f000 febd 	bl	8004498 <RCCEx_PLL2_Config>
 800371e:	4603      	mov	r3, r0
 8003720:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003724:	e015      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800372a:	3328      	adds	r3, #40	@ 0x28
 800372c:	2102      	movs	r1, #2
 800372e:	4618      	mov	r0, r3
 8003730:	f000 ff64 	bl	80045fc <RCCEx_PLL3_Config>
 8003734:	4603      	mov	r3, r0
 8003736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800373a:	e00a      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003742:	e006      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003744:	bf00      	nop
 8003746:	e004      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003748:	bf00      	nop
 800374a:	e002      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800374c:	bf00      	nop
 800374e:	e000      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003750:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003752:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10b      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800375a:	4b39      	ldr	r3, [pc, #228]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800375c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800375e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800376a:	4a35      	ldr	r2, [pc, #212]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800376c:	430b      	orrs	r3, r1
 800376e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003770:	e003      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003772:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003776:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800377a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800377e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003782:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003786:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800378a:	2300      	movs	r3, #0
 800378c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003790:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003794:	460b      	mov	r3, r1
 8003796:	4313      	orrs	r3, r2
 8003798:	d058      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800379a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800379e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037a2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80037a6:	d033      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80037a8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80037ac:	d82c      	bhi.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80037ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037b2:	d02f      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80037b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037b8:	d826      	bhi.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80037ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80037be:	d02b      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80037c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80037c4:	d820      	bhi.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80037c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037ca:	d012      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80037cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037d0:	d81a      	bhi.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d022      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80037d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037da:	d115      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e0:	3308      	adds	r3, #8
 80037e2:	2100      	movs	r1, #0
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 fe57 	bl	8004498 <RCCEx_PLL2_Config>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80037f0:	e015      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f6:	3328      	adds	r3, #40	@ 0x28
 80037f8:	2102      	movs	r1, #2
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 fefe 	bl	80045fc <RCCEx_PLL3_Config>
 8003800:	4603      	mov	r3, r0
 8003802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003806:	e00a      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800380e:	e006      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003810:	bf00      	nop
 8003812:	e004      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003814:	bf00      	nop
 8003816:	e002      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003818:	bf00      	nop
 800381a:	e000      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800381c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800381e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10e      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003826:	4b06      	ldr	r3, [pc, #24]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800382a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800382e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003832:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003836:	4a02      	ldr	r2, [pc, #8]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003838:	430b      	orrs	r3, r1
 800383a:	6593      	str	r3, [r2, #88]	@ 0x58
 800383c:	e006      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800383e:	bf00      	nop
 8003840:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003844:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003848:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800384c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003854:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003858:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800385c:	2300      	movs	r3, #0
 800385e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003862:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003866:	460b      	mov	r3, r1
 8003868:	4313      	orrs	r3, r2
 800386a:	d055      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800386c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003870:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003874:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003878:	d033      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800387a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800387e:	d82c      	bhi.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003880:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003884:	d02f      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003886:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800388a:	d826      	bhi.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800388c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003890:	d02b      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003892:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003896:	d820      	bhi.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003898:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800389c:	d012      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800389e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038a2:	d81a      	bhi.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d022      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80038a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038ac:	d115      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b2:	3308      	adds	r3, #8
 80038b4:	2100      	movs	r1, #0
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 fdee 	bl	8004498 <RCCEx_PLL2_Config>
 80038bc:	4603      	mov	r3, r0
 80038be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80038c2:	e015      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c8:	3328      	adds	r3, #40	@ 0x28
 80038ca:	2102      	movs	r1, #2
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 fe95 	bl	80045fc <RCCEx_PLL3_Config>
 80038d2:	4603      	mov	r3, r0
 80038d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80038d8:	e00a      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038e0:	e006      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80038e2:	bf00      	nop
 80038e4:	e004      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80038e6:	bf00      	nop
 80038e8:	e002      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80038ea:	bf00      	nop
 80038ec:	e000      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80038ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10b      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80038f8:	4ba1      	ldr	r3, [pc, #644]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038fc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003904:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003908:	4a9d      	ldr	r2, [pc, #628]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800390a:	430b      	orrs	r3, r1
 800390c:	6593      	str	r3, [r2, #88]	@ 0x58
 800390e:	e003      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003910:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003914:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800391c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003920:	f002 0308 	and.w	r3, r2, #8
 8003924:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003928:	2300      	movs	r3, #0
 800392a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800392e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003932:	460b      	mov	r3, r1
 8003934:	4313      	orrs	r3, r2
 8003936:	d01e      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800393c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003940:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003944:	d10c      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800394a:	3328      	adds	r3, #40	@ 0x28
 800394c:	2102      	movs	r1, #2
 800394e:	4618      	mov	r0, r3
 8003950:	f000 fe54 	bl	80045fc <RCCEx_PLL3_Config>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003960:	4b87      	ldr	r3, [pc, #540]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003964:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800396c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003970:	4a83      	ldr	r2, [pc, #524]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003972:	430b      	orrs	r3, r1
 8003974:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800397a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397e:	f002 0310 	and.w	r3, r2, #16
 8003982:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003986:	2300      	movs	r3, #0
 8003988:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800398c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003990:	460b      	mov	r3, r1
 8003992:	4313      	orrs	r3, r2
 8003994:	d01e      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800399a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800399e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039a2:	d10c      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80039a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a8:	3328      	adds	r3, #40	@ 0x28
 80039aa:	2102      	movs	r1, #2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 fe25 	bl	80045fc <RCCEx_PLL3_Config>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80039be:	4b70      	ldr	r3, [pc, #448]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80039c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039ce:	4a6c      	ldr	r2, [pc, #432]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039d0:	430b      	orrs	r3, r1
 80039d2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039dc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80039e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039e4:	2300      	movs	r3, #0
 80039e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039ea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80039ee:	460b      	mov	r3, r1
 80039f0:	4313      	orrs	r3, r2
 80039f2:	d03e      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80039f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80039fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a00:	d022      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003a02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a06:	d81b      	bhi.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003a0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a10:	d00b      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003a12:	e015      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a18:	3308      	adds	r3, #8
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 fd3b 	bl	8004498 <RCCEx_PLL2_Config>
 8003a22:	4603      	mov	r3, r0
 8003a24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003a28:	e00f      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a2e:	3328      	adds	r3, #40	@ 0x28
 8003a30:	2102      	movs	r1, #2
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 fde2 	bl	80045fc <RCCEx_PLL3_Config>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003a3e:	e004      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a46:	e000      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003a48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10b      	bne.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a52:	4b4b      	ldr	r3, [pc, #300]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a56:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003a62:	4a47      	ldr	r2, [pc, #284]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a64:	430b      	orrs	r3, r1
 8003a66:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a68:	e003      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003a7e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a80:	2300      	movs	r3, #0
 8003a82:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a84:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003a88:	460b      	mov	r3, r1
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	d03b      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a96:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a9a:	d01f      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003a9c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003aa0:	d818      	bhi.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003aa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003aa6:	d003      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003aa8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003aac:	d007      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003aae:	e011      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ab0:	4b33      	ldr	r3, [pc, #204]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab4:	4a32      	ldr	r2, [pc, #200]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ab6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003abc:	e00f      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac2:	3328      	adds	r3, #40	@ 0x28
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 fd98 	bl	80045fc <RCCEx_PLL3_Config>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003ad2:	e004      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ada:	e000      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003adc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ade:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10b      	bne.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ae6:	4b26      	ldr	r3, [pc, #152]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003af6:	4a22      	ldr	r2, [pc, #136]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003af8:	430b      	orrs	r3, r1
 8003afa:	6553      	str	r3, [r2, #84]	@ 0x54
 8003afc:	e003      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003afe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003b12:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b14:	2300      	movs	r3, #0
 8003b16:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b18:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	d034      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b30:	d007      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003b32:	e011      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b34:	4b12      	ldr	r3, [pc, #72]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b38:	4a11      	ldr	r2, [pc, #68]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003b40:	e00e      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b46:	3308      	adds	r3, #8
 8003b48:	2102      	movs	r1, #2
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 fca4 	bl	8004498 <RCCEx_PLL2_Config>
 8003b50:	4603      	mov	r3, r0
 8003b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003b56:	e003      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10d      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003b68:	4b05      	ldr	r3, [pc, #20]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b6c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b76:	4a02      	ldr	r2, [pc, #8]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b7c:	e006      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003b7e:	bf00      	nop
 8003b80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b94:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003b98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b9e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	d00c      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bac:	3328      	adds	r3, #40	@ 0x28
 8003bae:	2102      	movs	r1, #2
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 fd23 	bl	80045fc <RCCEx_PLL3_Config>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d002      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003bce:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8003bd4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003bd8:	460b      	mov	r3, r1
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	d038      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003be6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bea:	d018      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003bec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bf0:	d811      	bhi.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003bf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bf6:	d014      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003bf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bfc:	d80b      	bhi.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d011      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003c02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c06:	d106      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c08:	4bc3      	ldr	r3, [pc, #780]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0c:	4ac2      	ldr	r2, [pc, #776]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003c14:	e008      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c1c:	e004      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003c1e:	bf00      	nop
 8003c20:	e002      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003c22:	bf00      	nop
 8003c24:	e000      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003c26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10b      	bne.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c30:	4bb9      	ldr	r3, [pc, #740]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c34:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c40:	4ab5      	ldr	r2, [pc, #724]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c42:	430b      	orrs	r3, r1
 8003c44:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c46:	e003      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c58:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003c5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c5e:	2300      	movs	r3, #0
 8003c60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c62:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003c66:	460b      	mov	r3, r1
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	d009      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c6c:	4baa      	ldr	r3, [pc, #680]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c70:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c7a:	4aa7      	ldr	r2, [pc, #668]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c88:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003c8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c8e:	2300      	movs	r3, #0
 8003c90:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c92:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003c96:	460b      	mov	r3, r1
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	d00a      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003c9c:	4b9e      	ldr	r3, [pc, #632]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003cac:	4a9a      	ldr	r2, [pc, #616]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cae:	430b      	orrs	r3, r1
 8003cb0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cba:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cc4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003cc8:	460b      	mov	r3, r1
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	d009      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cce:	4b92      	ldr	r3, [pc, #584]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cd2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cdc:	4a8e      	ldr	r2, [pc, #568]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cde:	430b      	orrs	r3, r1
 8003ce0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cea:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003cee:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cf4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	d00e      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cfe:	4b86      	ldr	r3, [pc, #536]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	4a85      	ldr	r2, [pc, #532]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d04:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003d08:	6113      	str	r3, [r2, #16]
 8003d0a:	4b83      	ldr	r3, [pc, #524]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d0c:	6919      	ldr	r1, [r3, #16]
 8003d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d12:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003d16:	4a80      	ldr	r2, [pc, #512]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d24:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003d28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d2e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003d32:	460b      	mov	r3, r1
 8003d34:	4313      	orrs	r3, r2
 8003d36:	d009      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003d38:	4b77      	ldr	r3, [pc, #476]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d3c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d46:	4a74      	ldr	r2, [pc, #464]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d48:	430b      	orrs	r3, r1
 8003d4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d54:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003d58:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d5e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003d62:	460b      	mov	r3, r1
 8003d64:	4313      	orrs	r3, r2
 8003d66:	d00a      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d68:	4b6b      	ldr	r3, [pc, #428]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d6c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d78:	4a67      	ldr	r2, [pc, #412]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d7a:	430b      	orrs	r3, r1
 8003d7c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d86:	2100      	movs	r1, #0
 8003d88:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d90:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003d94:	460b      	mov	r3, r1
 8003d96:	4313      	orrs	r3, r2
 8003d98:	d011      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9e:	3308      	adds	r3, #8
 8003da0:	2100      	movs	r1, #0
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 fb78 	bl	8004498 <RCCEx_PLL2_Config>
 8003da8:	4603      	mov	r3, r0
 8003daa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003dae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	6239      	str	r1, [r7, #32]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dd0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	d011      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dde:	3308      	adds	r3, #8
 8003de0:	2101      	movs	r1, #1
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 fb58 	bl	8004498 <RCCEx_PLL2_Config>
 8003de8:	4603      	mov	r3, r0
 8003dea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003dee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e06:	2100      	movs	r1, #0
 8003e08:	61b9      	str	r1, [r7, #24]
 8003e0a:	f003 0304 	and.w	r3, r3, #4
 8003e0e:	61fb      	str	r3, [r7, #28]
 8003e10:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003e14:	460b      	mov	r3, r1
 8003e16:	4313      	orrs	r3, r2
 8003e18:	d011      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e1e:	3308      	adds	r3, #8
 8003e20:	2102      	movs	r1, #2
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 fb38 	bl	8004498 <RCCEx_PLL2_Config>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003e2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e46:	2100      	movs	r1, #0
 8003e48:	6139      	str	r1, [r7, #16]
 8003e4a:	f003 0308 	and.w	r3, r3, #8
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003e54:	460b      	mov	r3, r1
 8003e56:	4313      	orrs	r3, r2
 8003e58:	d011      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e5e:	3328      	adds	r3, #40	@ 0x28
 8003e60:	2100      	movs	r1, #0
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 fbca 	bl	80045fc <RCCEx_PLL3_Config>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e86:	2100      	movs	r1, #0
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	f003 0310 	and.w	r3, r3, #16
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003e94:	460b      	mov	r3, r1
 8003e96:	4313      	orrs	r3, r2
 8003e98:	d011      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9e:	3328      	adds	r3, #40	@ 0x28
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 fbaa 	bl	80045fc <RCCEx_PLL3_Config>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003eae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	6039      	str	r1, [r7, #0]
 8003eca:	f003 0320 	and.w	r3, r3, #32
 8003ece:	607b      	str	r3, [r7, #4]
 8003ed0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	d011      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ede:	3328      	adds	r3, #40	@ 0x28
 8003ee0:	2102      	movs	r1, #2
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 fb8a 	bl	80045fc <RCCEx_PLL3_Config>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003eee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003efa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003efe:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003f06:	2300      	movs	r3, #0
 8003f08:	e000      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003f12:	46bd      	mov	sp, r7
 8003f14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f18:	58024400 	.word	0x58024400

08003f1c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003f20:	f7fe fd96 	bl	8002a50 <HAL_RCC_GetHCLKFreq>
 8003f24:	4602      	mov	r2, r0
 8003f26:	4b06      	ldr	r3, [pc, #24]	@ (8003f40 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	091b      	lsrs	r3, r3, #4
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	4904      	ldr	r1, [pc, #16]	@ (8003f44 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003f32:	5ccb      	ldrb	r3, [r1, r3]
 8003f34:	f003 031f 	and.w	r3, r3, #31
 8003f38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	58024400 	.word	0x58024400
 8003f44:	080063c0 	.word	0x080063c0

08003f48 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b089      	sub	sp, #36	@ 0x24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f50:	4ba1      	ldr	r3, [pc, #644]	@ (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f54:	f003 0303 	and.w	r3, r3, #3
 8003f58:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003f5a:	4b9f      	ldr	r3, [pc, #636]	@ (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f5e:	0b1b      	lsrs	r3, r3, #12
 8003f60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f64:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003f66:	4b9c      	ldr	r3, [pc, #624]	@ (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6a:	091b      	lsrs	r3, r3, #4
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003f72:	4b99      	ldr	r3, [pc, #612]	@ (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f76:	08db      	lsrs	r3, r3, #3
 8003f78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	fb02 f303 	mul.w	r3, r2, r3
 8003f82:	ee07 3a90 	vmov	s15, r3
 8003f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 8111 	beq.w	80041b8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	f000 8083 	beq.w	80040a4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	f200 80a1 	bhi.w	80040e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d056      	beq.n	8004060 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003fb2:	e099      	b.n	80040e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fb4:	4b88      	ldr	r3, [pc, #544]	@ (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0320 	and.w	r3, r3, #32
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d02d      	beq.n	800401c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003fc0:	4b85      	ldr	r3, [pc, #532]	@ (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	08db      	lsrs	r3, r3, #3
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	4a84      	ldr	r2, [pc, #528]	@ (80041dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	ee07 3a90 	vmov	s15, r3
 8003fd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fea:	4b7b      	ldr	r3, [pc, #492]	@ (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff2:	ee07 3a90 	vmov	s15, r3
 8003ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ffa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ffe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800400a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800400e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004016:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800401a:	e087      	b.n	800412c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	ee07 3a90 	vmov	s15, r3
 8004022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004026:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80041e4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800402a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800402e:	4b6a      	ldr	r3, [pc, #424]	@ (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004036:	ee07 3a90 	vmov	s15, r3
 800403a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800403e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004042:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800404a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800404e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800405a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800405e:	e065      	b.n	800412c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	ee07 3a90 	vmov	s15, r3
 8004066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800406a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80041e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800406e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004072:	4b59      	ldr	r3, [pc, #356]	@ (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800407a:	ee07 3a90 	vmov	s15, r3
 800407e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004082:	ed97 6a03 	vldr	s12, [r7, #12]
 8004086:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800408a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800408e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004092:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800409a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800409e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040a2:	e043      	b.n	800412c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	ee07 3a90 	vmov	s15, r3
 80040aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80041ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80040b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040b6:	4b48      	ldr	r3, [pc, #288]	@ (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040be:	ee07 3a90 	vmov	s15, r3
 80040c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80040ca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040e6:	e021      	b.n	800412c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	ee07 3a90 	vmov	s15, r3
 80040ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040f2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80041e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80040f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040fa:	4b37      	ldr	r3, [pc, #220]	@ (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004102:	ee07 3a90 	vmov	s15, r3
 8004106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800410a:	ed97 6a03 	vldr	s12, [r7, #12]
 800410e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80041e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800411a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800411e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004126:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800412a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800412c:	4b2a      	ldr	r3, [pc, #168]	@ (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800412e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004130:	0a5b      	lsrs	r3, r3, #9
 8004132:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004136:	ee07 3a90 	vmov	s15, r3
 800413a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800413e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004142:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004146:	edd7 6a07 	vldr	s13, [r7, #28]
 800414a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800414e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004152:	ee17 2a90 	vmov	r2, s15
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800415a:	4b1f      	ldr	r3, [pc, #124]	@ (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800415c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800415e:	0c1b      	lsrs	r3, r3, #16
 8004160:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004164:	ee07 3a90 	vmov	s15, r3
 8004168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800416c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004170:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004174:	edd7 6a07 	vldr	s13, [r7, #28]
 8004178:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800417c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004180:	ee17 2a90 	vmov	r2, s15
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004188:	4b13      	ldr	r3, [pc, #76]	@ (80041d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800418a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800418c:	0e1b      	lsrs	r3, r3, #24
 800418e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004192:	ee07 3a90 	vmov	s15, r3
 8004196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800419a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800419e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80041a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041ae:	ee17 2a90 	vmov	r2, s15
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80041b6:	e008      	b.n	80041ca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	609a      	str	r2, [r3, #8]
}
 80041ca:	bf00      	nop
 80041cc:	3724      	adds	r7, #36	@ 0x24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	58024400 	.word	0x58024400
 80041dc:	03d09000 	.word	0x03d09000
 80041e0:	46000000 	.word	0x46000000
 80041e4:	4c742400 	.word	0x4c742400
 80041e8:	4a742400 	.word	0x4a742400
 80041ec:	4bbebc20 	.word	0x4bbebc20

080041f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b089      	sub	sp, #36	@ 0x24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80041f8:	4ba1      	ldr	r3, [pc, #644]	@ (8004480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fc:	f003 0303 	and.w	r3, r3, #3
 8004200:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004202:	4b9f      	ldr	r3, [pc, #636]	@ (8004480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004206:	0d1b      	lsrs	r3, r3, #20
 8004208:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800420c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800420e:	4b9c      	ldr	r3, [pc, #624]	@ (8004480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004212:	0a1b      	lsrs	r3, r3, #8
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800421a:	4b99      	ldr	r3, [pc, #612]	@ (8004480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800421c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800421e:	08db      	lsrs	r3, r3, #3
 8004220:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	fb02 f303 	mul.w	r3, r2, r3
 800422a:	ee07 3a90 	vmov	s15, r3
 800422e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004232:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 8111 	beq.w	8004460 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	2b02      	cmp	r3, #2
 8004242:	f000 8083 	beq.w	800434c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	2b02      	cmp	r3, #2
 800424a:	f200 80a1 	bhi.w	8004390 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d056      	beq.n	8004308 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800425a:	e099      	b.n	8004390 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800425c:	4b88      	ldr	r3, [pc, #544]	@ (8004480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	2b00      	cmp	r3, #0
 8004266:	d02d      	beq.n	80042c4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004268:	4b85      	ldr	r3, [pc, #532]	@ (8004480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	08db      	lsrs	r3, r3, #3
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	4a84      	ldr	r2, [pc, #528]	@ (8004484 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004274:	fa22 f303 	lsr.w	r3, r2, r3
 8004278:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	ee07 3a90 	vmov	s15, r3
 8004280:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	ee07 3a90 	vmov	s15, r3
 800428a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800428e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004292:	4b7b      	ldr	r3, [pc, #492]	@ (8004480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800429a:	ee07 3a90 	vmov	s15, r3
 800429e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80042a6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004488 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80042c2:	e087      	b.n	80043d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	ee07 3a90 	vmov	s15, r3
 80042ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800448c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80042d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042d6:	4b6a      	ldr	r3, [pc, #424]	@ (8004480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042de:	ee07 3a90 	vmov	s15, r3
 80042e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80042ea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004488 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004302:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004306:	e065      	b.n	80043d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004312:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004490 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800431a:	4b59      	ldr	r3, [pc, #356]	@ (8004480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800431c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004322:	ee07 3a90 	vmov	s15, r3
 8004326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800432a:	ed97 6a03 	vldr	s12, [r7, #12]
 800432e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004488 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800433a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800433e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004346:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800434a:	e043      	b.n	80043d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	ee07 3a90 	vmov	s15, r3
 8004352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004356:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004494 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800435a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800435e:	4b48      	ldr	r3, [pc, #288]	@ (8004480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004366:	ee07 3a90 	vmov	s15, r3
 800436a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800436e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004372:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004488 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800437a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800437e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800438a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800438e:	e021      	b.n	80043d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	ee07 3a90 	vmov	s15, r3
 8004396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800439a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004490 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800439e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043a2:	4b37      	ldr	r3, [pc, #220]	@ (8004480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043aa:	ee07 3a90 	vmov	s15, r3
 80043ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80043b6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004488 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043d2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80043d4:	4b2a      	ldr	r3, [pc, #168]	@ (8004480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d8:	0a5b      	lsrs	r3, r3, #9
 80043da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043de:	ee07 3a90 	vmov	s15, r3
 80043e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80043f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043fa:	ee17 2a90 	vmov	r2, s15
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004402:	4b1f      	ldr	r3, [pc, #124]	@ (8004480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004406:	0c1b      	lsrs	r3, r3, #16
 8004408:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800440c:	ee07 3a90 	vmov	s15, r3
 8004410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004414:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004418:	ee37 7a87 	vadd.f32	s14, s15, s14
 800441c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004424:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004428:	ee17 2a90 	vmov	r2, s15
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004430:	4b13      	ldr	r3, [pc, #76]	@ (8004480 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004434:	0e1b      	lsrs	r3, r3, #24
 8004436:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800443a:	ee07 3a90 	vmov	s15, r3
 800443e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004442:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004446:	ee37 7a87 	vadd.f32	s14, s15, s14
 800444a:	edd7 6a07 	vldr	s13, [r7, #28]
 800444e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004456:	ee17 2a90 	vmov	r2, s15
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800445e:	e008      	b.n	8004472 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	609a      	str	r2, [r3, #8]
}
 8004472:	bf00      	nop
 8004474:	3724      	adds	r7, #36	@ 0x24
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	58024400 	.word	0x58024400
 8004484:	03d09000 	.word	0x03d09000
 8004488:	46000000 	.word	0x46000000
 800448c:	4c742400 	.word	0x4c742400
 8004490:	4a742400 	.word	0x4a742400
 8004494:	4bbebc20 	.word	0x4bbebc20

08004498 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044a2:	2300      	movs	r3, #0
 80044a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044a6:	4b53      	ldr	r3, [pc, #332]	@ (80045f4 <RCCEx_PLL2_Config+0x15c>)
 80044a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d101      	bne.n	80044b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e099      	b.n	80045ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80044b6:	4b4f      	ldr	r3, [pc, #316]	@ (80045f4 <RCCEx_PLL2_Config+0x15c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a4e      	ldr	r2, [pc, #312]	@ (80045f4 <RCCEx_PLL2_Config+0x15c>)
 80044bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80044c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c2:	f7fc ff3d 	bl	8001340 <HAL_GetTick>
 80044c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044c8:	e008      	b.n	80044dc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80044ca:	f7fc ff39 	bl	8001340 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e086      	b.n	80045ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044dc:	4b45      	ldr	r3, [pc, #276]	@ (80045f4 <RCCEx_PLL2_Config+0x15c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1f0      	bne.n	80044ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80044e8:	4b42      	ldr	r3, [pc, #264]	@ (80045f4 <RCCEx_PLL2_Config+0x15c>)
 80044ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ec:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	031b      	lsls	r3, r3, #12
 80044f6:	493f      	ldr	r1, [pc, #252]	@ (80045f4 <RCCEx_PLL2_Config+0x15c>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	3b01      	subs	r3, #1
 8004502:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	3b01      	subs	r3, #1
 800450c:	025b      	lsls	r3, r3, #9
 800450e:	b29b      	uxth	r3, r3
 8004510:	431a      	orrs	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	3b01      	subs	r3, #1
 8004518:	041b      	lsls	r3, r3, #16
 800451a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	3b01      	subs	r3, #1
 8004526:	061b      	lsls	r3, r3, #24
 8004528:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800452c:	4931      	ldr	r1, [pc, #196]	@ (80045f4 <RCCEx_PLL2_Config+0x15c>)
 800452e:	4313      	orrs	r3, r2
 8004530:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004532:	4b30      	ldr	r3, [pc, #192]	@ (80045f4 <RCCEx_PLL2_Config+0x15c>)
 8004534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004536:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	492d      	ldr	r1, [pc, #180]	@ (80045f4 <RCCEx_PLL2_Config+0x15c>)
 8004540:	4313      	orrs	r3, r2
 8004542:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004544:	4b2b      	ldr	r3, [pc, #172]	@ (80045f4 <RCCEx_PLL2_Config+0x15c>)
 8004546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004548:	f023 0220 	bic.w	r2, r3, #32
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	4928      	ldr	r1, [pc, #160]	@ (80045f4 <RCCEx_PLL2_Config+0x15c>)
 8004552:	4313      	orrs	r3, r2
 8004554:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004556:	4b27      	ldr	r3, [pc, #156]	@ (80045f4 <RCCEx_PLL2_Config+0x15c>)
 8004558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455a:	4a26      	ldr	r2, [pc, #152]	@ (80045f4 <RCCEx_PLL2_Config+0x15c>)
 800455c:	f023 0310 	bic.w	r3, r3, #16
 8004560:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004562:	4b24      	ldr	r3, [pc, #144]	@ (80045f4 <RCCEx_PLL2_Config+0x15c>)
 8004564:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004566:	4b24      	ldr	r3, [pc, #144]	@ (80045f8 <RCCEx_PLL2_Config+0x160>)
 8004568:	4013      	ands	r3, r2
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	69d2      	ldr	r2, [r2, #28]
 800456e:	00d2      	lsls	r2, r2, #3
 8004570:	4920      	ldr	r1, [pc, #128]	@ (80045f4 <RCCEx_PLL2_Config+0x15c>)
 8004572:	4313      	orrs	r3, r2
 8004574:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004576:	4b1f      	ldr	r3, [pc, #124]	@ (80045f4 <RCCEx_PLL2_Config+0x15c>)
 8004578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457a:	4a1e      	ldr	r2, [pc, #120]	@ (80045f4 <RCCEx_PLL2_Config+0x15c>)
 800457c:	f043 0310 	orr.w	r3, r3, #16
 8004580:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d106      	bne.n	8004596 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004588:	4b1a      	ldr	r3, [pc, #104]	@ (80045f4 <RCCEx_PLL2_Config+0x15c>)
 800458a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458c:	4a19      	ldr	r2, [pc, #100]	@ (80045f4 <RCCEx_PLL2_Config+0x15c>)
 800458e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004592:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004594:	e00f      	b.n	80045b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d106      	bne.n	80045aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800459c:	4b15      	ldr	r3, [pc, #84]	@ (80045f4 <RCCEx_PLL2_Config+0x15c>)
 800459e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a0:	4a14      	ldr	r2, [pc, #80]	@ (80045f4 <RCCEx_PLL2_Config+0x15c>)
 80045a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80045a8:	e005      	b.n	80045b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80045aa:	4b12      	ldr	r3, [pc, #72]	@ (80045f4 <RCCEx_PLL2_Config+0x15c>)
 80045ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ae:	4a11      	ldr	r2, [pc, #68]	@ (80045f4 <RCCEx_PLL2_Config+0x15c>)
 80045b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80045b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80045b6:	4b0f      	ldr	r3, [pc, #60]	@ (80045f4 <RCCEx_PLL2_Config+0x15c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a0e      	ldr	r2, [pc, #56]	@ (80045f4 <RCCEx_PLL2_Config+0x15c>)
 80045bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c2:	f7fc febd 	bl	8001340 <HAL_GetTick>
 80045c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045c8:	e008      	b.n	80045dc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80045ca:	f7fc feb9 	bl	8001340 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d901      	bls.n	80045dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e006      	b.n	80045ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045dc:	4b05      	ldr	r3, [pc, #20]	@ (80045f4 <RCCEx_PLL2_Config+0x15c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d0f0      	beq.n	80045ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	58024400 	.word	0x58024400
 80045f8:	ffff0007 	.word	0xffff0007

080045fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800460a:	4b53      	ldr	r3, [pc, #332]	@ (8004758 <RCCEx_PLL3_Config+0x15c>)
 800460c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800460e:	f003 0303 	and.w	r3, r3, #3
 8004612:	2b03      	cmp	r3, #3
 8004614:	d101      	bne.n	800461a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e099      	b.n	800474e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800461a:	4b4f      	ldr	r3, [pc, #316]	@ (8004758 <RCCEx_PLL3_Config+0x15c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a4e      	ldr	r2, [pc, #312]	@ (8004758 <RCCEx_PLL3_Config+0x15c>)
 8004620:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004624:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004626:	f7fc fe8b 	bl	8001340 <HAL_GetTick>
 800462a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800462c:	e008      	b.n	8004640 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800462e:	f7fc fe87 	bl	8001340 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d901      	bls.n	8004640 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e086      	b.n	800474e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004640:	4b45      	ldr	r3, [pc, #276]	@ (8004758 <RCCEx_PLL3_Config+0x15c>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1f0      	bne.n	800462e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800464c:	4b42      	ldr	r3, [pc, #264]	@ (8004758 <RCCEx_PLL3_Config+0x15c>)
 800464e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004650:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	051b      	lsls	r3, r3, #20
 800465a:	493f      	ldr	r1, [pc, #252]	@ (8004758 <RCCEx_PLL3_Config+0x15c>)
 800465c:	4313      	orrs	r3, r2
 800465e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	3b01      	subs	r3, #1
 8004666:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	3b01      	subs	r3, #1
 8004670:	025b      	lsls	r3, r3, #9
 8004672:	b29b      	uxth	r3, r3
 8004674:	431a      	orrs	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	3b01      	subs	r3, #1
 800467c:	041b      	lsls	r3, r3, #16
 800467e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	3b01      	subs	r3, #1
 800468a:	061b      	lsls	r3, r3, #24
 800468c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004690:	4931      	ldr	r1, [pc, #196]	@ (8004758 <RCCEx_PLL3_Config+0x15c>)
 8004692:	4313      	orrs	r3, r2
 8004694:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004696:	4b30      	ldr	r3, [pc, #192]	@ (8004758 <RCCEx_PLL3_Config+0x15c>)
 8004698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800469a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	492d      	ldr	r1, [pc, #180]	@ (8004758 <RCCEx_PLL3_Config+0x15c>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80046a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004758 <RCCEx_PLL3_Config+0x15c>)
 80046aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	4928      	ldr	r1, [pc, #160]	@ (8004758 <RCCEx_PLL3_Config+0x15c>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80046ba:	4b27      	ldr	r3, [pc, #156]	@ (8004758 <RCCEx_PLL3_Config+0x15c>)
 80046bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046be:	4a26      	ldr	r2, [pc, #152]	@ (8004758 <RCCEx_PLL3_Config+0x15c>)
 80046c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80046c6:	4b24      	ldr	r3, [pc, #144]	@ (8004758 <RCCEx_PLL3_Config+0x15c>)
 80046c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046ca:	4b24      	ldr	r3, [pc, #144]	@ (800475c <RCCEx_PLL3_Config+0x160>)
 80046cc:	4013      	ands	r3, r2
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	69d2      	ldr	r2, [r2, #28]
 80046d2:	00d2      	lsls	r2, r2, #3
 80046d4:	4920      	ldr	r1, [pc, #128]	@ (8004758 <RCCEx_PLL3_Config+0x15c>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80046da:	4b1f      	ldr	r3, [pc, #124]	@ (8004758 <RCCEx_PLL3_Config+0x15c>)
 80046dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046de:	4a1e      	ldr	r2, [pc, #120]	@ (8004758 <RCCEx_PLL3_Config+0x15c>)
 80046e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d106      	bne.n	80046fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80046ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004758 <RCCEx_PLL3_Config+0x15c>)
 80046ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f0:	4a19      	ldr	r2, [pc, #100]	@ (8004758 <RCCEx_PLL3_Config+0x15c>)
 80046f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80046f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80046f8:	e00f      	b.n	800471a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d106      	bne.n	800470e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004700:	4b15      	ldr	r3, [pc, #84]	@ (8004758 <RCCEx_PLL3_Config+0x15c>)
 8004702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004704:	4a14      	ldr	r2, [pc, #80]	@ (8004758 <RCCEx_PLL3_Config+0x15c>)
 8004706:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800470a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800470c:	e005      	b.n	800471a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800470e:	4b12      	ldr	r3, [pc, #72]	@ (8004758 <RCCEx_PLL3_Config+0x15c>)
 8004710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004712:	4a11      	ldr	r2, [pc, #68]	@ (8004758 <RCCEx_PLL3_Config+0x15c>)
 8004714:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004718:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800471a:	4b0f      	ldr	r3, [pc, #60]	@ (8004758 <RCCEx_PLL3_Config+0x15c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a0e      	ldr	r2, [pc, #56]	@ (8004758 <RCCEx_PLL3_Config+0x15c>)
 8004720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004724:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004726:	f7fc fe0b 	bl	8001340 <HAL_GetTick>
 800472a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800472c:	e008      	b.n	8004740 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800472e:	f7fc fe07 	bl	8001340 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d901      	bls.n	8004740 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e006      	b.n	800474e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004740:	4b05      	ldr	r3, [pc, #20]	@ (8004758 <RCCEx_PLL3_Config+0x15c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0f0      	beq.n	800472e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800474c:	7bfb      	ldrb	r3, [r7, #15]
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	58024400 	.word	0x58024400
 800475c:	ffff0007 	.word	0xffff0007

08004760 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e042      	b.n	80047f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004778:	2b00      	cmp	r3, #0
 800477a:	d106      	bne.n	800478a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7fc fa03 	bl	8000b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2224      	movs	r2, #36	@ 0x24
 800478e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0201 	bic.w	r2, r2, #1
 80047a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 fe1e 	bl	80053ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f8b3 	bl	800491c <UART_SetConfig>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d101      	bne.n	80047c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e01b      	b.n	80047f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0201 	orr.w	r2, r2, #1
 80047ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 fe9d 	bl	8005530 <UART_CheckIdleState>
 80047f6:	4603      	mov	r3, r0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3708      	adds	r7, #8
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b08a      	sub	sp, #40	@ 0x28
 8004804:	af02      	add	r7, sp, #8
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	603b      	str	r3, [r7, #0]
 800480c:	4613      	mov	r3, r2
 800480e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004816:	2b20      	cmp	r3, #32
 8004818:	d17b      	bne.n	8004912 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <HAL_UART_Transmit+0x26>
 8004820:	88fb      	ldrh	r3, [r7, #6]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e074      	b.n	8004914 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2221      	movs	r2, #33	@ 0x21
 8004836:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800483a:	f7fc fd81 	bl	8001340 <HAL_GetTick>
 800483e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	88fa      	ldrh	r2, [r7, #6]
 8004844:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	88fa      	ldrh	r2, [r7, #6]
 800484c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004858:	d108      	bne.n	800486c <HAL_UART_Transmit+0x6c>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d104      	bne.n	800486c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004862:	2300      	movs	r3, #0
 8004864:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	61bb      	str	r3, [r7, #24]
 800486a:	e003      	b.n	8004874 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004870:	2300      	movs	r3, #0
 8004872:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004874:	e030      	b.n	80048d8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2200      	movs	r2, #0
 800487e:	2180      	movs	r1, #128	@ 0x80
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f000 feff 	bl	8005684 <UART_WaitOnFlagUntilTimeout>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d005      	beq.n	8004898 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2220      	movs	r2, #32
 8004890:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e03d      	b.n	8004914 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10b      	bne.n	80048b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	881b      	ldrh	r3, [r3, #0]
 80048a2:	461a      	mov	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048ac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	3302      	adds	r3, #2
 80048b2:	61bb      	str	r3, [r7, #24]
 80048b4:	e007      	b.n	80048c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	781a      	ldrb	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	3301      	adds	r3, #1
 80048c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	3b01      	subs	r3, #1
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80048de:	b29b      	uxth	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1c8      	bne.n	8004876 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	2200      	movs	r2, #0
 80048ec:	2140      	movs	r1, #64	@ 0x40
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 fec8 	bl	8005684 <UART_WaitOnFlagUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d005      	beq.n	8004906 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2220      	movs	r2, #32
 80048fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e006      	b.n	8004914 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2220      	movs	r2, #32
 800490a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800490e:	2300      	movs	r3, #0
 8004910:	e000      	b.n	8004914 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004912:	2302      	movs	r3, #2
  }
}
 8004914:	4618      	mov	r0, r3
 8004916:	3720      	adds	r7, #32
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800491c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004920:	b092      	sub	sp, #72	@ 0x48
 8004922:	af00      	add	r7, sp, #0
 8004924:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	431a      	orrs	r2, r3
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	431a      	orrs	r2, r3
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	4313      	orrs	r3, r2
 8004942:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	4bbe      	ldr	r3, [pc, #760]	@ (8004c44 <UART_SetConfig+0x328>)
 800494c:	4013      	ands	r3, r2
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	6812      	ldr	r2, [r2, #0]
 8004952:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004954:	430b      	orrs	r3, r1
 8004956:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4ab3      	ldr	r2, [pc, #716]	@ (8004c48 <UART_SetConfig+0x32c>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d004      	beq.n	8004988 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004984:	4313      	orrs	r3, r2
 8004986:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689a      	ldr	r2, [r3, #8]
 800498e:	4baf      	ldr	r3, [pc, #700]	@ (8004c4c <UART_SetConfig+0x330>)
 8004990:	4013      	ands	r3, r2
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	6812      	ldr	r2, [r2, #0]
 8004996:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004998:	430b      	orrs	r3, r1
 800499a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a2:	f023 010f 	bic.w	r1, r3, #15
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4aa6      	ldr	r2, [pc, #664]	@ (8004c50 <UART_SetConfig+0x334>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d177      	bne.n	8004aac <UART_SetConfig+0x190>
 80049bc:	4ba5      	ldr	r3, [pc, #660]	@ (8004c54 <UART_SetConfig+0x338>)
 80049be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049c4:	2b28      	cmp	r3, #40	@ 0x28
 80049c6:	d86d      	bhi.n	8004aa4 <UART_SetConfig+0x188>
 80049c8:	a201      	add	r2, pc, #4	@ (adr r2, 80049d0 <UART_SetConfig+0xb4>)
 80049ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ce:	bf00      	nop
 80049d0:	08004a75 	.word	0x08004a75
 80049d4:	08004aa5 	.word	0x08004aa5
 80049d8:	08004aa5 	.word	0x08004aa5
 80049dc:	08004aa5 	.word	0x08004aa5
 80049e0:	08004aa5 	.word	0x08004aa5
 80049e4:	08004aa5 	.word	0x08004aa5
 80049e8:	08004aa5 	.word	0x08004aa5
 80049ec:	08004aa5 	.word	0x08004aa5
 80049f0:	08004a7d 	.word	0x08004a7d
 80049f4:	08004aa5 	.word	0x08004aa5
 80049f8:	08004aa5 	.word	0x08004aa5
 80049fc:	08004aa5 	.word	0x08004aa5
 8004a00:	08004aa5 	.word	0x08004aa5
 8004a04:	08004aa5 	.word	0x08004aa5
 8004a08:	08004aa5 	.word	0x08004aa5
 8004a0c:	08004aa5 	.word	0x08004aa5
 8004a10:	08004a85 	.word	0x08004a85
 8004a14:	08004aa5 	.word	0x08004aa5
 8004a18:	08004aa5 	.word	0x08004aa5
 8004a1c:	08004aa5 	.word	0x08004aa5
 8004a20:	08004aa5 	.word	0x08004aa5
 8004a24:	08004aa5 	.word	0x08004aa5
 8004a28:	08004aa5 	.word	0x08004aa5
 8004a2c:	08004aa5 	.word	0x08004aa5
 8004a30:	08004a8d 	.word	0x08004a8d
 8004a34:	08004aa5 	.word	0x08004aa5
 8004a38:	08004aa5 	.word	0x08004aa5
 8004a3c:	08004aa5 	.word	0x08004aa5
 8004a40:	08004aa5 	.word	0x08004aa5
 8004a44:	08004aa5 	.word	0x08004aa5
 8004a48:	08004aa5 	.word	0x08004aa5
 8004a4c:	08004aa5 	.word	0x08004aa5
 8004a50:	08004a95 	.word	0x08004a95
 8004a54:	08004aa5 	.word	0x08004aa5
 8004a58:	08004aa5 	.word	0x08004aa5
 8004a5c:	08004aa5 	.word	0x08004aa5
 8004a60:	08004aa5 	.word	0x08004aa5
 8004a64:	08004aa5 	.word	0x08004aa5
 8004a68:	08004aa5 	.word	0x08004aa5
 8004a6c:	08004aa5 	.word	0x08004aa5
 8004a70:	08004a9d 	.word	0x08004a9d
 8004a74:	2301      	movs	r3, #1
 8004a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a7a:	e222      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004a7c:	2304      	movs	r3, #4
 8004a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a82:	e21e      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004a84:	2308      	movs	r3, #8
 8004a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a8a:	e21a      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004a8c:	2310      	movs	r3, #16
 8004a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a92:	e216      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004a94:	2320      	movs	r3, #32
 8004a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a9a:	e212      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004a9c:	2340      	movs	r3, #64	@ 0x40
 8004a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aa2:	e20e      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004aa4:	2380      	movs	r3, #128	@ 0x80
 8004aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aaa:	e20a      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a69      	ldr	r2, [pc, #420]	@ (8004c58 <UART_SetConfig+0x33c>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d130      	bne.n	8004b18 <UART_SetConfig+0x1fc>
 8004ab6:	4b67      	ldr	r3, [pc, #412]	@ (8004c54 <UART_SetConfig+0x338>)
 8004ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	2b05      	cmp	r3, #5
 8004ac0:	d826      	bhi.n	8004b10 <UART_SetConfig+0x1f4>
 8004ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ac8 <UART_SetConfig+0x1ac>)
 8004ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac8:	08004ae1 	.word	0x08004ae1
 8004acc:	08004ae9 	.word	0x08004ae9
 8004ad0:	08004af1 	.word	0x08004af1
 8004ad4:	08004af9 	.word	0x08004af9
 8004ad8:	08004b01 	.word	0x08004b01
 8004adc:	08004b09 	.word	0x08004b09
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ae6:	e1ec      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004ae8:	2304      	movs	r3, #4
 8004aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aee:	e1e8      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004af0:	2308      	movs	r3, #8
 8004af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004af6:	e1e4      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004af8:	2310      	movs	r3, #16
 8004afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004afe:	e1e0      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004b00:	2320      	movs	r3, #32
 8004b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b06:	e1dc      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004b08:	2340      	movs	r3, #64	@ 0x40
 8004b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b0e:	e1d8      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004b10:	2380      	movs	r3, #128	@ 0x80
 8004b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b16:	e1d4      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a4f      	ldr	r2, [pc, #316]	@ (8004c5c <UART_SetConfig+0x340>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d130      	bne.n	8004b84 <UART_SetConfig+0x268>
 8004b22:	4b4c      	ldr	r3, [pc, #304]	@ (8004c54 <UART_SetConfig+0x338>)
 8004b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	2b05      	cmp	r3, #5
 8004b2c:	d826      	bhi.n	8004b7c <UART_SetConfig+0x260>
 8004b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b34 <UART_SetConfig+0x218>)
 8004b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b34:	08004b4d 	.word	0x08004b4d
 8004b38:	08004b55 	.word	0x08004b55
 8004b3c:	08004b5d 	.word	0x08004b5d
 8004b40:	08004b65 	.word	0x08004b65
 8004b44:	08004b6d 	.word	0x08004b6d
 8004b48:	08004b75 	.word	0x08004b75
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b52:	e1b6      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004b54:	2304      	movs	r3, #4
 8004b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b5a:	e1b2      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004b5c:	2308      	movs	r3, #8
 8004b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b62:	e1ae      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004b64:	2310      	movs	r3, #16
 8004b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b6a:	e1aa      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004b6c:	2320      	movs	r3, #32
 8004b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b72:	e1a6      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004b74:	2340      	movs	r3, #64	@ 0x40
 8004b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b7a:	e1a2      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004b7c:	2380      	movs	r3, #128	@ 0x80
 8004b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b82:	e19e      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a35      	ldr	r2, [pc, #212]	@ (8004c60 <UART_SetConfig+0x344>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d130      	bne.n	8004bf0 <UART_SetConfig+0x2d4>
 8004b8e:	4b31      	ldr	r3, [pc, #196]	@ (8004c54 <UART_SetConfig+0x338>)
 8004b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b92:	f003 0307 	and.w	r3, r3, #7
 8004b96:	2b05      	cmp	r3, #5
 8004b98:	d826      	bhi.n	8004be8 <UART_SetConfig+0x2cc>
 8004b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8004ba0 <UART_SetConfig+0x284>)
 8004b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba0:	08004bb9 	.word	0x08004bb9
 8004ba4:	08004bc1 	.word	0x08004bc1
 8004ba8:	08004bc9 	.word	0x08004bc9
 8004bac:	08004bd1 	.word	0x08004bd1
 8004bb0:	08004bd9 	.word	0x08004bd9
 8004bb4:	08004be1 	.word	0x08004be1
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bbe:	e180      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004bc0:	2304      	movs	r3, #4
 8004bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bc6:	e17c      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004bc8:	2308      	movs	r3, #8
 8004bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bce:	e178      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004bd0:	2310      	movs	r3, #16
 8004bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bd6:	e174      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004bd8:	2320      	movs	r3, #32
 8004bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bde:	e170      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004be0:	2340      	movs	r3, #64	@ 0x40
 8004be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004be6:	e16c      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004be8:	2380      	movs	r3, #128	@ 0x80
 8004bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bee:	e168      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a1b      	ldr	r2, [pc, #108]	@ (8004c64 <UART_SetConfig+0x348>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d142      	bne.n	8004c80 <UART_SetConfig+0x364>
 8004bfa:	4b16      	ldr	r3, [pc, #88]	@ (8004c54 <UART_SetConfig+0x338>)
 8004bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	2b05      	cmp	r3, #5
 8004c04:	d838      	bhi.n	8004c78 <UART_SetConfig+0x35c>
 8004c06:	a201      	add	r2, pc, #4	@ (adr r2, 8004c0c <UART_SetConfig+0x2f0>)
 8004c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0c:	08004c25 	.word	0x08004c25
 8004c10:	08004c2d 	.word	0x08004c2d
 8004c14:	08004c35 	.word	0x08004c35
 8004c18:	08004c3d 	.word	0x08004c3d
 8004c1c:	08004c69 	.word	0x08004c69
 8004c20:	08004c71 	.word	0x08004c71
 8004c24:	2300      	movs	r3, #0
 8004c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c2a:	e14a      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004c2c:	2304      	movs	r3, #4
 8004c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c32:	e146      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004c34:	2308      	movs	r3, #8
 8004c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c3a:	e142      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004c3c:	2310      	movs	r3, #16
 8004c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c42:	e13e      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004c44:	cfff69f3 	.word	0xcfff69f3
 8004c48:	58000c00 	.word	0x58000c00
 8004c4c:	11fff4ff 	.word	0x11fff4ff
 8004c50:	40011000 	.word	0x40011000
 8004c54:	58024400 	.word	0x58024400
 8004c58:	40004400 	.word	0x40004400
 8004c5c:	40004800 	.word	0x40004800
 8004c60:	40004c00 	.word	0x40004c00
 8004c64:	40005000 	.word	0x40005000
 8004c68:	2320      	movs	r3, #32
 8004c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c6e:	e128      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004c70:	2340      	movs	r3, #64	@ 0x40
 8004c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c76:	e124      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004c78:	2380      	movs	r3, #128	@ 0x80
 8004c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c7e:	e120      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4acb      	ldr	r2, [pc, #812]	@ (8004fb4 <UART_SetConfig+0x698>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d176      	bne.n	8004d78 <UART_SetConfig+0x45c>
 8004c8a:	4bcb      	ldr	r3, [pc, #812]	@ (8004fb8 <UART_SetConfig+0x69c>)
 8004c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c92:	2b28      	cmp	r3, #40	@ 0x28
 8004c94:	d86c      	bhi.n	8004d70 <UART_SetConfig+0x454>
 8004c96:	a201      	add	r2, pc, #4	@ (adr r2, 8004c9c <UART_SetConfig+0x380>)
 8004c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9c:	08004d41 	.word	0x08004d41
 8004ca0:	08004d71 	.word	0x08004d71
 8004ca4:	08004d71 	.word	0x08004d71
 8004ca8:	08004d71 	.word	0x08004d71
 8004cac:	08004d71 	.word	0x08004d71
 8004cb0:	08004d71 	.word	0x08004d71
 8004cb4:	08004d71 	.word	0x08004d71
 8004cb8:	08004d71 	.word	0x08004d71
 8004cbc:	08004d49 	.word	0x08004d49
 8004cc0:	08004d71 	.word	0x08004d71
 8004cc4:	08004d71 	.word	0x08004d71
 8004cc8:	08004d71 	.word	0x08004d71
 8004ccc:	08004d71 	.word	0x08004d71
 8004cd0:	08004d71 	.word	0x08004d71
 8004cd4:	08004d71 	.word	0x08004d71
 8004cd8:	08004d71 	.word	0x08004d71
 8004cdc:	08004d51 	.word	0x08004d51
 8004ce0:	08004d71 	.word	0x08004d71
 8004ce4:	08004d71 	.word	0x08004d71
 8004ce8:	08004d71 	.word	0x08004d71
 8004cec:	08004d71 	.word	0x08004d71
 8004cf0:	08004d71 	.word	0x08004d71
 8004cf4:	08004d71 	.word	0x08004d71
 8004cf8:	08004d71 	.word	0x08004d71
 8004cfc:	08004d59 	.word	0x08004d59
 8004d00:	08004d71 	.word	0x08004d71
 8004d04:	08004d71 	.word	0x08004d71
 8004d08:	08004d71 	.word	0x08004d71
 8004d0c:	08004d71 	.word	0x08004d71
 8004d10:	08004d71 	.word	0x08004d71
 8004d14:	08004d71 	.word	0x08004d71
 8004d18:	08004d71 	.word	0x08004d71
 8004d1c:	08004d61 	.word	0x08004d61
 8004d20:	08004d71 	.word	0x08004d71
 8004d24:	08004d71 	.word	0x08004d71
 8004d28:	08004d71 	.word	0x08004d71
 8004d2c:	08004d71 	.word	0x08004d71
 8004d30:	08004d71 	.word	0x08004d71
 8004d34:	08004d71 	.word	0x08004d71
 8004d38:	08004d71 	.word	0x08004d71
 8004d3c:	08004d69 	.word	0x08004d69
 8004d40:	2301      	movs	r3, #1
 8004d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d46:	e0bc      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004d48:	2304      	movs	r3, #4
 8004d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d4e:	e0b8      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004d50:	2308      	movs	r3, #8
 8004d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d56:	e0b4      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004d58:	2310      	movs	r3, #16
 8004d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d5e:	e0b0      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004d60:	2320      	movs	r3, #32
 8004d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d66:	e0ac      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004d68:	2340      	movs	r3, #64	@ 0x40
 8004d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d6e:	e0a8      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004d70:	2380      	movs	r3, #128	@ 0x80
 8004d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d76:	e0a4      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a8f      	ldr	r2, [pc, #572]	@ (8004fbc <UART_SetConfig+0x6a0>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d130      	bne.n	8004de4 <UART_SetConfig+0x4c8>
 8004d82:	4b8d      	ldr	r3, [pc, #564]	@ (8004fb8 <UART_SetConfig+0x69c>)
 8004d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	2b05      	cmp	r3, #5
 8004d8c:	d826      	bhi.n	8004ddc <UART_SetConfig+0x4c0>
 8004d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d94 <UART_SetConfig+0x478>)
 8004d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d94:	08004dad 	.word	0x08004dad
 8004d98:	08004db5 	.word	0x08004db5
 8004d9c:	08004dbd 	.word	0x08004dbd
 8004da0:	08004dc5 	.word	0x08004dc5
 8004da4:	08004dcd 	.word	0x08004dcd
 8004da8:	08004dd5 	.word	0x08004dd5
 8004dac:	2300      	movs	r3, #0
 8004dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004db2:	e086      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004db4:	2304      	movs	r3, #4
 8004db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dba:	e082      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004dbc:	2308      	movs	r3, #8
 8004dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dc2:	e07e      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004dc4:	2310      	movs	r3, #16
 8004dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dca:	e07a      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004dcc:	2320      	movs	r3, #32
 8004dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dd2:	e076      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004dd4:	2340      	movs	r3, #64	@ 0x40
 8004dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dda:	e072      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004ddc:	2380      	movs	r3, #128	@ 0x80
 8004dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004de2:	e06e      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a75      	ldr	r2, [pc, #468]	@ (8004fc0 <UART_SetConfig+0x6a4>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d130      	bne.n	8004e50 <UART_SetConfig+0x534>
 8004dee:	4b72      	ldr	r3, [pc, #456]	@ (8004fb8 <UART_SetConfig+0x69c>)
 8004df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	2b05      	cmp	r3, #5
 8004df8:	d826      	bhi.n	8004e48 <UART_SetConfig+0x52c>
 8004dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8004e00 <UART_SetConfig+0x4e4>)
 8004dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e00:	08004e19 	.word	0x08004e19
 8004e04:	08004e21 	.word	0x08004e21
 8004e08:	08004e29 	.word	0x08004e29
 8004e0c:	08004e31 	.word	0x08004e31
 8004e10:	08004e39 	.word	0x08004e39
 8004e14:	08004e41 	.word	0x08004e41
 8004e18:	2300      	movs	r3, #0
 8004e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e1e:	e050      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004e20:	2304      	movs	r3, #4
 8004e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e26:	e04c      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004e28:	2308      	movs	r3, #8
 8004e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e2e:	e048      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004e30:	2310      	movs	r3, #16
 8004e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e36:	e044      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004e38:	2320      	movs	r3, #32
 8004e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e3e:	e040      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004e40:	2340      	movs	r3, #64	@ 0x40
 8004e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e46:	e03c      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004e48:	2380      	movs	r3, #128	@ 0x80
 8004e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e4e:	e038      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a5b      	ldr	r2, [pc, #364]	@ (8004fc4 <UART_SetConfig+0x6a8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d130      	bne.n	8004ebc <UART_SetConfig+0x5a0>
 8004e5a:	4b57      	ldr	r3, [pc, #348]	@ (8004fb8 <UART_SetConfig+0x69c>)
 8004e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e5e:	f003 0307 	and.w	r3, r3, #7
 8004e62:	2b05      	cmp	r3, #5
 8004e64:	d826      	bhi.n	8004eb4 <UART_SetConfig+0x598>
 8004e66:	a201      	add	r2, pc, #4	@ (adr r2, 8004e6c <UART_SetConfig+0x550>)
 8004e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6c:	08004e85 	.word	0x08004e85
 8004e70:	08004e8d 	.word	0x08004e8d
 8004e74:	08004e95 	.word	0x08004e95
 8004e78:	08004e9d 	.word	0x08004e9d
 8004e7c:	08004ea5 	.word	0x08004ea5
 8004e80:	08004ead 	.word	0x08004ead
 8004e84:	2302      	movs	r3, #2
 8004e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e8a:	e01a      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004e8c:	2304      	movs	r3, #4
 8004e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e92:	e016      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004e94:	2308      	movs	r3, #8
 8004e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e9a:	e012      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004e9c:	2310      	movs	r3, #16
 8004e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ea2:	e00e      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004ea4:	2320      	movs	r3, #32
 8004ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eaa:	e00a      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004eac:	2340      	movs	r3, #64	@ 0x40
 8004eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eb2:	e006      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004eb4:	2380      	movs	r3, #128	@ 0x80
 8004eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eba:	e002      	b.n	8004ec2 <UART_SetConfig+0x5a6>
 8004ebc:	2380      	movs	r3, #128	@ 0x80
 8004ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a3f      	ldr	r2, [pc, #252]	@ (8004fc4 <UART_SetConfig+0x6a8>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	f040 80f8 	bne.w	80050be <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ece:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004ed2:	2b20      	cmp	r3, #32
 8004ed4:	dc46      	bgt.n	8004f64 <UART_SetConfig+0x648>
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	f2c0 8082 	blt.w	8004fe0 <UART_SetConfig+0x6c4>
 8004edc:	3b02      	subs	r3, #2
 8004ede:	2b1e      	cmp	r3, #30
 8004ee0:	d87e      	bhi.n	8004fe0 <UART_SetConfig+0x6c4>
 8004ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ee8 <UART_SetConfig+0x5cc>)
 8004ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee8:	08004f6b 	.word	0x08004f6b
 8004eec:	08004fe1 	.word	0x08004fe1
 8004ef0:	08004f73 	.word	0x08004f73
 8004ef4:	08004fe1 	.word	0x08004fe1
 8004ef8:	08004fe1 	.word	0x08004fe1
 8004efc:	08004fe1 	.word	0x08004fe1
 8004f00:	08004f83 	.word	0x08004f83
 8004f04:	08004fe1 	.word	0x08004fe1
 8004f08:	08004fe1 	.word	0x08004fe1
 8004f0c:	08004fe1 	.word	0x08004fe1
 8004f10:	08004fe1 	.word	0x08004fe1
 8004f14:	08004fe1 	.word	0x08004fe1
 8004f18:	08004fe1 	.word	0x08004fe1
 8004f1c:	08004fe1 	.word	0x08004fe1
 8004f20:	08004f93 	.word	0x08004f93
 8004f24:	08004fe1 	.word	0x08004fe1
 8004f28:	08004fe1 	.word	0x08004fe1
 8004f2c:	08004fe1 	.word	0x08004fe1
 8004f30:	08004fe1 	.word	0x08004fe1
 8004f34:	08004fe1 	.word	0x08004fe1
 8004f38:	08004fe1 	.word	0x08004fe1
 8004f3c:	08004fe1 	.word	0x08004fe1
 8004f40:	08004fe1 	.word	0x08004fe1
 8004f44:	08004fe1 	.word	0x08004fe1
 8004f48:	08004fe1 	.word	0x08004fe1
 8004f4c:	08004fe1 	.word	0x08004fe1
 8004f50:	08004fe1 	.word	0x08004fe1
 8004f54:	08004fe1 	.word	0x08004fe1
 8004f58:	08004fe1 	.word	0x08004fe1
 8004f5c:	08004fe1 	.word	0x08004fe1
 8004f60:	08004fd3 	.word	0x08004fd3
 8004f64:	2b40      	cmp	r3, #64	@ 0x40
 8004f66:	d037      	beq.n	8004fd8 <UART_SetConfig+0x6bc>
 8004f68:	e03a      	b.n	8004fe0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004f6a:	f7fe ffd7 	bl	8003f1c <HAL_RCCEx_GetD3PCLK1Freq>
 8004f6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004f70:	e03c      	b.n	8004fec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7fe ffe6 	bl	8003f48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f80:	e034      	b.n	8004fec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f82:	f107 0318 	add.w	r3, r7, #24
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7ff f932 	bl	80041f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f90:	e02c      	b.n	8004fec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f92:	4b09      	ldr	r3, [pc, #36]	@ (8004fb8 <UART_SetConfig+0x69c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0320 	and.w	r3, r3, #32
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d016      	beq.n	8004fcc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004f9e:	4b06      	ldr	r3, [pc, #24]	@ (8004fb8 <UART_SetConfig+0x69c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	08db      	lsrs	r3, r3, #3
 8004fa4:	f003 0303 	and.w	r3, r3, #3
 8004fa8:	4a07      	ldr	r2, [pc, #28]	@ (8004fc8 <UART_SetConfig+0x6ac>)
 8004faa:	fa22 f303 	lsr.w	r3, r2, r3
 8004fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004fb0:	e01c      	b.n	8004fec <UART_SetConfig+0x6d0>
 8004fb2:	bf00      	nop
 8004fb4:	40011400 	.word	0x40011400
 8004fb8:	58024400 	.word	0x58024400
 8004fbc:	40007800 	.word	0x40007800
 8004fc0:	40007c00 	.word	0x40007c00
 8004fc4:	58000c00 	.word	0x58000c00
 8004fc8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004fcc:	4b9d      	ldr	r3, [pc, #628]	@ (8005244 <UART_SetConfig+0x928>)
 8004fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fd0:	e00c      	b.n	8004fec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004fd2:	4b9d      	ldr	r3, [pc, #628]	@ (8005248 <UART_SetConfig+0x92c>)
 8004fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fd6:	e009      	b.n	8004fec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fde:	e005      	b.n	8004fec <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004fea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004fec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 81de 	beq.w	80053b0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff8:	4a94      	ldr	r2, [pc, #592]	@ (800524c <UART_SetConfig+0x930>)
 8004ffa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ffe:	461a      	mov	r2, r3
 8005000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005002:	fbb3 f3f2 	udiv	r3, r3, r2
 8005006:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	4613      	mov	r3, r2
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	4413      	add	r3, r2
 8005012:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005014:	429a      	cmp	r2, r3
 8005016:	d305      	bcc.n	8005024 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800501e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005020:	429a      	cmp	r2, r3
 8005022:	d903      	bls.n	800502c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800502a:	e1c1      	b.n	80053b0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800502c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800502e:	2200      	movs	r2, #0
 8005030:	60bb      	str	r3, [r7, #8]
 8005032:	60fa      	str	r2, [r7, #12]
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005038:	4a84      	ldr	r2, [pc, #528]	@ (800524c <UART_SetConfig+0x930>)
 800503a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800503e:	b29b      	uxth	r3, r3
 8005040:	2200      	movs	r2, #0
 8005042:	603b      	str	r3, [r7, #0]
 8005044:	607a      	str	r2, [r7, #4]
 8005046:	e9d7 2300 	ldrd	r2, r3, [r7]
 800504a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800504e:	f7fb f943 	bl	80002d8 <__aeabi_uldivmod>
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	4610      	mov	r0, r2
 8005058:	4619      	mov	r1, r3
 800505a:	f04f 0200 	mov.w	r2, #0
 800505e:	f04f 0300 	mov.w	r3, #0
 8005062:	020b      	lsls	r3, r1, #8
 8005064:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005068:	0202      	lsls	r2, r0, #8
 800506a:	6979      	ldr	r1, [r7, #20]
 800506c:	6849      	ldr	r1, [r1, #4]
 800506e:	0849      	lsrs	r1, r1, #1
 8005070:	2000      	movs	r0, #0
 8005072:	460c      	mov	r4, r1
 8005074:	4605      	mov	r5, r0
 8005076:	eb12 0804 	adds.w	r8, r2, r4
 800507a:	eb43 0905 	adc.w	r9, r3, r5
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	469a      	mov	sl, r3
 8005086:	4693      	mov	fp, r2
 8005088:	4652      	mov	r2, sl
 800508a:	465b      	mov	r3, fp
 800508c:	4640      	mov	r0, r8
 800508e:	4649      	mov	r1, r9
 8005090:	f7fb f922 	bl	80002d8 <__aeabi_uldivmod>
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	4613      	mov	r3, r2
 800509a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800509c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800509e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050a2:	d308      	bcc.n	80050b6 <UART_SetConfig+0x79a>
 80050a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050aa:	d204      	bcs.n	80050b6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80050b2:	60da      	str	r2, [r3, #12]
 80050b4:	e17c      	b.n	80053b0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80050bc:	e178      	b.n	80053b0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050c6:	f040 80c5 	bne.w	8005254 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80050ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80050ce:	2b20      	cmp	r3, #32
 80050d0:	dc48      	bgt.n	8005164 <UART_SetConfig+0x848>
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	db7b      	blt.n	80051ce <UART_SetConfig+0x8b2>
 80050d6:	2b20      	cmp	r3, #32
 80050d8:	d879      	bhi.n	80051ce <UART_SetConfig+0x8b2>
 80050da:	a201      	add	r2, pc, #4	@ (adr r2, 80050e0 <UART_SetConfig+0x7c4>)
 80050dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e0:	0800516b 	.word	0x0800516b
 80050e4:	08005173 	.word	0x08005173
 80050e8:	080051cf 	.word	0x080051cf
 80050ec:	080051cf 	.word	0x080051cf
 80050f0:	0800517b 	.word	0x0800517b
 80050f4:	080051cf 	.word	0x080051cf
 80050f8:	080051cf 	.word	0x080051cf
 80050fc:	080051cf 	.word	0x080051cf
 8005100:	0800518b 	.word	0x0800518b
 8005104:	080051cf 	.word	0x080051cf
 8005108:	080051cf 	.word	0x080051cf
 800510c:	080051cf 	.word	0x080051cf
 8005110:	080051cf 	.word	0x080051cf
 8005114:	080051cf 	.word	0x080051cf
 8005118:	080051cf 	.word	0x080051cf
 800511c:	080051cf 	.word	0x080051cf
 8005120:	0800519b 	.word	0x0800519b
 8005124:	080051cf 	.word	0x080051cf
 8005128:	080051cf 	.word	0x080051cf
 800512c:	080051cf 	.word	0x080051cf
 8005130:	080051cf 	.word	0x080051cf
 8005134:	080051cf 	.word	0x080051cf
 8005138:	080051cf 	.word	0x080051cf
 800513c:	080051cf 	.word	0x080051cf
 8005140:	080051cf 	.word	0x080051cf
 8005144:	080051cf 	.word	0x080051cf
 8005148:	080051cf 	.word	0x080051cf
 800514c:	080051cf 	.word	0x080051cf
 8005150:	080051cf 	.word	0x080051cf
 8005154:	080051cf 	.word	0x080051cf
 8005158:	080051cf 	.word	0x080051cf
 800515c:	080051cf 	.word	0x080051cf
 8005160:	080051c1 	.word	0x080051c1
 8005164:	2b40      	cmp	r3, #64	@ 0x40
 8005166:	d02e      	beq.n	80051c6 <UART_SetConfig+0x8aa>
 8005168:	e031      	b.n	80051ce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800516a:	f7fd fca1 	bl	8002ab0 <HAL_RCC_GetPCLK1Freq>
 800516e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005170:	e033      	b.n	80051da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005172:	f7fd fcb3 	bl	8002adc <HAL_RCC_GetPCLK2Freq>
 8005176:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005178:	e02f      	b.n	80051da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800517a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800517e:	4618      	mov	r0, r3
 8005180:	f7fe fee2 	bl	8003f48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005188:	e027      	b.n	80051da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800518a:	f107 0318 	add.w	r3, r7, #24
 800518e:	4618      	mov	r0, r3
 8005190:	f7ff f82e 	bl	80041f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005198:	e01f      	b.n	80051da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800519a:	4b2d      	ldr	r3, [pc, #180]	@ (8005250 <UART_SetConfig+0x934>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d009      	beq.n	80051ba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80051a6:	4b2a      	ldr	r3, [pc, #168]	@ (8005250 <UART_SetConfig+0x934>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	08db      	lsrs	r3, r3, #3
 80051ac:	f003 0303 	and.w	r3, r3, #3
 80051b0:	4a24      	ldr	r2, [pc, #144]	@ (8005244 <UART_SetConfig+0x928>)
 80051b2:	fa22 f303 	lsr.w	r3, r2, r3
 80051b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80051b8:	e00f      	b.n	80051da <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80051ba:	4b22      	ldr	r3, [pc, #136]	@ (8005244 <UART_SetConfig+0x928>)
 80051bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051be:	e00c      	b.n	80051da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80051c0:	4b21      	ldr	r3, [pc, #132]	@ (8005248 <UART_SetConfig+0x92c>)
 80051c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051c4:	e009      	b.n	80051da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051cc:	e005      	b.n	80051da <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80051d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 80e7 	beq.w	80053b0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e6:	4a19      	ldr	r2, [pc, #100]	@ (800524c <UART_SetConfig+0x930>)
 80051e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051ec:	461a      	mov	r2, r3
 80051ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80051f4:	005a      	lsls	r2, r3, #1
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	085b      	lsrs	r3, r3, #1
 80051fc:	441a      	add	r2, r3
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	fbb2 f3f3 	udiv	r3, r2, r3
 8005206:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800520a:	2b0f      	cmp	r3, #15
 800520c:	d916      	bls.n	800523c <UART_SetConfig+0x920>
 800520e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005214:	d212      	bcs.n	800523c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005218:	b29b      	uxth	r3, r3
 800521a:	f023 030f 	bic.w	r3, r3, #15
 800521e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005222:	085b      	lsrs	r3, r3, #1
 8005224:	b29b      	uxth	r3, r3
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	b29a      	uxth	r2, r3
 800522c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800522e:	4313      	orrs	r3, r2
 8005230:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005238:	60da      	str	r2, [r3, #12]
 800523a:	e0b9      	b.n	80053b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005242:	e0b5      	b.n	80053b0 <UART_SetConfig+0xa94>
 8005244:	03d09000 	.word	0x03d09000
 8005248:	003d0900 	.word	0x003d0900
 800524c:	080063dc 	.word	0x080063dc
 8005250:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005254:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005258:	2b20      	cmp	r3, #32
 800525a:	dc49      	bgt.n	80052f0 <UART_SetConfig+0x9d4>
 800525c:	2b00      	cmp	r3, #0
 800525e:	db7c      	blt.n	800535a <UART_SetConfig+0xa3e>
 8005260:	2b20      	cmp	r3, #32
 8005262:	d87a      	bhi.n	800535a <UART_SetConfig+0xa3e>
 8005264:	a201      	add	r2, pc, #4	@ (adr r2, 800526c <UART_SetConfig+0x950>)
 8005266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526a:	bf00      	nop
 800526c:	080052f7 	.word	0x080052f7
 8005270:	080052ff 	.word	0x080052ff
 8005274:	0800535b 	.word	0x0800535b
 8005278:	0800535b 	.word	0x0800535b
 800527c:	08005307 	.word	0x08005307
 8005280:	0800535b 	.word	0x0800535b
 8005284:	0800535b 	.word	0x0800535b
 8005288:	0800535b 	.word	0x0800535b
 800528c:	08005317 	.word	0x08005317
 8005290:	0800535b 	.word	0x0800535b
 8005294:	0800535b 	.word	0x0800535b
 8005298:	0800535b 	.word	0x0800535b
 800529c:	0800535b 	.word	0x0800535b
 80052a0:	0800535b 	.word	0x0800535b
 80052a4:	0800535b 	.word	0x0800535b
 80052a8:	0800535b 	.word	0x0800535b
 80052ac:	08005327 	.word	0x08005327
 80052b0:	0800535b 	.word	0x0800535b
 80052b4:	0800535b 	.word	0x0800535b
 80052b8:	0800535b 	.word	0x0800535b
 80052bc:	0800535b 	.word	0x0800535b
 80052c0:	0800535b 	.word	0x0800535b
 80052c4:	0800535b 	.word	0x0800535b
 80052c8:	0800535b 	.word	0x0800535b
 80052cc:	0800535b 	.word	0x0800535b
 80052d0:	0800535b 	.word	0x0800535b
 80052d4:	0800535b 	.word	0x0800535b
 80052d8:	0800535b 	.word	0x0800535b
 80052dc:	0800535b 	.word	0x0800535b
 80052e0:	0800535b 	.word	0x0800535b
 80052e4:	0800535b 	.word	0x0800535b
 80052e8:	0800535b 	.word	0x0800535b
 80052ec:	0800534d 	.word	0x0800534d
 80052f0:	2b40      	cmp	r3, #64	@ 0x40
 80052f2:	d02e      	beq.n	8005352 <UART_SetConfig+0xa36>
 80052f4:	e031      	b.n	800535a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052f6:	f7fd fbdb 	bl	8002ab0 <HAL_RCC_GetPCLK1Freq>
 80052fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80052fc:	e033      	b.n	8005366 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052fe:	f7fd fbed 	bl	8002adc <HAL_RCC_GetPCLK2Freq>
 8005302:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005304:	e02f      	b.n	8005366 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005306:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800530a:	4618      	mov	r0, r3
 800530c:	f7fe fe1c 	bl	8003f48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005314:	e027      	b.n	8005366 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005316:	f107 0318 	add.w	r3, r7, #24
 800531a:	4618      	mov	r0, r3
 800531c:	f7fe ff68 	bl	80041f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005324:	e01f      	b.n	8005366 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005326:	4b2d      	ldr	r3, [pc, #180]	@ (80053dc <UART_SetConfig+0xac0>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0320 	and.w	r3, r3, #32
 800532e:	2b00      	cmp	r3, #0
 8005330:	d009      	beq.n	8005346 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005332:	4b2a      	ldr	r3, [pc, #168]	@ (80053dc <UART_SetConfig+0xac0>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	08db      	lsrs	r3, r3, #3
 8005338:	f003 0303 	and.w	r3, r3, #3
 800533c:	4a28      	ldr	r2, [pc, #160]	@ (80053e0 <UART_SetConfig+0xac4>)
 800533e:	fa22 f303 	lsr.w	r3, r2, r3
 8005342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005344:	e00f      	b.n	8005366 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005346:	4b26      	ldr	r3, [pc, #152]	@ (80053e0 <UART_SetConfig+0xac4>)
 8005348:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800534a:	e00c      	b.n	8005366 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800534c:	4b25      	ldr	r3, [pc, #148]	@ (80053e4 <UART_SetConfig+0xac8>)
 800534e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005350:	e009      	b.n	8005366 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005352:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005358:	e005      	b.n	8005366 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005364:	bf00      	nop
    }

    if (pclk != 0U)
 8005366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005368:	2b00      	cmp	r3, #0
 800536a:	d021      	beq.n	80053b0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005370:	4a1d      	ldr	r2, [pc, #116]	@ (80053e8 <UART_SetConfig+0xacc>)
 8005372:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005376:	461a      	mov	r2, r3
 8005378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800537a:	fbb3 f2f2 	udiv	r2, r3, r2
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	085b      	lsrs	r3, r3, #1
 8005384:	441a      	add	r2, r3
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	fbb2 f3f3 	udiv	r3, r2, r3
 800538e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005392:	2b0f      	cmp	r3, #15
 8005394:	d909      	bls.n	80053aa <UART_SetConfig+0xa8e>
 8005396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800539c:	d205      	bcs.n	80053aa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800539e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	60da      	str	r2, [r3, #12]
 80053a8:	e002      	b.n	80053b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	2200      	movs	r2, #0
 80053c4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2200      	movs	r2, #0
 80053ca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80053cc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3748      	adds	r7, #72	@ 0x48
 80053d4:	46bd      	mov	sp, r7
 80053d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053da:	bf00      	nop
 80053dc:	58024400 	.word	0x58024400
 80053e0:	03d09000 	.word	0x03d09000
 80053e4:	003d0900 	.word	0x003d0900
 80053e8:	080063dc 	.word	0x080063dc

080053ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f8:	f003 0308 	and.w	r3, r3, #8
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00a      	beq.n	8005416 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	430a      	orrs	r2, r1
 8005414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00a      	beq.n	8005438 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	430a      	orrs	r2, r1
 8005436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00a      	beq.n	800545a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800545e:	f003 0304 	and.w	r3, r3, #4
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00a      	beq.n	800547c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	430a      	orrs	r2, r1
 800547a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005480:	f003 0310 	and.w	r3, r3, #16
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00a      	beq.n	800549e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a2:	f003 0320 	and.w	r3, r3, #32
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00a      	beq.n	80054c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d01a      	beq.n	8005502 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	430a      	orrs	r2, r1
 80054e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054ea:	d10a      	bne.n	8005502 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00a      	beq.n	8005524 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	430a      	orrs	r2, r1
 8005522:	605a      	str	r2, [r3, #4]
  }
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b098      	sub	sp, #96	@ 0x60
 8005534:	af02      	add	r7, sp, #8
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005540:	f7fb fefe 	bl	8001340 <HAL_GetTick>
 8005544:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0308 	and.w	r3, r3, #8
 8005550:	2b08      	cmp	r3, #8
 8005552:	d12f      	bne.n	80055b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005554:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800555c:	2200      	movs	r2, #0
 800555e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f88e 	bl	8005684 <UART_WaitOnFlagUntilTimeout>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d022      	beq.n	80055b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005576:	e853 3f00 	ldrex	r3, [r3]
 800557a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800557c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800557e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005582:	653b      	str	r3, [r7, #80]	@ 0x50
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	461a      	mov	r2, r3
 800558a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800558c:	647b      	str	r3, [r7, #68]	@ 0x44
 800558e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005590:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005592:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005594:	e841 2300 	strex	r3, r2, [r1]
 8005598:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800559a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1e6      	bne.n	800556e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2220      	movs	r2, #32
 80055a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e063      	b.n	800567c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0304 	and.w	r3, r3, #4
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d149      	bne.n	8005656 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055ca:	2200      	movs	r2, #0
 80055cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 f857 	bl	8005684 <UART_WaitOnFlagUntilTimeout>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d03c      	beq.n	8005656 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e4:	e853 3f00 	ldrex	r3, [r3]
 80055e8:	623b      	str	r3, [r7, #32]
   return(result);
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	461a      	mov	r2, r3
 80055f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80055fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005600:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005602:	e841 2300 	strex	r3, r2, [r1]
 8005606:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1e6      	bne.n	80055dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3308      	adds	r3, #8
 8005614:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	e853 3f00 	ldrex	r3, [r3]
 800561c:	60fb      	str	r3, [r7, #12]
   return(result);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f023 0301 	bic.w	r3, r3, #1
 8005624:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	3308      	adds	r3, #8
 800562c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800562e:	61fa      	str	r2, [r7, #28]
 8005630:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005632:	69b9      	ldr	r1, [r7, #24]
 8005634:	69fa      	ldr	r2, [r7, #28]
 8005636:	e841 2300 	strex	r3, r2, [r1]
 800563a:	617b      	str	r3, [r7, #20]
   return(result);
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1e5      	bne.n	800560e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2220      	movs	r2, #32
 8005646:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e012      	b.n	800567c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2220      	movs	r2, #32
 800565a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2220      	movs	r2, #32
 8005662:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3758      	adds	r7, #88	@ 0x58
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	603b      	str	r3, [r7, #0]
 8005690:	4613      	mov	r3, r2
 8005692:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005694:	e04f      	b.n	8005736 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800569c:	d04b      	beq.n	8005736 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800569e:	f7fb fe4f 	bl	8001340 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d302      	bcc.n	80056b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e04e      	b.n	8005756 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0304 	and.w	r3, r3, #4
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d037      	beq.n	8005736 <UART_WaitOnFlagUntilTimeout+0xb2>
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2b80      	cmp	r3, #128	@ 0x80
 80056ca:	d034      	beq.n	8005736 <UART_WaitOnFlagUntilTimeout+0xb2>
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2b40      	cmp	r3, #64	@ 0x40
 80056d0:	d031      	beq.n	8005736 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	69db      	ldr	r3, [r3, #28]
 80056d8:	f003 0308 	and.w	r3, r3, #8
 80056dc:	2b08      	cmp	r3, #8
 80056de:	d110      	bne.n	8005702 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2208      	movs	r2, #8
 80056e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f000 f839 	bl	8005760 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2208      	movs	r2, #8
 80056f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e029      	b.n	8005756 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800570c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005710:	d111      	bne.n	8005736 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800571a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 f81f 	bl	8005760 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2220      	movs	r2, #32
 8005726:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e00f      	b.n	8005756 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	69da      	ldr	r2, [r3, #28]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	4013      	ands	r3, r2
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	429a      	cmp	r2, r3
 8005744:	bf0c      	ite	eq
 8005746:	2301      	moveq	r3, #1
 8005748:	2300      	movne	r3, #0
 800574a:	b2db      	uxtb	r3, r3
 800574c:	461a      	mov	r2, r3
 800574e:	79fb      	ldrb	r3, [r7, #7]
 8005750:	429a      	cmp	r2, r3
 8005752:	d0a0      	beq.n	8005696 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
	...

08005760 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005760:	b480      	push	{r7}
 8005762:	b095      	sub	sp, #84	@ 0x54
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005770:	e853 3f00 	ldrex	r3, [r3]
 8005774:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005778:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800577c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	461a      	mov	r2, r3
 8005784:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005786:	643b      	str	r3, [r7, #64]	@ 0x40
 8005788:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800578c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800578e:	e841 2300 	strex	r3, r2, [r1]
 8005792:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1e6      	bne.n	8005768 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3308      	adds	r3, #8
 80057a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	e853 3f00 	ldrex	r3, [r3]
 80057a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80057aa:	69fa      	ldr	r2, [r7, #28]
 80057ac:	4b1e      	ldr	r3, [pc, #120]	@ (8005828 <UART_EndRxTransfer+0xc8>)
 80057ae:	4013      	ands	r3, r2
 80057b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	3308      	adds	r3, #8
 80057b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057c2:	e841 2300 	strex	r3, r2, [r1]
 80057c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1e5      	bne.n	800579a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d118      	bne.n	8005808 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	e853 3f00 	ldrex	r3, [r3]
 80057e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	f023 0310 	bic.w	r3, r3, #16
 80057ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	461a      	mov	r2, r3
 80057f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057f4:	61bb      	str	r3, [r7, #24]
 80057f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f8:	6979      	ldr	r1, [r7, #20]
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	e841 2300 	strex	r3, r2, [r1]
 8005800:	613b      	str	r3, [r7, #16]
   return(result);
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1e6      	bne.n	80057d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2220      	movs	r2, #32
 800580c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800581c:	bf00      	nop
 800581e:	3754      	adds	r7, #84	@ 0x54
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr
 8005828:	effffffe 	.word	0xeffffffe

0800582c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800583a:	2b01      	cmp	r3, #1
 800583c:	d101      	bne.n	8005842 <HAL_UARTEx_DisableFifoMode+0x16>
 800583e:	2302      	movs	r3, #2
 8005840:	e027      	b.n	8005892 <HAL_UARTEx_DisableFifoMode+0x66>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2224      	movs	r2, #36	@ 0x24
 800584e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f022 0201 	bic.w	r2, r2, #1
 8005868:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005870:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2220      	movs	r2, #32
 8005884:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b084      	sub	sp, #16
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d101      	bne.n	80058b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80058b2:	2302      	movs	r3, #2
 80058b4:	e02d      	b.n	8005912 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2224      	movs	r2, #36	@ 0x24
 80058c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0201 	bic.w	r2, r2, #1
 80058dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f850 	bl	8005998 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2220      	movs	r2, #32
 8005904:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b084      	sub	sp, #16
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
 8005922:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800592a:	2b01      	cmp	r3, #1
 800592c:	d101      	bne.n	8005932 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800592e:	2302      	movs	r3, #2
 8005930:	e02d      	b.n	800598e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2224      	movs	r2, #36	@ 0x24
 800593e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f022 0201 	bic.w	r2, r2, #1
 8005958:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	683a      	ldr	r2, [r7, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f812 	bl	8005998 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2220      	movs	r2, #32
 8005980:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
	...

08005998 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d108      	bne.n	80059ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80059b8:	e031      	b.n	8005a1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80059ba:	2310      	movs	r3, #16
 80059bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80059be:	2310      	movs	r3, #16
 80059c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	0e5b      	lsrs	r3, r3, #25
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	f003 0307 	and.w	r3, r3, #7
 80059d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	0f5b      	lsrs	r3, r3, #29
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	f003 0307 	and.w	r3, r3, #7
 80059e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059e2:	7bbb      	ldrb	r3, [r7, #14]
 80059e4:	7b3a      	ldrb	r2, [r7, #12]
 80059e6:	4911      	ldr	r1, [pc, #68]	@ (8005a2c <UARTEx_SetNbDataToProcess+0x94>)
 80059e8:	5c8a      	ldrb	r2, [r1, r2]
 80059ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80059ee:	7b3a      	ldrb	r2, [r7, #12]
 80059f0:	490f      	ldr	r1, [pc, #60]	@ (8005a30 <UARTEx_SetNbDataToProcess+0x98>)
 80059f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a00:	7bfb      	ldrb	r3, [r7, #15]
 8005a02:	7b7a      	ldrb	r2, [r7, #13]
 8005a04:	4909      	ldr	r1, [pc, #36]	@ (8005a2c <UARTEx_SetNbDataToProcess+0x94>)
 8005a06:	5c8a      	ldrb	r2, [r1, r2]
 8005a08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005a0c:	7b7a      	ldrb	r2, [r7, #13]
 8005a0e:	4908      	ldr	r1, [pc, #32]	@ (8005a30 <UARTEx_SetNbDataToProcess+0x98>)
 8005a10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a12:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005a1e:	bf00      	nop
 8005a20:	3714      	adds	r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	080063f4 	.word	0x080063f4
 8005a30:	080063fc 	.word	0x080063fc

08005a34 <std>:
 8005a34:	2300      	movs	r3, #0
 8005a36:	b510      	push	{r4, lr}
 8005a38:	4604      	mov	r4, r0
 8005a3a:	e9c0 3300 	strd	r3, r3, [r0]
 8005a3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a42:	6083      	str	r3, [r0, #8]
 8005a44:	8181      	strh	r1, [r0, #12]
 8005a46:	6643      	str	r3, [r0, #100]	@ 0x64
 8005a48:	81c2      	strh	r2, [r0, #14]
 8005a4a:	6183      	str	r3, [r0, #24]
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	2208      	movs	r2, #8
 8005a50:	305c      	adds	r0, #92	@ 0x5c
 8005a52:	f000 f9e7 	bl	8005e24 <memset>
 8005a56:	4b0d      	ldr	r3, [pc, #52]	@ (8005a8c <std+0x58>)
 8005a58:	6263      	str	r3, [r4, #36]	@ 0x24
 8005a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a90 <std+0x5c>)
 8005a5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a94 <std+0x60>)
 8005a60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a62:	4b0d      	ldr	r3, [pc, #52]	@ (8005a98 <std+0x64>)
 8005a64:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a66:	4b0d      	ldr	r3, [pc, #52]	@ (8005a9c <std+0x68>)
 8005a68:	6224      	str	r4, [r4, #32]
 8005a6a:	429c      	cmp	r4, r3
 8005a6c:	d006      	beq.n	8005a7c <std+0x48>
 8005a6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005a72:	4294      	cmp	r4, r2
 8005a74:	d002      	beq.n	8005a7c <std+0x48>
 8005a76:	33d0      	adds	r3, #208	@ 0xd0
 8005a78:	429c      	cmp	r4, r3
 8005a7a:	d105      	bne.n	8005a88 <std+0x54>
 8005a7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a84:	f000 ba46 	b.w	8005f14 <__retarget_lock_init_recursive>
 8005a88:	bd10      	pop	{r4, pc}
 8005a8a:	bf00      	nop
 8005a8c:	08005c75 	.word	0x08005c75
 8005a90:	08005c97 	.word	0x08005c97
 8005a94:	08005ccf 	.word	0x08005ccf
 8005a98:	08005cf3 	.word	0x08005cf3
 8005a9c:	240001f0 	.word	0x240001f0

08005aa0 <stdio_exit_handler>:
 8005aa0:	4a02      	ldr	r2, [pc, #8]	@ (8005aac <stdio_exit_handler+0xc>)
 8005aa2:	4903      	ldr	r1, [pc, #12]	@ (8005ab0 <stdio_exit_handler+0x10>)
 8005aa4:	4803      	ldr	r0, [pc, #12]	@ (8005ab4 <stdio_exit_handler+0x14>)
 8005aa6:	f000 b869 	b.w	8005b7c <_fwalk_sglue>
 8005aaa:	bf00      	nop
 8005aac:	2400002c 	.word	0x2400002c
 8005ab0:	08006215 	.word	0x08006215
 8005ab4:	2400003c 	.word	0x2400003c

08005ab8 <cleanup_stdio>:
 8005ab8:	6841      	ldr	r1, [r0, #4]
 8005aba:	4b0c      	ldr	r3, [pc, #48]	@ (8005aec <cleanup_stdio+0x34>)
 8005abc:	4299      	cmp	r1, r3
 8005abe:	b510      	push	{r4, lr}
 8005ac0:	4604      	mov	r4, r0
 8005ac2:	d001      	beq.n	8005ac8 <cleanup_stdio+0x10>
 8005ac4:	f000 fba6 	bl	8006214 <_fflush_r>
 8005ac8:	68a1      	ldr	r1, [r4, #8]
 8005aca:	4b09      	ldr	r3, [pc, #36]	@ (8005af0 <cleanup_stdio+0x38>)
 8005acc:	4299      	cmp	r1, r3
 8005ace:	d002      	beq.n	8005ad6 <cleanup_stdio+0x1e>
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	f000 fb9f 	bl	8006214 <_fflush_r>
 8005ad6:	68e1      	ldr	r1, [r4, #12]
 8005ad8:	4b06      	ldr	r3, [pc, #24]	@ (8005af4 <cleanup_stdio+0x3c>)
 8005ada:	4299      	cmp	r1, r3
 8005adc:	d004      	beq.n	8005ae8 <cleanup_stdio+0x30>
 8005ade:	4620      	mov	r0, r4
 8005ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ae4:	f000 bb96 	b.w	8006214 <_fflush_r>
 8005ae8:	bd10      	pop	{r4, pc}
 8005aea:	bf00      	nop
 8005aec:	240001f0 	.word	0x240001f0
 8005af0:	24000258 	.word	0x24000258
 8005af4:	240002c0 	.word	0x240002c0

08005af8 <global_stdio_init.part.0>:
 8005af8:	b510      	push	{r4, lr}
 8005afa:	4b0b      	ldr	r3, [pc, #44]	@ (8005b28 <global_stdio_init.part.0+0x30>)
 8005afc:	4c0b      	ldr	r4, [pc, #44]	@ (8005b2c <global_stdio_init.part.0+0x34>)
 8005afe:	4a0c      	ldr	r2, [pc, #48]	@ (8005b30 <global_stdio_init.part.0+0x38>)
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	4620      	mov	r0, r4
 8005b04:	2200      	movs	r2, #0
 8005b06:	2104      	movs	r1, #4
 8005b08:	f7ff ff94 	bl	8005a34 <std>
 8005b0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005b10:	2201      	movs	r2, #1
 8005b12:	2109      	movs	r1, #9
 8005b14:	f7ff ff8e 	bl	8005a34 <std>
 8005b18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005b1c:	2202      	movs	r2, #2
 8005b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b22:	2112      	movs	r1, #18
 8005b24:	f7ff bf86 	b.w	8005a34 <std>
 8005b28:	24000328 	.word	0x24000328
 8005b2c:	240001f0 	.word	0x240001f0
 8005b30:	08005aa1 	.word	0x08005aa1

08005b34 <__sfp_lock_acquire>:
 8005b34:	4801      	ldr	r0, [pc, #4]	@ (8005b3c <__sfp_lock_acquire+0x8>)
 8005b36:	f000 b9ee 	b.w	8005f16 <__retarget_lock_acquire_recursive>
 8005b3a:	bf00      	nop
 8005b3c:	24000331 	.word	0x24000331

08005b40 <__sfp_lock_release>:
 8005b40:	4801      	ldr	r0, [pc, #4]	@ (8005b48 <__sfp_lock_release+0x8>)
 8005b42:	f000 b9e9 	b.w	8005f18 <__retarget_lock_release_recursive>
 8005b46:	bf00      	nop
 8005b48:	24000331 	.word	0x24000331

08005b4c <__sinit>:
 8005b4c:	b510      	push	{r4, lr}
 8005b4e:	4604      	mov	r4, r0
 8005b50:	f7ff fff0 	bl	8005b34 <__sfp_lock_acquire>
 8005b54:	6a23      	ldr	r3, [r4, #32]
 8005b56:	b11b      	cbz	r3, 8005b60 <__sinit+0x14>
 8005b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b5c:	f7ff bff0 	b.w	8005b40 <__sfp_lock_release>
 8005b60:	4b04      	ldr	r3, [pc, #16]	@ (8005b74 <__sinit+0x28>)
 8005b62:	6223      	str	r3, [r4, #32]
 8005b64:	4b04      	ldr	r3, [pc, #16]	@ (8005b78 <__sinit+0x2c>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1f5      	bne.n	8005b58 <__sinit+0xc>
 8005b6c:	f7ff ffc4 	bl	8005af8 <global_stdio_init.part.0>
 8005b70:	e7f2      	b.n	8005b58 <__sinit+0xc>
 8005b72:	bf00      	nop
 8005b74:	08005ab9 	.word	0x08005ab9
 8005b78:	24000328 	.word	0x24000328

08005b7c <_fwalk_sglue>:
 8005b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b80:	4607      	mov	r7, r0
 8005b82:	4688      	mov	r8, r1
 8005b84:	4614      	mov	r4, r2
 8005b86:	2600      	movs	r6, #0
 8005b88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b8c:	f1b9 0901 	subs.w	r9, r9, #1
 8005b90:	d505      	bpl.n	8005b9e <_fwalk_sglue+0x22>
 8005b92:	6824      	ldr	r4, [r4, #0]
 8005b94:	2c00      	cmp	r4, #0
 8005b96:	d1f7      	bne.n	8005b88 <_fwalk_sglue+0xc>
 8005b98:	4630      	mov	r0, r6
 8005b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b9e:	89ab      	ldrh	r3, [r5, #12]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d907      	bls.n	8005bb4 <_fwalk_sglue+0x38>
 8005ba4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	d003      	beq.n	8005bb4 <_fwalk_sglue+0x38>
 8005bac:	4629      	mov	r1, r5
 8005bae:	4638      	mov	r0, r7
 8005bb0:	47c0      	blx	r8
 8005bb2:	4306      	orrs	r6, r0
 8005bb4:	3568      	adds	r5, #104	@ 0x68
 8005bb6:	e7e9      	b.n	8005b8c <_fwalk_sglue+0x10>

08005bb8 <_puts_r>:
 8005bb8:	6a03      	ldr	r3, [r0, #32]
 8005bba:	b570      	push	{r4, r5, r6, lr}
 8005bbc:	6884      	ldr	r4, [r0, #8]
 8005bbe:	4605      	mov	r5, r0
 8005bc0:	460e      	mov	r6, r1
 8005bc2:	b90b      	cbnz	r3, 8005bc8 <_puts_r+0x10>
 8005bc4:	f7ff ffc2 	bl	8005b4c <__sinit>
 8005bc8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005bca:	07db      	lsls	r3, r3, #31
 8005bcc:	d405      	bmi.n	8005bda <_puts_r+0x22>
 8005bce:	89a3      	ldrh	r3, [r4, #12]
 8005bd0:	0598      	lsls	r0, r3, #22
 8005bd2:	d402      	bmi.n	8005bda <_puts_r+0x22>
 8005bd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bd6:	f000 f99e 	bl	8005f16 <__retarget_lock_acquire_recursive>
 8005bda:	89a3      	ldrh	r3, [r4, #12]
 8005bdc:	0719      	lsls	r1, r3, #28
 8005bde:	d502      	bpl.n	8005be6 <_puts_r+0x2e>
 8005be0:	6923      	ldr	r3, [r4, #16]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d135      	bne.n	8005c52 <_puts_r+0x9a>
 8005be6:	4621      	mov	r1, r4
 8005be8:	4628      	mov	r0, r5
 8005bea:	f000 f8c5 	bl	8005d78 <__swsetup_r>
 8005bee:	b380      	cbz	r0, 8005c52 <_puts_r+0x9a>
 8005bf0:	f04f 35ff 	mov.w	r5, #4294967295
 8005bf4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005bf6:	07da      	lsls	r2, r3, #31
 8005bf8:	d405      	bmi.n	8005c06 <_puts_r+0x4e>
 8005bfa:	89a3      	ldrh	r3, [r4, #12]
 8005bfc:	059b      	lsls	r3, r3, #22
 8005bfe:	d402      	bmi.n	8005c06 <_puts_r+0x4e>
 8005c00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c02:	f000 f989 	bl	8005f18 <__retarget_lock_release_recursive>
 8005c06:	4628      	mov	r0, r5
 8005c08:	bd70      	pop	{r4, r5, r6, pc}
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	da04      	bge.n	8005c18 <_puts_r+0x60>
 8005c0e:	69a2      	ldr	r2, [r4, #24]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	dc17      	bgt.n	8005c44 <_puts_r+0x8c>
 8005c14:	290a      	cmp	r1, #10
 8005c16:	d015      	beq.n	8005c44 <_puts_r+0x8c>
 8005c18:	6823      	ldr	r3, [r4, #0]
 8005c1a:	1c5a      	adds	r2, r3, #1
 8005c1c:	6022      	str	r2, [r4, #0]
 8005c1e:	7019      	strb	r1, [r3, #0]
 8005c20:	68a3      	ldr	r3, [r4, #8]
 8005c22:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c26:	3b01      	subs	r3, #1
 8005c28:	60a3      	str	r3, [r4, #8]
 8005c2a:	2900      	cmp	r1, #0
 8005c2c:	d1ed      	bne.n	8005c0a <_puts_r+0x52>
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	da11      	bge.n	8005c56 <_puts_r+0x9e>
 8005c32:	4622      	mov	r2, r4
 8005c34:	210a      	movs	r1, #10
 8005c36:	4628      	mov	r0, r5
 8005c38:	f000 f85f 	bl	8005cfa <__swbuf_r>
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	d0d7      	beq.n	8005bf0 <_puts_r+0x38>
 8005c40:	250a      	movs	r5, #10
 8005c42:	e7d7      	b.n	8005bf4 <_puts_r+0x3c>
 8005c44:	4622      	mov	r2, r4
 8005c46:	4628      	mov	r0, r5
 8005c48:	f000 f857 	bl	8005cfa <__swbuf_r>
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	d1e7      	bne.n	8005c20 <_puts_r+0x68>
 8005c50:	e7ce      	b.n	8005bf0 <_puts_r+0x38>
 8005c52:	3e01      	subs	r6, #1
 8005c54:	e7e4      	b.n	8005c20 <_puts_r+0x68>
 8005c56:	6823      	ldr	r3, [r4, #0]
 8005c58:	1c5a      	adds	r2, r3, #1
 8005c5a:	6022      	str	r2, [r4, #0]
 8005c5c:	220a      	movs	r2, #10
 8005c5e:	701a      	strb	r2, [r3, #0]
 8005c60:	e7ee      	b.n	8005c40 <_puts_r+0x88>
	...

08005c64 <puts>:
 8005c64:	4b02      	ldr	r3, [pc, #8]	@ (8005c70 <puts+0xc>)
 8005c66:	4601      	mov	r1, r0
 8005c68:	6818      	ldr	r0, [r3, #0]
 8005c6a:	f7ff bfa5 	b.w	8005bb8 <_puts_r>
 8005c6e:	bf00      	nop
 8005c70:	24000038 	.word	0x24000038

08005c74 <__sread>:
 8005c74:	b510      	push	{r4, lr}
 8005c76:	460c      	mov	r4, r1
 8005c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c7c:	f000 f8fc 	bl	8005e78 <_read_r>
 8005c80:	2800      	cmp	r0, #0
 8005c82:	bfab      	itete	ge
 8005c84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005c86:	89a3      	ldrhlt	r3, [r4, #12]
 8005c88:	181b      	addge	r3, r3, r0
 8005c8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005c8e:	bfac      	ite	ge
 8005c90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005c92:	81a3      	strhlt	r3, [r4, #12]
 8005c94:	bd10      	pop	{r4, pc}

08005c96 <__swrite>:
 8005c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c9a:	461f      	mov	r7, r3
 8005c9c:	898b      	ldrh	r3, [r1, #12]
 8005c9e:	05db      	lsls	r3, r3, #23
 8005ca0:	4605      	mov	r5, r0
 8005ca2:	460c      	mov	r4, r1
 8005ca4:	4616      	mov	r6, r2
 8005ca6:	d505      	bpl.n	8005cb4 <__swrite+0x1e>
 8005ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cac:	2302      	movs	r3, #2
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f000 f8d0 	bl	8005e54 <_lseek_r>
 8005cb4:	89a3      	ldrh	r3, [r4, #12]
 8005cb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005cbe:	81a3      	strh	r3, [r4, #12]
 8005cc0:	4632      	mov	r2, r6
 8005cc2:	463b      	mov	r3, r7
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cca:	f000 b8e7 	b.w	8005e9c <_write_r>

08005cce <__sseek>:
 8005cce:	b510      	push	{r4, lr}
 8005cd0:	460c      	mov	r4, r1
 8005cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cd6:	f000 f8bd 	bl	8005e54 <_lseek_r>
 8005cda:	1c43      	adds	r3, r0, #1
 8005cdc:	89a3      	ldrh	r3, [r4, #12]
 8005cde:	bf15      	itete	ne
 8005ce0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005ce2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005ce6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005cea:	81a3      	strheq	r3, [r4, #12]
 8005cec:	bf18      	it	ne
 8005cee:	81a3      	strhne	r3, [r4, #12]
 8005cf0:	bd10      	pop	{r4, pc}

08005cf2 <__sclose>:
 8005cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cf6:	f000 b89d 	b.w	8005e34 <_close_r>

08005cfa <__swbuf_r>:
 8005cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cfc:	460e      	mov	r6, r1
 8005cfe:	4614      	mov	r4, r2
 8005d00:	4605      	mov	r5, r0
 8005d02:	b118      	cbz	r0, 8005d0c <__swbuf_r+0x12>
 8005d04:	6a03      	ldr	r3, [r0, #32]
 8005d06:	b90b      	cbnz	r3, 8005d0c <__swbuf_r+0x12>
 8005d08:	f7ff ff20 	bl	8005b4c <__sinit>
 8005d0c:	69a3      	ldr	r3, [r4, #24]
 8005d0e:	60a3      	str	r3, [r4, #8]
 8005d10:	89a3      	ldrh	r3, [r4, #12]
 8005d12:	071a      	lsls	r2, r3, #28
 8005d14:	d501      	bpl.n	8005d1a <__swbuf_r+0x20>
 8005d16:	6923      	ldr	r3, [r4, #16]
 8005d18:	b943      	cbnz	r3, 8005d2c <__swbuf_r+0x32>
 8005d1a:	4621      	mov	r1, r4
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	f000 f82b 	bl	8005d78 <__swsetup_r>
 8005d22:	b118      	cbz	r0, 8005d2c <__swbuf_r+0x32>
 8005d24:	f04f 37ff 	mov.w	r7, #4294967295
 8005d28:	4638      	mov	r0, r7
 8005d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d2c:	6823      	ldr	r3, [r4, #0]
 8005d2e:	6922      	ldr	r2, [r4, #16]
 8005d30:	1a98      	subs	r0, r3, r2
 8005d32:	6963      	ldr	r3, [r4, #20]
 8005d34:	b2f6      	uxtb	r6, r6
 8005d36:	4283      	cmp	r3, r0
 8005d38:	4637      	mov	r7, r6
 8005d3a:	dc05      	bgt.n	8005d48 <__swbuf_r+0x4e>
 8005d3c:	4621      	mov	r1, r4
 8005d3e:	4628      	mov	r0, r5
 8005d40:	f000 fa68 	bl	8006214 <_fflush_r>
 8005d44:	2800      	cmp	r0, #0
 8005d46:	d1ed      	bne.n	8005d24 <__swbuf_r+0x2a>
 8005d48:	68a3      	ldr	r3, [r4, #8]
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	60a3      	str	r3, [r4, #8]
 8005d4e:	6823      	ldr	r3, [r4, #0]
 8005d50:	1c5a      	adds	r2, r3, #1
 8005d52:	6022      	str	r2, [r4, #0]
 8005d54:	701e      	strb	r6, [r3, #0]
 8005d56:	6962      	ldr	r2, [r4, #20]
 8005d58:	1c43      	adds	r3, r0, #1
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d004      	beq.n	8005d68 <__swbuf_r+0x6e>
 8005d5e:	89a3      	ldrh	r3, [r4, #12]
 8005d60:	07db      	lsls	r3, r3, #31
 8005d62:	d5e1      	bpl.n	8005d28 <__swbuf_r+0x2e>
 8005d64:	2e0a      	cmp	r6, #10
 8005d66:	d1df      	bne.n	8005d28 <__swbuf_r+0x2e>
 8005d68:	4621      	mov	r1, r4
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	f000 fa52 	bl	8006214 <_fflush_r>
 8005d70:	2800      	cmp	r0, #0
 8005d72:	d0d9      	beq.n	8005d28 <__swbuf_r+0x2e>
 8005d74:	e7d6      	b.n	8005d24 <__swbuf_r+0x2a>
	...

08005d78 <__swsetup_r>:
 8005d78:	b538      	push	{r3, r4, r5, lr}
 8005d7a:	4b29      	ldr	r3, [pc, #164]	@ (8005e20 <__swsetup_r+0xa8>)
 8005d7c:	4605      	mov	r5, r0
 8005d7e:	6818      	ldr	r0, [r3, #0]
 8005d80:	460c      	mov	r4, r1
 8005d82:	b118      	cbz	r0, 8005d8c <__swsetup_r+0x14>
 8005d84:	6a03      	ldr	r3, [r0, #32]
 8005d86:	b90b      	cbnz	r3, 8005d8c <__swsetup_r+0x14>
 8005d88:	f7ff fee0 	bl	8005b4c <__sinit>
 8005d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d90:	0719      	lsls	r1, r3, #28
 8005d92:	d422      	bmi.n	8005dda <__swsetup_r+0x62>
 8005d94:	06da      	lsls	r2, r3, #27
 8005d96:	d407      	bmi.n	8005da8 <__swsetup_r+0x30>
 8005d98:	2209      	movs	r2, #9
 8005d9a:	602a      	str	r2, [r5, #0]
 8005d9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005da0:	81a3      	strh	r3, [r4, #12]
 8005da2:	f04f 30ff 	mov.w	r0, #4294967295
 8005da6:	e033      	b.n	8005e10 <__swsetup_r+0x98>
 8005da8:	0758      	lsls	r0, r3, #29
 8005daa:	d512      	bpl.n	8005dd2 <__swsetup_r+0x5a>
 8005dac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005dae:	b141      	cbz	r1, 8005dc2 <__swsetup_r+0x4a>
 8005db0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005db4:	4299      	cmp	r1, r3
 8005db6:	d002      	beq.n	8005dbe <__swsetup_r+0x46>
 8005db8:	4628      	mov	r0, r5
 8005dba:	f000 f8af 	bl	8005f1c <_free_r>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	6363      	str	r3, [r4, #52]	@ 0x34
 8005dc2:	89a3      	ldrh	r3, [r4, #12]
 8005dc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005dc8:	81a3      	strh	r3, [r4, #12]
 8005dca:	2300      	movs	r3, #0
 8005dcc:	6063      	str	r3, [r4, #4]
 8005dce:	6923      	ldr	r3, [r4, #16]
 8005dd0:	6023      	str	r3, [r4, #0]
 8005dd2:	89a3      	ldrh	r3, [r4, #12]
 8005dd4:	f043 0308 	orr.w	r3, r3, #8
 8005dd8:	81a3      	strh	r3, [r4, #12]
 8005dda:	6923      	ldr	r3, [r4, #16]
 8005ddc:	b94b      	cbnz	r3, 8005df2 <__swsetup_r+0x7a>
 8005dde:	89a3      	ldrh	r3, [r4, #12]
 8005de0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005de4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005de8:	d003      	beq.n	8005df2 <__swsetup_r+0x7a>
 8005dea:	4621      	mov	r1, r4
 8005dec:	4628      	mov	r0, r5
 8005dee:	f000 fa5f 	bl	80062b0 <__smakebuf_r>
 8005df2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005df6:	f013 0201 	ands.w	r2, r3, #1
 8005dfa:	d00a      	beq.n	8005e12 <__swsetup_r+0x9a>
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	60a2      	str	r2, [r4, #8]
 8005e00:	6962      	ldr	r2, [r4, #20]
 8005e02:	4252      	negs	r2, r2
 8005e04:	61a2      	str	r2, [r4, #24]
 8005e06:	6922      	ldr	r2, [r4, #16]
 8005e08:	b942      	cbnz	r2, 8005e1c <__swsetup_r+0xa4>
 8005e0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005e0e:	d1c5      	bne.n	8005d9c <__swsetup_r+0x24>
 8005e10:	bd38      	pop	{r3, r4, r5, pc}
 8005e12:	0799      	lsls	r1, r3, #30
 8005e14:	bf58      	it	pl
 8005e16:	6962      	ldrpl	r2, [r4, #20]
 8005e18:	60a2      	str	r2, [r4, #8]
 8005e1a:	e7f4      	b.n	8005e06 <__swsetup_r+0x8e>
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	e7f7      	b.n	8005e10 <__swsetup_r+0x98>
 8005e20:	24000038 	.word	0x24000038

08005e24 <memset>:
 8005e24:	4402      	add	r2, r0
 8005e26:	4603      	mov	r3, r0
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d100      	bne.n	8005e2e <memset+0xa>
 8005e2c:	4770      	bx	lr
 8005e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e32:	e7f9      	b.n	8005e28 <memset+0x4>

08005e34 <_close_r>:
 8005e34:	b538      	push	{r3, r4, r5, lr}
 8005e36:	4d06      	ldr	r5, [pc, #24]	@ (8005e50 <_close_r+0x1c>)
 8005e38:	2300      	movs	r3, #0
 8005e3a:	4604      	mov	r4, r0
 8005e3c:	4608      	mov	r0, r1
 8005e3e:	602b      	str	r3, [r5, #0]
 8005e40:	f7fa ff7f 	bl	8000d42 <_close>
 8005e44:	1c43      	adds	r3, r0, #1
 8005e46:	d102      	bne.n	8005e4e <_close_r+0x1a>
 8005e48:	682b      	ldr	r3, [r5, #0]
 8005e4a:	b103      	cbz	r3, 8005e4e <_close_r+0x1a>
 8005e4c:	6023      	str	r3, [r4, #0]
 8005e4e:	bd38      	pop	{r3, r4, r5, pc}
 8005e50:	2400032c 	.word	0x2400032c

08005e54 <_lseek_r>:
 8005e54:	b538      	push	{r3, r4, r5, lr}
 8005e56:	4d07      	ldr	r5, [pc, #28]	@ (8005e74 <_lseek_r+0x20>)
 8005e58:	4604      	mov	r4, r0
 8005e5a:	4608      	mov	r0, r1
 8005e5c:	4611      	mov	r1, r2
 8005e5e:	2200      	movs	r2, #0
 8005e60:	602a      	str	r2, [r5, #0]
 8005e62:	461a      	mov	r2, r3
 8005e64:	f7fa ff94 	bl	8000d90 <_lseek>
 8005e68:	1c43      	adds	r3, r0, #1
 8005e6a:	d102      	bne.n	8005e72 <_lseek_r+0x1e>
 8005e6c:	682b      	ldr	r3, [r5, #0]
 8005e6e:	b103      	cbz	r3, 8005e72 <_lseek_r+0x1e>
 8005e70:	6023      	str	r3, [r4, #0]
 8005e72:	bd38      	pop	{r3, r4, r5, pc}
 8005e74:	2400032c 	.word	0x2400032c

08005e78 <_read_r>:
 8005e78:	b538      	push	{r3, r4, r5, lr}
 8005e7a:	4d07      	ldr	r5, [pc, #28]	@ (8005e98 <_read_r+0x20>)
 8005e7c:	4604      	mov	r4, r0
 8005e7e:	4608      	mov	r0, r1
 8005e80:	4611      	mov	r1, r2
 8005e82:	2200      	movs	r2, #0
 8005e84:	602a      	str	r2, [r5, #0]
 8005e86:	461a      	mov	r2, r3
 8005e88:	f7fa ff22 	bl	8000cd0 <_read>
 8005e8c:	1c43      	adds	r3, r0, #1
 8005e8e:	d102      	bne.n	8005e96 <_read_r+0x1e>
 8005e90:	682b      	ldr	r3, [r5, #0]
 8005e92:	b103      	cbz	r3, 8005e96 <_read_r+0x1e>
 8005e94:	6023      	str	r3, [r4, #0]
 8005e96:	bd38      	pop	{r3, r4, r5, pc}
 8005e98:	2400032c 	.word	0x2400032c

08005e9c <_write_r>:
 8005e9c:	b538      	push	{r3, r4, r5, lr}
 8005e9e:	4d07      	ldr	r5, [pc, #28]	@ (8005ebc <_write_r+0x20>)
 8005ea0:	4604      	mov	r4, r0
 8005ea2:	4608      	mov	r0, r1
 8005ea4:	4611      	mov	r1, r2
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	602a      	str	r2, [r5, #0]
 8005eaa:	461a      	mov	r2, r3
 8005eac:	f7fa ff2d 	bl	8000d0a <_write>
 8005eb0:	1c43      	adds	r3, r0, #1
 8005eb2:	d102      	bne.n	8005eba <_write_r+0x1e>
 8005eb4:	682b      	ldr	r3, [r5, #0]
 8005eb6:	b103      	cbz	r3, 8005eba <_write_r+0x1e>
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	bd38      	pop	{r3, r4, r5, pc}
 8005ebc:	2400032c 	.word	0x2400032c

08005ec0 <__errno>:
 8005ec0:	4b01      	ldr	r3, [pc, #4]	@ (8005ec8 <__errno+0x8>)
 8005ec2:	6818      	ldr	r0, [r3, #0]
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	24000038 	.word	0x24000038

08005ecc <__libc_init_array>:
 8005ecc:	b570      	push	{r4, r5, r6, lr}
 8005ece:	4d0d      	ldr	r5, [pc, #52]	@ (8005f04 <__libc_init_array+0x38>)
 8005ed0:	4c0d      	ldr	r4, [pc, #52]	@ (8005f08 <__libc_init_array+0x3c>)
 8005ed2:	1b64      	subs	r4, r4, r5
 8005ed4:	10a4      	asrs	r4, r4, #2
 8005ed6:	2600      	movs	r6, #0
 8005ed8:	42a6      	cmp	r6, r4
 8005eda:	d109      	bne.n	8005ef0 <__libc_init_array+0x24>
 8005edc:	4d0b      	ldr	r5, [pc, #44]	@ (8005f0c <__libc_init_array+0x40>)
 8005ede:	4c0c      	ldr	r4, [pc, #48]	@ (8005f10 <__libc_init_array+0x44>)
 8005ee0:	f000 fa54 	bl	800638c <_init>
 8005ee4:	1b64      	subs	r4, r4, r5
 8005ee6:	10a4      	asrs	r4, r4, #2
 8005ee8:	2600      	movs	r6, #0
 8005eea:	42a6      	cmp	r6, r4
 8005eec:	d105      	bne.n	8005efa <__libc_init_array+0x2e>
 8005eee:	bd70      	pop	{r4, r5, r6, pc}
 8005ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ef4:	4798      	blx	r3
 8005ef6:	3601      	adds	r6, #1
 8005ef8:	e7ee      	b.n	8005ed8 <__libc_init_array+0xc>
 8005efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005efe:	4798      	blx	r3
 8005f00:	3601      	adds	r6, #1
 8005f02:	e7f2      	b.n	8005eea <__libc_init_array+0x1e>
 8005f04:	0800640c 	.word	0x0800640c
 8005f08:	0800640c 	.word	0x0800640c
 8005f0c:	0800640c 	.word	0x0800640c
 8005f10:	08006410 	.word	0x08006410

08005f14 <__retarget_lock_init_recursive>:
 8005f14:	4770      	bx	lr

08005f16 <__retarget_lock_acquire_recursive>:
 8005f16:	4770      	bx	lr

08005f18 <__retarget_lock_release_recursive>:
 8005f18:	4770      	bx	lr
	...

08005f1c <_free_r>:
 8005f1c:	b538      	push	{r3, r4, r5, lr}
 8005f1e:	4605      	mov	r5, r0
 8005f20:	2900      	cmp	r1, #0
 8005f22:	d041      	beq.n	8005fa8 <_free_r+0x8c>
 8005f24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f28:	1f0c      	subs	r4, r1, #4
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	bfb8      	it	lt
 8005f2e:	18e4      	addlt	r4, r4, r3
 8005f30:	f000 f8e0 	bl	80060f4 <__malloc_lock>
 8005f34:	4a1d      	ldr	r2, [pc, #116]	@ (8005fac <_free_r+0x90>)
 8005f36:	6813      	ldr	r3, [r2, #0]
 8005f38:	b933      	cbnz	r3, 8005f48 <_free_r+0x2c>
 8005f3a:	6063      	str	r3, [r4, #4]
 8005f3c:	6014      	str	r4, [r2, #0]
 8005f3e:	4628      	mov	r0, r5
 8005f40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f44:	f000 b8dc 	b.w	8006100 <__malloc_unlock>
 8005f48:	42a3      	cmp	r3, r4
 8005f4a:	d908      	bls.n	8005f5e <_free_r+0x42>
 8005f4c:	6820      	ldr	r0, [r4, #0]
 8005f4e:	1821      	adds	r1, r4, r0
 8005f50:	428b      	cmp	r3, r1
 8005f52:	bf01      	itttt	eq
 8005f54:	6819      	ldreq	r1, [r3, #0]
 8005f56:	685b      	ldreq	r3, [r3, #4]
 8005f58:	1809      	addeq	r1, r1, r0
 8005f5a:	6021      	streq	r1, [r4, #0]
 8005f5c:	e7ed      	b.n	8005f3a <_free_r+0x1e>
 8005f5e:	461a      	mov	r2, r3
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	b10b      	cbz	r3, 8005f68 <_free_r+0x4c>
 8005f64:	42a3      	cmp	r3, r4
 8005f66:	d9fa      	bls.n	8005f5e <_free_r+0x42>
 8005f68:	6811      	ldr	r1, [r2, #0]
 8005f6a:	1850      	adds	r0, r2, r1
 8005f6c:	42a0      	cmp	r0, r4
 8005f6e:	d10b      	bne.n	8005f88 <_free_r+0x6c>
 8005f70:	6820      	ldr	r0, [r4, #0]
 8005f72:	4401      	add	r1, r0
 8005f74:	1850      	adds	r0, r2, r1
 8005f76:	4283      	cmp	r3, r0
 8005f78:	6011      	str	r1, [r2, #0]
 8005f7a:	d1e0      	bne.n	8005f3e <_free_r+0x22>
 8005f7c:	6818      	ldr	r0, [r3, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	6053      	str	r3, [r2, #4]
 8005f82:	4408      	add	r0, r1
 8005f84:	6010      	str	r0, [r2, #0]
 8005f86:	e7da      	b.n	8005f3e <_free_r+0x22>
 8005f88:	d902      	bls.n	8005f90 <_free_r+0x74>
 8005f8a:	230c      	movs	r3, #12
 8005f8c:	602b      	str	r3, [r5, #0]
 8005f8e:	e7d6      	b.n	8005f3e <_free_r+0x22>
 8005f90:	6820      	ldr	r0, [r4, #0]
 8005f92:	1821      	adds	r1, r4, r0
 8005f94:	428b      	cmp	r3, r1
 8005f96:	bf04      	itt	eq
 8005f98:	6819      	ldreq	r1, [r3, #0]
 8005f9a:	685b      	ldreq	r3, [r3, #4]
 8005f9c:	6063      	str	r3, [r4, #4]
 8005f9e:	bf04      	itt	eq
 8005fa0:	1809      	addeq	r1, r1, r0
 8005fa2:	6021      	streq	r1, [r4, #0]
 8005fa4:	6054      	str	r4, [r2, #4]
 8005fa6:	e7ca      	b.n	8005f3e <_free_r+0x22>
 8005fa8:	bd38      	pop	{r3, r4, r5, pc}
 8005faa:	bf00      	nop
 8005fac:	24000338 	.word	0x24000338

08005fb0 <sbrk_aligned>:
 8005fb0:	b570      	push	{r4, r5, r6, lr}
 8005fb2:	4e0f      	ldr	r6, [pc, #60]	@ (8005ff0 <sbrk_aligned+0x40>)
 8005fb4:	460c      	mov	r4, r1
 8005fb6:	6831      	ldr	r1, [r6, #0]
 8005fb8:	4605      	mov	r5, r0
 8005fba:	b911      	cbnz	r1, 8005fc2 <sbrk_aligned+0x12>
 8005fbc:	f000 f9d6 	bl	800636c <_sbrk_r>
 8005fc0:	6030      	str	r0, [r6, #0]
 8005fc2:	4621      	mov	r1, r4
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	f000 f9d1 	bl	800636c <_sbrk_r>
 8005fca:	1c43      	adds	r3, r0, #1
 8005fcc:	d103      	bne.n	8005fd6 <sbrk_aligned+0x26>
 8005fce:	f04f 34ff 	mov.w	r4, #4294967295
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	bd70      	pop	{r4, r5, r6, pc}
 8005fd6:	1cc4      	adds	r4, r0, #3
 8005fd8:	f024 0403 	bic.w	r4, r4, #3
 8005fdc:	42a0      	cmp	r0, r4
 8005fde:	d0f8      	beq.n	8005fd2 <sbrk_aligned+0x22>
 8005fe0:	1a21      	subs	r1, r4, r0
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	f000 f9c2 	bl	800636c <_sbrk_r>
 8005fe8:	3001      	adds	r0, #1
 8005fea:	d1f2      	bne.n	8005fd2 <sbrk_aligned+0x22>
 8005fec:	e7ef      	b.n	8005fce <sbrk_aligned+0x1e>
 8005fee:	bf00      	nop
 8005ff0:	24000334 	.word	0x24000334

08005ff4 <_malloc_r>:
 8005ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ff8:	1ccd      	adds	r5, r1, #3
 8005ffa:	f025 0503 	bic.w	r5, r5, #3
 8005ffe:	3508      	adds	r5, #8
 8006000:	2d0c      	cmp	r5, #12
 8006002:	bf38      	it	cc
 8006004:	250c      	movcc	r5, #12
 8006006:	2d00      	cmp	r5, #0
 8006008:	4606      	mov	r6, r0
 800600a:	db01      	blt.n	8006010 <_malloc_r+0x1c>
 800600c:	42a9      	cmp	r1, r5
 800600e:	d904      	bls.n	800601a <_malloc_r+0x26>
 8006010:	230c      	movs	r3, #12
 8006012:	6033      	str	r3, [r6, #0]
 8006014:	2000      	movs	r0, #0
 8006016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800601a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80060f0 <_malloc_r+0xfc>
 800601e:	f000 f869 	bl	80060f4 <__malloc_lock>
 8006022:	f8d8 3000 	ldr.w	r3, [r8]
 8006026:	461c      	mov	r4, r3
 8006028:	bb44      	cbnz	r4, 800607c <_malloc_r+0x88>
 800602a:	4629      	mov	r1, r5
 800602c:	4630      	mov	r0, r6
 800602e:	f7ff ffbf 	bl	8005fb0 <sbrk_aligned>
 8006032:	1c43      	adds	r3, r0, #1
 8006034:	4604      	mov	r4, r0
 8006036:	d158      	bne.n	80060ea <_malloc_r+0xf6>
 8006038:	f8d8 4000 	ldr.w	r4, [r8]
 800603c:	4627      	mov	r7, r4
 800603e:	2f00      	cmp	r7, #0
 8006040:	d143      	bne.n	80060ca <_malloc_r+0xd6>
 8006042:	2c00      	cmp	r4, #0
 8006044:	d04b      	beq.n	80060de <_malloc_r+0xea>
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	4639      	mov	r1, r7
 800604a:	4630      	mov	r0, r6
 800604c:	eb04 0903 	add.w	r9, r4, r3
 8006050:	f000 f98c 	bl	800636c <_sbrk_r>
 8006054:	4581      	cmp	r9, r0
 8006056:	d142      	bne.n	80060de <_malloc_r+0xea>
 8006058:	6821      	ldr	r1, [r4, #0]
 800605a:	1a6d      	subs	r5, r5, r1
 800605c:	4629      	mov	r1, r5
 800605e:	4630      	mov	r0, r6
 8006060:	f7ff ffa6 	bl	8005fb0 <sbrk_aligned>
 8006064:	3001      	adds	r0, #1
 8006066:	d03a      	beq.n	80060de <_malloc_r+0xea>
 8006068:	6823      	ldr	r3, [r4, #0]
 800606a:	442b      	add	r3, r5
 800606c:	6023      	str	r3, [r4, #0]
 800606e:	f8d8 3000 	ldr.w	r3, [r8]
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	bb62      	cbnz	r2, 80060d0 <_malloc_r+0xdc>
 8006076:	f8c8 7000 	str.w	r7, [r8]
 800607a:	e00f      	b.n	800609c <_malloc_r+0xa8>
 800607c:	6822      	ldr	r2, [r4, #0]
 800607e:	1b52      	subs	r2, r2, r5
 8006080:	d420      	bmi.n	80060c4 <_malloc_r+0xd0>
 8006082:	2a0b      	cmp	r2, #11
 8006084:	d917      	bls.n	80060b6 <_malloc_r+0xc2>
 8006086:	1961      	adds	r1, r4, r5
 8006088:	42a3      	cmp	r3, r4
 800608a:	6025      	str	r5, [r4, #0]
 800608c:	bf18      	it	ne
 800608e:	6059      	strne	r1, [r3, #4]
 8006090:	6863      	ldr	r3, [r4, #4]
 8006092:	bf08      	it	eq
 8006094:	f8c8 1000 	streq.w	r1, [r8]
 8006098:	5162      	str	r2, [r4, r5]
 800609a:	604b      	str	r3, [r1, #4]
 800609c:	4630      	mov	r0, r6
 800609e:	f000 f82f 	bl	8006100 <__malloc_unlock>
 80060a2:	f104 000b 	add.w	r0, r4, #11
 80060a6:	1d23      	adds	r3, r4, #4
 80060a8:	f020 0007 	bic.w	r0, r0, #7
 80060ac:	1ac2      	subs	r2, r0, r3
 80060ae:	bf1c      	itt	ne
 80060b0:	1a1b      	subne	r3, r3, r0
 80060b2:	50a3      	strne	r3, [r4, r2]
 80060b4:	e7af      	b.n	8006016 <_malloc_r+0x22>
 80060b6:	6862      	ldr	r2, [r4, #4]
 80060b8:	42a3      	cmp	r3, r4
 80060ba:	bf0c      	ite	eq
 80060bc:	f8c8 2000 	streq.w	r2, [r8]
 80060c0:	605a      	strne	r2, [r3, #4]
 80060c2:	e7eb      	b.n	800609c <_malloc_r+0xa8>
 80060c4:	4623      	mov	r3, r4
 80060c6:	6864      	ldr	r4, [r4, #4]
 80060c8:	e7ae      	b.n	8006028 <_malloc_r+0x34>
 80060ca:	463c      	mov	r4, r7
 80060cc:	687f      	ldr	r7, [r7, #4]
 80060ce:	e7b6      	b.n	800603e <_malloc_r+0x4a>
 80060d0:	461a      	mov	r2, r3
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	42a3      	cmp	r3, r4
 80060d6:	d1fb      	bne.n	80060d0 <_malloc_r+0xdc>
 80060d8:	2300      	movs	r3, #0
 80060da:	6053      	str	r3, [r2, #4]
 80060dc:	e7de      	b.n	800609c <_malloc_r+0xa8>
 80060de:	230c      	movs	r3, #12
 80060e0:	6033      	str	r3, [r6, #0]
 80060e2:	4630      	mov	r0, r6
 80060e4:	f000 f80c 	bl	8006100 <__malloc_unlock>
 80060e8:	e794      	b.n	8006014 <_malloc_r+0x20>
 80060ea:	6005      	str	r5, [r0, #0]
 80060ec:	e7d6      	b.n	800609c <_malloc_r+0xa8>
 80060ee:	bf00      	nop
 80060f0:	24000338 	.word	0x24000338

080060f4 <__malloc_lock>:
 80060f4:	4801      	ldr	r0, [pc, #4]	@ (80060fc <__malloc_lock+0x8>)
 80060f6:	f7ff bf0e 	b.w	8005f16 <__retarget_lock_acquire_recursive>
 80060fa:	bf00      	nop
 80060fc:	24000330 	.word	0x24000330

08006100 <__malloc_unlock>:
 8006100:	4801      	ldr	r0, [pc, #4]	@ (8006108 <__malloc_unlock+0x8>)
 8006102:	f7ff bf09 	b.w	8005f18 <__retarget_lock_release_recursive>
 8006106:	bf00      	nop
 8006108:	24000330 	.word	0x24000330

0800610c <__sflush_r>:
 800610c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006114:	0716      	lsls	r6, r2, #28
 8006116:	4605      	mov	r5, r0
 8006118:	460c      	mov	r4, r1
 800611a:	d454      	bmi.n	80061c6 <__sflush_r+0xba>
 800611c:	684b      	ldr	r3, [r1, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	dc02      	bgt.n	8006128 <__sflush_r+0x1c>
 8006122:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006124:	2b00      	cmp	r3, #0
 8006126:	dd48      	ble.n	80061ba <__sflush_r+0xae>
 8006128:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800612a:	2e00      	cmp	r6, #0
 800612c:	d045      	beq.n	80061ba <__sflush_r+0xae>
 800612e:	2300      	movs	r3, #0
 8006130:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006134:	682f      	ldr	r7, [r5, #0]
 8006136:	6a21      	ldr	r1, [r4, #32]
 8006138:	602b      	str	r3, [r5, #0]
 800613a:	d030      	beq.n	800619e <__sflush_r+0x92>
 800613c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800613e:	89a3      	ldrh	r3, [r4, #12]
 8006140:	0759      	lsls	r1, r3, #29
 8006142:	d505      	bpl.n	8006150 <__sflush_r+0x44>
 8006144:	6863      	ldr	r3, [r4, #4]
 8006146:	1ad2      	subs	r2, r2, r3
 8006148:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800614a:	b10b      	cbz	r3, 8006150 <__sflush_r+0x44>
 800614c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800614e:	1ad2      	subs	r2, r2, r3
 8006150:	2300      	movs	r3, #0
 8006152:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006154:	6a21      	ldr	r1, [r4, #32]
 8006156:	4628      	mov	r0, r5
 8006158:	47b0      	blx	r6
 800615a:	1c43      	adds	r3, r0, #1
 800615c:	89a3      	ldrh	r3, [r4, #12]
 800615e:	d106      	bne.n	800616e <__sflush_r+0x62>
 8006160:	6829      	ldr	r1, [r5, #0]
 8006162:	291d      	cmp	r1, #29
 8006164:	d82b      	bhi.n	80061be <__sflush_r+0xb2>
 8006166:	4a2a      	ldr	r2, [pc, #168]	@ (8006210 <__sflush_r+0x104>)
 8006168:	410a      	asrs	r2, r1
 800616a:	07d6      	lsls	r6, r2, #31
 800616c:	d427      	bmi.n	80061be <__sflush_r+0xb2>
 800616e:	2200      	movs	r2, #0
 8006170:	6062      	str	r2, [r4, #4]
 8006172:	04d9      	lsls	r1, r3, #19
 8006174:	6922      	ldr	r2, [r4, #16]
 8006176:	6022      	str	r2, [r4, #0]
 8006178:	d504      	bpl.n	8006184 <__sflush_r+0x78>
 800617a:	1c42      	adds	r2, r0, #1
 800617c:	d101      	bne.n	8006182 <__sflush_r+0x76>
 800617e:	682b      	ldr	r3, [r5, #0]
 8006180:	b903      	cbnz	r3, 8006184 <__sflush_r+0x78>
 8006182:	6560      	str	r0, [r4, #84]	@ 0x54
 8006184:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006186:	602f      	str	r7, [r5, #0]
 8006188:	b1b9      	cbz	r1, 80061ba <__sflush_r+0xae>
 800618a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800618e:	4299      	cmp	r1, r3
 8006190:	d002      	beq.n	8006198 <__sflush_r+0x8c>
 8006192:	4628      	mov	r0, r5
 8006194:	f7ff fec2 	bl	8005f1c <_free_r>
 8006198:	2300      	movs	r3, #0
 800619a:	6363      	str	r3, [r4, #52]	@ 0x34
 800619c:	e00d      	b.n	80061ba <__sflush_r+0xae>
 800619e:	2301      	movs	r3, #1
 80061a0:	4628      	mov	r0, r5
 80061a2:	47b0      	blx	r6
 80061a4:	4602      	mov	r2, r0
 80061a6:	1c50      	adds	r0, r2, #1
 80061a8:	d1c9      	bne.n	800613e <__sflush_r+0x32>
 80061aa:	682b      	ldr	r3, [r5, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d0c6      	beq.n	800613e <__sflush_r+0x32>
 80061b0:	2b1d      	cmp	r3, #29
 80061b2:	d001      	beq.n	80061b8 <__sflush_r+0xac>
 80061b4:	2b16      	cmp	r3, #22
 80061b6:	d11e      	bne.n	80061f6 <__sflush_r+0xea>
 80061b8:	602f      	str	r7, [r5, #0]
 80061ba:	2000      	movs	r0, #0
 80061bc:	e022      	b.n	8006204 <__sflush_r+0xf8>
 80061be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061c2:	b21b      	sxth	r3, r3
 80061c4:	e01b      	b.n	80061fe <__sflush_r+0xf2>
 80061c6:	690f      	ldr	r7, [r1, #16]
 80061c8:	2f00      	cmp	r7, #0
 80061ca:	d0f6      	beq.n	80061ba <__sflush_r+0xae>
 80061cc:	0793      	lsls	r3, r2, #30
 80061ce:	680e      	ldr	r6, [r1, #0]
 80061d0:	bf08      	it	eq
 80061d2:	694b      	ldreq	r3, [r1, #20]
 80061d4:	600f      	str	r7, [r1, #0]
 80061d6:	bf18      	it	ne
 80061d8:	2300      	movne	r3, #0
 80061da:	eba6 0807 	sub.w	r8, r6, r7
 80061de:	608b      	str	r3, [r1, #8]
 80061e0:	f1b8 0f00 	cmp.w	r8, #0
 80061e4:	dde9      	ble.n	80061ba <__sflush_r+0xae>
 80061e6:	6a21      	ldr	r1, [r4, #32]
 80061e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80061ea:	4643      	mov	r3, r8
 80061ec:	463a      	mov	r2, r7
 80061ee:	4628      	mov	r0, r5
 80061f0:	47b0      	blx	r6
 80061f2:	2800      	cmp	r0, #0
 80061f4:	dc08      	bgt.n	8006208 <__sflush_r+0xfc>
 80061f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061fe:	81a3      	strh	r3, [r4, #12]
 8006200:	f04f 30ff 	mov.w	r0, #4294967295
 8006204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006208:	4407      	add	r7, r0
 800620a:	eba8 0800 	sub.w	r8, r8, r0
 800620e:	e7e7      	b.n	80061e0 <__sflush_r+0xd4>
 8006210:	dfbffffe 	.word	0xdfbffffe

08006214 <_fflush_r>:
 8006214:	b538      	push	{r3, r4, r5, lr}
 8006216:	690b      	ldr	r3, [r1, #16]
 8006218:	4605      	mov	r5, r0
 800621a:	460c      	mov	r4, r1
 800621c:	b913      	cbnz	r3, 8006224 <_fflush_r+0x10>
 800621e:	2500      	movs	r5, #0
 8006220:	4628      	mov	r0, r5
 8006222:	bd38      	pop	{r3, r4, r5, pc}
 8006224:	b118      	cbz	r0, 800622e <_fflush_r+0x1a>
 8006226:	6a03      	ldr	r3, [r0, #32]
 8006228:	b90b      	cbnz	r3, 800622e <_fflush_r+0x1a>
 800622a:	f7ff fc8f 	bl	8005b4c <__sinit>
 800622e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d0f3      	beq.n	800621e <_fflush_r+0xa>
 8006236:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006238:	07d0      	lsls	r0, r2, #31
 800623a:	d404      	bmi.n	8006246 <_fflush_r+0x32>
 800623c:	0599      	lsls	r1, r3, #22
 800623e:	d402      	bmi.n	8006246 <_fflush_r+0x32>
 8006240:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006242:	f7ff fe68 	bl	8005f16 <__retarget_lock_acquire_recursive>
 8006246:	4628      	mov	r0, r5
 8006248:	4621      	mov	r1, r4
 800624a:	f7ff ff5f 	bl	800610c <__sflush_r>
 800624e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006250:	07da      	lsls	r2, r3, #31
 8006252:	4605      	mov	r5, r0
 8006254:	d4e4      	bmi.n	8006220 <_fflush_r+0xc>
 8006256:	89a3      	ldrh	r3, [r4, #12]
 8006258:	059b      	lsls	r3, r3, #22
 800625a:	d4e1      	bmi.n	8006220 <_fflush_r+0xc>
 800625c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800625e:	f7ff fe5b 	bl	8005f18 <__retarget_lock_release_recursive>
 8006262:	e7dd      	b.n	8006220 <_fflush_r+0xc>

08006264 <__swhatbuf_r>:
 8006264:	b570      	push	{r4, r5, r6, lr}
 8006266:	460c      	mov	r4, r1
 8006268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800626c:	2900      	cmp	r1, #0
 800626e:	b096      	sub	sp, #88	@ 0x58
 8006270:	4615      	mov	r5, r2
 8006272:	461e      	mov	r6, r3
 8006274:	da0d      	bge.n	8006292 <__swhatbuf_r+0x2e>
 8006276:	89a3      	ldrh	r3, [r4, #12]
 8006278:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800627c:	f04f 0100 	mov.w	r1, #0
 8006280:	bf14      	ite	ne
 8006282:	2340      	movne	r3, #64	@ 0x40
 8006284:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006288:	2000      	movs	r0, #0
 800628a:	6031      	str	r1, [r6, #0]
 800628c:	602b      	str	r3, [r5, #0]
 800628e:	b016      	add	sp, #88	@ 0x58
 8006290:	bd70      	pop	{r4, r5, r6, pc}
 8006292:	466a      	mov	r2, sp
 8006294:	f000 f848 	bl	8006328 <_fstat_r>
 8006298:	2800      	cmp	r0, #0
 800629a:	dbec      	blt.n	8006276 <__swhatbuf_r+0x12>
 800629c:	9901      	ldr	r1, [sp, #4]
 800629e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80062a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80062a6:	4259      	negs	r1, r3
 80062a8:	4159      	adcs	r1, r3
 80062aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062ae:	e7eb      	b.n	8006288 <__swhatbuf_r+0x24>

080062b0 <__smakebuf_r>:
 80062b0:	898b      	ldrh	r3, [r1, #12]
 80062b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062b4:	079d      	lsls	r5, r3, #30
 80062b6:	4606      	mov	r6, r0
 80062b8:	460c      	mov	r4, r1
 80062ba:	d507      	bpl.n	80062cc <__smakebuf_r+0x1c>
 80062bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80062c0:	6023      	str	r3, [r4, #0]
 80062c2:	6123      	str	r3, [r4, #16]
 80062c4:	2301      	movs	r3, #1
 80062c6:	6163      	str	r3, [r4, #20]
 80062c8:	b003      	add	sp, #12
 80062ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062cc:	ab01      	add	r3, sp, #4
 80062ce:	466a      	mov	r2, sp
 80062d0:	f7ff ffc8 	bl	8006264 <__swhatbuf_r>
 80062d4:	9f00      	ldr	r7, [sp, #0]
 80062d6:	4605      	mov	r5, r0
 80062d8:	4639      	mov	r1, r7
 80062da:	4630      	mov	r0, r6
 80062dc:	f7ff fe8a 	bl	8005ff4 <_malloc_r>
 80062e0:	b948      	cbnz	r0, 80062f6 <__smakebuf_r+0x46>
 80062e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062e6:	059a      	lsls	r2, r3, #22
 80062e8:	d4ee      	bmi.n	80062c8 <__smakebuf_r+0x18>
 80062ea:	f023 0303 	bic.w	r3, r3, #3
 80062ee:	f043 0302 	orr.w	r3, r3, #2
 80062f2:	81a3      	strh	r3, [r4, #12]
 80062f4:	e7e2      	b.n	80062bc <__smakebuf_r+0xc>
 80062f6:	89a3      	ldrh	r3, [r4, #12]
 80062f8:	6020      	str	r0, [r4, #0]
 80062fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062fe:	81a3      	strh	r3, [r4, #12]
 8006300:	9b01      	ldr	r3, [sp, #4]
 8006302:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006306:	b15b      	cbz	r3, 8006320 <__smakebuf_r+0x70>
 8006308:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800630c:	4630      	mov	r0, r6
 800630e:	f000 f81d 	bl	800634c <_isatty_r>
 8006312:	b128      	cbz	r0, 8006320 <__smakebuf_r+0x70>
 8006314:	89a3      	ldrh	r3, [r4, #12]
 8006316:	f023 0303 	bic.w	r3, r3, #3
 800631a:	f043 0301 	orr.w	r3, r3, #1
 800631e:	81a3      	strh	r3, [r4, #12]
 8006320:	89a3      	ldrh	r3, [r4, #12]
 8006322:	431d      	orrs	r5, r3
 8006324:	81a5      	strh	r5, [r4, #12]
 8006326:	e7cf      	b.n	80062c8 <__smakebuf_r+0x18>

08006328 <_fstat_r>:
 8006328:	b538      	push	{r3, r4, r5, lr}
 800632a:	4d07      	ldr	r5, [pc, #28]	@ (8006348 <_fstat_r+0x20>)
 800632c:	2300      	movs	r3, #0
 800632e:	4604      	mov	r4, r0
 8006330:	4608      	mov	r0, r1
 8006332:	4611      	mov	r1, r2
 8006334:	602b      	str	r3, [r5, #0]
 8006336:	f7fa fd10 	bl	8000d5a <_fstat>
 800633a:	1c43      	adds	r3, r0, #1
 800633c:	d102      	bne.n	8006344 <_fstat_r+0x1c>
 800633e:	682b      	ldr	r3, [r5, #0]
 8006340:	b103      	cbz	r3, 8006344 <_fstat_r+0x1c>
 8006342:	6023      	str	r3, [r4, #0]
 8006344:	bd38      	pop	{r3, r4, r5, pc}
 8006346:	bf00      	nop
 8006348:	2400032c 	.word	0x2400032c

0800634c <_isatty_r>:
 800634c:	b538      	push	{r3, r4, r5, lr}
 800634e:	4d06      	ldr	r5, [pc, #24]	@ (8006368 <_isatty_r+0x1c>)
 8006350:	2300      	movs	r3, #0
 8006352:	4604      	mov	r4, r0
 8006354:	4608      	mov	r0, r1
 8006356:	602b      	str	r3, [r5, #0]
 8006358:	f7fa fd0f 	bl	8000d7a <_isatty>
 800635c:	1c43      	adds	r3, r0, #1
 800635e:	d102      	bne.n	8006366 <_isatty_r+0x1a>
 8006360:	682b      	ldr	r3, [r5, #0]
 8006362:	b103      	cbz	r3, 8006366 <_isatty_r+0x1a>
 8006364:	6023      	str	r3, [r4, #0]
 8006366:	bd38      	pop	{r3, r4, r5, pc}
 8006368:	2400032c 	.word	0x2400032c

0800636c <_sbrk_r>:
 800636c:	b538      	push	{r3, r4, r5, lr}
 800636e:	4d06      	ldr	r5, [pc, #24]	@ (8006388 <_sbrk_r+0x1c>)
 8006370:	2300      	movs	r3, #0
 8006372:	4604      	mov	r4, r0
 8006374:	4608      	mov	r0, r1
 8006376:	602b      	str	r3, [r5, #0]
 8006378:	f7fa fd18 	bl	8000dac <_sbrk>
 800637c:	1c43      	adds	r3, r0, #1
 800637e:	d102      	bne.n	8006386 <_sbrk_r+0x1a>
 8006380:	682b      	ldr	r3, [r5, #0]
 8006382:	b103      	cbz	r3, 8006386 <_sbrk_r+0x1a>
 8006384:	6023      	str	r3, [r4, #0]
 8006386:	bd38      	pop	{r3, r4, r5, pc}
 8006388:	2400032c 	.word	0x2400032c

0800638c <_init>:
 800638c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800638e:	bf00      	nop
 8006390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006392:	bc08      	pop	{r3}
 8006394:	469e      	mov	lr, r3
 8006396:	4770      	bx	lr

08006398 <_fini>:
 8006398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800639a:	bf00      	nop
 800639c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800639e:	bc08      	pop	{r3}
 80063a0:	469e      	mov	lr, r3
 80063a2:	4770      	bx	lr
