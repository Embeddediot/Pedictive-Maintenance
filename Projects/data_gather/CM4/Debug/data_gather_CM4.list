
data_gather_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000380c  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08103aa4  08103aa4  00004aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08103abc  08103abc  00004abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08103ac0  08103ac0  00004ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000001c  10000000  08103ac4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000fc  1000001c  08103ae0  0000501c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  10000118  08103ae0  00005118  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00010a82  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002481  00000000  00000000  00015ace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000dc0  00000000  00000000  00017f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000a73  00000000  00000000  00018d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003a0c5  00000000  00000000  00019783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00012fcc  00000000  00000000  00053848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0017e95b  00000000  00000000  00066814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001e516f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003884  00000000  00000000  001e51b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 000000c4  00000000  00000000  001e8a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	1000001c 	.word	0x1000001c
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08103a8c 	.word	0x08103a8c

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000020 	.word	0x10000020
 81002d4:	08103a8c 	.word	0x08103a8c

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	@ (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	@ (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	@ (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	@ (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <STTS22H_Initialize>:
#include "stts22h.h"
#include "stm32h7xx_hal.h" // Include your specific HAL header

bool STTS22H_Initialize(STTS22H *sensor) {
 8100308:	b580      	push	{r7, lr}
 810030a:	b084      	sub	sp, #16
 810030c:	af00      	add	r7, sp, #0
 810030e:	6078      	str	r0, [r7, #4]
    uint8_t who_am_i = 0;
 8100310:	2300      	movs	r3, #0
 8100312:	73fb      	strb	r3, [r7, #15]
    if (!STTS22H_ReadRegister(sensor, WHO_AM_I_REG, &who_am_i) || who_am_i != WHO_AM_I_VAL) {
 8100314:	f107 030f 	add.w	r3, r7, #15
 8100318:	461a      	mov	r2, r3
 810031a:	2101      	movs	r1, #1
 810031c:	6878      	ldr	r0, [r7, #4]
 810031e:	f000 f810 	bl	8100342 <STTS22H_ReadRegister>
 8100322:	4603      	mov	r3, r0
 8100324:	f083 0301 	eor.w	r3, r3, #1
 8100328:	b2db      	uxtb	r3, r3
 810032a:	2b00      	cmp	r3, #0
 810032c:	d102      	bne.n	8100334 <STTS22H_Initialize+0x2c>
 810032e:	7bfb      	ldrb	r3, [r7, #15]
 8100330:	2ba0      	cmp	r3, #160	@ 0xa0
 8100332:	d001      	beq.n	8100338 <STTS22H_Initialize+0x30>
        return false;
 8100334:	2300      	movs	r3, #0
 8100336:	e000      	b.n	810033a <STTS22H_Initialize+0x32>
    }
    // Additional initialization code
    return true;
 8100338:	2301      	movs	r3, #1
}
 810033a:	4618      	mov	r0, r3
 810033c:	3710      	adds	r7, #16
 810033e:	46bd      	mov	sp, r7
 8100340:	bd80      	pop	{r7, pc}

08100342 <STTS22H_ReadRegister>:
        return false;
    }
    return true;
}

bool STTS22H_ReadRegister(STTS22H *sensor, uint8_t reg, uint8_t *value) {
 8100342:	b580      	push	{r7, lr}
 8100344:	b086      	sub	sp, #24
 8100346:	af02      	add	r7, sp, #8
 8100348:	60f8      	str	r0, [r7, #12]
 810034a:	460b      	mov	r3, r1
 810034c:	607a      	str	r2, [r7, #4]
 810034e:	72fb      	strb	r3, [r7, #11]
    if (HAL_I2C_Master_Transmit(sensor->i2c_handle, sensor->address, &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 8100350:	68fb      	ldr	r3, [r7, #12]
 8100352:	6818      	ldr	r0, [r3, #0]
 8100354:	68fb      	ldr	r3, [r7, #12]
 8100356:	8899      	ldrh	r1, [r3, #4]
 8100358:	f107 020b 	add.w	r2, r7, #11
 810035c:	f04f 33ff 	mov.w	r3, #4294967295
 8100360:	9300      	str	r3, [sp, #0]
 8100362:	2301      	movs	r3, #1
 8100364:	f000 ff6a 	bl	810123c <HAL_I2C_Master_Transmit>
 8100368:	4603      	mov	r3, r0
 810036a:	2b00      	cmp	r3, #0
 810036c:	d001      	beq.n	8100372 <STTS22H_ReadRegister+0x30>
        return false;
 810036e:	2300      	movs	r3, #0
 8100370:	e010      	b.n	8100394 <STTS22H_ReadRegister+0x52>
    }
    if (HAL_I2C_Master_Receive(sensor->i2c_handle, sensor->address, value, 1, HAL_MAX_DELAY) != HAL_OK) {
 8100372:	68fb      	ldr	r3, [r7, #12]
 8100374:	6818      	ldr	r0, [r3, #0]
 8100376:	68fb      	ldr	r3, [r7, #12]
 8100378:	8899      	ldrh	r1, [r3, #4]
 810037a:	f04f 33ff 	mov.w	r3, #4294967295
 810037e:	9300      	str	r3, [sp, #0]
 8100380:	2301      	movs	r3, #1
 8100382:	687a      	ldr	r2, [r7, #4]
 8100384:	f001 f872 	bl	810146c <HAL_I2C_Master_Receive>
 8100388:	4603      	mov	r3, r0
 810038a:	2b00      	cmp	r3, #0
 810038c:	d001      	beq.n	8100392 <STTS22H_ReadRegister+0x50>
        return false;
 810038e:	2300      	movs	r3, #0
 8100390:	e000      	b.n	8100394 <STTS22H_ReadRegister+0x52>
    }
    return true;
 8100392:	2301      	movs	r3, #1
}
 8100394:	4618      	mov	r0, r3
 8100396:	3710      	adds	r7, #16
 8100398:	46bd      	mov	sp, r7
 810039a:	bd80      	pop	{r7, pc}

0810039c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 810039c:	b580      	push	{r7, lr}
 810039e:	b084      	sub	sp, #16
 81003a0:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81003a2:	4b2f      	ldr	r3, [pc, #188]	@ (8100460 <main+0xc4>)
 81003a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81003a8:	4a2d      	ldr	r2, [pc, #180]	@ (8100460 <main+0xc4>)
 81003aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81003ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81003b2:	4b2b      	ldr	r3, [pc, #172]	@ (8100460 <main+0xc4>)
 81003b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81003b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81003bc:	607b      	str	r3, [r7, #4]
 81003be:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81003c0:	2001      	movs	r0, #1
 81003c2:	f000 fe8d 	bl	81010e0 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81003c6:	f001 fcff 	bl	8101dc8 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81003ca:	2201      	movs	r2, #1
 81003cc:	2102      	movs	r1, #2
 81003ce:	2000      	movs	r0, #0
 81003d0:	f001 fc80 	bl	8101cd4 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81003d4:	4b23      	ldr	r3, [pc, #140]	@ (8100464 <main+0xc8>)
 81003d6:	681b      	ldr	r3, [r3, #0]
 81003d8:	091b      	lsrs	r3, r3, #4
 81003da:	f003 030f 	and.w	r3, r3, #15
 81003de:	2b07      	cmp	r3, #7
 81003e0:	d108      	bne.n	81003f4 <main+0x58>
 81003e2:	4b21      	ldr	r3, [pc, #132]	@ (8100468 <main+0xcc>)
 81003e4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81003e8:	4a1f      	ldr	r2, [pc, #124]	@ (8100468 <main+0xcc>)
 81003ea:	f043 0301 	orr.w	r3, r3, #1
 81003ee:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 81003f2:	e007      	b.n	8100404 <main+0x68>
 81003f4:	4b1c      	ldr	r3, [pc, #112]	@ (8100468 <main+0xcc>)
 81003f6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 81003fa:	4a1b      	ldr	r2, [pc, #108]	@ (8100468 <main+0xcc>)
 81003fc:	f043 0301 	orr.w	r3, r3, #1
 8100400:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100404:	f000 fad2 	bl	81009ac <HAL_Init>

  /* USER CODE BEGIN Init */
  //STTS22H SENSOR INIT
  HAL_Delay(500);
 8100408:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 810040c:	f000 fb82 	bl	8100b14 <HAL_Delay>
  BSP_LED_Off(LED_RED);
 8100410:	2002      	movs	r0, #2
 8100412:	f000 faa1 	bl	8100958 <BSP_LED_Off>
  BSP_LED_Off(LED_GREEN);
 8100416:	2000      	movs	r0, #0
 8100418:	f000 fa9e 	bl	8100958 <BSP_LED_Off>
  BSP_LED_Off(LED_YELLOW);
 810041c:	2001      	movs	r0, #1
 810041e:	f000 fa9b 	bl	8100958 <BSP_LED_Off>
  STTS22H tempSensor;
  tempSensor.i2c_handle = &hi2c2;
 8100422:	4b12      	ldr	r3, [pc, #72]	@ (810046c <main+0xd0>)
 8100424:	60bb      	str	r3, [r7, #8]
  tempSensor.address = STTS22H_ADDRESS; //from STTS22H.h
 8100426:	2394      	movs	r3, #148	@ 0x94
 8100428:	81bb      	strh	r3, [r7, #12]

  if(STTS22H_Initialize(&tempSensor)){
 810042a:	f107 0308 	add.w	r3, r7, #8
 810042e:	4618      	mov	r0, r3
 8100430:	f7ff ff6a 	bl	8100308 <STTS22H_Initialize>
 8100434:	4603      	mov	r3, r0
 8100436:	2b00      	cmp	r3, #0
 8100438:	d003      	beq.n	8100442 <main+0xa6>
	  //INDICATE TEMP SENSOR IS ONB
	  BSP_LED_On(LED_YELLOW);
 810043a:	2001      	movs	r0, #1
 810043c:	f000 fa62 	bl	8100904 <BSP_LED_On>
 8100440:	e005      	b.n	810044e <main+0xb2>
	  //printf("[INFO] SSTS22H (TEMP) is initialised\r\n");
  } else {
	  BSP_LED_Off(LED_YELLOW);
 8100442:	2001      	movs	r0, #1
 8100444:	f000 fa88 	bl	8100958 <BSP_LED_Off>
	  BSP_LED_On(LED_RED);
 8100448:	2002      	movs	r0, #2
 810044a:	f000 fa5b 	bl	8100904 <BSP_LED_On>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 810044e:	f000 f8a5 	bl	810059c <MX_GPIO_Init>
  MX_SPI1_Init();
 8100452:	f000 f84d 	bl	81004f0 <MX_SPI1_Init>
  MX_I2C2_Init();
 8100456:	f000 f80b 	bl	8100470 <MX_I2C2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 810045a:	bf00      	nop
 810045c:	e7fd      	b.n	810045a <main+0xbe>
 810045e:	bf00      	nop
 8100460:	58024400 	.word	0x58024400
 8100464:	e000ed00 	.word	0xe000ed00
 8100468:	58026400 	.word	0x58026400
 810046c:	10000038 	.word	0x10000038

08100470 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8100470:	b580      	push	{r7, lr}
 8100472:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8100474:	4b1b      	ldr	r3, [pc, #108]	@ (81004e4 <MX_I2C2_Init+0x74>)
 8100476:	4a1c      	ldr	r2, [pc, #112]	@ (81004e8 <MX_I2C2_Init+0x78>)
 8100478:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 810047a:	4b1a      	ldr	r3, [pc, #104]	@ (81004e4 <MX_I2C2_Init+0x74>)
 810047c:	4a1b      	ldr	r2, [pc, #108]	@ (81004ec <MX_I2C2_Init+0x7c>)
 810047e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8100480:	4b18      	ldr	r3, [pc, #96]	@ (81004e4 <MX_I2C2_Init+0x74>)
 8100482:	2200      	movs	r2, #0
 8100484:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8100486:	4b17      	ldr	r3, [pc, #92]	@ (81004e4 <MX_I2C2_Init+0x74>)
 8100488:	2201      	movs	r2, #1
 810048a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 810048c:	4b15      	ldr	r3, [pc, #84]	@ (81004e4 <MX_I2C2_Init+0x74>)
 810048e:	2200      	movs	r2, #0
 8100490:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8100492:	4b14      	ldr	r3, [pc, #80]	@ (81004e4 <MX_I2C2_Init+0x74>)
 8100494:	2200      	movs	r2, #0
 8100496:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8100498:	4b12      	ldr	r3, [pc, #72]	@ (81004e4 <MX_I2C2_Init+0x74>)
 810049a:	2200      	movs	r2, #0
 810049c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810049e:	4b11      	ldr	r3, [pc, #68]	@ (81004e4 <MX_I2C2_Init+0x74>)
 81004a0:	2200      	movs	r2, #0
 81004a2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81004a4:	4b0f      	ldr	r3, [pc, #60]	@ (81004e4 <MX_I2C2_Init+0x74>)
 81004a6:	2200      	movs	r2, #0
 81004a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 81004aa:	480e      	ldr	r0, [pc, #56]	@ (81004e4 <MX_I2C2_Init+0x74>)
 81004ac:	f000 fe2a 	bl	8101104 <HAL_I2C_Init>
 81004b0:	4603      	mov	r3, r0
 81004b2:	2b00      	cmp	r3, #0
 81004b4:	d001      	beq.n	81004ba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 81004b6:	f000 f8b3 	bl	8100620 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81004ba:	2100      	movs	r1, #0
 81004bc:	4809      	ldr	r0, [pc, #36]	@ (81004e4 <MX_I2C2_Init+0x74>)
 81004be:	f001 fb71 	bl	8101ba4 <HAL_I2CEx_ConfigAnalogFilter>
 81004c2:	4603      	mov	r3, r0
 81004c4:	2b00      	cmp	r3, #0
 81004c6:	d001      	beq.n	81004cc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 81004c8:	f000 f8aa 	bl	8100620 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 81004cc:	2100      	movs	r1, #0
 81004ce:	4805      	ldr	r0, [pc, #20]	@ (81004e4 <MX_I2C2_Init+0x74>)
 81004d0:	f001 fbb3 	bl	8101c3a <HAL_I2CEx_ConfigDigitalFilter>
 81004d4:	4603      	mov	r3, r0
 81004d6:	2b00      	cmp	r3, #0
 81004d8:	d001      	beq.n	81004de <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 81004da:	f000 f8a1 	bl	8100620 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 81004de:	bf00      	nop
 81004e0:	bd80      	pop	{r7, pc}
 81004e2:	bf00      	nop
 81004e4:	10000038 	.word	0x10000038
 81004e8:	40005800 	.word	0x40005800
 81004ec:	307075b1 	.word	0x307075b1

081004f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 81004f0:	b580      	push	{r7, lr}
 81004f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 81004f4:	4b27      	ldr	r3, [pc, #156]	@ (8100594 <MX_SPI1_Init+0xa4>)
 81004f6:	4a28      	ldr	r2, [pc, #160]	@ (8100598 <MX_SPI1_Init+0xa8>)
 81004f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 81004fa:	4b26      	ldr	r3, [pc, #152]	@ (8100594 <MX_SPI1_Init+0xa4>)
 81004fc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8100500:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8100502:	4b24      	ldr	r3, [pc, #144]	@ (8100594 <MX_SPI1_Init+0xa4>)
 8100504:	2200      	movs	r2, #0
 8100506:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8100508:	4b22      	ldr	r3, [pc, #136]	@ (8100594 <MX_SPI1_Init+0xa4>)
 810050a:	2207      	movs	r2, #7
 810050c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 810050e:	4b21      	ldr	r3, [pc, #132]	@ (8100594 <MX_SPI1_Init+0xa4>)
 8100510:	2200      	movs	r2, #0
 8100512:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100514:	4b1f      	ldr	r3, [pc, #124]	@ (8100594 <MX_SPI1_Init+0xa4>)
 8100516:	2200      	movs	r2, #0
 8100518:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 810051a:	4b1e      	ldr	r3, [pc, #120]	@ (8100594 <MX_SPI1_Init+0xa4>)
 810051c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8100520:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8100522:	4b1c      	ldr	r3, [pc, #112]	@ (8100594 <MX_SPI1_Init+0xa4>)
 8100524:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8100528:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 810052a:	4b1a      	ldr	r3, [pc, #104]	@ (8100594 <MX_SPI1_Init+0xa4>)
 810052c:	2200      	movs	r2, #0
 810052e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8100530:	4b18      	ldr	r3, [pc, #96]	@ (8100594 <MX_SPI1_Init+0xa4>)
 8100532:	2200      	movs	r2, #0
 8100534:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100536:	4b17      	ldr	r3, [pc, #92]	@ (8100594 <MX_SPI1_Init+0xa4>)
 8100538:	2200      	movs	r2, #0
 810053a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 810053c:	4b15      	ldr	r3, [pc, #84]	@ (8100594 <MX_SPI1_Init+0xa4>)
 810053e:	2200      	movs	r2, #0
 8100540:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100542:	4b14      	ldr	r3, [pc, #80]	@ (8100594 <MX_SPI1_Init+0xa4>)
 8100544:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8100548:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 810054a:	4b12      	ldr	r3, [pc, #72]	@ (8100594 <MX_SPI1_Init+0xa4>)
 810054c:	2200      	movs	r2, #0
 810054e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100550:	4b10      	ldr	r3, [pc, #64]	@ (8100594 <MX_SPI1_Init+0xa4>)
 8100552:	2200      	movs	r2, #0
 8100554:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100556:	4b0f      	ldr	r3, [pc, #60]	@ (8100594 <MX_SPI1_Init+0xa4>)
 8100558:	2200      	movs	r2, #0
 810055a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810055c:	4b0d      	ldr	r3, [pc, #52]	@ (8100594 <MX_SPI1_Init+0xa4>)
 810055e:	2200      	movs	r2, #0
 8100560:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100562:	4b0c      	ldr	r3, [pc, #48]	@ (8100594 <MX_SPI1_Init+0xa4>)
 8100564:	2200      	movs	r2, #0
 8100566:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100568:	4b0a      	ldr	r3, [pc, #40]	@ (8100594 <MX_SPI1_Init+0xa4>)
 810056a:	2200      	movs	r2, #0
 810056c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 810056e:	4b09      	ldr	r3, [pc, #36]	@ (8100594 <MX_SPI1_Init+0xa4>)
 8100570:	2200      	movs	r2, #0
 8100572:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100574:	4b07      	ldr	r3, [pc, #28]	@ (8100594 <MX_SPI1_Init+0xa4>)
 8100576:	2200      	movs	r2, #0
 8100578:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 810057a:	4b06      	ldr	r3, [pc, #24]	@ (8100594 <MX_SPI1_Init+0xa4>)
 810057c:	2200      	movs	r2, #0
 810057e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8100580:	4804      	ldr	r0, [pc, #16]	@ (8100594 <MX_SPI1_Init+0xa4>)
 8100582:	f003 f917 	bl	81037b4 <HAL_SPI_Init>
 8100586:	4603      	mov	r3, r0
 8100588:	2b00      	cmp	r3, #0
 810058a:	d001      	beq.n	8100590 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 810058c:	f000 f848 	bl	8100620 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8100590:	bf00      	nop
 8100592:	bd80      	pop	{r7, pc}
 8100594:	1000008c 	.word	0x1000008c
 8100598:	40013000 	.word	0x40013000

0810059c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 810059c:	b580      	push	{r7, lr}
 810059e:	b088      	sub	sp, #32
 81005a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81005a2:	f107 030c 	add.w	r3, r7, #12
 81005a6:	2200      	movs	r2, #0
 81005a8:	601a      	str	r2, [r3, #0]
 81005aa:	605a      	str	r2, [r3, #4]
 81005ac:	609a      	str	r2, [r3, #8]
 81005ae:	60da      	str	r2, [r3, #12]
 81005b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81005b2:	4b19      	ldr	r3, [pc, #100]	@ (8100618 <MX_GPIO_Init+0x7c>)
 81005b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81005b8:	4a17      	ldr	r2, [pc, #92]	@ (8100618 <MX_GPIO_Init+0x7c>)
 81005ba:	f043 0301 	orr.w	r3, r3, #1
 81005be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81005c2:	4b15      	ldr	r3, [pc, #84]	@ (8100618 <MX_GPIO_Init+0x7c>)
 81005c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81005c8:	f003 0301 	and.w	r3, r3, #1
 81005cc:	60bb      	str	r3, [r7, #8]
 81005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81005d0:	4b11      	ldr	r3, [pc, #68]	@ (8100618 <MX_GPIO_Init+0x7c>)
 81005d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81005d6:	4a10      	ldr	r2, [pc, #64]	@ (8100618 <MX_GPIO_Init+0x7c>)
 81005d8:	f043 0302 	orr.w	r3, r3, #2
 81005dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81005e0:	4b0d      	ldr	r3, [pc, #52]	@ (8100618 <MX_GPIO_Init+0x7c>)
 81005e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81005e6:	f003 0302 	and.w	r3, r3, #2
 81005ea:	607b      	str	r3, [r7, #4]
 81005ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 81005ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 81005f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81005f4:	2312      	movs	r3, #18
 81005f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81005f8:	2300      	movs	r3, #0
 81005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81005fc:	2300      	movs	r3, #0
 81005fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8100600:	2304      	movs	r3, #4
 8100602:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100604:	f107 030c 	add.w	r3, r7, #12
 8100608:	4619      	mov	r1, r3
 810060a:	4804      	ldr	r0, [pc, #16]	@ (810061c <MX_GPIO_Init+0x80>)
 810060c:	f000 fb9e 	bl	8100d4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8100610:	bf00      	nop
 8100612:	3720      	adds	r7, #32
 8100614:	46bd      	mov	sp, r7
 8100616:	bd80      	pop	{r7, pc}
 8100618:	58024400 	.word	0x58024400
 810061c:	58020400 	.word	0x58020400

08100620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100620:	b480      	push	{r7}
 8100622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100624:	b672      	cpsid	i
}
 8100626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100628:	bf00      	nop
 810062a:	e7fd      	b.n	8100628 <Error_Handler+0x8>

0810062c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 810062c:	b480      	push	{r7}
 810062e:	b083      	sub	sp, #12
 8100630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100632:	4b0a      	ldr	r3, [pc, #40]	@ (810065c <HAL_MspInit+0x30>)
 8100634:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100638:	4a08      	ldr	r2, [pc, #32]	@ (810065c <HAL_MspInit+0x30>)
 810063a:	f043 0302 	orr.w	r3, r3, #2
 810063e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100642:	4b06      	ldr	r3, [pc, #24]	@ (810065c <HAL_MspInit+0x30>)
 8100644:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100648:	f003 0302 	and.w	r3, r3, #2
 810064c:	607b      	str	r3, [r7, #4]
 810064e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100650:	bf00      	nop
 8100652:	370c      	adds	r7, #12
 8100654:	46bd      	mov	sp, r7
 8100656:	f85d 7b04 	ldr.w	r7, [sp], #4
 810065a:	4770      	bx	lr
 810065c:	58024400 	.word	0x58024400

08100660 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8100660:	b580      	push	{r7, lr}
 8100662:	b0ba      	sub	sp, #232	@ 0xe8
 8100664:	af00      	add	r7, sp, #0
 8100666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100668:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 810066c:	2200      	movs	r2, #0
 810066e:	601a      	str	r2, [r3, #0]
 8100670:	605a      	str	r2, [r3, #4]
 8100672:	609a      	str	r2, [r3, #8]
 8100674:	60da      	str	r2, [r3, #12]
 8100676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100678:	f107 0310 	add.w	r3, r7, #16
 810067c:	22c0      	movs	r2, #192	@ 0xc0
 810067e:	2100      	movs	r1, #0
 8100680:	4618      	mov	r0, r3
 8100682:	f003 f9d6 	bl	8103a32 <memset>
  if(hi2c->Instance==I2C2)
 8100686:	687b      	ldr	r3, [r7, #4]
 8100688:	681b      	ldr	r3, [r3, #0]
 810068a:	4a27      	ldr	r2, [pc, #156]	@ (8100728 <HAL_I2C_MspInit+0xc8>)
 810068c:	4293      	cmp	r3, r2
 810068e:	d146      	bne.n	810071e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8100690:	f04f 0208 	mov.w	r2, #8
 8100694:	f04f 0300 	mov.w	r3, #0
 8100698:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 810069c:	2300      	movs	r3, #0
 810069e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81006a2:	f107 0310 	add.w	r3, r7, #16
 81006a6:	4618      	mov	r0, r3
 81006a8:	f001 fd16 	bl	81020d8 <HAL_RCCEx_PeriphCLKConfig>
 81006ac:	4603      	mov	r3, r0
 81006ae:	2b00      	cmp	r3, #0
 81006b0:	d001      	beq.n	81006b6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 81006b2:	f7ff ffb5 	bl	8100620 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81006b6:	4b1d      	ldr	r3, [pc, #116]	@ (810072c <HAL_I2C_MspInit+0xcc>)
 81006b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006bc:	4a1b      	ldr	r2, [pc, #108]	@ (810072c <HAL_I2C_MspInit+0xcc>)
 81006be:	f043 0302 	orr.w	r3, r3, #2
 81006c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81006c6:	4b19      	ldr	r3, [pc, #100]	@ (810072c <HAL_I2C_MspInit+0xcc>)
 81006c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006cc:	f003 0302 	and.w	r3, r3, #2
 81006d0:	60fb      	str	r3, [r7, #12]
 81006d2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 81006d4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 81006d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81006dc:	2312      	movs	r3, #18
 81006de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81006e2:	2300      	movs	r3, #0
 81006e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81006e8:	2300      	movs	r3, #0
 81006ea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 81006ee:	2304      	movs	r3, #4
 81006f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81006f4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81006f8:	4619      	mov	r1, r3
 81006fa:	480d      	ldr	r0, [pc, #52]	@ (8100730 <HAL_I2C_MspInit+0xd0>)
 81006fc:	f000 fb26 	bl	8100d4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8100700:	4b0a      	ldr	r3, [pc, #40]	@ (810072c <HAL_I2C_MspInit+0xcc>)
 8100702:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100706:	4a09      	ldr	r2, [pc, #36]	@ (810072c <HAL_I2C_MspInit+0xcc>)
 8100708:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810070c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8100710:	4b06      	ldr	r3, [pc, #24]	@ (810072c <HAL_I2C_MspInit+0xcc>)
 8100712:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100716:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810071a:	60bb      	str	r3, [r7, #8]
 810071c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 810071e:	bf00      	nop
 8100720:	37e8      	adds	r7, #232	@ 0xe8
 8100722:	46bd      	mov	sp, r7
 8100724:	bd80      	pop	{r7, pc}
 8100726:	bf00      	nop
 8100728:	40005800 	.word	0x40005800
 810072c:	58024400 	.word	0x58024400
 8100730:	58020400 	.word	0x58020400

08100734 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8100734:	b580      	push	{r7, lr}
 8100736:	b0bc      	sub	sp, #240	@ 0xf0
 8100738:	af00      	add	r7, sp, #0
 810073a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810073c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8100740:	2200      	movs	r2, #0
 8100742:	601a      	str	r2, [r3, #0]
 8100744:	605a      	str	r2, [r3, #4]
 8100746:	609a      	str	r2, [r3, #8]
 8100748:	60da      	str	r2, [r3, #12]
 810074a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810074c:	f107 0318 	add.w	r3, r7, #24
 8100750:	22c0      	movs	r2, #192	@ 0xc0
 8100752:	2100      	movs	r1, #0
 8100754:	4618      	mov	r0, r3
 8100756:	f003 f96c 	bl	8103a32 <memset>
  if(hspi->Instance==SPI1)
 810075a:	687b      	ldr	r3, [r7, #4]
 810075c:	681b      	ldr	r3, [r3, #0]
 810075e:	4a38      	ldr	r2, [pc, #224]	@ (8100840 <HAL_SPI_MspInit+0x10c>)
 8100760:	4293      	cmp	r3, r2
 8100762:	d168      	bne.n	8100836 <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8100764:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8100768:	f04f 0300 	mov.w	r3, #0
 810076c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8100770:	2300      	movs	r3, #0
 8100772:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100774:	f107 0318 	add.w	r3, r7, #24
 8100778:	4618      	mov	r0, r3
 810077a:	f001 fcad 	bl	81020d8 <HAL_RCCEx_PeriphCLKConfig>
 810077e:	4603      	mov	r3, r0
 8100780:	2b00      	cmp	r3, #0
 8100782:	d001      	beq.n	8100788 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8100784:	f7ff ff4c 	bl	8100620 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8100788:	4b2e      	ldr	r3, [pc, #184]	@ (8100844 <HAL_SPI_MspInit+0x110>)
 810078a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810078e:	4a2d      	ldr	r2, [pc, #180]	@ (8100844 <HAL_SPI_MspInit+0x110>)
 8100790:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8100794:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8100798:	4b2a      	ldr	r3, [pc, #168]	@ (8100844 <HAL_SPI_MspInit+0x110>)
 810079a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810079e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 81007a2:	617b      	str	r3, [r7, #20]
 81007a4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81007a6:	4b27      	ldr	r3, [pc, #156]	@ (8100844 <HAL_SPI_MspInit+0x110>)
 81007a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81007ac:	4a25      	ldr	r2, [pc, #148]	@ (8100844 <HAL_SPI_MspInit+0x110>)
 81007ae:	f043 0301 	orr.w	r3, r3, #1
 81007b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81007b6:	4b23      	ldr	r3, [pc, #140]	@ (8100844 <HAL_SPI_MspInit+0x110>)
 81007b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81007bc:	f003 0301 	and.w	r3, r3, #1
 81007c0:	613b      	str	r3, [r7, #16]
 81007c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 81007c4:	4b1f      	ldr	r3, [pc, #124]	@ (8100844 <HAL_SPI_MspInit+0x110>)
 81007c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81007ca:	4a1e      	ldr	r2, [pc, #120]	@ (8100844 <HAL_SPI_MspInit+0x110>)
 81007cc:	f043 0302 	orr.w	r3, r3, #2
 81007d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81007d4:	4b1b      	ldr	r3, [pc, #108]	@ (8100844 <HAL_SPI_MspInit+0x110>)
 81007d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81007da:	f003 0302 	and.w	r3, r3, #2
 81007de:	60fb      	str	r3, [r7, #12]
 81007e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 81007e2:	2360      	movs	r3, #96	@ 0x60
 81007e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81007e8:	2302      	movs	r3, #2
 81007ea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81007ee:	2300      	movs	r3, #0
 81007f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81007f4:	2300      	movs	r3, #0
 81007f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 81007fa:	2305      	movs	r3, #5
 81007fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8100800:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8100804:	4619      	mov	r1, r3
 8100806:	4810      	ldr	r0, [pc, #64]	@ (8100848 <HAL_SPI_MspInit+0x114>)
 8100808:	f000 faa0 	bl	8100d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 810080c:	2320      	movs	r3, #32
 810080e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100812:	2302      	movs	r3, #2
 8100814:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100818:	2300      	movs	r3, #0
 810081a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810081e:	2300      	movs	r3, #0
 8100820:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8100824:	2305      	movs	r3, #5
 8100826:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810082a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 810082e:	4619      	mov	r1, r3
 8100830:	4806      	ldr	r0, [pc, #24]	@ (810084c <HAL_SPI_MspInit+0x118>)
 8100832:	f000 fa8b 	bl	8100d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8100836:	bf00      	nop
 8100838:	37f0      	adds	r7, #240	@ 0xf0
 810083a:	46bd      	mov	sp, r7
 810083c:	bd80      	pop	{r7, pc}
 810083e:	bf00      	nop
 8100840:	40013000 	.word	0x40013000
 8100844:	58024400 	.word	0x58024400
 8100848:	58020000 	.word	0x58020000
 810084c:	58020400 	.word	0x58020400

08100850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100850:	b480      	push	{r7}
 8100852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8100854:	bf00      	nop
 8100856:	e7fd      	b.n	8100854 <NMI_Handler+0x4>

08100858 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100858:	b480      	push	{r7}
 810085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810085c:	bf00      	nop
 810085e:	e7fd      	b.n	810085c <HardFault_Handler+0x4>

08100860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100860:	b480      	push	{r7}
 8100862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100864:	bf00      	nop
 8100866:	e7fd      	b.n	8100864 <MemManage_Handler+0x4>

08100868 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100868:	b480      	push	{r7}
 810086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810086c:	bf00      	nop
 810086e:	e7fd      	b.n	810086c <BusFault_Handler+0x4>

08100870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100870:	b480      	push	{r7}
 8100872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100874:	bf00      	nop
 8100876:	e7fd      	b.n	8100874 <UsageFault_Handler+0x4>

08100878 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100878:	b480      	push	{r7}
 810087a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810087c:	bf00      	nop
 810087e:	46bd      	mov	sp, r7
 8100880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100884:	4770      	bx	lr

08100886 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100886:	b480      	push	{r7}
 8100888:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810088a:	bf00      	nop
 810088c:	46bd      	mov	sp, r7
 810088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100892:	4770      	bx	lr

08100894 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8100894:	b480      	push	{r7}
 8100896:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8100898:	bf00      	nop
 810089a:	46bd      	mov	sp, r7
 810089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008a0:	4770      	bx	lr

081008a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81008a2:	b580      	push	{r7, lr}
 81008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81008a6:	f000 f915 	bl	8100ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81008aa:	bf00      	nop
 81008ac:	bd80      	pop	{r7, pc}
	...

081008b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81008b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 81008e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81008b4:	f7ff fd10 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81008b8:	480c      	ldr	r0, [pc, #48]	@ (81008ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81008ba:	490d      	ldr	r1, [pc, #52]	@ (81008f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81008bc:	4a0d      	ldr	r2, [pc, #52]	@ (81008f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81008be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81008c0:	e002      	b.n	81008c8 <LoopCopyDataInit>

081008c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81008c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81008c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81008c6:	3304      	adds	r3, #4

081008c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81008c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81008ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81008cc:	d3f9      	bcc.n	81008c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81008ce:	4a0a      	ldr	r2, [pc, #40]	@ (81008f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81008d0:	4c0a      	ldr	r4, [pc, #40]	@ (81008fc <LoopFillZerobss+0x22>)
  movs r3, #0
 81008d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 81008d4:	e001      	b.n	81008da <LoopFillZerobss>

081008d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81008d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81008d8:	3204      	adds	r2, #4

081008da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81008da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81008dc:	d3fb      	bcc.n	81008d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81008de:	f003 f8b1 	bl	8103a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81008e2:	f7ff fd5b 	bl	810039c <main>
  bx  lr
 81008e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81008e8:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81008ec:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81008f0:	1000001c 	.word	0x1000001c
  ldr r2, =_sidata
 81008f4:	08103ac4 	.word	0x08103ac4
  ldr r2, =_sbss
 81008f8:	1000001c 	.word	0x1000001c
  ldr r4, =_ebss
 81008fc:	10000118 	.word	0x10000118

08100900 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100900:	e7fe      	b.n	8100900 <ADC3_IRQHandler>
	...

08100904 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8100904:	b580      	push	{r7, lr}
 8100906:	b084      	sub	sp, #16
 8100908:	af00      	add	r7, sp, #0
 810090a:	4603      	mov	r3, r0
 810090c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 810090e:	2300      	movs	r3, #0
 8100910:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8100912:	79fb      	ldrb	r3, [r7, #7]
 8100914:	2b00      	cmp	r3, #0
 8100916:	d009      	beq.n	810092c <BSP_LED_On+0x28>
 8100918:	79fb      	ldrb	r3, [r7, #7]
 810091a:	2b01      	cmp	r3, #1
 810091c:	d006      	beq.n	810092c <BSP_LED_On+0x28>
 810091e:	79fb      	ldrb	r3, [r7, #7]
 8100920:	2b02      	cmp	r3, #2
 8100922:	d003      	beq.n	810092c <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8100924:	f06f 0301 	mvn.w	r3, #1
 8100928:	60fb      	str	r3, [r7, #12]
 810092a:	e00b      	b.n	8100944 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 810092c:	79fb      	ldrb	r3, [r7, #7]
 810092e:	4a08      	ldr	r2, [pc, #32]	@ (8100950 <BSP_LED_On+0x4c>)
 8100930:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8100934:	79fb      	ldrb	r3, [r7, #7]
 8100936:	4a07      	ldr	r2, [pc, #28]	@ (8100954 <BSP_LED_On+0x50>)
 8100938:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810093c:	2201      	movs	r2, #1
 810093e:	4619      	mov	r1, r3
 8100940:	f000 fbb4 	bl	81010ac <HAL_GPIO_WritePin>
  }

  return ret;
 8100944:	68fb      	ldr	r3, [r7, #12]
}
 8100946:	4618      	mov	r0, r3
 8100948:	3710      	adds	r7, #16
 810094a:	46bd      	mov	sp, r7
 810094c:	bd80      	pop	{r7, pc}
 810094e:	bf00      	nop
 8100950:	10000008 	.word	0x10000008
 8100954:	08103ab4 	.word	0x08103ab4

08100958 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8100958:	b580      	push	{r7, lr}
 810095a:	b084      	sub	sp, #16
 810095c:	af00      	add	r7, sp, #0
 810095e:	4603      	mov	r3, r0
 8100960:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8100962:	2300      	movs	r3, #0
 8100964:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8100966:	79fb      	ldrb	r3, [r7, #7]
 8100968:	2b00      	cmp	r3, #0
 810096a:	d009      	beq.n	8100980 <BSP_LED_Off+0x28>
 810096c:	79fb      	ldrb	r3, [r7, #7]
 810096e:	2b01      	cmp	r3, #1
 8100970:	d006      	beq.n	8100980 <BSP_LED_Off+0x28>
 8100972:	79fb      	ldrb	r3, [r7, #7]
 8100974:	2b02      	cmp	r3, #2
 8100976:	d003      	beq.n	8100980 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8100978:	f06f 0301 	mvn.w	r3, #1
 810097c:	60fb      	str	r3, [r7, #12]
 810097e:	e00b      	b.n	8100998 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8100980:	79fb      	ldrb	r3, [r7, #7]
 8100982:	4a08      	ldr	r2, [pc, #32]	@ (81009a4 <BSP_LED_Off+0x4c>)
 8100984:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8100988:	79fb      	ldrb	r3, [r7, #7]
 810098a:	4a07      	ldr	r2, [pc, #28]	@ (81009a8 <BSP_LED_Off+0x50>)
 810098c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8100990:	2200      	movs	r2, #0
 8100992:	4619      	mov	r1, r3
 8100994:	f000 fb8a 	bl	81010ac <HAL_GPIO_WritePin>
  }

  return ret;
 8100998:	68fb      	ldr	r3, [r7, #12]
}
 810099a:	4618      	mov	r0, r3
 810099c:	3710      	adds	r7, #16
 810099e:	46bd      	mov	sp, r7
 81009a0:	bd80      	pop	{r7, pc}
 81009a2:	bf00      	nop
 81009a4:	10000008 	.word	0x10000008
 81009a8:	08103ab4 	.word	0x08103ab4

081009ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81009ac:	b580      	push	{r7, lr}
 81009ae:	b082      	sub	sp, #8
 81009b0:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81009b2:	4b28      	ldr	r3, [pc, #160]	@ (8100a54 <HAL_Init+0xa8>)
 81009b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81009b8:	4a26      	ldr	r2, [pc, #152]	@ (8100a54 <HAL_Init+0xa8>)
 81009ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81009be:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81009c2:	4b24      	ldr	r3, [pc, #144]	@ (8100a54 <HAL_Init+0xa8>)
 81009c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81009c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81009cc:	603b      	str	r3, [r7, #0]
 81009ce:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81009d0:	4b21      	ldr	r3, [pc, #132]	@ (8100a58 <HAL_Init+0xac>)
 81009d2:	681b      	ldr	r3, [r3, #0]
 81009d4:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 81009d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81009dc:	4a1e      	ldr	r2, [pc, #120]	@ (8100a58 <HAL_Init+0xac>)
 81009de:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 81009e2:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81009e4:	4b1c      	ldr	r3, [pc, #112]	@ (8100a58 <HAL_Init+0xac>)
 81009e6:	681b      	ldr	r3, [r3, #0]
 81009e8:	4a1b      	ldr	r2, [pc, #108]	@ (8100a58 <HAL_Init+0xac>)
 81009ea:	f043 0301 	orr.w	r3, r3, #1
 81009ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81009f0:	2003      	movs	r0, #3
 81009f2:	f000 f965 	bl	8100cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81009f6:	f001 f9f5 	bl	8101de4 <HAL_RCC_GetSysClockFreq>
 81009fa:	4602      	mov	r2, r0
 81009fc:	4b15      	ldr	r3, [pc, #84]	@ (8100a54 <HAL_Init+0xa8>)
 81009fe:	699b      	ldr	r3, [r3, #24]
 8100a00:	0a1b      	lsrs	r3, r3, #8
 8100a02:	f003 030f 	and.w	r3, r3, #15
 8100a06:	4915      	ldr	r1, [pc, #84]	@ (8100a5c <HAL_Init+0xb0>)
 8100a08:	5ccb      	ldrb	r3, [r1, r3]
 8100a0a:	f003 031f 	and.w	r3, r3, #31
 8100a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8100a12:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100a14:	4b0f      	ldr	r3, [pc, #60]	@ (8100a54 <HAL_Init+0xa8>)
 8100a16:	699b      	ldr	r3, [r3, #24]
 8100a18:	f003 030f 	and.w	r3, r3, #15
 8100a1c:	4a0f      	ldr	r2, [pc, #60]	@ (8100a5c <HAL_Init+0xb0>)
 8100a1e:	5cd3      	ldrb	r3, [r2, r3]
 8100a20:	f003 031f 	and.w	r3, r3, #31
 8100a24:	687a      	ldr	r2, [r7, #4]
 8100a26:	fa22 f303 	lsr.w	r3, r2, r3
 8100a2a:	4a0d      	ldr	r2, [pc, #52]	@ (8100a60 <HAL_Init+0xb4>)
 8100a2c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8100a60 <HAL_Init+0xb4>)
 8100a30:	681b      	ldr	r3, [r3, #0]
 8100a32:	4a0c      	ldr	r2, [pc, #48]	@ (8100a64 <HAL_Init+0xb8>)
 8100a34:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100a36:	2000      	movs	r0, #0
 8100a38:	f000 f816 	bl	8100a68 <HAL_InitTick>
 8100a3c:	4603      	mov	r3, r0
 8100a3e:	2b00      	cmp	r3, #0
 8100a40:	d001      	beq.n	8100a46 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100a42:	2301      	movs	r3, #1
 8100a44:	e002      	b.n	8100a4c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100a46:	f7ff fdf1 	bl	810062c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100a4a:	2300      	movs	r3, #0
}
 8100a4c:	4618      	mov	r0, r3
 8100a4e:	3708      	adds	r7, #8
 8100a50:	46bd      	mov	sp, r7
 8100a52:	bd80      	pop	{r7, pc}
 8100a54:	58024400 	.word	0x58024400
 8100a58:	40024400 	.word	0x40024400
 8100a5c:	08103aa4 	.word	0x08103aa4
 8100a60:	10000004 	.word	0x10000004
 8100a64:	10000000 	.word	0x10000000

08100a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100a68:	b580      	push	{r7, lr}
 8100a6a:	b082      	sub	sp, #8
 8100a6c:	af00      	add	r7, sp, #0
 8100a6e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100a70:	4b15      	ldr	r3, [pc, #84]	@ (8100ac8 <HAL_InitTick+0x60>)
 8100a72:	781b      	ldrb	r3, [r3, #0]
 8100a74:	2b00      	cmp	r3, #0
 8100a76:	d101      	bne.n	8100a7c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100a78:	2301      	movs	r3, #1
 8100a7a:	e021      	b.n	8100ac0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100a7c:	4b13      	ldr	r3, [pc, #76]	@ (8100acc <HAL_InitTick+0x64>)
 8100a7e:	681a      	ldr	r2, [r3, #0]
 8100a80:	4b11      	ldr	r3, [pc, #68]	@ (8100ac8 <HAL_InitTick+0x60>)
 8100a82:	781b      	ldrb	r3, [r3, #0]
 8100a84:	4619      	mov	r1, r3
 8100a86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8100a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8100a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8100a92:	4618      	mov	r0, r3
 8100a94:	f000 f939 	bl	8100d0a <HAL_SYSTICK_Config>
 8100a98:	4603      	mov	r3, r0
 8100a9a:	2b00      	cmp	r3, #0
 8100a9c:	d001      	beq.n	8100aa2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100a9e:	2301      	movs	r3, #1
 8100aa0:	e00e      	b.n	8100ac0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100aa2:	687b      	ldr	r3, [r7, #4]
 8100aa4:	2b0f      	cmp	r3, #15
 8100aa6:	d80a      	bhi.n	8100abe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100aa8:	2200      	movs	r2, #0
 8100aaa:	6879      	ldr	r1, [r7, #4]
 8100aac:	f04f 30ff 	mov.w	r0, #4294967295
 8100ab0:	f000 f911 	bl	8100cd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100ab4:	4a06      	ldr	r2, [pc, #24]	@ (8100ad0 <HAL_InitTick+0x68>)
 8100ab6:	687b      	ldr	r3, [r7, #4]
 8100ab8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100aba:	2300      	movs	r3, #0
 8100abc:	e000      	b.n	8100ac0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100abe:	2301      	movs	r3, #1
}
 8100ac0:	4618      	mov	r0, r3
 8100ac2:	3708      	adds	r7, #8
 8100ac4:	46bd      	mov	sp, r7
 8100ac6:	bd80      	pop	{r7, pc}
 8100ac8:	10000018 	.word	0x10000018
 8100acc:	10000000 	.word	0x10000000
 8100ad0:	10000014 	.word	0x10000014

08100ad4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100ad4:	b480      	push	{r7}
 8100ad6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100ad8:	4b06      	ldr	r3, [pc, #24]	@ (8100af4 <HAL_IncTick+0x20>)
 8100ada:	781b      	ldrb	r3, [r3, #0]
 8100adc:	461a      	mov	r2, r3
 8100ade:	4b06      	ldr	r3, [pc, #24]	@ (8100af8 <HAL_IncTick+0x24>)
 8100ae0:	681b      	ldr	r3, [r3, #0]
 8100ae2:	4413      	add	r3, r2
 8100ae4:	4a04      	ldr	r2, [pc, #16]	@ (8100af8 <HAL_IncTick+0x24>)
 8100ae6:	6013      	str	r3, [r2, #0]
}
 8100ae8:	bf00      	nop
 8100aea:	46bd      	mov	sp, r7
 8100aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100af0:	4770      	bx	lr
 8100af2:	bf00      	nop
 8100af4:	10000018 	.word	0x10000018
 8100af8:	10000114 	.word	0x10000114

08100afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100afc:	b480      	push	{r7}
 8100afe:	af00      	add	r7, sp, #0
  return uwTick;
 8100b00:	4b03      	ldr	r3, [pc, #12]	@ (8100b10 <HAL_GetTick+0x14>)
 8100b02:	681b      	ldr	r3, [r3, #0]
}
 8100b04:	4618      	mov	r0, r3
 8100b06:	46bd      	mov	sp, r7
 8100b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b0c:	4770      	bx	lr
 8100b0e:	bf00      	nop
 8100b10:	10000114 	.word	0x10000114

08100b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8100b14:	b580      	push	{r7, lr}
 8100b16:	b084      	sub	sp, #16
 8100b18:	af00      	add	r7, sp, #0
 8100b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8100b1c:	f7ff ffee 	bl	8100afc <HAL_GetTick>
 8100b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8100b22:	687b      	ldr	r3, [r7, #4]
 8100b24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8100b26:	68fb      	ldr	r3, [r7, #12]
 8100b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8100b2c:	d005      	beq.n	8100b3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8100b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8100b58 <HAL_Delay+0x44>)
 8100b30:	781b      	ldrb	r3, [r3, #0]
 8100b32:	461a      	mov	r2, r3
 8100b34:	68fb      	ldr	r3, [r7, #12]
 8100b36:	4413      	add	r3, r2
 8100b38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8100b3a:	bf00      	nop
 8100b3c:	f7ff ffde 	bl	8100afc <HAL_GetTick>
 8100b40:	4602      	mov	r2, r0
 8100b42:	68bb      	ldr	r3, [r7, #8]
 8100b44:	1ad3      	subs	r3, r2, r3
 8100b46:	68fa      	ldr	r2, [r7, #12]
 8100b48:	429a      	cmp	r2, r3
 8100b4a:	d8f7      	bhi.n	8100b3c <HAL_Delay+0x28>
  {
  }
}
 8100b4c:	bf00      	nop
 8100b4e:	bf00      	nop
 8100b50:	3710      	adds	r7, #16
 8100b52:	46bd      	mov	sp, r7
 8100b54:	bd80      	pop	{r7, pc}
 8100b56:	bf00      	nop
 8100b58:	10000018 	.word	0x10000018

08100b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100b5c:	b480      	push	{r7}
 8100b5e:	b085      	sub	sp, #20
 8100b60:	af00      	add	r7, sp, #0
 8100b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100b64:	687b      	ldr	r3, [r7, #4]
 8100b66:	f003 0307 	and.w	r3, r3, #7
 8100b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8100ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8100b6e:	68db      	ldr	r3, [r3, #12]
 8100b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100b72:	68ba      	ldr	r2, [r7, #8]
 8100b74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8100b78:	4013      	ands	r3, r2
 8100b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100b7c:	68fb      	ldr	r3, [r7, #12]
 8100b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100b80:	68bb      	ldr	r3, [r7, #8]
 8100b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100b84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8100b88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8100b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100b8e:	4a04      	ldr	r2, [pc, #16]	@ (8100ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8100b90:	68bb      	ldr	r3, [r7, #8]
 8100b92:	60d3      	str	r3, [r2, #12]
}
 8100b94:	bf00      	nop
 8100b96:	3714      	adds	r7, #20
 8100b98:	46bd      	mov	sp, r7
 8100b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b9e:	4770      	bx	lr
 8100ba0:	e000ed00 	.word	0xe000ed00

08100ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100ba4:	b480      	push	{r7}
 8100ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100ba8:	4b04      	ldr	r3, [pc, #16]	@ (8100bbc <__NVIC_GetPriorityGrouping+0x18>)
 8100baa:	68db      	ldr	r3, [r3, #12]
 8100bac:	0a1b      	lsrs	r3, r3, #8
 8100bae:	f003 0307 	and.w	r3, r3, #7
}
 8100bb2:	4618      	mov	r0, r3
 8100bb4:	46bd      	mov	sp, r7
 8100bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bba:	4770      	bx	lr
 8100bbc:	e000ed00 	.word	0xe000ed00

08100bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100bc0:	b480      	push	{r7}
 8100bc2:	b083      	sub	sp, #12
 8100bc4:	af00      	add	r7, sp, #0
 8100bc6:	4603      	mov	r3, r0
 8100bc8:	6039      	str	r1, [r7, #0]
 8100bca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100bcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100bd0:	2b00      	cmp	r3, #0
 8100bd2:	db0a      	blt.n	8100bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100bd4:	683b      	ldr	r3, [r7, #0]
 8100bd6:	b2da      	uxtb	r2, r3
 8100bd8:	490c      	ldr	r1, [pc, #48]	@ (8100c0c <__NVIC_SetPriority+0x4c>)
 8100bda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100bde:	0112      	lsls	r2, r2, #4
 8100be0:	b2d2      	uxtb	r2, r2
 8100be2:	440b      	add	r3, r1
 8100be4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100be8:	e00a      	b.n	8100c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100bea:	683b      	ldr	r3, [r7, #0]
 8100bec:	b2da      	uxtb	r2, r3
 8100bee:	4908      	ldr	r1, [pc, #32]	@ (8100c10 <__NVIC_SetPriority+0x50>)
 8100bf0:	88fb      	ldrh	r3, [r7, #6]
 8100bf2:	f003 030f 	and.w	r3, r3, #15
 8100bf6:	3b04      	subs	r3, #4
 8100bf8:	0112      	lsls	r2, r2, #4
 8100bfa:	b2d2      	uxtb	r2, r2
 8100bfc:	440b      	add	r3, r1
 8100bfe:	761a      	strb	r2, [r3, #24]
}
 8100c00:	bf00      	nop
 8100c02:	370c      	adds	r7, #12
 8100c04:	46bd      	mov	sp, r7
 8100c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c0a:	4770      	bx	lr
 8100c0c:	e000e100 	.word	0xe000e100
 8100c10:	e000ed00 	.word	0xe000ed00

08100c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100c14:	b480      	push	{r7}
 8100c16:	b089      	sub	sp, #36	@ 0x24
 8100c18:	af00      	add	r7, sp, #0
 8100c1a:	60f8      	str	r0, [r7, #12]
 8100c1c:	60b9      	str	r1, [r7, #8]
 8100c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100c20:	68fb      	ldr	r3, [r7, #12]
 8100c22:	f003 0307 	and.w	r3, r3, #7
 8100c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100c28:	69fb      	ldr	r3, [r7, #28]
 8100c2a:	f1c3 0307 	rsb	r3, r3, #7
 8100c2e:	2b04      	cmp	r3, #4
 8100c30:	bf28      	it	cs
 8100c32:	2304      	movcs	r3, #4
 8100c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100c36:	69fb      	ldr	r3, [r7, #28]
 8100c38:	3304      	adds	r3, #4
 8100c3a:	2b06      	cmp	r3, #6
 8100c3c:	d902      	bls.n	8100c44 <NVIC_EncodePriority+0x30>
 8100c3e:	69fb      	ldr	r3, [r7, #28]
 8100c40:	3b03      	subs	r3, #3
 8100c42:	e000      	b.n	8100c46 <NVIC_EncodePriority+0x32>
 8100c44:	2300      	movs	r3, #0
 8100c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100c48:	f04f 32ff 	mov.w	r2, #4294967295
 8100c4c:	69bb      	ldr	r3, [r7, #24]
 8100c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8100c52:	43da      	mvns	r2, r3
 8100c54:	68bb      	ldr	r3, [r7, #8]
 8100c56:	401a      	ands	r2, r3
 8100c58:	697b      	ldr	r3, [r7, #20]
 8100c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8100c60:	697b      	ldr	r3, [r7, #20]
 8100c62:	fa01 f303 	lsl.w	r3, r1, r3
 8100c66:	43d9      	mvns	r1, r3
 8100c68:	687b      	ldr	r3, [r7, #4]
 8100c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100c6c:	4313      	orrs	r3, r2
         );
}
 8100c6e:	4618      	mov	r0, r3
 8100c70:	3724      	adds	r7, #36	@ 0x24
 8100c72:	46bd      	mov	sp, r7
 8100c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c78:	4770      	bx	lr
	...

08100c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100c7c:	b580      	push	{r7, lr}
 8100c7e:	b082      	sub	sp, #8
 8100c80:	af00      	add	r7, sp, #0
 8100c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100c84:	687b      	ldr	r3, [r7, #4]
 8100c86:	3b01      	subs	r3, #1
 8100c88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8100c8c:	d301      	bcc.n	8100c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100c8e:	2301      	movs	r3, #1
 8100c90:	e00f      	b.n	8100cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100c92:	4a0a      	ldr	r2, [pc, #40]	@ (8100cbc <SysTick_Config+0x40>)
 8100c94:	687b      	ldr	r3, [r7, #4]
 8100c96:	3b01      	subs	r3, #1
 8100c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100c9a:	210f      	movs	r1, #15
 8100c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8100ca0:	f7ff ff8e 	bl	8100bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100ca4:	4b05      	ldr	r3, [pc, #20]	@ (8100cbc <SysTick_Config+0x40>)
 8100ca6:	2200      	movs	r2, #0
 8100ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100caa:	4b04      	ldr	r3, [pc, #16]	@ (8100cbc <SysTick_Config+0x40>)
 8100cac:	2207      	movs	r2, #7
 8100cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100cb0:	2300      	movs	r3, #0
}
 8100cb2:	4618      	mov	r0, r3
 8100cb4:	3708      	adds	r7, #8
 8100cb6:	46bd      	mov	sp, r7
 8100cb8:	bd80      	pop	{r7, pc}
 8100cba:	bf00      	nop
 8100cbc:	e000e010 	.word	0xe000e010

08100cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100cc0:	b580      	push	{r7, lr}
 8100cc2:	b082      	sub	sp, #8
 8100cc4:	af00      	add	r7, sp, #0
 8100cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100cc8:	6878      	ldr	r0, [r7, #4]
 8100cca:	f7ff ff47 	bl	8100b5c <__NVIC_SetPriorityGrouping>
}
 8100cce:	bf00      	nop
 8100cd0:	3708      	adds	r7, #8
 8100cd2:	46bd      	mov	sp, r7
 8100cd4:	bd80      	pop	{r7, pc}

08100cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100cd6:	b580      	push	{r7, lr}
 8100cd8:	b086      	sub	sp, #24
 8100cda:	af00      	add	r7, sp, #0
 8100cdc:	4603      	mov	r3, r0
 8100cde:	60b9      	str	r1, [r7, #8]
 8100ce0:	607a      	str	r2, [r7, #4]
 8100ce2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100ce4:	f7ff ff5e 	bl	8100ba4 <__NVIC_GetPriorityGrouping>
 8100ce8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100cea:	687a      	ldr	r2, [r7, #4]
 8100cec:	68b9      	ldr	r1, [r7, #8]
 8100cee:	6978      	ldr	r0, [r7, #20]
 8100cf0:	f7ff ff90 	bl	8100c14 <NVIC_EncodePriority>
 8100cf4:	4602      	mov	r2, r0
 8100cf6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100cfa:	4611      	mov	r1, r2
 8100cfc:	4618      	mov	r0, r3
 8100cfe:	f7ff ff5f 	bl	8100bc0 <__NVIC_SetPriority>
}
 8100d02:	bf00      	nop
 8100d04:	3718      	adds	r7, #24
 8100d06:	46bd      	mov	sp, r7
 8100d08:	bd80      	pop	{r7, pc}

08100d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100d0a:	b580      	push	{r7, lr}
 8100d0c:	b082      	sub	sp, #8
 8100d0e:	af00      	add	r7, sp, #0
 8100d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100d12:	6878      	ldr	r0, [r7, #4]
 8100d14:	f7ff ffb2 	bl	8100c7c <SysTick_Config>
 8100d18:	4603      	mov	r3, r0
}
 8100d1a:	4618      	mov	r0, r3
 8100d1c:	3708      	adds	r7, #8
 8100d1e:	46bd      	mov	sp, r7
 8100d20:	bd80      	pop	{r7, pc}
	...

08100d24 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100d24:	b480      	push	{r7}
 8100d26:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100d28:	4b07      	ldr	r3, [pc, #28]	@ (8100d48 <HAL_GetCurrentCPUID+0x24>)
 8100d2a:	681b      	ldr	r3, [r3, #0]
 8100d2c:	091b      	lsrs	r3, r3, #4
 8100d2e:	f003 030f 	and.w	r3, r3, #15
 8100d32:	2b07      	cmp	r3, #7
 8100d34:	d101      	bne.n	8100d3a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100d36:	2303      	movs	r3, #3
 8100d38:	e000      	b.n	8100d3c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100d3a:	2301      	movs	r3, #1
  }
}
 8100d3c:	4618      	mov	r0, r3
 8100d3e:	46bd      	mov	sp, r7
 8100d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d44:	4770      	bx	lr
 8100d46:	bf00      	nop
 8100d48:	e000ed00 	.word	0xe000ed00

08100d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8100d4c:	b480      	push	{r7}
 8100d4e:	b089      	sub	sp, #36	@ 0x24
 8100d50:	af00      	add	r7, sp, #0
 8100d52:	6078      	str	r0, [r7, #4]
 8100d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8100d56:	2300      	movs	r3, #0
 8100d58:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8100d5a:	4b89      	ldr	r3, [pc, #548]	@ (8100f80 <HAL_GPIO_Init+0x234>)
 8100d5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100d5e:	e194      	b.n	810108a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8100d60:	683b      	ldr	r3, [r7, #0]
 8100d62:	681a      	ldr	r2, [r3, #0]
 8100d64:	2101      	movs	r1, #1
 8100d66:	69fb      	ldr	r3, [r7, #28]
 8100d68:	fa01 f303 	lsl.w	r3, r1, r3
 8100d6c:	4013      	ands	r3, r2
 8100d6e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8100d70:	693b      	ldr	r3, [r7, #16]
 8100d72:	2b00      	cmp	r3, #0
 8100d74:	f000 8186 	beq.w	8101084 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8100d78:	683b      	ldr	r3, [r7, #0]
 8100d7a:	685b      	ldr	r3, [r3, #4]
 8100d7c:	f003 0303 	and.w	r3, r3, #3
 8100d80:	2b01      	cmp	r3, #1
 8100d82:	d005      	beq.n	8100d90 <HAL_GPIO_Init+0x44>
 8100d84:	683b      	ldr	r3, [r7, #0]
 8100d86:	685b      	ldr	r3, [r3, #4]
 8100d88:	f003 0303 	and.w	r3, r3, #3
 8100d8c:	2b02      	cmp	r3, #2
 8100d8e:	d130      	bne.n	8100df2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8100d90:	687b      	ldr	r3, [r7, #4]
 8100d92:	689b      	ldr	r3, [r3, #8]
 8100d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8100d96:	69fb      	ldr	r3, [r7, #28]
 8100d98:	005b      	lsls	r3, r3, #1
 8100d9a:	2203      	movs	r2, #3
 8100d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8100da0:	43db      	mvns	r3, r3
 8100da2:	69ba      	ldr	r2, [r7, #24]
 8100da4:	4013      	ands	r3, r2
 8100da6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100da8:	683b      	ldr	r3, [r7, #0]
 8100daa:	68da      	ldr	r2, [r3, #12]
 8100dac:	69fb      	ldr	r3, [r7, #28]
 8100dae:	005b      	lsls	r3, r3, #1
 8100db0:	fa02 f303 	lsl.w	r3, r2, r3
 8100db4:	69ba      	ldr	r2, [r7, #24]
 8100db6:	4313      	orrs	r3, r2
 8100db8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100dba:	687b      	ldr	r3, [r7, #4]
 8100dbc:	69ba      	ldr	r2, [r7, #24]
 8100dbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100dc0:	687b      	ldr	r3, [r7, #4]
 8100dc2:	685b      	ldr	r3, [r3, #4]
 8100dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100dc6:	2201      	movs	r2, #1
 8100dc8:	69fb      	ldr	r3, [r7, #28]
 8100dca:	fa02 f303 	lsl.w	r3, r2, r3
 8100dce:	43db      	mvns	r3, r3
 8100dd0:	69ba      	ldr	r2, [r7, #24]
 8100dd2:	4013      	ands	r3, r2
 8100dd4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8100dd6:	683b      	ldr	r3, [r7, #0]
 8100dd8:	685b      	ldr	r3, [r3, #4]
 8100dda:	091b      	lsrs	r3, r3, #4
 8100ddc:	f003 0201 	and.w	r2, r3, #1
 8100de0:	69fb      	ldr	r3, [r7, #28]
 8100de2:	fa02 f303 	lsl.w	r3, r2, r3
 8100de6:	69ba      	ldr	r2, [r7, #24]
 8100de8:	4313      	orrs	r3, r2
 8100dea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100dec:	687b      	ldr	r3, [r7, #4]
 8100dee:	69ba      	ldr	r2, [r7, #24]
 8100df0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8100df2:	683b      	ldr	r3, [r7, #0]
 8100df4:	685b      	ldr	r3, [r3, #4]
 8100df6:	f003 0303 	and.w	r3, r3, #3
 8100dfa:	2b03      	cmp	r3, #3
 8100dfc:	d017      	beq.n	8100e2e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100dfe:	687b      	ldr	r3, [r7, #4]
 8100e00:	68db      	ldr	r3, [r3, #12]
 8100e02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100e04:	69fb      	ldr	r3, [r7, #28]
 8100e06:	005b      	lsls	r3, r3, #1
 8100e08:	2203      	movs	r2, #3
 8100e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8100e0e:	43db      	mvns	r3, r3
 8100e10:	69ba      	ldr	r2, [r7, #24]
 8100e12:	4013      	ands	r3, r2
 8100e14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8100e16:	683b      	ldr	r3, [r7, #0]
 8100e18:	689a      	ldr	r2, [r3, #8]
 8100e1a:	69fb      	ldr	r3, [r7, #28]
 8100e1c:	005b      	lsls	r3, r3, #1
 8100e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8100e22:	69ba      	ldr	r2, [r7, #24]
 8100e24:	4313      	orrs	r3, r2
 8100e26:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8100e28:	687b      	ldr	r3, [r7, #4]
 8100e2a:	69ba      	ldr	r2, [r7, #24]
 8100e2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8100e2e:	683b      	ldr	r3, [r7, #0]
 8100e30:	685b      	ldr	r3, [r3, #4]
 8100e32:	f003 0303 	and.w	r3, r3, #3
 8100e36:	2b02      	cmp	r3, #2
 8100e38:	d123      	bne.n	8100e82 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8100e3a:	69fb      	ldr	r3, [r7, #28]
 8100e3c:	08da      	lsrs	r2, r3, #3
 8100e3e:	687b      	ldr	r3, [r7, #4]
 8100e40:	3208      	adds	r2, #8
 8100e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8100e48:	69fb      	ldr	r3, [r7, #28]
 8100e4a:	f003 0307 	and.w	r3, r3, #7
 8100e4e:	009b      	lsls	r3, r3, #2
 8100e50:	220f      	movs	r2, #15
 8100e52:	fa02 f303 	lsl.w	r3, r2, r3
 8100e56:	43db      	mvns	r3, r3
 8100e58:	69ba      	ldr	r2, [r7, #24]
 8100e5a:	4013      	ands	r3, r2
 8100e5c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8100e5e:	683b      	ldr	r3, [r7, #0]
 8100e60:	691a      	ldr	r2, [r3, #16]
 8100e62:	69fb      	ldr	r3, [r7, #28]
 8100e64:	f003 0307 	and.w	r3, r3, #7
 8100e68:	009b      	lsls	r3, r3, #2
 8100e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8100e6e:	69ba      	ldr	r2, [r7, #24]
 8100e70:	4313      	orrs	r3, r2
 8100e72:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8100e74:	69fb      	ldr	r3, [r7, #28]
 8100e76:	08da      	lsrs	r2, r3, #3
 8100e78:	687b      	ldr	r3, [r7, #4]
 8100e7a:	3208      	adds	r2, #8
 8100e7c:	69b9      	ldr	r1, [r7, #24]
 8100e7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100e82:	687b      	ldr	r3, [r7, #4]
 8100e84:	681b      	ldr	r3, [r3, #0]
 8100e86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100e88:	69fb      	ldr	r3, [r7, #28]
 8100e8a:	005b      	lsls	r3, r3, #1
 8100e8c:	2203      	movs	r2, #3
 8100e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8100e92:	43db      	mvns	r3, r3
 8100e94:	69ba      	ldr	r2, [r7, #24]
 8100e96:	4013      	ands	r3, r2
 8100e98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8100e9a:	683b      	ldr	r3, [r7, #0]
 8100e9c:	685b      	ldr	r3, [r3, #4]
 8100e9e:	f003 0203 	and.w	r2, r3, #3
 8100ea2:	69fb      	ldr	r3, [r7, #28]
 8100ea4:	005b      	lsls	r3, r3, #1
 8100ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8100eaa:	69ba      	ldr	r2, [r7, #24]
 8100eac:	4313      	orrs	r3, r2
 8100eae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8100eb0:	687b      	ldr	r3, [r7, #4]
 8100eb2:	69ba      	ldr	r2, [r7, #24]
 8100eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8100eb6:	683b      	ldr	r3, [r7, #0]
 8100eb8:	685b      	ldr	r3, [r3, #4]
 8100eba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8100ebe:	2b00      	cmp	r3, #0
 8100ec0:	f000 80e0 	beq.w	8101084 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100ec4:	4b2f      	ldr	r3, [pc, #188]	@ (8100f84 <HAL_GPIO_Init+0x238>)
 8100ec6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100eca:	4a2e      	ldr	r2, [pc, #184]	@ (8100f84 <HAL_GPIO_Init+0x238>)
 8100ecc:	f043 0302 	orr.w	r3, r3, #2
 8100ed0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100ed4:	4b2b      	ldr	r3, [pc, #172]	@ (8100f84 <HAL_GPIO_Init+0x238>)
 8100ed6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100eda:	f003 0302 	and.w	r3, r3, #2
 8100ede:	60fb      	str	r3, [r7, #12]
 8100ee0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100ee2:	4a29      	ldr	r2, [pc, #164]	@ (8100f88 <HAL_GPIO_Init+0x23c>)
 8100ee4:	69fb      	ldr	r3, [r7, #28]
 8100ee6:	089b      	lsrs	r3, r3, #2
 8100ee8:	3302      	adds	r3, #2
 8100eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100ef0:	69fb      	ldr	r3, [r7, #28]
 8100ef2:	f003 0303 	and.w	r3, r3, #3
 8100ef6:	009b      	lsls	r3, r3, #2
 8100ef8:	220f      	movs	r2, #15
 8100efa:	fa02 f303 	lsl.w	r3, r2, r3
 8100efe:	43db      	mvns	r3, r3
 8100f00:	69ba      	ldr	r2, [r7, #24]
 8100f02:	4013      	ands	r3, r2
 8100f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100f06:	687b      	ldr	r3, [r7, #4]
 8100f08:	4a20      	ldr	r2, [pc, #128]	@ (8100f8c <HAL_GPIO_Init+0x240>)
 8100f0a:	4293      	cmp	r3, r2
 8100f0c:	d052      	beq.n	8100fb4 <HAL_GPIO_Init+0x268>
 8100f0e:	687b      	ldr	r3, [r7, #4]
 8100f10:	4a1f      	ldr	r2, [pc, #124]	@ (8100f90 <HAL_GPIO_Init+0x244>)
 8100f12:	4293      	cmp	r3, r2
 8100f14:	d031      	beq.n	8100f7a <HAL_GPIO_Init+0x22e>
 8100f16:	687b      	ldr	r3, [r7, #4]
 8100f18:	4a1e      	ldr	r2, [pc, #120]	@ (8100f94 <HAL_GPIO_Init+0x248>)
 8100f1a:	4293      	cmp	r3, r2
 8100f1c:	d02b      	beq.n	8100f76 <HAL_GPIO_Init+0x22a>
 8100f1e:	687b      	ldr	r3, [r7, #4]
 8100f20:	4a1d      	ldr	r2, [pc, #116]	@ (8100f98 <HAL_GPIO_Init+0x24c>)
 8100f22:	4293      	cmp	r3, r2
 8100f24:	d025      	beq.n	8100f72 <HAL_GPIO_Init+0x226>
 8100f26:	687b      	ldr	r3, [r7, #4]
 8100f28:	4a1c      	ldr	r2, [pc, #112]	@ (8100f9c <HAL_GPIO_Init+0x250>)
 8100f2a:	4293      	cmp	r3, r2
 8100f2c:	d01f      	beq.n	8100f6e <HAL_GPIO_Init+0x222>
 8100f2e:	687b      	ldr	r3, [r7, #4]
 8100f30:	4a1b      	ldr	r2, [pc, #108]	@ (8100fa0 <HAL_GPIO_Init+0x254>)
 8100f32:	4293      	cmp	r3, r2
 8100f34:	d019      	beq.n	8100f6a <HAL_GPIO_Init+0x21e>
 8100f36:	687b      	ldr	r3, [r7, #4]
 8100f38:	4a1a      	ldr	r2, [pc, #104]	@ (8100fa4 <HAL_GPIO_Init+0x258>)
 8100f3a:	4293      	cmp	r3, r2
 8100f3c:	d013      	beq.n	8100f66 <HAL_GPIO_Init+0x21a>
 8100f3e:	687b      	ldr	r3, [r7, #4]
 8100f40:	4a19      	ldr	r2, [pc, #100]	@ (8100fa8 <HAL_GPIO_Init+0x25c>)
 8100f42:	4293      	cmp	r3, r2
 8100f44:	d00d      	beq.n	8100f62 <HAL_GPIO_Init+0x216>
 8100f46:	687b      	ldr	r3, [r7, #4]
 8100f48:	4a18      	ldr	r2, [pc, #96]	@ (8100fac <HAL_GPIO_Init+0x260>)
 8100f4a:	4293      	cmp	r3, r2
 8100f4c:	d007      	beq.n	8100f5e <HAL_GPIO_Init+0x212>
 8100f4e:	687b      	ldr	r3, [r7, #4]
 8100f50:	4a17      	ldr	r2, [pc, #92]	@ (8100fb0 <HAL_GPIO_Init+0x264>)
 8100f52:	4293      	cmp	r3, r2
 8100f54:	d101      	bne.n	8100f5a <HAL_GPIO_Init+0x20e>
 8100f56:	2309      	movs	r3, #9
 8100f58:	e02d      	b.n	8100fb6 <HAL_GPIO_Init+0x26a>
 8100f5a:	230a      	movs	r3, #10
 8100f5c:	e02b      	b.n	8100fb6 <HAL_GPIO_Init+0x26a>
 8100f5e:	2308      	movs	r3, #8
 8100f60:	e029      	b.n	8100fb6 <HAL_GPIO_Init+0x26a>
 8100f62:	2307      	movs	r3, #7
 8100f64:	e027      	b.n	8100fb6 <HAL_GPIO_Init+0x26a>
 8100f66:	2306      	movs	r3, #6
 8100f68:	e025      	b.n	8100fb6 <HAL_GPIO_Init+0x26a>
 8100f6a:	2305      	movs	r3, #5
 8100f6c:	e023      	b.n	8100fb6 <HAL_GPIO_Init+0x26a>
 8100f6e:	2304      	movs	r3, #4
 8100f70:	e021      	b.n	8100fb6 <HAL_GPIO_Init+0x26a>
 8100f72:	2303      	movs	r3, #3
 8100f74:	e01f      	b.n	8100fb6 <HAL_GPIO_Init+0x26a>
 8100f76:	2302      	movs	r3, #2
 8100f78:	e01d      	b.n	8100fb6 <HAL_GPIO_Init+0x26a>
 8100f7a:	2301      	movs	r3, #1
 8100f7c:	e01b      	b.n	8100fb6 <HAL_GPIO_Init+0x26a>
 8100f7e:	bf00      	nop
 8100f80:	580000c0 	.word	0x580000c0
 8100f84:	58024400 	.word	0x58024400
 8100f88:	58000400 	.word	0x58000400
 8100f8c:	58020000 	.word	0x58020000
 8100f90:	58020400 	.word	0x58020400
 8100f94:	58020800 	.word	0x58020800
 8100f98:	58020c00 	.word	0x58020c00
 8100f9c:	58021000 	.word	0x58021000
 8100fa0:	58021400 	.word	0x58021400
 8100fa4:	58021800 	.word	0x58021800
 8100fa8:	58021c00 	.word	0x58021c00
 8100fac:	58022000 	.word	0x58022000
 8100fb0:	58022400 	.word	0x58022400
 8100fb4:	2300      	movs	r3, #0
 8100fb6:	69fa      	ldr	r2, [r7, #28]
 8100fb8:	f002 0203 	and.w	r2, r2, #3
 8100fbc:	0092      	lsls	r2, r2, #2
 8100fbe:	4093      	lsls	r3, r2
 8100fc0:	69ba      	ldr	r2, [r7, #24]
 8100fc2:	4313      	orrs	r3, r2
 8100fc4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8100fc6:	4938      	ldr	r1, [pc, #224]	@ (81010a8 <HAL_GPIO_Init+0x35c>)
 8100fc8:	69fb      	ldr	r3, [r7, #28]
 8100fca:	089b      	lsrs	r3, r3, #2
 8100fcc:	3302      	adds	r3, #2
 8100fce:	69ba      	ldr	r2, [r7, #24]
 8100fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8100fd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8100fd8:	681b      	ldr	r3, [r3, #0]
 8100fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100fdc:	693b      	ldr	r3, [r7, #16]
 8100fde:	43db      	mvns	r3, r3
 8100fe0:	69ba      	ldr	r2, [r7, #24]
 8100fe2:	4013      	ands	r3, r2
 8100fe4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8100fe6:	683b      	ldr	r3, [r7, #0]
 8100fe8:	685b      	ldr	r3, [r3, #4]
 8100fea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8100fee:	2b00      	cmp	r3, #0
 8100ff0:	d003      	beq.n	8100ffa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8100ff2:	69ba      	ldr	r2, [r7, #24]
 8100ff4:	693b      	ldr	r3, [r7, #16]
 8100ff6:	4313      	orrs	r3, r2
 8100ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8100ffa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8100ffe:	69bb      	ldr	r3, [r7, #24]
 8101000:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8101002:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8101006:	685b      	ldr	r3, [r3, #4]
 8101008:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810100a:	693b      	ldr	r3, [r7, #16]
 810100c:	43db      	mvns	r3, r3
 810100e:	69ba      	ldr	r2, [r7, #24]
 8101010:	4013      	ands	r3, r2
 8101012:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8101014:	683b      	ldr	r3, [r7, #0]
 8101016:	685b      	ldr	r3, [r3, #4]
 8101018:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810101c:	2b00      	cmp	r3, #0
 810101e:	d003      	beq.n	8101028 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8101020:	69ba      	ldr	r2, [r7, #24]
 8101022:	693b      	ldr	r3, [r7, #16]
 8101024:	4313      	orrs	r3, r2
 8101026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101028:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810102c:	69bb      	ldr	r3, [r7, #24]
 810102e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8101030:	697b      	ldr	r3, [r7, #20]
 8101032:	685b      	ldr	r3, [r3, #4]
 8101034:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101036:	693b      	ldr	r3, [r7, #16]
 8101038:	43db      	mvns	r3, r3
 810103a:	69ba      	ldr	r2, [r7, #24]
 810103c:	4013      	ands	r3, r2
 810103e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8101040:	683b      	ldr	r3, [r7, #0]
 8101042:	685b      	ldr	r3, [r3, #4]
 8101044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8101048:	2b00      	cmp	r3, #0
 810104a:	d003      	beq.n	8101054 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 810104c:	69ba      	ldr	r2, [r7, #24]
 810104e:	693b      	ldr	r3, [r7, #16]
 8101050:	4313      	orrs	r3, r2
 8101052:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101054:	697b      	ldr	r3, [r7, #20]
 8101056:	69ba      	ldr	r2, [r7, #24]
 8101058:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810105a:	697b      	ldr	r3, [r7, #20]
 810105c:	681b      	ldr	r3, [r3, #0]
 810105e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101060:	693b      	ldr	r3, [r7, #16]
 8101062:	43db      	mvns	r3, r3
 8101064:	69ba      	ldr	r2, [r7, #24]
 8101066:	4013      	ands	r3, r2
 8101068:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810106a:	683b      	ldr	r3, [r7, #0]
 810106c:	685b      	ldr	r3, [r3, #4]
 810106e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8101072:	2b00      	cmp	r3, #0
 8101074:	d003      	beq.n	810107e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8101076:	69ba      	ldr	r2, [r7, #24]
 8101078:	693b      	ldr	r3, [r7, #16]
 810107a:	4313      	orrs	r3, r2
 810107c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810107e:	697b      	ldr	r3, [r7, #20]
 8101080:	69ba      	ldr	r2, [r7, #24]
 8101082:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8101084:	69fb      	ldr	r3, [r7, #28]
 8101086:	3301      	adds	r3, #1
 8101088:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810108a:	683b      	ldr	r3, [r7, #0]
 810108c:	681a      	ldr	r2, [r3, #0]
 810108e:	69fb      	ldr	r3, [r7, #28]
 8101090:	fa22 f303 	lsr.w	r3, r2, r3
 8101094:	2b00      	cmp	r3, #0
 8101096:	f47f ae63 	bne.w	8100d60 <HAL_GPIO_Init+0x14>
  }
}
 810109a:	bf00      	nop
 810109c:	bf00      	nop
 810109e:	3724      	adds	r7, #36	@ 0x24
 81010a0:	46bd      	mov	sp, r7
 81010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010a6:	4770      	bx	lr
 81010a8:	58000400 	.word	0x58000400

081010ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81010ac:	b480      	push	{r7}
 81010ae:	b083      	sub	sp, #12
 81010b0:	af00      	add	r7, sp, #0
 81010b2:	6078      	str	r0, [r7, #4]
 81010b4:	460b      	mov	r3, r1
 81010b6:	807b      	strh	r3, [r7, #2]
 81010b8:	4613      	mov	r3, r2
 81010ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81010bc:	787b      	ldrb	r3, [r7, #1]
 81010be:	2b00      	cmp	r3, #0
 81010c0:	d003      	beq.n	81010ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81010c2:	887a      	ldrh	r2, [r7, #2]
 81010c4:	687b      	ldr	r3, [r7, #4]
 81010c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81010c8:	e003      	b.n	81010d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81010ca:	887b      	ldrh	r3, [r7, #2]
 81010cc:	041a      	lsls	r2, r3, #16
 81010ce:	687b      	ldr	r3, [r7, #4]
 81010d0:	619a      	str	r2, [r3, #24]
}
 81010d2:	bf00      	nop
 81010d4:	370c      	adds	r7, #12
 81010d6:	46bd      	mov	sp, r7
 81010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010dc:	4770      	bx	lr
	...

081010e0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81010e0:	b480      	push	{r7}
 81010e2:	b083      	sub	sp, #12
 81010e4:	af00      	add	r7, sp, #0
 81010e6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81010e8:	4b05      	ldr	r3, [pc, #20]	@ (8101100 <HAL_HSEM_ActivateNotification+0x20>)
 81010ea:	681a      	ldr	r2, [r3, #0]
 81010ec:	4904      	ldr	r1, [pc, #16]	@ (8101100 <HAL_HSEM_ActivateNotification+0x20>)
 81010ee:	687b      	ldr	r3, [r7, #4]
 81010f0:	4313      	orrs	r3, r2
 81010f2:	600b      	str	r3, [r1, #0]
#endif
}
 81010f4:	bf00      	nop
 81010f6:	370c      	adds	r7, #12
 81010f8:	46bd      	mov	sp, r7
 81010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010fe:	4770      	bx	lr
 8101100:	58026510 	.word	0x58026510

08101104 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8101104:	b580      	push	{r7, lr}
 8101106:	b082      	sub	sp, #8
 8101108:	af00      	add	r7, sp, #0
 810110a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 810110c:	687b      	ldr	r3, [r7, #4]
 810110e:	2b00      	cmp	r3, #0
 8101110:	d101      	bne.n	8101116 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8101112:	2301      	movs	r3, #1
 8101114:	e08d      	b.n	8101232 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8101116:	687b      	ldr	r3, [r7, #4]
 8101118:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810111c:	b2db      	uxtb	r3, r3
 810111e:	2b00      	cmp	r3, #0
 8101120:	d106      	bne.n	8101130 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8101122:	687b      	ldr	r3, [r7, #4]
 8101124:	2200      	movs	r2, #0
 8101126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 810112a:	6878      	ldr	r0, [r7, #4]
 810112c:	f7ff fa98 	bl	8100660 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8101130:	687b      	ldr	r3, [r7, #4]
 8101132:	2224      	movs	r2, #36	@ 0x24
 8101134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8101138:	687b      	ldr	r3, [r7, #4]
 810113a:	681b      	ldr	r3, [r3, #0]
 810113c:	681a      	ldr	r2, [r3, #0]
 810113e:	687b      	ldr	r3, [r7, #4]
 8101140:	681b      	ldr	r3, [r3, #0]
 8101142:	f022 0201 	bic.w	r2, r2, #1
 8101146:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8101148:	687b      	ldr	r3, [r7, #4]
 810114a:	685a      	ldr	r2, [r3, #4]
 810114c:	687b      	ldr	r3, [r7, #4]
 810114e:	681b      	ldr	r3, [r3, #0]
 8101150:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8101154:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8101156:	687b      	ldr	r3, [r7, #4]
 8101158:	681b      	ldr	r3, [r3, #0]
 810115a:	689a      	ldr	r2, [r3, #8]
 810115c:	687b      	ldr	r3, [r7, #4]
 810115e:	681b      	ldr	r3, [r3, #0]
 8101160:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8101164:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8101166:	687b      	ldr	r3, [r7, #4]
 8101168:	68db      	ldr	r3, [r3, #12]
 810116a:	2b01      	cmp	r3, #1
 810116c:	d107      	bne.n	810117e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 810116e:	687b      	ldr	r3, [r7, #4]
 8101170:	689a      	ldr	r2, [r3, #8]
 8101172:	687b      	ldr	r3, [r7, #4]
 8101174:	681b      	ldr	r3, [r3, #0]
 8101176:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 810117a:	609a      	str	r2, [r3, #8]
 810117c:	e006      	b.n	810118c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 810117e:	687b      	ldr	r3, [r7, #4]
 8101180:	689a      	ldr	r2, [r3, #8]
 8101182:	687b      	ldr	r3, [r7, #4]
 8101184:	681b      	ldr	r3, [r3, #0]
 8101186:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 810118a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 810118c:	687b      	ldr	r3, [r7, #4]
 810118e:	68db      	ldr	r3, [r3, #12]
 8101190:	2b02      	cmp	r3, #2
 8101192:	d108      	bne.n	81011a6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8101194:	687b      	ldr	r3, [r7, #4]
 8101196:	681b      	ldr	r3, [r3, #0]
 8101198:	685a      	ldr	r2, [r3, #4]
 810119a:	687b      	ldr	r3, [r7, #4]
 810119c:	681b      	ldr	r3, [r3, #0]
 810119e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 81011a2:	605a      	str	r2, [r3, #4]
 81011a4:	e007      	b.n	81011b6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 81011a6:	687b      	ldr	r3, [r7, #4]
 81011a8:	681b      	ldr	r3, [r3, #0]
 81011aa:	685a      	ldr	r2, [r3, #4]
 81011ac:	687b      	ldr	r3, [r7, #4]
 81011ae:	681b      	ldr	r3, [r3, #0]
 81011b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 81011b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 81011b6:	687b      	ldr	r3, [r7, #4]
 81011b8:	681b      	ldr	r3, [r3, #0]
 81011ba:	685b      	ldr	r3, [r3, #4]
 81011bc:	687a      	ldr	r2, [r7, #4]
 81011be:	6812      	ldr	r2, [r2, #0]
 81011c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81011c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 81011c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81011ca:	687b      	ldr	r3, [r7, #4]
 81011cc:	681b      	ldr	r3, [r3, #0]
 81011ce:	68da      	ldr	r2, [r3, #12]
 81011d0:	687b      	ldr	r3, [r7, #4]
 81011d2:	681b      	ldr	r3, [r3, #0]
 81011d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 81011d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 81011da:	687b      	ldr	r3, [r7, #4]
 81011dc:	691a      	ldr	r2, [r3, #16]
 81011de:	687b      	ldr	r3, [r7, #4]
 81011e0:	695b      	ldr	r3, [r3, #20]
 81011e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 81011e6:	687b      	ldr	r3, [r7, #4]
 81011e8:	699b      	ldr	r3, [r3, #24]
 81011ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 81011ec:	687b      	ldr	r3, [r7, #4]
 81011ee:	681b      	ldr	r3, [r3, #0]
 81011f0:	430a      	orrs	r2, r1
 81011f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 81011f4:	687b      	ldr	r3, [r7, #4]
 81011f6:	69d9      	ldr	r1, [r3, #28]
 81011f8:	687b      	ldr	r3, [r7, #4]
 81011fa:	6a1a      	ldr	r2, [r3, #32]
 81011fc:	687b      	ldr	r3, [r7, #4]
 81011fe:	681b      	ldr	r3, [r3, #0]
 8101200:	430a      	orrs	r2, r1
 8101202:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8101204:	687b      	ldr	r3, [r7, #4]
 8101206:	681b      	ldr	r3, [r3, #0]
 8101208:	681a      	ldr	r2, [r3, #0]
 810120a:	687b      	ldr	r3, [r7, #4]
 810120c:	681b      	ldr	r3, [r3, #0]
 810120e:	f042 0201 	orr.w	r2, r2, #1
 8101212:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8101214:	687b      	ldr	r3, [r7, #4]
 8101216:	2200      	movs	r2, #0
 8101218:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 810121a:	687b      	ldr	r3, [r7, #4]
 810121c:	2220      	movs	r2, #32
 810121e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8101222:	687b      	ldr	r3, [r7, #4]
 8101224:	2200      	movs	r2, #0
 8101226:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8101228:	687b      	ldr	r3, [r7, #4]
 810122a:	2200      	movs	r2, #0
 810122c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8101230:	2300      	movs	r3, #0
}
 8101232:	4618      	mov	r0, r3
 8101234:	3708      	adds	r7, #8
 8101236:	46bd      	mov	sp, r7
 8101238:	bd80      	pop	{r7, pc}
	...

0810123c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 810123c:	b580      	push	{r7, lr}
 810123e:	b088      	sub	sp, #32
 8101240:	af02      	add	r7, sp, #8
 8101242:	60f8      	str	r0, [r7, #12]
 8101244:	607a      	str	r2, [r7, #4]
 8101246:	461a      	mov	r2, r3
 8101248:	460b      	mov	r3, r1
 810124a:	817b      	strh	r3, [r7, #10]
 810124c:	4613      	mov	r3, r2
 810124e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8101250:	68fb      	ldr	r3, [r7, #12]
 8101252:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8101256:	b2db      	uxtb	r3, r3
 8101258:	2b20      	cmp	r3, #32
 810125a:	f040 80fd 	bne.w	8101458 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810125e:	68fb      	ldr	r3, [r7, #12]
 8101260:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8101264:	2b01      	cmp	r3, #1
 8101266:	d101      	bne.n	810126c <HAL_I2C_Master_Transmit+0x30>
 8101268:	2302      	movs	r3, #2
 810126a:	e0f6      	b.n	810145a <HAL_I2C_Master_Transmit+0x21e>
 810126c:	68fb      	ldr	r3, [r7, #12]
 810126e:	2201      	movs	r2, #1
 8101270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8101274:	f7ff fc42 	bl	8100afc <HAL_GetTick>
 8101278:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 810127a:	693b      	ldr	r3, [r7, #16]
 810127c:	9300      	str	r3, [sp, #0]
 810127e:	2319      	movs	r3, #25
 8101280:	2201      	movs	r2, #1
 8101282:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8101286:	68f8      	ldr	r0, [r7, #12]
 8101288:	f000 fa0a 	bl	81016a0 <I2C_WaitOnFlagUntilTimeout>
 810128c:	4603      	mov	r3, r0
 810128e:	2b00      	cmp	r3, #0
 8101290:	d001      	beq.n	8101296 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8101292:	2301      	movs	r3, #1
 8101294:	e0e1      	b.n	810145a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8101296:	68fb      	ldr	r3, [r7, #12]
 8101298:	2221      	movs	r2, #33	@ 0x21
 810129a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 810129e:	68fb      	ldr	r3, [r7, #12]
 81012a0:	2210      	movs	r2, #16
 81012a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81012a6:	68fb      	ldr	r3, [r7, #12]
 81012a8:	2200      	movs	r2, #0
 81012aa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81012ac:	68fb      	ldr	r3, [r7, #12]
 81012ae:	687a      	ldr	r2, [r7, #4]
 81012b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 81012b2:	68fb      	ldr	r3, [r7, #12]
 81012b4:	893a      	ldrh	r2, [r7, #8]
 81012b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 81012b8:	68fb      	ldr	r3, [r7, #12]
 81012ba:	2200      	movs	r2, #0
 81012bc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81012be:	68fb      	ldr	r3, [r7, #12]
 81012c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81012c2:	b29b      	uxth	r3, r3
 81012c4:	2bff      	cmp	r3, #255	@ 0xff
 81012c6:	d906      	bls.n	81012d6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81012c8:	68fb      	ldr	r3, [r7, #12]
 81012ca:	22ff      	movs	r2, #255	@ 0xff
 81012cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 81012ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81012d2:	617b      	str	r3, [r7, #20]
 81012d4:	e007      	b.n	81012e6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81012d6:	68fb      	ldr	r3, [r7, #12]
 81012d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81012da:	b29a      	uxth	r2, r3
 81012dc:	68fb      	ldr	r3, [r7, #12]
 81012de:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 81012e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81012e4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 81012e6:	68fb      	ldr	r3, [r7, #12]
 81012e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81012ea:	2b00      	cmp	r3, #0
 81012ec:	d024      	beq.n	8101338 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 81012ee:	68fb      	ldr	r3, [r7, #12]
 81012f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81012f2:	781a      	ldrb	r2, [r3, #0]
 81012f4:	68fb      	ldr	r3, [r7, #12]
 81012f6:	681b      	ldr	r3, [r3, #0]
 81012f8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81012fa:	68fb      	ldr	r3, [r7, #12]
 81012fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81012fe:	1c5a      	adds	r2, r3, #1
 8101300:	68fb      	ldr	r3, [r7, #12]
 8101302:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8101304:	68fb      	ldr	r3, [r7, #12]
 8101306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8101308:	b29b      	uxth	r3, r3
 810130a:	3b01      	subs	r3, #1
 810130c:	b29a      	uxth	r2, r3
 810130e:	68fb      	ldr	r3, [r7, #12]
 8101310:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8101312:	68fb      	ldr	r3, [r7, #12]
 8101314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8101316:	3b01      	subs	r3, #1
 8101318:	b29a      	uxth	r2, r3
 810131a:	68fb      	ldr	r3, [r7, #12]
 810131c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 810131e:	68fb      	ldr	r3, [r7, #12]
 8101320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8101322:	b2db      	uxtb	r3, r3
 8101324:	3301      	adds	r3, #1
 8101326:	b2da      	uxtb	r2, r3
 8101328:	8979      	ldrh	r1, [r7, #10]
 810132a:	4b4e      	ldr	r3, [pc, #312]	@ (8101464 <HAL_I2C_Master_Transmit+0x228>)
 810132c:	9300      	str	r3, [sp, #0]
 810132e:	697b      	ldr	r3, [r7, #20]
 8101330:	68f8      	ldr	r0, [r7, #12]
 8101332:	f000 fc05 	bl	8101b40 <I2C_TransferConfig>
 8101336:	e066      	b.n	8101406 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8101338:	68fb      	ldr	r3, [r7, #12]
 810133a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810133c:	b2da      	uxtb	r2, r3
 810133e:	8979      	ldrh	r1, [r7, #10]
 8101340:	4b48      	ldr	r3, [pc, #288]	@ (8101464 <HAL_I2C_Master_Transmit+0x228>)
 8101342:	9300      	str	r3, [sp, #0]
 8101344:	697b      	ldr	r3, [r7, #20]
 8101346:	68f8      	ldr	r0, [r7, #12]
 8101348:	f000 fbfa 	bl	8101b40 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 810134c:	e05b      	b.n	8101406 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810134e:	693a      	ldr	r2, [r7, #16]
 8101350:	6a39      	ldr	r1, [r7, #32]
 8101352:	68f8      	ldr	r0, [r7, #12]
 8101354:	f000 f9fd 	bl	8101752 <I2C_WaitOnTXISFlagUntilTimeout>
 8101358:	4603      	mov	r3, r0
 810135a:	2b00      	cmp	r3, #0
 810135c:	d001      	beq.n	8101362 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 810135e:	2301      	movs	r3, #1
 8101360:	e07b      	b.n	810145a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8101362:	68fb      	ldr	r3, [r7, #12]
 8101364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8101366:	781a      	ldrb	r2, [r3, #0]
 8101368:	68fb      	ldr	r3, [r7, #12]
 810136a:	681b      	ldr	r3, [r3, #0]
 810136c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810136e:	68fb      	ldr	r3, [r7, #12]
 8101370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8101372:	1c5a      	adds	r2, r3, #1
 8101374:	68fb      	ldr	r3, [r7, #12]
 8101376:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8101378:	68fb      	ldr	r3, [r7, #12]
 810137a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810137c:	b29b      	uxth	r3, r3
 810137e:	3b01      	subs	r3, #1
 8101380:	b29a      	uxth	r2, r3
 8101382:	68fb      	ldr	r3, [r7, #12]
 8101384:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8101386:	68fb      	ldr	r3, [r7, #12]
 8101388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810138a:	3b01      	subs	r3, #1
 810138c:	b29a      	uxth	r2, r3
 810138e:	68fb      	ldr	r3, [r7, #12]
 8101390:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8101392:	68fb      	ldr	r3, [r7, #12]
 8101394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8101396:	b29b      	uxth	r3, r3
 8101398:	2b00      	cmp	r3, #0
 810139a:	d034      	beq.n	8101406 <HAL_I2C_Master_Transmit+0x1ca>
 810139c:	68fb      	ldr	r3, [r7, #12]
 810139e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81013a0:	2b00      	cmp	r3, #0
 81013a2:	d130      	bne.n	8101406 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81013a4:	693b      	ldr	r3, [r7, #16]
 81013a6:	9300      	str	r3, [sp, #0]
 81013a8:	6a3b      	ldr	r3, [r7, #32]
 81013aa:	2200      	movs	r2, #0
 81013ac:	2180      	movs	r1, #128	@ 0x80
 81013ae:	68f8      	ldr	r0, [r7, #12]
 81013b0:	f000 f976 	bl	81016a0 <I2C_WaitOnFlagUntilTimeout>
 81013b4:	4603      	mov	r3, r0
 81013b6:	2b00      	cmp	r3, #0
 81013b8:	d001      	beq.n	81013be <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 81013ba:	2301      	movs	r3, #1
 81013bc:	e04d      	b.n	810145a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81013be:	68fb      	ldr	r3, [r7, #12]
 81013c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81013c2:	b29b      	uxth	r3, r3
 81013c4:	2bff      	cmp	r3, #255	@ 0xff
 81013c6:	d90e      	bls.n	81013e6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81013c8:	68fb      	ldr	r3, [r7, #12]
 81013ca:	22ff      	movs	r2, #255	@ 0xff
 81013cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81013ce:	68fb      	ldr	r3, [r7, #12]
 81013d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81013d2:	b2da      	uxtb	r2, r3
 81013d4:	8979      	ldrh	r1, [r7, #10]
 81013d6:	2300      	movs	r3, #0
 81013d8:	9300      	str	r3, [sp, #0]
 81013da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81013de:	68f8      	ldr	r0, [r7, #12]
 81013e0:	f000 fbae 	bl	8101b40 <I2C_TransferConfig>
 81013e4:	e00f      	b.n	8101406 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81013e6:	68fb      	ldr	r3, [r7, #12]
 81013e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81013ea:	b29a      	uxth	r2, r3
 81013ec:	68fb      	ldr	r3, [r7, #12]
 81013ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81013f0:	68fb      	ldr	r3, [r7, #12]
 81013f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81013f4:	b2da      	uxtb	r2, r3
 81013f6:	8979      	ldrh	r1, [r7, #10]
 81013f8:	2300      	movs	r3, #0
 81013fa:	9300      	str	r3, [sp, #0]
 81013fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8101400:	68f8      	ldr	r0, [r7, #12]
 8101402:	f000 fb9d 	bl	8101b40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8101406:	68fb      	ldr	r3, [r7, #12]
 8101408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810140a:	b29b      	uxth	r3, r3
 810140c:	2b00      	cmp	r3, #0
 810140e:	d19e      	bne.n	810134e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8101410:	693a      	ldr	r2, [r7, #16]
 8101412:	6a39      	ldr	r1, [r7, #32]
 8101414:	68f8      	ldr	r0, [r7, #12]
 8101416:	f000 f9e3 	bl	81017e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 810141a:	4603      	mov	r3, r0
 810141c:	2b00      	cmp	r3, #0
 810141e:	d001      	beq.n	8101424 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8101420:	2301      	movs	r3, #1
 8101422:	e01a      	b.n	810145a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8101424:	68fb      	ldr	r3, [r7, #12]
 8101426:	681b      	ldr	r3, [r3, #0]
 8101428:	2220      	movs	r2, #32
 810142a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810142c:	68fb      	ldr	r3, [r7, #12]
 810142e:	681b      	ldr	r3, [r3, #0]
 8101430:	6859      	ldr	r1, [r3, #4]
 8101432:	68fb      	ldr	r3, [r7, #12]
 8101434:	681a      	ldr	r2, [r3, #0]
 8101436:	4b0c      	ldr	r3, [pc, #48]	@ (8101468 <HAL_I2C_Master_Transmit+0x22c>)
 8101438:	400b      	ands	r3, r1
 810143a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810143c:	68fb      	ldr	r3, [r7, #12]
 810143e:	2220      	movs	r2, #32
 8101440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8101444:	68fb      	ldr	r3, [r7, #12]
 8101446:	2200      	movs	r2, #0
 8101448:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810144c:	68fb      	ldr	r3, [r7, #12]
 810144e:	2200      	movs	r2, #0
 8101450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8101454:	2300      	movs	r3, #0
 8101456:	e000      	b.n	810145a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8101458:	2302      	movs	r3, #2
  }
}
 810145a:	4618      	mov	r0, r3
 810145c:	3718      	adds	r7, #24
 810145e:	46bd      	mov	sp, r7
 8101460:	bd80      	pop	{r7, pc}
 8101462:	bf00      	nop
 8101464:	80002000 	.word	0x80002000
 8101468:	fe00e800 	.word	0xfe00e800

0810146c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 810146c:	b580      	push	{r7, lr}
 810146e:	b088      	sub	sp, #32
 8101470:	af02      	add	r7, sp, #8
 8101472:	60f8      	str	r0, [r7, #12]
 8101474:	607a      	str	r2, [r7, #4]
 8101476:	461a      	mov	r2, r3
 8101478:	460b      	mov	r3, r1
 810147a:	817b      	strh	r3, [r7, #10]
 810147c:	4613      	mov	r3, r2
 810147e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8101480:	68fb      	ldr	r3, [r7, #12]
 8101482:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8101486:	b2db      	uxtb	r3, r3
 8101488:	2b20      	cmp	r3, #32
 810148a:	f040 80db 	bne.w	8101644 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810148e:	68fb      	ldr	r3, [r7, #12]
 8101490:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8101494:	2b01      	cmp	r3, #1
 8101496:	d101      	bne.n	810149c <HAL_I2C_Master_Receive+0x30>
 8101498:	2302      	movs	r3, #2
 810149a:	e0d4      	b.n	8101646 <HAL_I2C_Master_Receive+0x1da>
 810149c:	68fb      	ldr	r3, [r7, #12]
 810149e:	2201      	movs	r2, #1
 81014a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81014a4:	f7ff fb2a 	bl	8100afc <HAL_GetTick>
 81014a8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81014aa:	697b      	ldr	r3, [r7, #20]
 81014ac:	9300      	str	r3, [sp, #0]
 81014ae:	2319      	movs	r3, #25
 81014b0:	2201      	movs	r2, #1
 81014b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 81014b6:	68f8      	ldr	r0, [r7, #12]
 81014b8:	f000 f8f2 	bl	81016a0 <I2C_WaitOnFlagUntilTimeout>
 81014bc:	4603      	mov	r3, r0
 81014be:	2b00      	cmp	r3, #0
 81014c0:	d001      	beq.n	81014c6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 81014c2:	2301      	movs	r3, #1
 81014c4:	e0bf      	b.n	8101646 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 81014c6:	68fb      	ldr	r3, [r7, #12]
 81014c8:	2222      	movs	r2, #34	@ 0x22
 81014ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 81014ce:	68fb      	ldr	r3, [r7, #12]
 81014d0:	2210      	movs	r2, #16
 81014d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81014d6:	68fb      	ldr	r3, [r7, #12]
 81014d8:	2200      	movs	r2, #0
 81014da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81014dc:	68fb      	ldr	r3, [r7, #12]
 81014de:	687a      	ldr	r2, [r7, #4]
 81014e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 81014e2:	68fb      	ldr	r3, [r7, #12]
 81014e4:	893a      	ldrh	r2, [r7, #8]
 81014e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 81014e8:	68fb      	ldr	r3, [r7, #12]
 81014ea:	2200      	movs	r2, #0
 81014ec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81014ee:	68fb      	ldr	r3, [r7, #12]
 81014f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81014f2:	b29b      	uxth	r3, r3
 81014f4:	2bff      	cmp	r3, #255	@ 0xff
 81014f6:	d90e      	bls.n	8101516 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81014f8:	68fb      	ldr	r3, [r7, #12]
 81014fa:	22ff      	movs	r2, #255	@ 0xff
 81014fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81014fe:	68fb      	ldr	r3, [r7, #12]
 8101500:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8101502:	b2da      	uxtb	r2, r3
 8101504:	8979      	ldrh	r1, [r7, #10]
 8101506:	4b52      	ldr	r3, [pc, #328]	@ (8101650 <HAL_I2C_Master_Receive+0x1e4>)
 8101508:	9300      	str	r3, [sp, #0]
 810150a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 810150e:	68f8      	ldr	r0, [r7, #12]
 8101510:	f000 fb16 	bl	8101b40 <I2C_TransferConfig>
 8101514:	e06d      	b.n	81015f2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8101516:	68fb      	ldr	r3, [r7, #12]
 8101518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810151a:	b29a      	uxth	r2, r3
 810151c:	68fb      	ldr	r3, [r7, #12]
 810151e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8101520:	68fb      	ldr	r3, [r7, #12]
 8101522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8101524:	b2da      	uxtb	r2, r3
 8101526:	8979      	ldrh	r1, [r7, #10]
 8101528:	4b49      	ldr	r3, [pc, #292]	@ (8101650 <HAL_I2C_Master_Receive+0x1e4>)
 810152a:	9300      	str	r3, [sp, #0]
 810152c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8101530:	68f8      	ldr	r0, [r7, #12]
 8101532:	f000 fb05 	bl	8101b40 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8101536:	e05c      	b.n	81015f2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8101538:	697a      	ldr	r2, [r7, #20]
 810153a:	6a39      	ldr	r1, [r7, #32]
 810153c:	68f8      	ldr	r0, [r7, #12]
 810153e:	f000 f993 	bl	8101868 <I2C_WaitOnRXNEFlagUntilTimeout>
 8101542:	4603      	mov	r3, r0
 8101544:	2b00      	cmp	r3, #0
 8101546:	d001      	beq.n	810154c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8101548:	2301      	movs	r3, #1
 810154a:	e07c      	b.n	8101646 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 810154c:	68fb      	ldr	r3, [r7, #12]
 810154e:	681b      	ldr	r3, [r3, #0]
 8101550:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8101552:	68fb      	ldr	r3, [r7, #12]
 8101554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8101556:	b2d2      	uxtb	r2, r2
 8101558:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810155a:	68fb      	ldr	r3, [r7, #12]
 810155c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810155e:	1c5a      	adds	r2, r3, #1
 8101560:	68fb      	ldr	r3, [r7, #12]
 8101562:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8101564:	68fb      	ldr	r3, [r7, #12]
 8101566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8101568:	3b01      	subs	r3, #1
 810156a:	b29a      	uxth	r2, r3
 810156c:	68fb      	ldr	r3, [r7, #12]
 810156e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8101570:	68fb      	ldr	r3, [r7, #12]
 8101572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8101574:	b29b      	uxth	r3, r3
 8101576:	3b01      	subs	r3, #1
 8101578:	b29a      	uxth	r2, r3
 810157a:	68fb      	ldr	r3, [r7, #12]
 810157c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 810157e:	68fb      	ldr	r3, [r7, #12]
 8101580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8101582:	b29b      	uxth	r3, r3
 8101584:	2b00      	cmp	r3, #0
 8101586:	d034      	beq.n	81015f2 <HAL_I2C_Master_Receive+0x186>
 8101588:	68fb      	ldr	r3, [r7, #12]
 810158a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810158c:	2b00      	cmp	r3, #0
 810158e:	d130      	bne.n	81015f2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8101590:	697b      	ldr	r3, [r7, #20]
 8101592:	9300      	str	r3, [sp, #0]
 8101594:	6a3b      	ldr	r3, [r7, #32]
 8101596:	2200      	movs	r2, #0
 8101598:	2180      	movs	r1, #128	@ 0x80
 810159a:	68f8      	ldr	r0, [r7, #12]
 810159c:	f000 f880 	bl	81016a0 <I2C_WaitOnFlagUntilTimeout>
 81015a0:	4603      	mov	r3, r0
 81015a2:	2b00      	cmp	r3, #0
 81015a4:	d001      	beq.n	81015aa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 81015a6:	2301      	movs	r3, #1
 81015a8:	e04d      	b.n	8101646 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81015aa:	68fb      	ldr	r3, [r7, #12]
 81015ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81015ae:	b29b      	uxth	r3, r3
 81015b0:	2bff      	cmp	r3, #255	@ 0xff
 81015b2:	d90e      	bls.n	81015d2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81015b4:	68fb      	ldr	r3, [r7, #12]
 81015b6:	22ff      	movs	r2, #255	@ 0xff
 81015b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81015ba:	68fb      	ldr	r3, [r7, #12]
 81015bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81015be:	b2da      	uxtb	r2, r3
 81015c0:	8979      	ldrh	r1, [r7, #10]
 81015c2:	2300      	movs	r3, #0
 81015c4:	9300      	str	r3, [sp, #0]
 81015c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81015ca:	68f8      	ldr	r0, [r7, #12]
 81015cc:	f000 fab8 	bl	8101b40 <I2C_TransferConfig>
 81015d0:	e00f      	b.n	81015f2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81015d2:	68fb      	ldr	r3, [r7, #12]
 81015d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81015d6:	b29a      	uxth	r2, r3
 81015d8:	68fb      	ldr	r3, [r7, #12]
 81015da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81015dc:	68fb      	ldr	r3, [r7, #12]
 81015de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81015e0:	b2da      	uxtb	r2, r3
 81015e2:	8979      	ldrh	r1, [r7, #10]
 81015e4:	2300      	movs	r3, #0
 81015e6:	9300      	str	r3, [sp, #0]
 81015e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81015ec:	68f8      	ldr	r0, [r7, #12]
 81015ee:	f000 faa7 	bl	8101b40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 81015f2:	68fb      	ldr	r3, [r7, #12]
 81015f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81015f6:	b29b      	uxth	r3, r3
 81015f8:	2b00      	cmp	r3, #0
 81015fa:	d19d      	bne.n	8101538 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81015fc:	697a      	ldr	r2, [r7, #20]
 81015fe:	6a39      	ldr	r1, [r7, #32]
 8101600:	68f8      	ldr	r0, [r7, #12]
 8101602:	f000 f8ed 	bl	81017e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8101606:	4603      	mov	r3, r0
 8101608:	2b00      	cmp	r3, #0
 810160a:	d001      	beq.n	8101610 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 810160c:	2301      	movs	r3, #1
 810160e:	e01a      	b.n	8101646 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8101610:	68fb      	ldr	r3, [r7, #12]
 8101612:	681b      	ldr	r3, [r3, #0]
 8101614:	2220      	movs	r2, #32
 8101616:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8101618:	68fb      	ldr	r3, [r7, #12]
 810161a:	681b      	ldr	r3, [r3, #0]
 810161c:	6859      	ldr	r1, [r3, #4]
 810161e:	68fb      	ldr	r3, [r7, #12]
 8101620:	681a      	ldr	r2, [r3, #0]
 8101622:	4b0c      	ldr	r3, [pc, #48]	@ (8101654 <HAL_I2C_Master_Receive+0x1e8>)
 8101624:	400b      	ands	r3, r1
 8101626:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8101628:	68fb      	ldr	r3, [r7, #12]
 810162a:	2220      	movs	r2, #32
 810162c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8101630:	68fb      	ldr	r3, [r7, #12]
 8101632:	2200      	movs	r2, #0
 8101634:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8101638:	68fb      	ldr	r3, [r7, #12]
 810163a:	2200      	movs	r2, #0
 810163c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8101640:	2300      	movs	r3, #0
 8101642:	e000      	b.n	8101646 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8101644:	2302      	movs	r3, #2
  }
}
 8101646:	4618      	mov	r0, r3
 8101648:	3718      	adds	r7, #24
 810164a:	46bd      	mov	sp, r7
 810164c:	bd80      	pop	{r7, pc}
 810164e:	bf00      	nop
 8101650:	80002400 	.word	0x80002400
 8101654:	fe00e800 	.word	0xfe00e800

08101658 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8101658:	b480      	push	{r7}
 810165a:	b083      	sub	sp, #12
 810165c:	af00      	add	r7, sp, #0
 810165e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8101660:	687b      	ldr	r3, [r7, #4]
 8101662:	681b      	ldr	r3, [r3, #0]
 8101664:	699b      	ldr	r3, [r3, #24]
 8101666:	f003 0302 	and.w	r3, r3, #2
 810166a:	2b02      	cmp	r3, #2
 810166c:	d103      	bne.n	8101676 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 810166e:	687b      	ldr	r3, [r7, #4]
 8101670:	681b      	ldr	r3, [r3, #0]
 8101672:	2200      	movs	r2, #0
 8101674:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8101676:	687b      	ldr	r3, [r7, #4]
 8101678:	681b      	ldr	r3, [r3, #0]
 810167a:	699b      	ldr	r3, [r3, #24]
 810167c:	f003 0301 	and.w	r3, r3, #1
 8101680:	2b01      	cmp	r3, #1
 8101682:	d007      	beq.n	8101694 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8101684:	687b      	ldr	r3, [r7, #4]
 8101686:	681b      	ldr	r3, [r3, #0]
 8101688:	699a      	ldr	r2, [r3, #24]
 810168a:	687b      	ldr	r3, [r7, #4]
 810168c:	681b      	ldr	r3, [r3, #0]
 810168e:	f042 0201 	orr.w	r2, r2, #1
 8101692:	619a      	str	r2, [r3, #24]
  }
}
 8101694:	bf00      	nop
 8101696:	370c      	adds	r7, #12
 8101698:	46bd      	mov	sp, r7
 810169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810169e:	4770      	bx	lr

081016a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 81016a0:	b580      	push	{r7, lr}
 81016a2:	b084      	sub	sp, #16
 81016a4:	af00      	add	r7, sp, #0
 81016a6:	60f8      	str	r0, [r7, #12]
 81016a8:	60b9      	str	r1, [r7, #8]
 81016aa:	603b      	str	r3, [r7, #0]
 81016ac:	4613      	mov	r3, r2
 81016ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81016b0:	e03b      	b.n	810172a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81016b2:	69ba      	ldr	r2, [r7, #24]
 81016b4:	6839      	ldr	r1, [r7, #0]
 81016b6:	68f8      	ldr	r0, [r7, #12]
 81016b8:	f000 f962 	bl	8101980 <I2C_IsErrorOccurred>
 81016bc:	4603      	mov	r3, r0
 81016be:	2b00      	cmp	r3, #0
 81016c0:	d001      	beq.n	81016c6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 81016c2:	2301      	movs	r3, #1
 81016c4:	e041      	b.n	810174a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81016c6:	683b      	ldr	r3, [r7, #0]
 81016c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81016cc:	d02d      	beq.n	810172a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81016ce:	f7ff fa15 	bl	8100afc <HAL_GetTick>
 81016d2:	4602      	mov	r2, r0
 81016d4:	69bb      	ldr	r3, [r7, #24]
 81016d6:	1ad3      	subs	r3, r2, r3
 81016d8:	683a      	ldr	r2, [r7, #0]
 81016da:	429a      	cmp	r2, r3
 81016dc:	d302      	bcc.n	81016e4 <I2C_WaitOnFlagUntilTimeout+0x44>
 81016de:	683b      	ldr	r3, [r7, #0]
 81016e0:	2b00      	cmp	r3, #0
 81016e2:	d122      	bne.n	810172a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 81016e4:	68fb      	ldr	r3, [r7, #12]
 81016e6:	681b      	ldr	r3, [r3, #0]
 81016e8:	699a      	ldr	r2, [r3, #24]
 81016ea:	68bb      	ldr	r3, [r7, #8]
 81016ec:	4013      	ands	r3, r2
 81016ee:	68ba      	ldr	r2, [r7, #8]
 81016f0:	429a      	cmp	r2, r3
 81016f2:	bf0c      	ite	eq
 81016f4:	2301      	moveq	r3, #1
 81016f6:	2300      	movne	r3, #0
 81016f8:	b2db      	uxtb	r3, r3
 81016fa:	461a      	mov	r2, r3
 81016fc:	79fb      	ldrb	r3, [r7, #7]
 81016fe:	429a      	cmp	r2, r3
 8101700:	d113      	bne.n	810172a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8101702:	68fb      	ldr	r3, [r7, #12]
 8101704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8101706:	f043 0220 	orr.w	r2, r3, #32
 810170a:	68fb      	ldr	r3, [r7, #12]
 810170c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 810170e:	68fb      	ldr	r3, [r7, #12]
 8101710:	2220      	movs	r2, #32
 8101712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8101716:	68fb      	ldr	r3, [r7, #12]
 8101718:	2200      	movs	r2, #0
 810171a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 810171e:	68fb      	ldr	r3, [r7, #12]
 8101720:	2200      	movs	r2, #0
 8101722:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8101726:	2301      	movs	r3, #1
 8101728:	e00f      	b.n	810174a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 810172a:	68fb      	ldr	r3, [r7, #12]
 810172c:	681b      	ldr	r3, [r3, #0]
 810172e:	699a      	ldr	r2, [r3, #24]
 8101730:	68bb      	ldr	r3, [r7, #8]
 8101732:	4013      	ands	r3, r2
 8101734:	68ba      	ldr	r2, [r7, #8]
 8101736:	429a      	cmp	r2, r3
 8101738:	bf0c      	ite	eq
 810173a:	2301      	moveq	r3, #1
 810173c:	2300      	movne	r3, #0
 810173e:	b2db      	uxtb	r3, r3
 8101740:	461a      	mov	r2, r3
 8101742:	79fb      	ldrb	r3, [r7, #7]
 8101744:	429a      	cmp	r2, r3
 8101746:	d0b4      	beq.n	81016b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8101748:	2300      	movs	r3, #0
}
 810174a:	4618      	mov	r0, r3
 810174c:	3710      	adds	r7, #16
 810174e:	46bd      	mov	sp, r7
 8101750:	bd80      	pop	{r7, pc}

08101752 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8101752:	b580      	push	{r7, lr}
 8101754:	b084      	sub	sp, #16
 8101756:	af00      	add	r7, sp, #0
 8101758:	60f8      	str	r0, [r7, #12]
 810175a:	60b9      	str	r1, [r7, #8]
 810175c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 810175e:	e033      	b.n	81017c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8101760:	687a      	ldr	r2, [r7, #4]
 8101762:	68b9      	ldr	r1, [r7, #8]
 8101764:	68f8      	ldr	r0, [r7, #12]
 8101766:	f000 f90b 	bl	8101980 <I2C_IsErrorOccurred>
 810176a:	4603      	mov	r3, r0
 810176c:	2b00      	cmp	r3, #0
 810176e:	d001      	beq.n	8101774 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8101770:	2301      	movs	r3, #1
 8101772:	e031      	b.n	81017d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8101774:	68bb      	ldr	r3, [r7, #8]
 8101776:	f1b3 3fff 	cmp.w	r3, #4294967295
 810177a:	d025      	beq.n	81017c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810177c:	f7ff f9be 	bl	8100afc <HAL_GetTick>
 8101780:	4602      	mov	r2, r0
 8101782:	687b      	ldr	r3, [r7, #4]
 8101784:	1ad3      	subs	r3, r2, r3
 8101786:	68ba      	ldr	r2, [r7, #8]
 8101788:	429a      	cmp	r2, r3
 810178a:	d302      	bcc.n	8101792 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 810178c:	68bb      	ldr	r3, [r7, #8]
 810178e:	2b00      	cmp	r3, #0
 8101790:	d11a      	bne.n	81017c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8101792:	68fb      	ldr	r3, [r7, #12]
 8101794:	681b      	ldr	r3, [r3, #0]
 8101796:	699b      	ldr	r3, [r3, #24]
 8101798:	f003 0302 	and.w	r3, r3, #2
 810179c:	2b02      	cmp	r3, #2
 810179e:	d013      	beq.n	81017c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81017a0:	68fb      	ldr	r3, [r7, #12]
 81017a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81017a4:	f043 0220 	orr.w	r2, r3, #32
 81017a8:	68fb      	ldr	r3, [r7, #12]
 81017aa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 81017ac:	68fb      	ldr	r3, [r7, #12]
 81017ae:	2220      	movs	r2, #32
 81017b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 81017b4:	68fb      	ldr	r3, [r7, #12]
 81017b6:	2200      	movs	r2, #0
 81017b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 81017bc:	68fb      	ldr	r3, [r7, #12]
 81017be:	2200      	movs	r2, #0
 81017c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 81017c4:	2301      	movs	r3, #1
 81017c6:	e007      	b.n	81017d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81017c8:	68fb      	ldr	r3, [r7, #12]
 81017ca:	681b      	ldr	r3, [r3, #0]
 81017cc:	699b      	ldr	r3, [r3, #24]
 81017ce:	f003 0302 	and.w	r3, r3, #2
 81017d2:	2b02      	cmp	r3, #2
 81017d4:	d1c4      	bne.n	8101760 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 81017d6:	2300      	movs	r3, #0
}
 81017d8:	4618      	mov	r0, r3
 81017da:	3710      	adds	r7, #16
 81017dc:	46bd      	mov	sp, r7
 81017de:	bd80      	pop	{r7, pc}

081017e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81017e0:	b580      	push	{r7, lr}
 81017e2:	b084      	sub	sp, #16
 81017e4:	af00      	add	r7, sp, #0
 81017e6:	60f8      	str	r0, [r7, #12]
 81017e8:	60b9      	str	r1, [r7, #8]
 81017ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81017ec:	e02f      	b.n	810184e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81017ee:	687a      	ldr	r2, [r7, #4]
 81017f0:	68b9      	ldr	r1, [r7, #8]
 81017f2:	68f8      	ldr	r0, [r7, #12]
 81017f4:	f000 f8c4 	bl	8101980 <I2C_IsErrorOccurred>
 81017f8:	4603      	mov	r3, r0
 81017fa:	2b00      	cmp	r3, #0
 81017fc:	d001      	beq.n	8101802 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 81017fe:	2301      	movs	r3, #1
 8101800:	e02d      	b.n	810185e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8101802:	f7ff f97b 	bl	8100afc <HAL_GetTick>
 8101806:	4602      	mov	r2, r0
 8101808:	687b      	ldr	r3, [r7, #4]
 810180a:	1ad3      	subs	r3, r2, r3
 810180c:	68ba      	ldr	r2, [r7, #8]
 810180e:	429a      	cmp	r2, r3
 8101810:	d302      	bcc.n	8101818 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8101812:	68bb      	ldr	r3, [r7, #8]
 8101814:	2b00      	cmp	r3, #0
 8101816:	d11a      	bne.n	810184e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8101818:	68fb      	ldr	r3, [r7, #12]
 810181a:	681b      	ldr	r3, [r3, #0]
 810181c:	699b      	ldr	r3, [r3, #24]
 810181e:	f003 0320 	and.w	r3, r3, #32
 8101822:	2b20      	cmp	r3, #32
 8101824:	d013      	beq.n	810184e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8101826:	68fb      	ldr	r3, [r7, #12]
 8101828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810182a:	f043 0220 	orr.w	r2, r3, #32
 810182e:	68fb      	ldr	r3, [r7, #12]
 8101830:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8101832:	68fb      	ldr	r3, [r7, #12]
 8101834:	2220      	movs	r2, #32
 8101836:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 810183a:	68fb      	ldr	r3, [r7, #12]
 810183c:	2200      	movs	r2, #0
 810183e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8101842:	68fb      	ldr	r3, [r7, #12]
 8101844:	2200      	movs	r2, #0
 8101846:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 810184a:	2301      	movs	r3, #1
 810184c:	e007      	b.n	810185e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810184e:	68fb      	ldr	r3, [r7, #12]
 8101850:	681b      	ldr	r3, [r3, #0]
 8101852:	699b      	ldr	r3, [r3, #24]
 8101854:	f003 0320 	and.w	r3, r3, #32
 8101858:	2b20      	cmp	r3, #32
 810185a:	d1c8      	bne.n	81017ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 810185c:	2300      	movs	r3, #0
}
 810185e:	4618      	mov	r0, r3
 8101860:	3710      	adds	r7, #16
 8101862:	46bd      	mov	sp, r7
 8101864:	bd80      	pop	{r7, pc}
	...

08101868 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8101868:	b580      	push	{r7, lr}
 810186a:	b086      	sub	sp, #24
 810186c:	af00      	add	r7, sp, #0
 810186e:	60f8      	str	r0, [r7, #12]
 8101870:	60b9      	str	r1, [r7, #8]
 8101872:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8101874:	2300      	movs	r3, #0
 8101876:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8101878:	e071      	b.n	810195e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810187a:	687a      	ldr	r2, [r7, #4]
 810187c:	68b9      	ldr	r1, [r7, #8]
 810187e:	68f8      	ldr	r0, [r7, #12]
 8101880:	f000 f87e 	bl	8101980 <I2C_IsErrorOccurred>
 8101884:	4603      	mov	r3, r0
 8101886:	2b00      	cmp	r3, #0
 8101888:	d001      	beq.n	810188e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 810188a:	2301      	movs	r3, #1
 810188c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 810188e:	68fb      	ldr	r3, [r7, #12]
 8101890:	681b      	ldr	r3, [r3, #0]
 8101892:	699b      	ldr	r3, [r3, #24]
 8101894:	f003 0320 	and.w	r3, r3, #32
 8101898:	2b20      	cmp	r3, #32
 810189a:	d13b      	bne.n	8101914 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 810189c:	7dfb      	ldrb	r3, [r7, #23]
 810189e:	2b00      	cmp	r3, #0
 81018a0:	d138      	bne.n	8101914 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 81018a2:	68fb      	ldr	r3, [r7, #12]
 81018a4:	681b      	ldr	r3, [r3, #0]
 81018a6:	699b      	ldr	r3, [r3, #24]
 81018a8:	f003 0304 	and.w	r3, r3, #4
 81018ac:	2b04      	cmp	r3, #4
 81018ae:	d105      	bne.n	81018bc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 81018b0:	68fb      	ldr	r3, [r7, #12]
 81018b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81018b4:	2b00      	cmp	r3, #0
 81018b6:	d001      	beq.n	81018bc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 81018b8:	2300      	movs	r3, #0
 81018ba:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 81018bc:	68fb      	ldr	r3, [r7, #12]
 81018be:	681b      	ldr	r3, [r3, #0]
 81018c0:	699b      	ldr	r3, [r3, #24]
 81018c2:	f003 0310 	and.w	r3, r3, #16
 81018c6:	2b10      	cmp	r3, #16
 81018c8:	d121      	bne.n	810190e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81018ca:	68fb      	ldr	r3, [r7, #12]
 81018cc:	681b      	ldr	r3, [r3, #0]
 81018ce:	2210      	movs	r2, #16
 81018d0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 81018d2:	68fb      	ldr	r3, [r7, #12]
 81018d4:	2204      	movs	r2, #4
 81018d6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81018d8:	68fb      	ldr	r3, [r7, #12]
 81018da:	681b      	ldr	r3, [r3, #0]
 81018dc:	2220      	movs	r2, #32
 81018de:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 81018e0:	68fb      	ldr	r3, [r7, #12]
 81018e2:	681b      	ldr	r3, [r3, #0]
 81018e4:	6859      	ldr	r1, [r3, #4]
 81018e6:	68fb      	ldr	r3, [r7, #12]
 81018e8:	681a      	ldr	r2, [r3, #0]
 81018ea:	4b24      	ldr	r3, [pc, #144]	@ (810197c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 81018ec:	400b      	ands	r3, r1
 81018ee:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 81018f0:	68fb      	ldr	r3, [r7, #12]
 81018f2:	2220      	movs	r2, #32
 81018f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81018f8:	68fb      	ldr	r3, [r7, #12]
 81018fa:	2200      	movs	r2, #0
 81018fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8101900:	68fb      	ldr	r3, [r7, #12]
 8101902:	2200      	movs	r2, #0
 8101904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8101908:	2301      	movs	r3, #1
 810190a:	75fb      	strb	r3, [r7, #23]
 810190c:	e002      	b.n	8101914 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810190e:	68fb      	ldr	r3, [r7, #12]
 8101910:	2200      	movs	r2, #0
 8101912:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8101914:	f7ff f8f2 	bl	8100afc <HAL_GetTick>
 8101918:	4602      	mov	r2, r0
 810191a:	687b      	ldr	r3, [r7, #4]
 810191c:	1ad3      	subs	r3, r2, r3
 810191e:	68ba      	ldr	r2, [r7, #8]
 8101920:	429a      	cmp	r2, r3
 8101922:	d302      	bcc.n	810192a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8101924:	68bb      	ldr	r3, [r7, #8]
 8101926:	2b00      	cmp	r3, #0
 8101928:	d119      	bne.n	810195e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 810192a:	7dfb      	ldrb	r3, [r7, #23]
 810192c:	2b00      	cmp	r3, #0
 810192e:	d116      	bne.n	810195e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8101930:	68fb      	ldr	r3, [r7, #12]
 8101932:	681b      	ldr	r3, [r3, #0]
 8101934:	699b      	ldr	r3, [r3, #24]
 8101936:	f003 0304 	and.w	r3, r3, #4
 810193a:	2b04      	cmp	r3, #4
 810193c:	d00f      	beq.n	810195e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810193e:	68fb      	ldr	r3, [r7, #12]
 8101940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8101942:	f043 0220 	orr.w	r2, r3, #32
 8101946:	68fb      	ldr	r3, [r7, #12]
 8101948:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810194a:	68fb      	ldr	r3, [r7, #12]
 810194c:	2220      	movs	r2, #32
 810194e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8101952:	68fb      	ldr	r3, [r7, #12]
 8101954:	2200      	movs	r2, #0
 8101956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 810195a:	2301      	movs	r3, #1
 810195c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 810195e:	68fb      	ldr	r3, [r7, #12]
 8101960:	681b      	ldr	r3, [r3, #0]
 8101962:	699b      	ldr	r3, [r3, #24]
 8101964:	f003 0304 	and.w	r3, r3, #4
 8101968:	2b04      	cmp	r3, #4
 810196a:	d002      	beq.n	8101972 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 810196c:	7dfb      	ldrb	r3, [r7, #23]
 810196e:	2b00      	cmp	r3, #0
 8101970:	d083      	beq.n	810187a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8101972:	7dfb      	ldrb	r3, [r7, #23]
}
 8101974:	4618      	mov	r0, r3
 8101976:	3718      	adds	r7, #24
 8101978:	46bd      	mov	sp, r7
 810197a:	bd80      	pop	{r7, pc}
 810197c:	fe00e800 	.word	0xfe00e800

08101980 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8101980:	b580      	push	{r7, lr}
 8101982:	b08a      	sub	sp, #40	@ 0x28
 8101984:	af00      	add	r7, sp, #0
 8101986:	60f8      	str	r0, [r7, #12]
 8101988:	60b9      	str	r1, [r7, #8]
 810198a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810198c:	2300      	movs	r3, #0
 810198e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8101992:	68fb      	ldr	r3, [r7, #12]
 8101994:	681b      	ldr	r3, [r3, #0]
 8101996:	699b      	ldr	r3, [r3, #24]
 8101998:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 810199a:	2300      	movs	r3, #0
 810199c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 810199e:	687b      	ldr	r3, [r7, #4]
 81019a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 81019a2:	69bb      	ldr	r3, [r7, #24]
 81019a4:	f003 0310 	and.w	r3, r3, #16
 81019a8:	2b00      	cmp	r3, #0
 81019aa:	d068      	beq.n	8101a7e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81019ac:	68fb      	ldr	r3, [r7, #12]
 81019ae:	681b      	ldr	r3, [r3, #0]
 81019b0:	2210      	movs	r2, #16
 81019b2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 81019b4:	e049      	b.n	8101a4a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 81019b6:	68bb      	ldr	r3, [r7, #8]
 81019b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81019bc:	d045      	beq.n	8101a4a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 81019be:	f7ff f89d 	bl	8100afc <HAL_GetTick>
 81019c2:	4602      	mov	r2, r0
 81019c4:	69fb      	ldr	r3, [r7, #28]
 81019c6:	1ad3      	subs	r3, r2, r3
 81019c8:	68ba      	ldr	r2, [r7, #8]
 81019ca:	429a      	cmp	r2, r3
 81019cc:	d302      	bcc.n	81019d4 <I2C_IsErrorOccurred+0x54>
 81019ce:	68bb      	ldr	r3, [r7, #8]
 81019d0:	2b00      	cmp	r3, #0
 81019d2:	d13a      	bne.n	8101a4a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 81019d4:	68fb      	ldr	r3, [r7, #12]
 81019d6:	681b      	ldr	r3, [r3, #0]
 81019d8:	685b      	ldr	r3, [r3, #4]
 81019da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81019de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 81019e0:	68fb      	ldr	r3, [r7, #12]
 81019e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 81019e6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 81019e8:	68fb      	ldr	r3, [r7, #12]
 81019ea:	681b      	ldr	r3, [r3, #0]
 81019ec:	699b      	ldr	r3, [r3, #24]
 81019ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81019f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81019f6:	d121      	bne.n	8101a3c <I2C_IsErrorOccurred+0xbc>
 81019f8:	697b      	ldr	r3, [r7, #20]
 81019fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81019fe:	d01d      	beq.n	8101a3c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8101a00:	7cfb      	ldrb	r3, [r7, #19]
 8101a02:	2b20      	cmp	r3, #32
 8101a04:	d01a      	beq.n	8101a3c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8101a06:	68fb      	ldr	r3, [r7, #12]
 8101a08:	681b      	ldr	r3, [r3, #0]
 8101a0a:	685a      	ldr	r2, [r3, #4]
 8101a0c:	68fb      	ldr	r3, [r7, #12]
 8101a0e:	681b      	ldr	r3, [r3, #0]
 8101a10:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8101a14:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8101a16:	f7ff f871 	bl	8100afc <HAL_GetTick>
 8101a1a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8101a1c:	e00e      	b.n	8101a3c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8101a1e:	f7ff f86d 	bl	8100afc <HAL_GetTick>
 8101a22:	4602      	mov	r2, r0
 8101a24:	69fb      	ldr	r3, [r7, #28]
 8101a26:	1ad3      	subs	r3, r2, r3
 8101a28:	2b19      	cmp	r3, #25
 8101a2a:	d907      	bls.n	8101a3c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8101a2c:	6a3b      	ldr	r3, [r7, #32]
 8101a2e:	f043 0320 	orr.w	r3, r3, #32
 8101a32:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8101a34:	2301      	movs	r3, #1
 8101a36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8101a3a:	e006      	b.n	8101a4a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8101a3c:	68fb      	ldr	r3, [r7, #12]
 8101a3e:	681b      	ldr	r3, [r3, #0]
 8101a40:	699b      	ldr	r3, [r3, #24]
 8101a42:	f003 0320 	and.w	r3, r3, #32
 8101a46:	2b20      	cmp	r3, #32
 8101a48:	d1e9      	bne.n	8101a1e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8101a4a:	68fb      	ldr	r3, [r7, #12]
 8101a4c:	681b      	ldr	r3, [r3, #0]
 8101a4e:	699b      	ldr	r3, [r3, #24]
 8101a50:	f003 0320 	and.w	r3, r3, #32
 8101a54:	2b20      	cmp	r3, #32
 8101a56:	d003      	beq.n	8101a60 <I2C_IsErrorOccurred+0xe0>
 8101a58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101a5c:	2b00      	cmp	r3, #0
 8101a5e:	d0aa      	beq.n	81019b6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8101a60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101a64:	2b00      	cmp	r3, #0
 8101a66:	d103      	bne.n	8101a70 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8101a68:	68fb      	ldr	r3, [r7, #12]
 8101a6a:	681b      	ldr	r3, [r3, #0]
 8101a6c:	2220      	movs	r2, #32
 8101a6e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8101a70:	6a3b      	ldr	r3, [r7, #32]
 8101a72:	f043 0304 	orr.w	r3, r3, #4
 8101a76:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8101a78:	2301      	movs	r3, #1
 8101a7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8101a7e:	68fb      	ldr	r3, [r7, #12]
 8101a80:	681b      	ldr	r3, [r3, #0]
 8101a82:	699b      	ldr	r3, [r3, #24]
 8101a84:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8101a86:	69bb      	ldr	r3, [r7, #24]
 8101a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8101a8c:	2b00      	cmp	r3, #0
 8101a8e:	d00b      	beq.n	8101aa8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8101a90:	6a3b      	ldr	r3, [r7, #32]
 8101a92:	f043 0301 	orr.w	r3, r3, #1
 8101a96:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8101a98:	68fb      	ldr	r3, [r7, #12]
 8101a9a:	681b      	ldr	r3, [r3, #0]
 8101a9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8101aa0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8101aa2:	2301      	movs	r3, #1
 8101aa4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8101aa8:	69bb      	ldr	r3, [r7, #24]
 8101aaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8101aae:	2b00      	cmp	r3, #0
 8101ab0:	d00b      	beq.n	8101aca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8101ab2:	6a3b      	ldr	r3, [r7, #32]
 8101ab4:	f043 0308 	orr.w	r3, r3, #8
 8101ab8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8101aba:	68fb      	ldr	r3, [r7, #12]
 8101abc:	681b      	ldr	r3, [r3, #0]
 8101abe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8101ac2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8101ac4:	2301      	movs	r3, #1
 8101ac6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8101aca:	69bb      	ldr	r3, [r7, #24]
 8101acc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8101ad0:	2b00      	cmp	r3, #0
 8101ad2:	d00b      	beq.n	8101aec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8101ad4:	6a3b      	ldr	r3, [r7, #32]
 8101ad6:	f043 0302 	orr.w	r3, r3, #2
 8101ada:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8101adc:	68fb      	ldr	r3, [r7, #12]
 8101ade:	681b      	ldr	r3, [r3, #0]
 8101ae0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8101ae4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8101ae6:	2301      	movs	r3, #1
 8101ae8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8101aec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101af0:	2b00      	cmp	r3, #0
 8101af2:	d01c      	beq.n	8101b2e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8101af4:	68f8      	ldr	r0, [r7, #12]
 8101af6:	f7ff fdaf 	bl	8101658 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8101afa:	68fb      	ldr	r3, [r7, #12]
 8101afc:	681b      	ldr	r3, [r3, #0]
 8101afe:	6859      	ldr	r1, [r3, #4]
 8101b00:	68fb      	ldr	r3, [r7, #12]
 8101b02:	681a      	ldr	r2, [r3, #0]
 8101b04:	4b0d      	ldr	r3, [pc, #52]	@ (8101b3c <I2C_IsErrorOccurred+0x1bc>)
 8101b06:	400b      	ands	r3, r1
 8101b08:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8101b0a:	68fb      	ldr	r3, [r7, #12]
 8101b0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8101b0e:	6a3b      	ldr	r3, [r7, #32]
 8101b10:	431a      	orrs	r2, r3
 8101b12:	68fb      	ldr	r3, [r7, #12]
 8101b14:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8101b16:	68fb      	ldr	r3, [r7, #12]
 8101b18:	2220      	movs	r2, #32
 8101b1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8101b1e:	68fb      	ldr	r3, [r7, #12]
 8101b20:	2200      	movs	r2, #0
 8101b22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8101b26:	68fb      	ldr	r3, [r7, #12]
 8101b28:	2200      	movs	r2, #0
 8101b2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8101b2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8101b32:	4618      	mov	r0, r3
 8101b34:	3728      	adds	r7, #40	@ 0x28
 8101b36:	46bd      	mov	sp, r7
 8101b38:	bd80      	pop	{r7, pc}
 8101b3a:	bf00      	nop
 8101b3c:	fe00e800 	.word	0xfe00e800

08101b40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8101b40:	b480      	push	{r7}
 8101b42:	b087      	sub	sp, #28
 8101b44:	af00      	add	r7, sp, #0
 8101b46:	60f8      	str	r0, [r7, #12]
 8101b48:	607b      	str	r3, [r7, #4]
 8101b4a:	460b      	mov	r3, r1
 8101b4c:	817b      	strh	r3, [r7, #10]
 8101b4e:	4613      	mov	r3, r2
 8101b50:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8101b52:	897b      	ldrh	r3, [r7, #10]
 8101b54:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8101b58:	7a7b      	ldrb	r3, [r7, #9]
 8101b5a:	041b      	lsls	r3, r3, #16
 8101b5c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8101b60:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8101b62:	687b      	ldr	r3, [r7, #4]
 8101b64:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8101b66:	6a3b      	ldr	r3, [r7, #32]
 8101b68:	4313      	orrs	r3, r2
 8101b6a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8101b6e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8101b70:	68fb      	ldr	r3, [r7, #12]
 8101b72:	681b      	ldr	r3, [r3, #0]
 8101b74:	685a      	ldr	r2, [r3, #4]
 8101b76:	6a3b      	ldr	r3, [r7, #32]
 8101b78:	0d5b      	lsrs	r3, r3, #21
 8101b7a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8101b7e:	4b08      	ldr	r3, [pc, #32]	@ (8101ba0 <I2C_TransferConfig+0x60>)
 8101b80:	430b      	orrs	r3, r1
 8101b82:	43db      	mvns	r3, r3
 8101b84:	ea02 0103 	and.w	r1, r2, r3
 8101b88:	68fb      	ldr	r3, [r7, #12]
 8101b8a:	681b      	ldr	r3, [r3, #0]
 8101b8c:	697a      	ldr	r2, [r7, #20]
 8101b8e:	430a      	orrs	r2, r1
 8101b90:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8101b92:	bf00      	nop
 8101b94:	371c      	adds	r7, #28
 8101b96:	46bd      	mov	sp, r7
 8101b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b9c:	4770      	bx	lr
 8101b9e:	bf00      	nop
 8101ba0:	03ff63ff 	.word	0x03ff63ff

08101ba4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8101ba4:	b480      	push	{r7}
 8101ba6:	b083      	sub	sp, #12
 8101ba8:	af00      	add	r7, sp, #0
 8101baa:	6078      	str	r0, [r7, #4]
 8101bac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8101bae:	687b      	ldr	r3, [r7, #4]
 8101bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8101bb4:	b2db      	uxtb	r3, r3
 8101bb6:	2b20      	cmp	r3, #32
 8101bb8:	d138      	bne.n	8101c2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8101bba:	687b      	ldr	r3, [r7, #4]
 8101bbc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8101bc0:	2b01      	cmp	r3, #1
 8101bc2:	d101      	bne.n	8101bc8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8101bc4:	2302      	movs	r3, #2
 8101bc6:	e032      	b.n	8101c2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8101bc8:	687b      	ldr	r3, [r7, #4]
 8101bca:	2201      	movs	r2, #1
 8101bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8101bd0:	687b      	ldr	r3, [r7, #4]
 8101bd2:	2224      	movs	r2, #36	@ 0x24
 8101bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8101bd8:	687b      	ldr	r3, [r7, #4]
 8101bda:	681b      	ldr	r3, [r3, #0]
 8101bdc:	681a      	ldr	r2, [r3, #0]
 8101bde:	687b      	ldr	r3, [r7, #4]
 8101be0:	681b      	ldr	r3, [r3, #0]
 8101be2:	f022 0201 	bic.w	r2, r2, #1
 8101be6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8101be8:	687b      	ldr	r3, [r7, #4]
 8101bea:	681b      	ldr	r3, [r3, #0]
 8101bec:	681a      	ldr	r2, [r3, #0]
 8101bee:	687b      	ldr	r3, [r7, #4]
 8101bf0:	681b      	ldr	r3, [r3, #0]
 8101bf2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8101bf6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8101bf8:	687b      	ldr	r3, [r7, #4]
 8101bfa:	681b      	ldr	r3, [r3, #0]
 8101bfc:	6819      	ldr	r1, [r3, #0]
 8101bfe:	687b      	ldr	r3, [r7, #4]
 8101c00:	681b      	ldr	r3, [r3, #0]
 8101c02:	683a      	ldr	r2, [r7, #0]
 8101c04:	430a      	orrs	r2, r1
 8101c06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8101c08:	687b      	ldr	r3, [r7, #4]
 8101c0a:	681b      	ldr	r3, [r3, #0]
 8101c0c:	681a      	ldr	r2, [r3, #0]
 8101c0e:	687b      	ldr	r3, [r7, #4]
 8101c10:	681b      	ldr	r3, [r3, #0]
 8101c12:	f042 0201 	orr.w	r2, r2, #1
 8101c16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8101c18:	687b      	ldr	r3, [r7, #4]
 8101c1a:	2220      	movs	r2, #32
 8101c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8101c20:	687b      	ldr	r3, [r7, #4]
 8101c22:	2200      	movs	r2, #0
 8101c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8101c28:	2300      	movs	r3, #0
 8101c2a:	e000      	b.n	8101c2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8101c2c:	2302      	movs	r3, #2
  }
}
 8101c2e:	4618      	mov	r0, r3
 8101c30:	370c      	adds	r7, #12
 8101c32:	46bd      	mov	sp, r7
 8101c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c38:	4770      	bx	lr

08101c3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8101c3a:	b480      	push	{r7}
 8101c3c:	b085      	sub	sp, #20
 8101c3e:	af00      	add	r7, sp, #0
 8101c40:	6078      	str	r0, [r7, #4]
 8101c42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8101c44:	687b      	ldr	r3, [r7, #4]
 8101c46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8101c4a:	b2db      	uxtb	r3, r3
 8101c4c:	2b20      	cmp	r3, #32
 8101c4e:	d139      	bne.n	8101cc4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8101c50:	687b      	ldr	r3, [r7, #4]
 8101c52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8101c56:	2b01      	cmp	r3, #1
 8101c58:	d101      	bne.n	8101c5e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8101c5a:	2302      	movs	r3, #2
 8101c5c:	e033      	b.n	8101cc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8101c5e:	687b      	ldr	r3, [r7, #4]
 8101c60:	2201      	movs	r2, #1
 8101c62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8101c66:	687b      	ldr	r3, [r7, #4]
 8101c68:	2224      	movs	r2, #36	@ 0x24
 8101c6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8101c6e:	687b      	ldr	r3, [r7, #4]
 8101c70:	681b      	ldr	r3, [r3, #0]
 8101c72:	681a      	ldr	r2, [r3, #0]
 8101c74:	687b      	ldr	r3, [r7, #4]
 8101c76:	681b      	ldr	r3, [r3, #0]
 8101c78:	f022 0201 	bic.w	r2, r2, #1
 8101c7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8101c7e:	687b      	ldr	r3, [r7, #4]
 8101c80:	681b      	ldr	r3, [r3, #0]
 8101c82:	681b      	ldr	r3, [r3, #0]
 8101c84:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8101c86:	68fb      	ldr	r3, [r7, #12]
 8101c88:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8101c8c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8101c8e:	683b      	ldr	r3, [r7, #0]
 8101c90:	021b      	lsls	r3, r3, #8
 8101c92:	68fa      	ldr	r2, [r7, #12]
 8101c94:	4313      	orrs	r3, r2
 8101c96:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8101c98:	687b      	ldr	r3, [r7, #4]
 8101c9a:	681b      	ldr	r3, [r3, #0]
 8101c9c:	68fa      	ldr	r2, [r7, #12]
 8101c9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8101ca0:	687b      	ldr	r3, [r7, #4]
 8101ca2:	681b      	ldr	r3, [r3, #0]
 8101ca4:	681a      	ldr	r2, [r3, #0]
 8101ca6:	687b      	ldr	r3, [r7, #4]
 8101ca8:	681b      	ldr	r3, [r3, #0]
 8101caa:	f042 0201 	orr.w	r2, r2, #1
 8101cae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8101cb0:	687b      	ldr	r3, [r7, #4]
 8101cb2:	2220      	movs	r2, #32
 8101cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8101cb8:	687b      	ldr	r3, [r7, #4]
 8101cba:	2200      	movs	r2, #0
 8101cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8101cc0:	2300      	movs	r3, #0
 8101cc2:	e000      	b.n	8101cc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8101cc4:	2302      	movs	r3, #2
  }
}
 8101cc6:	4618      	mov	r0, r3
 8101cc8:	3714      	adds	r7, #20
 8101cca:	46bd      	mov	sp, r7
 8101ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cd0:	4770      	bx	lr
	...

08101cd4 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8101cd4:	b580      	push	{r7, lr}
 8101cd6:	b084      	sub	sp, #16
 8101cd8:	af00      	add	r7, sp, #0
 8101cda:	60f8      	str	r0, [r7, #12]
 8101cdc:	460b      	mov	r3, r1
 8101cde:	607a      	str	r2, [r7, #4]
 8101ce0:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8101ce2:	4b37      	ldr	r3, [pc, #220]	@ (8101dc0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101ce4:	681b      	ldr	r3, [r3, #0]
 8101ce6:	f023 0201 	bic.w	r2, r3, #1
 8101cea:	4935      	ldr	r1, [pc, #212]	@ (8101dc0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101cec:	68fb      	ldr	r3, [r7, #12]
 8101cee:	4313      	orrs	r3, r2
 8101cf0:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8101cf2:	687b      	ldr	r3, [r7, #4]
 8101cf4:	2b00      	cmp	r3, #0
 8101cf6:	d123      	bne.n	8101d40 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8101cf8:	f7ff f814 	bl	8100d24 <HAL_GetCurrentCPUID>
 8101cfc:	4603      	mov	r3, r0
 8101cfe:	2b03      	cmp	r3, #3
 8101d00:	d158      	bne.n	8101db4 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8101d02:	4b2f      	ldr	r3, [pc, #188]	@ (8101dc0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101d04:	691b      	ldr	r3, [r3, #16]
 8101d06:	4a2e      	ldr	r2, [pc, #184]	@ (8101dc0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101d08:	f023 0301 	bic.w	r3, r3, #1
 8101d0c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101d0e:	4b2d      	ldr	r3, [pc, #180]	@ (8101dc4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101d10:	691b      	ldr	r3, [r3, #16]
 8101d12:	4a2c      	ldr	r2, [pc, #176]	@ (8101dc4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101d14:	f043 0304 	orr.w	r3, r3, #4
 8101d18:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101d1a:	f3bf 8f4f 	dsb	sy
}
 8101d1e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101d20:	f3bf 8f6f 	isb	sy
}
 8101d24:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101d26:	7afb      	ldrb	r3, [r7, #11]
 8101d28:	2b01      	cmp	r3, #1
 8101d2a:	d101      	bne.n	8101d30 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101d2c:	bf30      	wfi
 8101d2e:	e000      	b.n	8101d32 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101d30:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101d32:	4b24      	ldr	r3, [pc, #144]	@ (8101dc4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101d34:	691b      	ldr	r3, [r3, #16]
 8101d36:	4a23      	ldr	r2, [pc, #140]	@ (8101dc4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101d38:	f023 0304 	bic.w	r3, r3, #4
 8101d3c:	6113      	str	r3, [r2, #16]
 8101d3e:	e03c      	b.n	8101dba <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8101d40:	687b      	ldr	r3, [r7, #4]
 8101d42:	2b01      	cmp	r3, #1
 8101d44:	d123      	bne.n	8101d8e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8101d46:	f7fe ffed 	bl	8100d24 <HAL_GetCurrentCPUID>
 8101d4a:	4603      	mov	r3, r0
 8101d4c:	2b01      	cmp	r3, #1
 8101d4e:	d133      	bne.n	8101db8 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101d50:	4b1b      	ldr	r3, [pc, #108]	@ (8101dc0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101d52:	695b      	ldr	r3, [r3, #20]
 8101d54:	4a1a      	ldr	r2, [pc, #104]	@ (8101dc0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101d56:	f023 0302 	bic.w	r3, r3, #2
 8101d5a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101d5c:	4b19      	ldr	r3, [pc, #100]	@ (8101dc4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101d5e:	691b      	ldr	r3, [r3, #16]
 8101d60:	4a18      	ldr	r2, [pc, #96]	@ (8101dc4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101d62:	f043 0304 	orr.w	r3, r3, #4
 8101d66:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101d68:	f3bf 8f4f 	dsb	sy
}
 8101d6c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101d6e:	f3bf 8f6f 	isb	sy
}
 8101d72:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101d74:	7afb      	ldrb	r3, [r7, #11]
 8101d76:	2b01      	cmp	r3, #1
 8101d78:	d101      	bne.n	8101d7e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101d7a:	bf30      	wfi
 8101d7c:	e000      	b.n	8101d80 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101d7e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101d80:	4b10      	ldr	r3, [pc, #64]	@ (8101dc4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101d82:	691b      	ldr	r3, [r3, #16]
 8101d84:	4a0f      	ldr	r2, [pc, #60]	@ (8101dc4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101d86:	f023 0304 	bic.w	r3, r3, #4
 8101d8a:	6113      	str	r3, [r2, #16]
 8101d8c:	e015      	b.n	8101dba <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101d8e:	f7fe ffc9 	bl	8100d24 <HAL_GetCurrentCPUID>
 8101d92:	4603      	mov	r3, r0
 8101d94:	2b03      	cmp	r3, #3
 8101d96:	d106      	bne.n	8101da6 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101d98:	4b09      	ldr	r3, [pc, #36]	@ (8101dc0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101d9a:	691b      	ldr	r3, [r3, #16]
 8101d9c:	4a08      	ldr	r2, [pc, #32]	@ (8101dc0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101d9e:	f023 0304 	bic.w	r3, r3, #4
 8101da2:	6113      	str	r3, [r2, #16]
 8101da4:	e009      	b.n	8101dba <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8101da6:	4b06      	ldr	r3, [pc, #24]	@ (8101dc0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101da8:	695b      	ldr	r3, [r3, #20]
 8101daa:	4a05      	ldr	r2, [pc, #20]	@ (8101dc0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101dac:	f023 0304 	bic.w	r3, r3, #4
 8101db0:	6153      	str	r3, [r2, #20]
 8101db2:	e002      	b.n	8101dba <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101db4:	bf00      	nop
 8101db6:	e000      	b.n	8101dba <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101db8:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8101dba:	3710      	adds	r7, #16
 8101dbc:	46bd      	mov	sp, r7
 8101dbe:	bd80      	pop	{r7, pc}
 8101dc0:	58024800 	.word	0x58024800
 8101dc4:	e000ed00 	.word	0xe000ed00

08101dc8 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8101dc8:	b580      	push	{r7, lr}
 8101dca:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101dcc:	f7fe ffaa 	bl	8100d24 <HAL_GetCurrentCPUID>
 8101dd0:	4603      	mov	r3, r0
 8101dd2:	2b03      	cmp	r3, #3
 8101dd4:	d101      	bne.n	8101dda <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8101dd6:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8101dd8:	e001      	b.n	8101dde <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8101dda:	bf40      	sev
    __WFE ();
 8101ddc:	bf20      	wfe
}
 8101dde:	bf00      	nop
 8101de0:	bd80      	pop	{r7, pc}
	...

08101de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8101de4:	b480      	push	{r7}
 8101de6:	b089      	sub	sp, #36	@ 0x24
 8101de8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8101dea:	4bb3      	ldr	r3, [pc, #716]	@ (81020b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101dec:	691b      	ldr	r3, [r3, #16]
 8101dee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8101df2:	2b18      	cmp	r3, #24
 8101df4:	f200 8155 	bhi.w	81020a2 <HAL_RCC_GetSysClockFreq+0x2be>
 8101df8:	a201      	add	r2, pc, #4	@ (adr r2, 8101e00 <HAL_RCC_GetSysClockFreq+0x1c>)
 8101dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101dfe:	bf00      	nop
 8101e00:	08101e65 	.word	0x08101e65
 8101e04:	081020a3 	.word	0x081020a3
 8101e08:	081020a3 	.word	0x081020a3
 8101e0c:	081020a3 	.word	0x081020a3
 8101e10:	081020a3 	.word	0x081020a3
 8101e14:	081020a3 	.word	0x081020a3
 8101e18:	081020a3 	.word	0x081020a3
 8101e1c:	081020a3 	.word	0x081020a3
 8101e20:	08101e8b 	.word	0x08101e8b
 8101e24:	081020a3 	.word	0x081020a3
 8101e28:	081020a3 	.word	0x081020a3
 8101e2c:	081020a3 	.word	0x081020a3
 8101e30:	081020a3 	.word	0x081020a3
 8101e34:	081020a3 	.word	0x081020a3
 8101e38:	081020a3 	.word	0x081020a3
 8101e3c:	081020a3 	.word	0x081020a3
 8101e40:	08101e91 	.word	0x08101e91
 8101e44:	081020a3 	.word	0x081020a3
 8101e48:	081020a3 	.word	0x081020a3
 8101e4c:	081020a3 	.word	0x081020a3
 8101e50:	081020a3 	.word	0x081020a3
 8101e54:	081020a3 	.word	0x081020a3
 8101e58:	081020a3 	.word	0x081020a3
 8101e5c:	081020a3 	.word	0x081020a3
 8101e60:	08101e97 	.word	0x08101e97
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101e64:	4b94      	ldr	r3, [pc, #592]	@ (81020b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101e66:	681b      	ldr	r3, [r3, #0]
 8101e68:	f003 0320 	and.w	r3, r3, #32
 8101e6c:	2b00      	cmp	r3, #0
 8101e6e:	d009      	beq.n	8101e84 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101e70:	4b91      	ldr	r3, [pc, #580]	@ (81020b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101e72:	681b      	ldr	r3, [r3, #0]
 8101e74:	08db      	lsrs	r3, r3, #3
 8101e76:	f003 0303 	and.w	r3, r3, #3
 8101e7a:	4a90      	ldr	r2, [pc, #576]	@ (81020bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8101e80:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8101e82:	e111      	b.n	81020a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8101e84:	4b8d      	ldr	r3, [pc, #564]	@ (81020bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101e86:	61bb      	str	r3, [r7, #24]
      break;
 8101e88:	e10e      	b.n	81020a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8101e8a:	4b8d      	ldr	r3, [pc, #564]	@ (81020c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101e8c:	61bb      	str	r3, [r7, #24]
      break;
 8101e8e:	e10b      	b.n	81020a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8101e90:	4b8c      	ldr	r3, [pc, #560]	@ (81020c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8101e92:	61bb      	str	r3, [r7, #24]
      break;
 8101e94:	e108      	b.n	81020a8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8101e96:	4b88      	ldr	r3, [pc, #544]	@ (81020b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101e9a:	f003 0303 	and.w	r3, r3, #3
 8101e9e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8101ea0:	4b85      	ldr	r3, [pc, #532]	@ (81020b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101ea4:	091b      	lsrs	r3, r3, #4
 8101ea6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8101eaa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8101eac:	4b82      	ldr	r3, [pc, #520]	@ (81020b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101eb0:	f003 0301 	and.w	r3, r3, #1
 8101eb4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8101eb6:	4b80      	ldr	r3, [pc, #512]	@ (81020b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8101eba:	08db      	lsrs	r3, r3, #3
 8101ebc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8101ec0:	68fa      	ldr	r2, [r7, #12]
 8101ec2:	fb02 f303 	mul.w	r3, r2, r3
 8101ec6:	ee07 3a90 	vmov	s15, r3
 8101eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101ece:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8101ed2:	693b      	ldr	r3, [r7, #16]
 8101ed4:	2b00      	cmp	r3, #0
 8101ed6:	f000 80e1 	beq.w	810209c <HAL_RCC_GetSysClockFreq+0x2b8>
 8101eda:	697b      	ldr	r3, [r7, #20]
 8101edc:	2b02      	cmp	r3, #2
 8101ede:	f000 8083 	beq.w	8101fe8 <HAL_RCC_GetSysClockFreq+0x204>
 8101ee2:	697b      	ldr	r3, [r7, #20]
 8101ee4:	2b02      	cmp	r3, #2
 8101ee6:	f200 80a1 	bhi.w	810202c <HAL_RCC_GetSysClockFreq+0x248>
 8101eea:	697b      	ldr	r3, [r7, #20]
 8101eec:	2b00      	cmp	r3, #0
 8101eee:	d003      	beq.n	8101ef8 <HAL_RCC_GetSysClockFreq+0x114>
 8101ef0:	697b      	ldr	r3, [r7, #20]
 8101ef2:	2b01      	cmp	r3, #1
 8101ef4:	d056      	beq.n	8101fa4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8101ef6:	e099      	b.n	810202c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101ef8:	4b6f      	ldr	r3, [pc, #444]	@ (81020b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101efa:	681b      	ldr	r3, [r3, #0]
 8101efc:	f003 0320 	and.w	r3, r3, #32
 8101f00:	2b00      	cmp	r3, #0
 8101f02:	d02d      	beq.n	8101f60 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101f04:	4b6c      	ldr	r3, [pc, #432]	@ (81020b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101f06:	681b      	ldr	r3, [r3, #0]
 8101f08:	08db      	lsrs	r3, r3, #3
 8101f0a:	f003 0303 	and.w	r3, r3, #3
 8101f0e:	4a6b      	ldr	r2, [pc, #428]	@ (81020bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101f10:	fa22 f303 	lsr.w	r3, r2, r3
 8101f14:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101f16:	687b      	ldr	r3, [r7, #4]
 8101f18:	ee07 3a90 	vmov	s15, r3
 8101f1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101f20:	693b      	ldr	r3, [r7, #16]
 8101f22:	ee07 3a90 	vmov	s15, r3
 8101f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101f2e:	4b62      	ldr	r3, [pc, #392]	@ (81020b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101f36:	ee07 3a90 	vmov	s15, r3
 8101f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101f3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101f42:	eddf 5a61 	vldr	s11, [pc, #388]	@ 81020c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101f4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101f5a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8101f5e:	e087      	b.n	8102070 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101f60:	693b      	ldr	r3, [r7, #16]
 8101f62:	ee07 3a90 	vmov	s15, r3
 8101f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101f6a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 81020cc <HAL_RCC_GetSysClockFreq+0x2e8>
 8101f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101f72:	4b51      	ldr	r3, [pc, #324]	@ (81020b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101f7a:	ee07 3a90 	vmov	s15, r3
 8101f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101f82:	ed97 6a02 	vldr	s12, [r7, #8]
 8101f86:	eddf 5a50 	vldr	s11, [pc, #320]	@ 81020c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101f92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101f9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101fa2:	e065      	b.n	8102070 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101fa4:	693b      	ldr	r3, [r7, #16]
 8101fa6:	ee07 3a90 	vmov	s15, r3
 8101faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101fae:	eddf 6a48 	vldr	s13, [pc, #288]	@ 81020d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8101fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101fb6:	4b40      	ldr	r3, [pc, #256]	@ (81020b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101fbe:	ee07 3a90 	vmov	s15, r3
 8101fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101fc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8101fca:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 81020c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101fd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101fe2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101fe6:	e043      	b.n	8102070 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101fe8:	693b      	ldr	r3, [r7, #16]
 8101fea:	ee07 3a90 	vmov	s15, r3
 8101fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101ff2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 81020d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8101ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101ffa:	4b2f      	ldr	r3, [pc, #188]	@ (81020b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102002:	ee07 3a90 	vmov	s15, r3
 8102006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810200a:	ed97 6a02 	vldr	s12, [r7, #8]
 810200e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 81020c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810201a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810201e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102026:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810202a:	e021      	b.n	8102070 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810202c:	693b      	ldr	r3, [r7, #16]
 810202e:	ee07 3a90 	vmov	s15, r3
 8102032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102036:	eddf 6a26 	vldr	s13, [pc, #152]	@ 81020d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 810203a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810203e:	4b1e      	ldr	r3, [pc, #120]	@ (81020b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102046:	ee07 3a90 	vmov	s15, r3
 810204a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810204e:	ed97 6a02 	vldr	s12, [r7, #8]
 8102052:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 81020c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810205a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810205e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102066:	ee67 7a27 	vmul.f32	s15, s14, s15
 810206a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810206e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8102070:	4b11      	ldr	r3, [pc, #68]	@ (81020b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102074:	0a5b      	lsrs	r3, r3, #9
 8102076:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810207a:	3301      	adds	r3, #1
 810207c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810207e:	683b      	ldr	r3, [r7, #0]
 8102080:	ee07 3a90 	vmov	s15, r3
 8102084:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102088:	edd7 6a07 	vldr	s13, [r7, #28]
 810208c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102090:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102094:	ee17 3a90 	vmov	r3, s15
 8102098:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 810209a:	e005      	b.n	81020a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 810209c:	2300      	movs	r3, #0
 810209e:	61bb      	str	r3, [r7, #24]
      break;
 81020a0:	e002      	b.n	81020a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81020a2:	4b07      	ldr	r3, [pc, #28]	@ (81020c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81020a4:	61bb      	str	r3, [r7, #24]
      break;
 81020a6:	bf00      	nop
  }

  return sysclockfreq;
 81020a8:	69bb      	ldr	r3, [r7, #24]
}
 81020aa:	4618      	mov	r0, r3
 81020ac:	3724      	adds	r7, #36	@ 0x24
 81020ae:	46bd      	mov	sp, r7
 81020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020b4:	4770      	bx	lr
 81020b6:	bf00      	nop
 81020b8:	58024400 	.word	0x58024400
 81020bc:	03d09000 	.word	0x03d09000
 81020c0:	003d0900 	.word	0x003d0900
 81020c4:	017d7840 	.word	0x017d7840
 81020c8:	46000000 	.word	0x46000000
 81020cc:	4c742400 	.word	0x4c742400
 81020d0:	4a742400 	.word	0x4a742400
 81020d4:	4bbebc20 	.word	0x4bbebc20

081020d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81020d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81020dc:	b0ca      	sub	sp, #296	@ 0x128
 81020de:	af00      	add	r7, sp, #0
 81020e0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81020e4:	2300      	movs	r3, #0
 81020e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81020ea:	2300      	movs	r3, #0
 81020ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81020f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81020f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81020f8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 81020fc:	2500      	movs	r5, #0
 81020fe:	ea54 0305 	orrs.w	r3, r4, r5
 8102102:	d049      	beq.n	8102198 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8102104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102108:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810210a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810210e:	d02f      	beq.n	8102170 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8102110:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102114:	d828      	bhi.n	8102168 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8102116:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810211a:	d01a      	beq.n	8102152 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 810211c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102120:	d822      	bhi.n	8102168 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8102122:	2b00      	cmp	r3, #0
 8102124:	d003      	beq.n	810212e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8102126:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810212a:	d007      	beq.n	810213c <HAL_RCCEx_PeriphCLKConfig+0x64>
 810212c:	e01c      	b.n	8102168 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810212e:	4bb8      	ldr	r3, [pc, #736]	@ (8102410 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102132:	4ab7      	ldr	r2, [pc, #732]	@ (8102410 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102138:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810213a:	e01a      	b.n	8102172 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810213c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102140:	3308      	adds	r3, #8
 8102142:	2102      	movs	r1, #2
 8102144:	4618      	mov	r0, r3
 8102146:	f001 f9d1 	bl	81034ec <RCCEx_PLL2_Config>
 810214a:	4603      	mov	r3, r0
 810214c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102150:	e00f      	b.n	8102172 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102156:	3328      	adds	r3, #40	@ 0x28
 8102158:	2102      	movs	r1, #2
 810215a:	4618      	mov	r0, r3
 810215c:	f001 fa78 	bl	8103650 <RCCEx_PLL3_Config>
 8102160:	4603      	mov	r3, r0
 8102162:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102166:	e004      	b.n	8102172 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102168:	2301      	movs	r3, #1
 810216a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810216e:	e000      	b.n	8102172 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8102170:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102172:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102176:	2b00      	cmp	r3, #0
 8102178:	d10a      	bne.n	8102190 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810217a:	4ba5      	ldr	r3, [pc, #660]	@ (8102410 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810217c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810217e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8102182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102186:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8102188:	4aa1      	ldr	r2, [pc, #644]	@ (8102410 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810218a:	430b      	orrs	r3, r1
 810218c:	6513      	str	r3, [r2, #80]	@ 0x50
 810218e:	e003      	b.n	8102198 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102190:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102194:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8102198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810219c:	e9d3 2300 	ldrd	r2, r3, [r3]
 81021a0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 81021a4:	f04f 0900 	mov.w	r9, #0
 81021a8:	ea58 0309 	orrs.w	r3, r8, r9
 81021ac:	d047      	beq.n	810223e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 81021ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81021b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81021b4:	2b04      	cmp	r3, #4
 81021b6:	d82a      	bhi.n	810220e <HAL_RCCEx_PeriphCLKConfig+0x136>
 81021b8:	a201      	add	r2, pc, #4	@ (adr r2, 81021c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 81021ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81021be:	bf00      	nop
 81021c0:	081021d5 	.word	0x081021d5
 81021c4:	081021e3 	.word	0x081021e3
 81021c8:	081021f9 	.word	0x081021f9
 81021cc:	08102217 	.word	0x08102217
 81021d0:	08102217 	.word	0x08102217
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81021d4:	4b8e      	ldr	r3, [pc, #568]	@ (8102410 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81021d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81021d8:	4a8d      	ldr	r2, [pc, #564]	@ (8102410 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81021da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81021de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81021e0:	e01a      	b.n	8102218 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81021e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81021e6:	3308      	adds	r3, #8
 81021e8:	2100      	movs	r1, #0
 81021ea:	4618      	mov	r0, r3
 81021ec:	f001 f97e 	bl	81034ec <RCCEx_PLL2_Config>
 81021f0:	4603      	mov	r3, r0
 81021f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81021f6:	e00f      	b.n	8102218 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81021f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81021fc:	3328      	adds	r3, #40	@ 0x28
 81021fe:	2100      	movs	r1, #0
 8102200:	4618      	mov	r0, r3
 8102202:	f001 fa25 	bl	8103650 <RCCEx_PLL3_Config>
 8102206:	4603      	mov	r3, r0
 8102208:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810220c:	e004      	b.n	8102218 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810220e:	2301      	movs	r3, #1
 8102210:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102214:	e000      	b.n	8102218 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8102216:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102218:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810221c:	2b00      	cmp	r3, #0
 810221e:	d10a      	bne.n	8102236 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8102220:	4b7b      	ldr	r3, [pc, #492]	@ (8102410 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102224:	f023 0107 	bic.w	r1, r3, #7
 8102228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810222c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810222e:	4a78      	ldr	r2, [pc, #480]	@ (8102410 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102230:	430b      	orrs	r3, r1
 8102232:	6513      	str	r3, [r2, #80]	@ 0x50
 8102234:	e003      	b.n	810223e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102236:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810223a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 810223e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102246:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 810224a:	f04f 0b00 	mov.w	fp, #0
 810224e:	ea5a 030b 	orrs.w	r3, sl, fp
 8102252:	d04c      	beq.n	81022ee <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8102254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810225a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810225e:	d030      	beq.n	81022c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8102260:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102264:	d829      	bhi.n	81022ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8102266:	2bc0      	cmp	r3, #192	@ 0xc0
 8102268:	d02d      	beq.n	81022c6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 810226a:	2bc0      	cmp	r3, #192	@ 0xc0
 810226c:	d825      	bhi.n	81022ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810226e:	2b80      	cmp	r3, #128	@ 0x80
 8102270:	d018      	beq.n	81022a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8102272:	2b80      	cmp	r3, #128	@ 0x80
 8102274:	d821      	bhi.n	81022ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8102276:	2b00      	cmp	r3, #0
 8102278:	d002      	beq.n	8102280 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 810227a:	2b40      	cmp	r3, #64	@ 0x40
 810227c:	d007      	beq.n	810228e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 810227e:	e01c      	b.n	81022ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102280:	4b63      	ldr	r3, [pc, #396]	@ (8102410 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102284:	4a62      	ldr	r2, [pc, #392]	@ (8102410 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102286:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810228a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810228c:	e01c      	b.n	81022c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810228e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102292:	3308      	adds	r3, #8
 8102294:	2100      	movs	r1, #0
 8102296:	4618      	mov	r0, r3
 8102298:	f001 f928 	bl	81034ec <RCCEx_PLL2_Config>
 810229c:	4603      	mov	r3, r0
 810229e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81022a2:	e011      	b.n	81022c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81022a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81022a8:	3328      	adds	r3, #40	@ 0x28
 81022aa:	2100      	movs	r1, #0
 81022ac:	4618      	mov	r0, r3
 81022ae:	f001 f9cf 	bl	8103650 <RCCEx_PLL3_Config>
 81022b2:	4603      	mov	r3, r0
 81022b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81022b8:	e006      	b.n	81022c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81022ba:	2301      	movs	r3, #1
 81022bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81022c0:	e002      	b.n	81022c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81022c2:	bf00      	nop
 81022c4:	e000      	b.n	81022c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81022c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81022c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81022cc:	2b00      	cmp	r3, #0
 81022ce:	d10a      	bne.n	81022e6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81022d0:	4b4f      	ldr	r3, [pc, #316]	@ (8102410 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81022d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81022d4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 81022d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81022dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81022de:	4a4c      	ldr	r2, [pc, #304]	@ (8102410 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81022e0:	430b      	orrs	r3, r1
 81022e2:	6513      	str	r3, [r2, #80]	@ 0x50
 81022e4:	e003      	b.n	81022ee <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81022e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81022ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81022ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81022f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81022f6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 81022fa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 81022fe:	2300      	movs	r3, #0
 8102300:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8102304:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8102308:	460b      	mov	r3, r1
 810230a:	4313      	orrs	r3, r2
 810230c:	d053      	beq.n	81023b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 810230e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102312:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8102316:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810231a:	d035      	beq.n	8102388 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 810231c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8102320:	d82e      	bhi.n	8102380 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8102322:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8102326:	d031      	beq.n	810238c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8102328:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810232c:	d828      	bhi.n	8102380 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810232e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8102332:	d01a      	beq.n	810236a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8102334:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8102338:	d822      	bhi.n	8102380 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810233a:	2b00      	cmp	r3, #0
 810233c:	d003      	beq.n	8102346 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 810233e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102342:	d007      	beq.n	8102354 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8102344:	e01c      	b.n	8102380 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102346:	4b32      	ldr	r3, [pc, #200]	@ (8102410 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810234a:	4a31      	ldr	r2, [pc, #196]	@ (8102410 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810234c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102350:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102352:	e01c      	b.n	810238e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102358:	3308      	adds	r3, #8
 810235a:	2100      	movs	r1, #0
 810235c:	4618      	mov	r0, r3
 810235e:	f001 f8c5 	bl	81034ec <RCCEx_PLL2_Config>
 8102362:	4603      	mov	r3, r0
 8102364:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8102368:	e011      	b.n	810238e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810236a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810236e:	3328      	adds	r3, #40	@ 0x28
 8102370:	2100      	movs	r1, #0
 8102372:	4618      	mov	r0, r3
 8102374:	f001 f96c 	bl	8103650 <RCCEx_PLL3_Config>
 8102378:	4603      	mov	r3, r0
 810237a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810237e:	e006      	b.n	810238e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8102380:	2301      	movs	r3, #1
 8102382:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102386:	e002      	b.n	810238e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8102388:	bf00      	nop
 810238a:	e000      	b.n	810238e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 810238c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810238e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102392:	2b00      	cmp	r3, #0
 8102394:	d10b      	bne.n	81023ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8102396:	4b1e      	ldr	r3, [pc, #120]	@ (8102410 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810239a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 810239e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81023a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 81023a6:	4a1a      	ldr	r2, [pc, #104]	@ (8102410 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81023a8:	430b      	orrs	r3, r1
 81023aa:	6593      	str	r3, [r2, #88]	@ 0x58
 81023ac:	e003      	b.n	81023b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81023ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81023b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81023b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81023ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 81023be:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 81023c2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 81023c6:	2300      	movs	r3, #0
 81023c8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 81023cc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 81023d0:	460b      	mov	r3, r1
 81023d2:	4313      	orrs	r3, r2
 81023d4:	d056      	beq.n	8102484 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 81023d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81023da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81023de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81023e2:	d038      	beq.n	8102456 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 81023e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81023e8:	d831      	bhi.n	810244e <HAL_RCCEx_PeriphCLKConfig+0x376>
 81023ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81023ee:	d034      	beq.n	810245a <HAL_RCCEx_PeriphCLKConfig+0x382>
 81023f0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81023f4:	d82b      	bhi.n	810244e <HAL_RCCEx_PeriphCLKConfig+0x376>
 81023f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81023fa:	d01d      	beq.n	8102438 <HAL_RCCEx_PeriphCLKConfig+0x360>
 81023fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8102400:	d825      	bhi.n	810244e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8102402:	2b00      	cmp	r3, #0
 8102404:	d006      	beq.n	8102414 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8102406:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810240a:	d00a      	beq.n	8102422 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 810240c:	e01f      	b.n	810244e <HAL_RCCEx_PeriphCLKConfig+0x376>
 810240e:	bf00      	nop
 8102410:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102414:	4ba2      	ldr	r3, [pc, #648]	@ (81026a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102418:	4aa1      	ldr	r2, [pc, #644]	@ (81026a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810241a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810241e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102420:	e01c      	b.n	810245c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102426:	3308      	adds	r3, #8
 8102428:	2100      	movs	r1, #0
 810242a:	4618      	mov	r0, r3
 810242c:	f001 f85e 	bl	81034ec <RCCEx_PLL2_Config>
 8102430:	4603      	mov	r3, r0
 8102432:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8102436:	e011      	b.n	810245c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810243c:	3328      	adds	r3, #40	@ 0x28
 810243e:	2100      	movs	r1, #0
 8102440:	4618      	mov	r0, r3
 8102442:	f001 f905 	bl	8103650 <RCCEx_PLL3_Config>
 8102446:	4603      	mov	r3, r0
 8102448:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810244c:	e006      	b.n	810245c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810244e:	2301      	movs	r3, #1
 8102450:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102454:	e002      	b.n	810245c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8102456:	bf00      	nop
 8102458:	e000      	b.n	810245c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810245a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810245c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102460:	2b00      	cmp	r3, #0
 8102462:	d10b      	bne.n	810247c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8102464:	4b8e      	ldr	r3, [pc, #568]	@ (81026a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102468:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 810246c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102470:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8102474:	4a8a      	ldr	r2, [pc, #552]	@ (81026a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102476:	430b      	orrs	r3, r1
 8102478:	6593      	str	r3, [r2, #88]	@ 0x58
 810247a:	e003      	b.n	8102484 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810247c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102480:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8102484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102488:	e9d3 2300 	ldrd	r2, r3, [r3]
 810248c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8102490:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8102494:	2300      	movs	r3, #0
 8102496:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 810249a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 810249e:	460b      	mov	r3, r1
 81024a0:	4313      	orrs	r3, r2
 81024a2:	d03a      	beq.n	810251a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 81024a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81024a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81024aa:	2b30      	cmp	r3, #48	@ 0x30
 81024ac:	d01f      	beq.n	81024ee <HAL_RCCEx_PeriphCLKConfig+0x416>
 81024ae:	2b30      	cmp	r3, #48	@ 0x30
 81024b0:	d819      	bhi.n	81024e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81024b2:	2b20      	cmp	r3, #32
 81024b4:	d00c      	beq.n	81024d0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 81024b6:	2b20      	cmp	r3, #32
 81024b8:	d815      	bhi.n	81024e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81024ba:	2b00      	cmp	r3, #0
 81024bc:	d019      	beq.n	81024f2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 81024be:	2b10      	cmp	r3, #16
 81024c0:	d111      	bne.n	81024e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81024c2:	4b77      	ldr	r3, [pc, #476]	@ (81026a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81024c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81024c6:	4a76      	ldr	r2, [pc, #472]	@ (81026a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81024c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81024cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81024ce:	e011      	b.n	81024f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81024d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81024d4:	3308      	adds	r3, #8
 81024d6:	2102      	movs	r1, #2
 81024d8:	4618      	mov	r0, r3
 81024da:	f001 f807 	bl	81034ec <RCCEx_PLL2_Config>
 81024de:	4603      	mov	r3, r0
 81024e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81024e4:	e006      	b.n	81024f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81024e6:	2301      	movs	r3, #1
 81024e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81024ec:	e002      	b.n	81024f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81024ee:	bf00      	nop
 81024f0:	e000      	b.n	81024f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81024f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81024f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81024f8:	2b00      	cmp	r3, #0
 81024fa:	d10a      	bne.n	8102512 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81024fc:	4b68      	ldr	r3, [pc, #416]	@ (81026a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81024fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102500:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8102504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810250a:	4a65      	ldr	r2, [pc, #404]	@ (81026a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810250c:	430b      	orrs	r3, r1
 810250e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8102510:	e003      	b.n	810251a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102516:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810251a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810251e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102522:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8102526:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 810252a:	2300      	movs	r3, #0
 810252c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8102530:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8102534:	460b      	mov	r3, r1
 8102536:	4313      	orrs	r3, r2
 8102538:	d051      	beq.n	81025de <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 810253a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810253e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102540:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102544:	d035      	beq.n	81025b2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8102546:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810254a:	d82e      	bhi.n	81025aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810254c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8102550:	d031      	beq.n	81025b6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8102552:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8102556:	d828      	bhi.n	81025aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8102558:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810255c:	d01a      	beq.n	8102594 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 810255e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8102562:	d822      	bhi.n	81025aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8102564:	2b00      	cmp	r3, #0
 8102566:	d003      	beq.n	8102570 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8102568:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810256c:	d007      	beq.n	810257e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 810256e:	e01c      	b.n	81025aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102570:	4b4b      	ldr	r3, [pc, #300]	@ (81026a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102574:	4a4a      	ldr	r2, [pc, #296]	@ (81026a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102576:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810257a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810257c:	e01c      	b.n	81025b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810257e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102582:	3308      	adds	r3, #8
 8102584:	2100      	movs	r1, #0
 8102586:	4618      	mov	r0, r3
 8102588:	f000 ffb0 	bl	81034ec <RCCEx_PLL2_Config>
 810258c:	4603      	mov	r3, r0
 810258e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8102592:	e011      	b.n	81025b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102598:	3328      	adds	r3, #40	@ 0x28
 810259a:	2100      	movs	r1, #0
 810259c:	4618      	mov	r0, r3
 810259e:	f001 f857 	bl	8103650 <RCCEx_PLL3_Config>
 81025a2:	4603      	mov	r3, r0
 81025a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81025a8:	e006      	b.n	81025b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81025aa:	2301      	movs	r3, #1
 81025ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81025b0:	e002      	b.n	81025b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81025b2:	bf00      	nop
 81025b4:	e000      	b.n	81025b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81025b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81025b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81025bc:	2b00      	cmp	r3, #0
 81025be:	d10a      	bne.n	81025d6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81025c0:	4b37      	ldr	r3, [pc, #220]	@ (81026a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81025c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81025c4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 81025c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81025ce:	4a34      	ldr	r2, [pc, #208]	@ (81026a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81025d0:	430b      	orrs	r3, r1
 81025d2:	6513      	str	r3, [r2, #80]	@ 0x50
 81025d4:	e003      	b.n	81025de <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81025d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81025da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81025de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81025e6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 81025ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 81025ee:	2300      	movs	r3, #0
 81025f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 81025f4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 81025f8:	460b      	mov	r3, r1
 81025fa:	4313      	orrs	r3, r2
 81025fc:	d056      	beq.n	81026ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 81025fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102602:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102604:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8102608:	d033      	beq.n	8102672 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810260a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810260e:	d82c      	bhi.n	810266a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102610:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8102614:	d02f      	beq.n	8102676 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8102616:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810261a:	d826      	bhi.n	810266a <HAL_RCCEx_PeriphCLKConfig+0x592>
 810261c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8102620:	d02b      	beq.n	810267a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8102622:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8102626:	d820      	bhi.n	810266a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102628:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810262c:	d012      	beq.n	8102654 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 810262e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102632:	d81a      	bhi.n	810266a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102634:	2b00      	cmp	r3, #0
 8102636:	d022      	beq.n	810267e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8102638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810263c:	d115      	bne.n	810266a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810263e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102642:	3308      	adds	r3, #8
 8102644:	2101      	movs	r1, #1
 8102646:	4618      	mov	r0, r3
 8102648:	f000 ff50 	bl	81034ec <RCCEx_PLL2_Config>
 810264c:	4603      	mov	r3, r0
 810264e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8102652:	e015      	b.n	8102680 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102658:	3328      	adds	r3, #40	@ 0x28
 810265a:	2101      	movs	r1, #1
 810265c:	4618      	mov	r0, r3
 810265e:	f000 fff7 	bl	8103650 <RCCEx_PLL3_Config>
 8102662:	4603      	mov	r3, r0
 8102664:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8102668:	e00a      	b.n	8102680 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810266a:	2301      	movs	r3, #1
 810266c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102670:	e006      	b.n	8102680 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8102672:	bf00      	nop
 8102674:	e004      	b.n	8102680 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8102676:	bf00      	nop
 8102678:	e002      	b.n	8102680 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810267a:	bf00      	nop
 810267c:	e000      	b.n	8102680 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810267e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102680:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102684:	2b00      	cmp	r3, #0
 8102686:	d10d      	bne.n	81026a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8102688:	4b05      	ldr	r3, [pc, #20]	@ (81026a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810268a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810268c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8102690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102694:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102696:	4a02      	ldr	r2, [pc, #8]	@ (81026a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102698:	430b      	orrs	r3, r1
 810269a:	6513      	str	r3, [r2, #80]	@ 0x50
 810269c:	e006      	b.n	81026ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 810269e:	bf00      	nop
 81026a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81026a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81026a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81026ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81026b4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 81026b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 81026bc:	2300      	movs	r3, #0
 81026be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 81026c2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 81026c6:	460b      	mov	r3, r1
 81026c8:	4313      	orrs	r3, r2
 81026ca:	d055      	beq.n	8102778 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 81026cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81026d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81026d8:	d033      	beq.n	8102742 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 81026da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81026de:	d82c      	bhi.n	810273a <HAL_RCCEx_PeriphCLKConfig+0x662>
 81026e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81026e4:	d02f      	beq.n	8102746 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 81026e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81026ea:	d826      	bhi.n	810273a <HAL_RCCEx_PeriphCLKConfig+0x662>
 81026ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81026f0:	d02b      	beq.n	810274a <HAL_RCCEx_PeriphCLKConfig+0x672>
 81026f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81026f6:	d820      	bhi.n	810273a <HAL_RCCEx_PeriphCLKConfig+0x662>
 81026f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81026fc:	d012      	beq.n	8102724 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 81026fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102702:	d81a      	bhi.n	810273a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102704:	2b00      	cmp	r3, #0
 8102706:	d022      	beq.n	810274e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8102708:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810270c:	d115      	bne.n	810273a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810270e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102712:	3308      	adds	r3, #8
 8102714:	2101      	movs	r1, #1
 8102716:	4618      	mov	r0, r3
 8102718:	f000 fee8 	bl	81034ec <RCCEx_PLL2_Config>
 810271c:	4603      	mov	r3, r0
 810271e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8102722:	e015      	b.n	8102750 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102728:	3328      	adds	r3, #40	@ 0x28
 810272a:	2101      	movs	r1, #1
 810272c:	4618      	mov	r0, r3
 810272e:	f000 ff8f 	bl	8103650 <RCCEx_PLL3_Config>
 8102732:	4603      	mov	r3, r0
 8102734:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8102738:	e00a      	b.n	8102750 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 810273a:	2301      	movs	r3, #1
 810273c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102740:	e006      	b.n	8102750 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8102742:	bf00      	nop
 8102744:	e004      	b.n	8102750 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8102746:	bf00      	nop
 8102748:	e002      	b.n	8102750 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810274a:	bf00      	nop
 810274c:	e000      	b.n	8102750 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810274e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102750:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102754:	2b00      	cmp	r3, #0
 8102756:	d10b      	bne.n	8102770 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8102758:	4ba4      	ldr	r3, [pc, #656]	@ (81029ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810275a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810275c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8102760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102764:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8102768:	4aa0      	ldr	r2, [pc, #640]	@ (81029ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810276a:	430b      	orrs	r3, r1
 810276c:	6593      	str	r3, [r2, #88]	@ 0x58
 810276e:	e003      	b.n	8102778 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102770:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102774:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8102778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810277c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102780:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8102784:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8102788:	2300      	movs	r3, #0
 810278a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 810278e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8102792:	460b      	mov	r3, r1
 8102794:	4313      	orrs	r3, r2
 8102796:	d037      	beq.n	8102808 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8102798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810279c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810279e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81027a2:	d00e      	beq.n	81027c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 81027a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81027a8:	d816      	bhi.n	81027d8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 81027aa:	2b00      	cmp	r3, #0
 81027ac:	d018      	beq.n	81027e0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 81027ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81027b2:	d111      	bne.n	81027d8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81027b4:	4b8d      	ldr	r3, [pc, #564]	@ (81029ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81027b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81027b8:	4a8c      	ldr	r2, [pc, #560]	@ (81029ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81027ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81027be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81027c0:	e00f      	b.n	81027e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81027c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027c6:	3308      	adds	r3, #8
 81027c8:	2101      	movs	r1, #1
 81027ca:	4618      	mov	r0, r3
 81027cc:	f000 fe8e 	bl	81034ec <RCCEx_PLL2_Config>
 81027d0:	4603      	mov	r3, r0
 81027d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81027d6:	e004      	b.n	81027e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81027d8:	2301      	movs	r3, #1
 81027da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81027de:	e000      	b.n	81027e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 81027e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81027e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81027e6:	2b00      	cmp	r3, #0
 81027e8:	d10a      	bne.n	8102800 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81027ea:	4b80      	ldr	r3, [pc, #512]	@ (81029ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81027ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81027ee:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 81027f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81027f8:	4a7c      	ldr	r2, [pc, #496]	@ (81029ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81027fa:	430b      	orrs	r3, r1
 81027fc:	6513      	str	r3, [r2, #80]	@ 0x50
 81027fe:	e003      	b.n	8102808 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102800:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102804:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8102808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810280c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102810:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8102814:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8102818:	2300      	movs	r3, #0
 810281a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 810281e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8102822:	460b      	mov	r3, r1
 8102824:	4313      	orrs	r3, r2
 8102826:	d039      	beq.n	810289c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8102828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810282c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810282e:	2b03      	cmp	r3, #3
 8102830:	d81c      	bhi.n	810286c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8102832:	a201      	add	r2, pc, #4	@ (adr r2, 8102838 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8102834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102838:	08102875 	.word	0x08102875
 810283c:	08102849 	.word	0x08102849
 8102840:	08102857 	.word	0x08102857
 8102844:	08102875 	.word	0x08102875
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102848:	4b68      	ldr	r3, [pc, #416]	@ (81029ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810284a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810284c:	4a67      	ldr	r2, [pc, #412]	@ (81029ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810284e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102852:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8102854:	e00f      	b.n	8102876 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810285a:	3308      	adds	r3, #8
 810285c:	2102      	movs	r1, #2
 810285e:	4618      	mov	r0, r3
 8102860:	f000 fe44 	bl	81034ec <RCCEx_PLL2_Config>
 8102864:	4603      	mov	r3, r0
 8102866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 810286a:	e004      	b.n	8102876 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810286c:	2301      	movs	r3, #1
 810286e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102872:	e000      	b.n	8102876 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8102874:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810287a:	2b00      	cmp	r3, #0
 810287c:	d10a      	bne.n	8102894 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810287e:	4b5b      	ldr	r3, [pc, #364]	@ (81029ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102882:	f023 0103 	bic.w	r1, r3, #3
 8102886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810288a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810288c:	4a57      	ldr	r2, [pc, #348]	@ (81029ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810288e:	430b      	orrs	r3, r1
 8102890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8102892:	e003      	b.n	810289c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102894:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102898:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810289c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81028a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81028a4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 81028a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 81028ac:	2300      	movs	r3, #0
 81028ae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 81028b2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 81028b6:	460b      	mov	r3, r1
 81028b8:	4313      	orrs	r3, r2
 81028ba:	f000 809f 	beq.w	81029fc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81028be:	4b4c      	ldr	r3, [pc, #304]	@ (81029f0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81028c0:	681b      	ldr	r3, [r3, #0]
 81028c2:	4a4b      	ldr	r2, [pc, #300]	@ (81029f0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81028c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81028c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81028ca:	f7fe f917 	bl	8100afc <HAL_GetTick>
 81028ce:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81028d2:	e00b      	b.n	81028ec <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81028d4:	f7fe f912 	bl	8100afc <HAL_GetTick>
 81028d8:	4602      	mov	r2, r0
 81028da:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 81028de:	1ad3      	subs	r3, r2, r3
 81028e0:	2b64      	cmp	r3, #100	@ 0x64
 81028e2:	d903      	bls.n	81028ec <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 81028e4:	2303      	movs	r3, #3
 81028e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81028ea:	e005      	b.n	81028f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81028ec:	4b40      	ldr	r3, [pc, #256]	@ (81029f0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81028ee:	681b      	ldr	r3, [r3, #0]
 81028f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81028f4:	2b00      	cmp	r3, #0
 81028f6:	d0ed      	beq.n	81028d4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 81028f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81028fc:	2b00      	cmp	r3, #0
 81028fe:	d179      	bne.n	81029f4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8102900:	4b3a      	ldr	r3, [pc, #232]	@ (81029ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102902:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8102904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102908:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810290c:	4053      	eors	r3, r2
 810290e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8102912:	2b00      	cmp	r3, #0
 8102914:	d015      	beq.n	8102942 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8102916:	4b35      	ldr	r3, [pc, #212]	@ (81029ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810291a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810291e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8102922:	4b32      	ldr	r3, [pc, #200]	@ (81029ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102926:	4a31      	ldr	r2, [pc, #196]	@ (81029ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 810292c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810292e:	4b2f      	ldr	r3, [pc, #188]	@ (81029ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102932:	4a2e      	ldr	r2, [pc, #184]	@ (81029ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102934:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8102938:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810293a:	4a2c      	ldr	r2, [pc, #176]	@ (81029ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810293c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102940:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8102942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102946:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810294a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810294e:	d118      	bne.n	8102982 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8102950:	f7fe f8d4 	bl	8100afc <HAL_GetTick>
 8102954:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8102958:	e00d      	b.n	8102976 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810295a:	f7fe f8cf 	bl	8100afc <HAL_GetTick>
 810295e:	4602      	mov	r2, r0
 8102960:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8102964:	1ad2      	subs	r2, r2, r3
 8102966:	f241 3388 	movw	r3, #5000	@ 0x1388
 810296a:	429a      	cmp	r2, r3
 810296c:	d903      	bls.n	8102976 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 810296e:	2303      	movs	r3, #3
 8102970:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8102974:	e005      	b.n	8102982 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8102976:	4b1d      	ldr	r3, [pc, #116]	@ (81029ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810297a:	f003 0302 	and.w	r3, r3, #2
 810297e:	2b00      	cmp	r3, #0
 8102980:	d0eb      	beq.n	810295a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8102982:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102986:	2b00      	cmp	r3, #0
 8102988:	d12b      	bne.n	81029e2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 810298a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810298e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102992:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8102996:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810299a:	d110      	bne.n	81029be <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 810299c:	4b13      	ldr	r3, [pc, #76]	@ (81029ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810299e:	691b      	ldr	r3, [r3, #16]
 81029a0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 81029a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81029ac:	091b      	lsrs	r3, r3, #4
 81029ae:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 81029b2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 81029b6:	4a0d      	ldr	r2, [pc, #52]	@ (81029ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81029b8:	430b      	orrs	r3, r1
 81029ba:	6113      	str	r3, [r2, #16]
 81029bc:	e005      	b.n	81029ca <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 81029be:	4b0b      	ldr	r3, [pc, #44]	@ (81029ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81029c0:	691b      	ldr	r3, [r3, #16]
 81029c2:	4a0a      	ldr	r2, [pc, #40]	@ (81029ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81029c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 81029c8:	6113      	str	r3, [r2, #16]
 81029ca:	4b08      	ldr	r3, [pc, #32]	@ (81029ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81029cc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 81029ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81029d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81029da:	4a04      	ldr	r2, [pc, #16]	@ (81029ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81029dc:	430b      	orrs	r3, r1
 81029de:	6713      	str	r3, [r2, #112]	@ 0x70
 81029e0:	e00c      	b.n	81029fc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81029e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81029e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 81029ea:	e007      	b.n	81029fc <HAL_RCCEx_PeriphCLKConfig+0x924>
 81029ec:	58024400 	.word	0x58024400
 81029f0:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81029f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81029f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81029fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a04:	f002 0301 	and.w	r3, r2, #1
 8102a08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8102a0c:	2300      	movs	r3, #0
 8102a0e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8102a12:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8102a16:	460b      	mov	r3, r1
 8102a18:	4313      	orrs	r3, r2
 8102a1a:	f000 8089 	beq.w	8102b30 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8102a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8102a24:	2b28      	cmp	r3, #40	@ 0x28
 8102a26:	d86b      	bhi.n	8102b00 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8102a28:	a201      	add	r2, pc, #4	@ (adr r2, 8102a30 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8102a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102a2e:	bf00      	nop
 8102a30:	08102b09 	.word	0x08102b09
 8102a34:	08102b01 	.word	0x08102b01
 8102a38:	08102b01 	.word	0x08102b01
 8102a3c:	08102b01 	.word	0x08102b01
 8102a40:	08102b01 	.word	0x08102b01
 8102a44:	08102b01 	.word	0x08102b01
 8102a48:	08102b01 	.word	0x08102b01
 8102a4c:	08102b01 	.word	0x08102b01
 8102a50:	08102ad5 	.word	0x08102ad5
 8102a54:	08102b01 	.word	0x08102b01
 8102a58:	08102b01 	.word	0x08102b01
 8102a5c:	08102b01 	.word	0x08102b01
 8102a60:	08102b01 	.word	0x08102b01
 8102a64:	08102b01 	.word	0x08102b01
 8102a68:	08102b01 	.word	0x08102b01
 8102a6c:	08102b01 	.word	0x08102b01
 8102a70:	08102aeb 	.word	0x08102aeb
 8102a74:	08102b01 	.word	0x08102b01
 8102a78:	08102b01 	.word	0x08102b01
 8102a7c:	08102b01 	.word	0x08102b01
 8102a80:	08102b01 	.word	0x08102b01
 8102a84:	08102b01 	.word	0x08102b01
 8102a88:	08102b01 	.word	0x08102b01
 8102a8c:	08102b01 	.word	0x08102b01
 8102a90:	08102b09 	.word	0x08102b09
 8102a94:	08102b01 	.word	0x08102b01
 8102a98:	08102b01 	.word	0x08102b01
 8102a9c:	08102b01 	.word	0x08102b01
 8102aa0:	08102b01 	.word	0x08102b01
 8102aa4:	08102b01 	.word	0x08102b01
 8102aa8:	08102b01 	.word	0x08102b01
 8102aac:	08102b01 	.word	0x08102b01
 8102ab0:	08102b09 	.word	0x08102b09
 8102ab4:	08102b01 	.word	0x08102b01
 8102ab8:	08102b01 	.word	0x08102b01
 8102abc:	08102b01 	.word	0x08102b01
 8102ac0:	08102b01 	.word	0x08102b01
 8102ac4:	08102b01 	.word	0x08102b01
 8102ac8:	08102b01 	.word	0x08102b01
 8102acc:	08102b01 	.word	0x08102b01
 8102ad0:	08102b09 	.word	0x08102b09
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ad8:	3308      	adds	r3, #8
 8102ada:	2101      	movs	r1, #1
 8102adc:	4618      	mov	r0, r3
 8102ade:	f000 fd05 	bl	81034ec <RCCEx_PLL2_Config>
 8102ae2:	4603      	mov	r3, r0
 8102ae4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8102ae8:	e00f      	b.n	8102b0a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102aee:	3328      	adds	r3, #40	@ 0x28
 8102af0:	2101      	movs	r1, #1
 8102af2:	4618      	mov	r0, r3
 8102af4:	f000 fdac 	bl	8103650 <RCCEx_PLL3_Config>
 8102af8:	4603      	mov	r3, r0
 8102afa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8102afe:	e004      	b.n	8102b0a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102b00:	2301      	movs	r3, #1
 8102b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102b06:	e000      	b.n	8102b0a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8102b08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102b0e:	2b00      	cmp	r3, #0
 8102b10:	d10a      	bne.n	8102b28 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8102b12:	4bbf      	ldr	r3, [pc, #764]	@ (8102e10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102b16:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8102b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8102b20:	4abb      	ldr	r2, [pc, #748]	@ (8102e10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102b22:	430b      	orrs	r3, r1
 8102b24:	6553      	str	r3, [r2, #84]	@ 0x54
 8102b26:	e003      	b.n	8102b30 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102b28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102b2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8102b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102b38:	f002 0302 	and.w	r3, r2, #2
 8102b3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8102b40:	2300      	movs	r3, #0
 8102b42:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8102b46:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8102b4a:	460b      	mov	r3, r1
 8102b4c:	4313      	orrs	r3, r2
 8102b4e:	d041      	beq.n	8102bd4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8102b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8102b56:	2b05      	cmp	r3, #5
 8102b58:	d824      	bhi.n	8102ba4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8102b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8102b60 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8102b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102b60:	08102bad 	.word	0x08102bad
 8102b64:	08102b79 	.word	0x08102b79
 8102b68:	08102b8f 	.word	0x08102b8f
 8102b6c:	08102bad 	.word	0x08102bad
 8102b70:	08102bad 	.word	0x08102bad
 8102b74:	08102bad 	.word	0x08102bad
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b7c:	3308      	adds	r3, #8
 8102b7e:	2101      	movs	r1, #1
 8102b80:	4618      	mov	r0, r3
 8102b82:	f000 fcb3 	bl	81034ec <RCCEx_PLL2_Config>
 8102b86:	4603      	mov	r3, r0
 8102b88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8102b8c:	e00f      	b.n	8102bae <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b92:	3328      	adds	r3, #40	@ 0x28
 8102b94:	2101      	movs	r1, #1
 8102b96:	4618      	mov	r0, r3
 8102b98:	f000 fd5a 	bl	8103650 <RCCEx_PLL3_Config>
 8102b9c:	4603      	mov	r3, r0
 8102b9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8102ba2:	e004      	b.n	8102bae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102ba4:	2301      	movs	r3, #1
 8102ba6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102baa:	e000      	b.n	8102bae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8102bac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102bae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102bb2:	2b00      	cmp	r3, #0
 8102bb4:	d10a      	bne.n	8102bcc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8102bb6:	4b96      	ldr	r3, [pc, #600]	@ (8102e10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102bba:	f023 0107 	bic.w	r1, r3, #7
 8102bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102bc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8102bc4:	4a92      	ldr	r2, [pc, #584]	@ (8102e10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102bc6:	430b      	orrs	r3, r1
 8102bc8:	6553      	str	r3, [r2, #84]	@ 0x54
 8102bca:	e003      	b.n	8102bd4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102bcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102bd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8102bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102bdc:	f002 0304 	and.w	r3, r2, #4
 8102be0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8102be4:	2300      	movs	r3, #0
 8102be6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8102bea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8102bee:	460b      	mov	r3, r1
 8102bf0:	4313      	orrs	r3, r2
 8102bf2:	d044      	beq.n	8102c7e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8102bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8102bfc:	2b05      	cmp	r3, #5
 8102bfe:	d825      	bhi.n	8102c4c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8102c00:	a201      	add	r2, pc, #4	@ (adr r2, 8102c08 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8102c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102c06:	bf00      	nop
 8102c08:	08102c55 	.word	0x08102c55
 8102c0c:	08102c21 	.word	0x08102c21
 8102c10:	08102c37 	.word	0x08102c37
 8102c14:	08102c55 	.word	0x08102c55
 8102c18:	08102c55 	.word	0x08102c55
 8102c1c:	08102c55 	.word	0x08102c55
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c24:	3308      	adds	r3, #8
 8102c26:	2101      	movs	r1, #1
 8102c28:	4618      	mov	r0, r3
 8102c2a:	f000 fc5f 	bl	81034ec <RCCEx_PLL2_Config>
 8102c2e:	4603      	mov	r3, r0
 8102c30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8102c34:	e00f      	b.n	8102c56 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c3a:	3328      	adds	r3, #40	@ 0x28
 8102c3c:	2101      	movs	r1, #1
 8102c3e:	4618      	mov	r0, r3
 8102c40:	f000 fd06 	bl	8103650 <RCCEx_PLL3_Config>
 8102c44:	4603      	mov	r3, r0
 8102c46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8102c4a:	e004      	b.n	8102c56 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102c4c:	2301      	movs	r3, #1
 8102c4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102c52:	e000      	b.n	8102c56 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8102c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102c56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102c5a:	2b00      	cmp	r3, #0
 8102c5c:	d10b      	bne.n	8102c76 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8102c5e:	4b6c      	ldr	r3, [pc, #432]	@ (8102e10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102c62:	f023 0107 	bic.w	r1, r3, #7
 8102c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8102c6e:	4a68      	ldr	r2, [pc, #416]	@ (8102e10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102c70:	430b      	orrs	r3, r1
 8102c72:	6593      	str	r3, [r2, #88]	@ 0x58
 8102c74:	e003      	b.n	8102c7e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102c76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102c7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8102c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c86:	f002 0320 	and.w	r3, r2, #32
 8102c8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8102c8e:	2300      	movs	r3, #0
 8102c90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8102c94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8102c98:	460b      	mov	r3, r1
 8102c9a:	4313      	orrs	r3, r2
 8102c9c:	d055      	beq.n	8102d4a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8102c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8102ca6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8102caa:	d033      	beq.n	8102d14 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8102cac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8102cb0:	d82c      	bhi.n	8102d0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8102cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102cb6:	d02f      	beq.n	8102d18 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8102cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102cbc:	d826      	bhi.n	8102d0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8102cbe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8102cc2:	d02b      	beq.n	8102d1c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8102cc4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8102cc8:	d820      	bhi.n	8102d0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8102cca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102cce:	d012      	beq.n	8102cf6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8102cd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102cd4:	d81a      	bhi.n	8102d0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8102cd6:	2b00      	cmp	r3, #0
 8102cd8:	d022      	beq.n	8102d20 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8102cda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102cde:	d115      	bne.n	8102d0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ce4:	3308      	adds	r3, #8
 8102ce6:	2100      	movs	r1, #0
 8102ce8:	4618      	mov	r0, r3
 8102cea:	f000 fbff 	bl	81034ec <RCCEx_PLL2_Config>
 8102cee:	4603      	mov	r3, r0
 8102cf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8102cf4:	e015      	b.n	8102d22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102cfa:	3328      	adds	r3, #40	@ 0x28
 8102cfc:	2102      	movs	r1, #2
 8102cfe:	4618      	mov	r0, r3
 8102d00:	f000 fca6 	bl	8103650 <RCCEx_PLL3_Config>
 8102d04:	4603      	mov	r3, r0
 8102d06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8102d0a:	e00a      	b.n	8102d22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102d0c:	2301      	movs	r3, #1
 8102d0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102d12:	e006      	b.n	8102d22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102d14:	bf00      	nop
 8102d16:	e004      	b.n	8102d22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102d18:	bf00      	nop
 8102d1a:	e002      	b.n	8102d22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102d1c:	bf00      	nop
 8102d1e:	e000      	b.n	8102d22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102d20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102d22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102d26:	2b00      	cmp	r3, #0
 8102d28:	d10b      	bne.n	8102d42 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8102d2a:	4b39      	ldr	r3, [pc, #228]	@ (8102e10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102d2e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8102d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8102d3a:	4a35      	ldr	r2, [pc, #212]	@ (8102e10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102d3c:	430b      	orrs	r3, r1
 8102d3e:	6553      	str	r3, [r2, #84]	@ 0x54
 8102d40:	e003      	b.n	8102d4a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102d42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102d46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8102d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102d52:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8102d56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8102d5a:	2300      	movs	r3, #0
 8102d5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8102d60:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8102d64:	460b      	mov	r3, r1
 8102d66:	4313      	orrs	r3, r2
 8102d68:	d058      	beq.n	8102e1c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8102d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8102d72:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8102d76:	d033      	beq.n	8102de0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8102d78:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8102d7c:	d82c      	bhi.n	8102dd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8102d7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102d82:	d02f      	beq.n	8102de4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8102d84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102d88:	d826      	bhi.n	8102dd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8102d8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8102d8e:	d02b      	beq.n	8102de8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8102d90:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8102d94:	d820      	bhi.n	8102dd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8102d96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8102d9a:	d012      	beq.n	8102dc2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8102d9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8102da0:	d81a      	bhi.n	8102dd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8102da2:	2b00      	cmp	r3, #0
 8102da4:	d022      	beq.n	8102dec <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8102da6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8102daa:	d115      	bne.n	8102dd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102db0:	3308      	adds	r3, #8
 8102db2:	2100      	movs	r1, #0
 8102db4:	4618      	mov	r0, r3
 8102db6:	f000 fb99 	bl	81034ec <RCCEx_PLL2_Config>
 8102dba:	4603      	mov	r3, r0
 8102dbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8102dc0:	e015      	b.n	8102dee <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102dc6:	3328      	adds	r3, #40	@ 0x28
 8102dc8:	2102      	movs	r1, #2
 8102dca:	4618      	mov	r0, r3
 8102dcc:	f000 fc40 	bl	8103650 <RCCEx_PLL3_Config>
 8102dd0:	4603      	mov	r3, r0
 8102dd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8102dd6:	e00a      	b.n	8102dee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102dd8:	2301      	movs	r3, #1
 8102dda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102dde:	e006      	b.n	8102dee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8102de0:	bf00      	nop
 8102de2:	e004      	b.n	8102dee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8102de4:	bf00      	nop
 8102de6:	e002      	b.n	8102dee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8102de8:	bf00      	nop
 8102dea:	e000      	b.n	8102dee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8102dec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102dee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102df2:	2b00      	cmp	r3, #0
 8102df4:	d10e      	bne.n	8102e14 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8102df6:	4b06      	ldr	r3, [pc, #24]	@ (8102e10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102dfa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8102dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8102e06:	4a02      	ldr	r2, [pc, #8]	@ (8102e10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102e08:	430b      	orrs	r3, r1
 8102e0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8102e0c:	e006      	b.n	8102e1c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8102e0e:	bf00      	nop
 8102e10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102e18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8102e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102e24:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8102e28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8102e2c:	2300      	movs	r3, #0
 8102e2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8102e32:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8102e36:	460b      	mov	r3, r1
 8102e38:	4313      	orrs	r3, r2
 8102e3a:	d055      	beq.n	8102ee8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8102e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8102e44:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8102e48:	d033      	beq.n	8102eb2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8102e4a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8102e4e:	d82c      	bhi.n	8102eaa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8102e50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8102e54:	d02f      	beq.n	8102eb6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8102e56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8102e5a:	d826      	bhi.n	8102eaa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8102e5c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8102e60:	d02b      	beq.n	8102eba <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8102e62:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8102e66:	d820      	bhi.n	8102eaa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8102e68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102e6c:	d012      	beq.n	8102e94 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8102e6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102e72:	d81a      	bhi.n	8102eaa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8102e74:	2b00      	cmp	r3, #0
 8102e76:	d022      	beq.n	8102ebe <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8102e78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8102e7c:	d115      	bne.n	8102eaa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e82:	3308      	adds	r3, #8
 8102e84:	2100      	movs	r1, #0
 8102e86:	4618      	mov	r0, r3
 8102e88:	f000 fb30 	bl	81034ec <RCCEx_PLL2_Config>
 8102e8c:	4603      	mov	r3, r0
 8102e8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8102e92:	e015      	b.n	8102ec0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e98:	3328      	adds	r3, #40	@ 0x28
 8102e9a:	2102      	movs	r1, #2
 8102e9c:	4618      	mov	r0, r3
 8102e9e:	f000 fbd7 	bl	8103650 <RCCEx_PLL3_Config>
 8102ea2:	4603      	mov	r3, r0
 8102ea4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8102ea8:	e00a      	b.n	8102ec0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102eaa:	2301      	movs	r3, #1
 8102eac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102eb0:	e006      	b.n	8102ec0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8102eb2:	bf00      	nop
 8102eb4:	e004      	b.n	8102ec0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8102eb6:	bf00      	nop
 8102eb8:	e002      	b.n	8102ec0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8102eba:	bf00      	nop
 8102ebc:	e000      	b.n	8102ec0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8102ebe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102ec0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102ec4:	2b00      	cmp	r3, #0
 8102ec6:	d10b      	bne.n	8102ee0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8102ec8:	4ba1      	ldr	r3, [pc, #644]	@ (8103150 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102ecc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8102ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ed4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8102ed8:	4a9d      	ldr	r2, [pc, #628]	@ (8103150 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102eda:	430b      	orrs	r3, r1
 8102edc:	6593      	str	r3, [r2, #88]	@ 0x58
 8102ede:	e003      	b.n	8102ee8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102ee0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102ee4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8102ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102ef0:	f002 0308 	and.w	r3, r2, #8
 8102ef4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8102ef8:	2300      	movs	r3, #0
 8102efa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8102efe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8102f02:	460b      	mov	r3, r1
 8102f04:	4313      	orrs	r3, r2
 8102f06:	d01e      	beq.n	8102f46 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8102f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102f10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102f14:	d10c      	bne.n	8102f30 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8102f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f1a:	3328      	adds	r3, #40	@ 0x28
 8102f1c:	2102      	movs	r1, #2
 8102f1e:	4618      	mov	r0, r3
 8102f20:	f000 fb96 	bl	8103650 <RCCEx_PLL3_Config>
 8102f24:	4603      	mov	r3, r0
 8102f26:	2b00      	cmp	r3, #0
 8102f28:	d002      	beq.n	8102f30 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8102f2a:	2301      	movs	r3, #1
 8102f2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8102f30:	4b87      	ldr	r3, [pc, #540]	@ (8103150 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102f34:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8102f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102f40:	4a83      	ldr	r2, [pc, #524]	@ (8103150 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102f42:	430b      	orrs	r3, r1
 8102f44:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8102f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102f4e:	f002 0310 	and.w	r3, r2, #16
 8102f52:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8102f56:	2300      	movs	r3, #0
 8102f58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8102f5c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8102f60:	460b      	mov	r3, r1
 8102f62:	4313      	orrs	r3, r2
 8102f64:	d01e      	beq.n	8102fa4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8102f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8102f6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102f72:	d10c      	bne.n	8102f8e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8102f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f78:	3328      	adds	r3, #40	@ 0x28
 8102f7a:	2102      	movs	r1, #2
 8102f7c:	4618      	mov	r0, r3
 8102f7e:	f000 fb67 	bl	8103650 <RCCEx_PLL3_Config>
 8102f82:	4603      	mov	r3, r0
 8102f84:	2b00      	cmp	r3, #0
 8102f86:	d002      	beq.n	8102f8e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8102f88:	2301      	movs	r3, #1
 8102f8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8102f8e:	4b70      	ldr	r3, [pc, #448]	@ (8103150 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102f92:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8102f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8102f9e:	4a6c      	ldr	r2, [pc, #432]	@ (8103150 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102fa0:	430b      	orrs	r3, r1
 8102fa2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8102fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102fac:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8102fb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8102fb4:	2300      	movs	r3, #0
 8102fb6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8102fba:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8102fbe:	460b      	mov	r3, r1
 8102fc0:	4313      	orrs	r3, r2
 8102fc2:	d03e      	beq.n	8103042 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8102fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102fc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8102fcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102fd0:	d022      	beq.n	8103018 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8102fd2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102fd6:	d81b      	bhi.n	8103010 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8102fd8:	2b00      	cmp	r3, #0
 8102fda:	d003      	beq.n	8102fe4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8102fdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8102fe0:	d00b      	beq.n	8102ffa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8102fe2:	e015      	b.n	8103010 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102fe8:	3308      	adds	r3, #8
 8102fea:	2100      	movs	r1, #0
 8102fec:	4618      	mov	r0, r3
 8102fee:	f000 fa7d 	bl	81034ec <RCCEx_PLL2_Config>
 8102ff2:	4603      	mov	r3, r0
 8102ff4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8102ff8:	e00f      	b.n	810301a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ffe:	3328      	adds	r3, #40	@ 0x28
 8103000:	2102      	movs	r1, #2
 8103002:	4618      	mov	r0, r3
 8103004:	f000 fb24 	bl	8103650 <RCCEx_PLL3_Config>
 8103008:	4603      	mov	r3, r0
 810300a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 810300e:	e004      	b.n	810301a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103010:	2301      	movs	r3, #1
 8103012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103016:	e000      	b.n	810301a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8103018:	bf00      	nop
    }

    if (ret == HAL_OK)
 810301a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810301e:	2b00      	cmp	r3, #0
 8103020:	d10b      	bne.n	810303a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8103022:	4b4b      	ldr	r3, [pc, #300]	@ (8103150 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103026:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 810302a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810302e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8103032:	4a47      	ldr	r2, [pc, #284]	@ (8103150 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103034:	430b      	orrs	r3, r1
 8103036:	6593      	str	r3, [r2, #88]	@ 0x58
 8103038:	e003      	b.n	8103042 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810303a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810303e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8103042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103046:	e9d3 2300 	ldrd	r2, r3, [r3]
 810304a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 810304e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8103050:	2300      	movs	r3, #0
 8103052:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8103054:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8103058:	460b      	mov	r3, r1
 810305a:	4313      	orrs	r3, r2
 810305c:	d03b      	beq.n	81030d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 810305e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8103066:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810306a:	d01f      	beq.n	81030ac <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 810306c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8103070:	d818      	bhi.n	81030a4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8103072:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8103076:	d003      	beq.n	8103080 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8103078:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810307c:	d007      	beq.n	810308e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 810307e:	e011      	b.n	81030a4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103080:	4b33      	ldr	r3, [pc, #204]	@ (8103150 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103084:	4a32      	ldr	r2, [pc, #200]	@ (8103150 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103086:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810308a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 810308c:	e00f      	b.n	81030ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810308e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103092:	3328      	adds	r3, #40	@ 0x28
 8103094:	2101      	movs	r1, #1
 8103096:	4618      	mov	r0, r3
 8103098:	f000 fada 	bl	8103650 <RCCEx_PLL3_Config>
 810309c:	4603      	mov	r3, r0
 810309e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 81030a2:	e004      	b.n	81030ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81030a4:	2301      	movs	r3, #1
 81030a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81030aa:	e000      	b.n	81030ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 81030ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 81030ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81030b2:	2b00      	cmp	r3, #0
 81030b4:	d10b      	bne.n	81030ce <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81030b6:	4b26      	ldr	r3, [pc, #152]	@ (8103150 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81030b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81030ba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 81030be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81030c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81030c6:	4a22      	ldr	r2, [pc, #136]	@ (8103150 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81030c8:	430b      	orrs	r3, r1
 81030ca:	6553      	str	r3, [r2, #84]	@ 0x54
 81030cc:	e003      	b.n	81030d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81030ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81030d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81030d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81030da:	e9d3 2300 	ldrd	r2, r3, [r3]
 81030de:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 81030e2:	673b      	str	r3, [r7, #112]	@ 0x70
 81030e4:	2300      	movs	r3, #0
 81030e6:	677b      	str	r3, [r7, #116]	@ 0x74
 81030e8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 81030ec:	460b      	mov	r3, r1
 81030ee:	4313      	orrs	r3, r2
 81030f0:	d034      	beq.n	810315c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 81030f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81030f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81030f8:	2b00      	cmp	r3, #0
 81030fa:	d003      	beq.n	8103104 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 81030fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103100:	d007      	beq.n	8103112 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8103102:	e011      	b.n	8103128 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103104:	4b12      	ldr	r3, [pc, #72]	@ (8103150 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103108:	4a11      	ldr	r2, [pc, #68]	@ (8103150 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810310a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810310e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8103110:	e00e      	b.n	8103130 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103116:	3308      	adds	r3, #8
 8103118:	2102      	movs	r1, #2
 810311a:	4618      	mov	r0, r3
 810311c:	f000 f9e6 	bl	81034ec <RCCEx_PLL2_Config>
 8103120:	4603      	mov	r3, r0
 8103122:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8103126:	e003      	b.n	8103130 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8103128:	2301      	movs	r3, #1
 810312a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810312e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103130:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103134:	2b00      	cmp	r3, #0
 8103136:	d10d      	bne.n	8103154 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8103138:	4b05      	ldr	r3, [pc, #20]	@ (8103150 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810313a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810313c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8103140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103146:	4a02      	ldr	r2, [pc, #8]	@ (8103150 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103148:	430b      	orrs	r3, r1
 810314a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810314c:	e006      	b.n	810315c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 810314e:	bf00      	nop
 8103150:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103154:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103158:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810315c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103164:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8103168:	66bb      	str	r3, [r7, #104]	@ 0x68
 810316a:	2300      	movs	r3, #0
 810316c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 810316e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8103172:	460b      	mov	r3, r1
 8103174:	4313      	orrs	r3, r2
 8103176:	d00c      	beq.n	8103192 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8103178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810317c:	3328      	adds	r3, #40	@ 0x28
 810317e:	2102      	movs	r1, #2
 8103180:	4618      	mov	r0, r3
 8103182:	f000 fa65 	bl	8103650 <RCCEx_PLL3_Config>
 8103186:	4603      	mov	r3, r0
 8103188:	2b00      	cmp	r3, #0
 810318a:	d002      	beq.n	8103192 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 810318c:	2301      	movs	r3, #1
 810318e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8103192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103196:	e9d3 2300 	ldrd	r2, r3, [r3]
 810319a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 810319e:	663b      	str	r3, [r7, #96]	@ 0x60
 81031a0:	2300      	movs	r3, #0
 81031a2:	667b      	str	r3, [r7, #100]	@ 0x64
 81031a4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 81031a8:	460b      	mov	r3, r1
 81031aa:	4313      	orrs	r3, r2
 81031ac:	d038      	beq.n	8103220 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 81031ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81031b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81031b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81031ba:	d018      	beq.n	81031ee <HAL_RCCEx_PeriphCLKConfig+0x1116>
 81031bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81031c0:	d811      	bhi.n	81031e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 81031c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81031c6:	d014      	beq.n	81031f2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 81031c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81031cc:	d80b      	bhi.n	81031e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 81031ce:	2b00      	cmp	r3, #0
 81031d0:	d011      	beq.n	81031f6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 81031d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81031d6:	d106      	bne.n	81031e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81031d8:	4bc3      	ldr	r3, [pc, #780]	@ (81034e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81031da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81031dc:	4ac2      	ldr	r2, [pc, #776]	@ (81034e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81031de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81031e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 81031e4:	e008      	b.n	81031f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81031e6:	2301      	movs	r3, #1
 81031e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81031ec:	e004      	b.n	81031f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81031ee:	bf00      	nop
 81031f0:	e002      	b.n	81031f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81031f2:	bf00      	nop
 81031f4:	e000      	b.n	81031f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81031f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81031f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81031fc:	2b00      	cmp	r3, #0
 81031fe:	d10b      	bne.n	8103218 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8103200:	4bb9      	ldr	r3, [pc, #740]	@ (81034e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103204:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8103208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810320c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8103210:	4ab5      	ldr	r2, [pc, #724]	@ (81034e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103212:	430b      	orrs	r3, r1
 8103214:	6553      	str	r3, [r2, #84]	@ 0x54
 8103216:	e003      	b.n	8103220 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103218:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810321c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8103220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103228:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 810322c:	65bb      	str	r3, [r7, #88]	@ 0x58
 810322e:	2300      	movs	r3, #0
 8103230:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8103232:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8103236:	460b      	mov	r3, r1
 8103238:	4313      	orrs	r3, r2
 810323a:	d009      	beq.n	8103250 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810323c:	4baa      	ldr	r3, [pc, #680]	@ (81034e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810323e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103240:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8103244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103248:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810324a:	4aa7      	ldr	r2, [pc, #668]	@ (81034e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810324c:	430b      	orrs	r3, r1
 810324e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8103250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103258:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 810325c:	653b      	str	r3, [r7, #80]	@ 0x50
 810325e:	2300      	movs	r3, #0
 8103260:	657b      	str	r3, [r7, #84]	@ 0x54
 8103262:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8103266:	460b      	mov	r3, r1
 8103268:	4313      	orrs	r3, r2
 810326a:	d00a      	beq.n	8103282 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810326c:	4b9e      	ldr	r3, [pc, #632]	@ (81034e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810326e:	691b      	ldr	r3, [r3, #16]
 8103270:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8103274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103278:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810327c:	4a9a      	ldr	r2, [pc, #616]	@ (81034e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810327e:	430b      	orrs	r3, r1
 8103280:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8103282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103286:	e9d3 2300 	ldrd	r2, r3, [r3]
 810328a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 810328e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8103290:	2300      	movs	r3, #0
 8103292:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8103294:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8103298:	460b      	mov	r3, r1
 810329a:	4313      	orrs	r3, r2
 810329c:	d009      	beq.n	81032b2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810329e:	4b92      	ldr	r3, [pc, #584]	@ (81034e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81032a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81032a2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 81032a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81032aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81032ac:	4a8e      	ldr	r2, [pc, #568]	@ (81034e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81032ae:	430b      	orrs	r3, r1
 81032b0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81032b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81032b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81032ba:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 81032be:	643b      	str	r3, [r7, #64]	@ 0x40
 81032c0:	2300      	movs	r3, #0
 81032c2:	647b      	str	r3, [r7, #68]	@ 0x44
 81032c4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 81032c8:	460b      	mov	r3, r1
 81032ca:	4313      	orrs	r3, r2
 81032cc:	d00e      	beq.n	81032ec <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81032ce:	4b86      	ldr	r3, [pc, #536]	@ (81034e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81032d0:	691b      	ldr	r3, [r3, #16]
 81032d2:	4a85      	ldr	r2, [pc, #532]	@ (81034e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81032d4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 81032d8:	6113      	str	r3, [r2, #16]
 81032da:	4b83      	ldr	r3, [pc, #524]	@ (81034e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81032dc:	6919      	ldr	r1, [r3, #16]
 81032de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81032e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 81032e6:	4a80      	ldr	r2, [pc, #512]	@ (81034e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81032e8:	430b      	orrs	r3, r1
 81032ea:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81032ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81032f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81032f4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 81032f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 81032fa:	2300      	movs	r3, #0
 81032fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81032fe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8103302:	460b      	mov	r3, r1
 8103304:	4313      	orrs	r3, r2
 8103306:	d009      	beq.n	810331c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8103308:	4b77      	ldr	r3, [pc, #476]	@ (81034e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810330a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810330c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8103310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103316:	4a74      	ldr	r2, [pc, #464]	@ (81034e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103318:	430b      	orrs	r3, r1
 810331a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810331c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103324:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8103328:	633b      	str	r3, [r7, #48]	@ 0x30
 810332a:	2300      	movs	r3, #0
 810332c:	637b      	str	r3, [r7, #52]	@ 0x34
 810332e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8103332:	460b      	mov	r3, r1
 8103334:	4313      	orrs	r3, r2
 8103336:	d00a      	beq.n	810334e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8103338:	4b6b      	ldr	r3, [pc, #428]	@ (81034e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810333a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810333c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8103340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103344:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8103348:	4a67      	ldr	r2, [pc, #412]	@ (81034e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810334a:	430b      	orrs	r3, r1
 810334c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 810334e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103356:	2100      	movs	r1, #0
 8103358:	62b9      	str	r1, [r7, #40]	@ 0x28
 810335a:	f003 0301 	and.w	r3, r3, #1
 810335e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8103360:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8103364:	460b      	mov	r3, r1
 8103366:	4313      	orrs	r3, r2
 8103368:	d011      	beq.n	810338e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810336a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810336e:	3308      	adds	r3, #8
 8103370:	2100      	movs	r1, #0
 8103372:	4618      	mov	r0, r3
 8103374:	f000 f8ba 	bl	81034ec <RCCEx_PLL2_Config>
 8103378:	4603      	mov	r3, r0
 810337a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810337e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103382:	2b00      	cmp	r3, #0
 8103384:	d003      	beq.n	810338e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103386:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810338a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 810338e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103396:	2100      	movs	r1, #0
 8103398:	6239      	str	r1, [r7, #32]
 810339a:	f003 0302 	and.w	r3, r3, #2
 810339e:	627b      	str	r3, [r7, #36]	@ 0x24
 81033a0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 81033a4:	460b      	mov	r3, r1
 81033a6:	4313      	orrs	r3, r2
 81033a8:	d011      	beq.n	81033ce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81033aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81033ae:	3308      	adds	r3, #8
 81033b0:	2101      	movs	r1, #1
 81033b2:	4618      	mov	r0, r3
 81033b4:	f000 f89a 	bl	81034ec <RCCEx_PLL2_Config>
 81033b8:	4603      	mov	r3, r0
 81033ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81033be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81033c2:	2b00      	cmp	r3, #0
 81033c4:	d003      	beq.n	81033ce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81033c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81033ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 81033ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81033d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81033d6:	2100      	movs	r1, #0
 81033d8:	61b9      	str	r1, [r7, #24]
 81033da:	f003 0304 	and.w	r3, r3, #4
 81033de:	61fb      	str	r3, [r7, #28]
 81033e0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 81033e4:	460b      	mov	r3, r1
 81033e6:	4313      	orrs	r3, r2
 81033e8:	d011      	beq.n	810340e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81033ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81033ee:	3308      	adds	r3, #8
 81033f0:	2102      	movs	r1, #2
 81033f2:	4618      	mov	r0, r3
 81033f4:	f000 f87a 	bl	81034ec <RCCEx_PLL2_Config>
 81033f8:	4603      	mov	r3, r0
 81033fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81033fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103402:	2b00      	cmp	r3, #0
 8103404:	d003      	beq.n	810340e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103406:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810340a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 810340e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103416:	2100      	movs	r1, #0
 8103418:	6139      	str	r1, [r7, #16]
 810341a:	f003 0308 	and.w	r3, r3, #8
 810341e:	617b      	str	r3, [r7, #20]
 8103420:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8103424:	460b      	mov	r3, r1
 8103426:	4313      	orrs	r3, r2
 8103428:	d011      	beq.n	810344e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810342a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810342e:	3328      	adds	r3, #40	@ 0x28
 8103430:	2100      	movs	r1, #0
 8103432:	4618      	mov	r0, r3
 8103434:	f000 f90c 	bl	8103650 <RCCEx_PLL3_Config>
 8103438:	4603      	mov	r3, r0
 810343a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 810343e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103442:	2b00      	cmp	r3, #0
 8103444:	d003      	beq.n	810344e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103446:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810344a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 810344e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103456:	2100      	movs	r1, #0
 8103458:	60b9      	str	r1, [r7, #8]
 810345a:	f003 0310 	and.w	r3, r3, #16
 810345e:	60fb      	str	r3, [r7, #12]
 8103460:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8103464:	460b      	mov	r3, r1
 8103466:	4313      	orrs	r3, r2
 8103468:	d011      	beq.n	810348e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810346a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810346e:	3328      	adds	r3, #40	@ 0x28
 8103470:	2101      	movs	r1, #1
 8103472:	4618      	mov	r0, r3
 8103474:	f000 f8ec 	bl	8103650 <RCCEx_PLL3_Config>
 8103478:	4603      	mov	r3, r0
 810347a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810347e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103482:	2b00      	cmp	r3, #0
 8103484:	d003      	beq.n	810348e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103486:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810348a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 810348e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103496:	2100      	movs	r1, #0
 8103498:	6039      	str	r1, [r7, #0]
 810349a:	f003 0320 	and.w	r3, r3, #32
 810349e:	607b      	str	r3, [r7, #4]
 81034a0:	e9d7 1200 	ldrd	r1, r2, [r7]
 81034a4:	460b      	mov	r3, r1
 81034a6:	4313      	orrs	r3, r2
 81034a8:	d011      	beq.n	81034ce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81034aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81034ae:	3328      	adds	r3, #40	@ 0x28
 81034b0:	2102      	movs	r1, #2
 81034b2:	4618      	mov	r0, r3
 81034b4:	f000 f8cc 	bl	8103650 <RCCEx_PLL3_Config>
 81034b8:	4603      	mov	r3, r0
 81034ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81034be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81034c2:	2b00      	cmp	r3, #0
 81034c4:	d003      	beq.n	81034ce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81034c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81034ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 81034ce:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 81034d2:	2b00      	cmp	r3, #0
 81034d4:	d101      	bne.n	81034da <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 81034d6:	2300      	movs	r3, #0
 81034d8:	e000      	b.n	81034dc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 81034da:	2301      	movs	r3, #1
}
 81034dc:	4618      	mov	r0, r3
 81034de:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 81034e2:	46bd      	mov	sp, r7
 81034e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81034e8:	58024400 	.word	0x58024400

081034ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81034ec:	b580      	push	{r7, lr}
 81034ee:	b084      	sub	sp, #16
 81034f0:	af00      	add	r7, sp, #0
 81034f2:	6078      	str	r0, [r7, #4]
 81034f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81034f6:	2300      	movs	r3, #0
 81034f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81034fa:	4b54      	ldr	r3, [pc, #336]	@ (810364c <RCCEx_PLL2_Config+0x160>)
 81034fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81034fe:	f003 0303 	and.w	r3, r3, #3
 8103502:	2b03      	cmp	r3, #3
 8103504:	d101      	bne.n	810350a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8103506:	2301      	movs	r3, #1
 8103508:	e09b      	b.n	8103642 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810350a:	4b50      	ldr	r3, [pc, #320]	@ (810364c <RCCEx_PLL2_Config+0x160>)
 810350c:	681b      	ldr	r3, [r3, #0]
 810350e:	4a4f      	ldr	r2, [pc, #316]	@ (810364c <RCCEx_PLL2_Config+0x160>)
 8103510:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8103514:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103516:	f7fd faf1 	bl	8100afc <HAL_GetTick>
 810351a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810351c:	e008      	b.n	8103530 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810351e:	f7fd faed 	bl	8100afc <HAL_GetTick>
 8103522:	4602      	mov	r2, r0
 8103524:	68bb      	ldr	r3, [r7, #8]
 8103526:	1ad3      	subs	r3, r2, r3
 8103528:	2b02      	cmp	r3, #2
 810352a:	d901      	bls.n	8103530 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810352c:	2303      	movs	r3, #3
 810352e:	e088      	b.n	8103642 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103530:	4b46      	ldr	r3, [pc, #280]	@ (810364c <RCCEx_PLL2_Config+0x160>)
 8103532:	681b      	ldr	r3, [r3, #0]
 8103534:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8103538:	2b00      	cmp	r3, #0
 810353a:	d1f0      	bne.n	810351e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810353c:	4b43      	ldr	r3, [pc, #268]	@ (810364c <RCCEx_PLL2_Config+0x160>)
 810353e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103540:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8103544:	687b      	ldr	r3, [r7, #4]
 8103546:	681b      	ldr	r3, [r3, #0]
 8103548:	031b      	lsls	r3, r3, #12
 810354a:	4940      	ldr	r1, [pc, #256]	@ (810364c <RCCEx_PLL2_Config+0x160>)
 810354c:	4313      	orrs	r3, r2
 810354e:	628b      	str	r3, [r1, #40]	@ 0x28
 8103550:	687b      	ldr	r3, [r7, #4]
 8103552:	685b      	ldr	r3, [r3, #4]
 8103554:	3b01      	subs	r3, #1
 8103556:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810355a:	687b      	ldr	r3, [r7, #4]
 810355c:	689b      	ldr	r3, [r3, #8]
 810355e:	3b01      	subs	r3, #1
 8103560:	025b      	lsls	r3, r3, #9
 8103562:	b29b      	uxth	r3, r3
 8103564:	431a      	orrs	r2, r3
 8103566:	687b      	ldr	r3, [r7, #4]
 8103568:	68db      	ldr	r3, [r3, #12]
 810356a:	3b01      	subs	r3, #1
 810356c:	041b      	lsls	r3, r3, #16
 810356e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8103572:	431a      	orrs	r2, r3
 8103574:	687b      	ldr	r3, [r7, #4]
 8103576:	691b      	ldr	r3, [r3, #16]
 8103578:	3b01      	subs	r3, #1
 810357a:	061b      	lsls	r3, r3, #24
 810357c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8103580:	4932      	ldr	r1, [pc, #200]	@ (810364c <RCCEx_PLL2_Config+0x160>)
 8103582:	4313      	orrs	r3, r2
 8103584:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8103586:	4b31      	ldr	r3, [pc, #196]	@ (810364c <RCCEx_PLL2_Config+0x160>)
 8103588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810358a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 810358e:	687b      	ldr	r3, [r7, #4]
 8103590:	695b      	ldr	r3, [r3, #20]
 8103592:	492e      	ldr	r1, [pc, #184]	@ (810364c <RCCEx_PLL2_Config+0x160>)
 8103594:	4313      	orrs	r3, r2
 8103596:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8103598:	4b2c      	ldr	r3, [pc, #176]	@ (810364c <RCCEx_PLL2_Config+0x160>)
 810359a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810359c:	f023 0220 	bic.w	r2, r3, #32
 81035a0:	687b      	ldr	r3, [r7, #4]
 81035a2:	699b      	ldr	r3, [r3, #24]
 81035a4:	4929      	ldr	r1, [pc, #164]	@ (810364c <RCCEx_PLL2_Config+0x160>)
 81035a6:	4313      	orrs	r3, r2
 81035a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81035aa:	4b28      	ldr	r3, [pc, #160]	@ (810364c <RCCEx_PLL2_Config+0x160>)
 81035ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81035ae:	4a27      	ldr	r2, [pc, #156]	@ (810364c <RCCEx_PLL2_Config+0x160>)
 81035b0:	f023 0310 	bic.w	r3, r3, #16
 81035b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 81035b6:	4b25      	ldr	r3, [pc, #148]	@ (810364c <RCCEx_PLL2_Config+0x160>)
 81035b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81035ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81035be:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81035c2:	687a      	ldr	r2, [r7, #4]
 81035c4:	69d2      	ldr	r2, [r2, #28]
 81035c6:	00d2      	lsls	r2, r2, #3
 81035c8:	4920      	ldr	r1, [pc, #128]	@ (810364c <RCCEx_PLL2_Config+0x160>)
 81035ca:	4313      	orrs	r3, r2
 81035cc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 81035ce:	4b1f      	ldr	r3, [pc, #124]	@ (810364c <RCCEx_PLL2_Config+0x160>)
 81035d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81035d2:	4a1e      	ldr	r2, [pc, #120]	@ (810364c <RCCEx_PLL2_Config+0x160>)
 81035d4:	f043 0310 	orr.w	r3, r3, #16
 81035d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81035da:	683b      	ldr	r3, [r7, #0]
 81035dc:	2b00      	cmp	r3, #0
 81035de:	d106      	bne.n	81035ee <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81035e0:	4b1a      	ldr	r3, [pc, #104]	@ (810364c <RCCEx_PLL2_Config+0x160>)
 81035e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81035e4:	4a19      	ldr	r2, [pc, #100]	@ (810364c <RCCEx_PLL2_Config+0x160>)
 81035e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 81035ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81035ec:	e00f      	b.n	810360e <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81035ee:	683b      	ldr	r3, [r7, #0]
 81035f0:	2b01      	cmp	r3, #1
 81035f2:	d106      	bne.n	8103602 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81035f4:	4b15      	ldr	r3, [pc, #84]	@ (810364c <RCCEx_PLL2_Config+0x160>)
 81035f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81035f8:	4a14      	ldr	r2, [pc, #80]	@ (810364c <RCCEx_PLL2_Config+0x160>)
 81035fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 81035fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8103600:	e005      	b.n	810360e <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8103602:	4b12      	ldr	r3, [pc, #72]	@ (810364c <RCCEx_PLL2_Config+0x160>)
 8103604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103606:	4a11      	ldr	r2, [pc, #68]	@ (810364c <RCCEx_PLL2_Config+0x160>)
 8103608:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 810360c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810360e:	4b0f      	ldr	r3, [pc, #60]	@ (810364c <RCCEx_PLL2_Config+0x160>)
 8103610:	681b      	ldr	r3, [r3, #0]
 8103612:	4a0e      	ldr	r2, [pc, #56]	@ (810364c <RCCEx_PLL2_Config+0x160>)
 8103614:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8103618:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810361a:	f7fd fa6f 	bl	8100afc <HAL_GetTick>
 810361e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103620:	e008      	b.n	8103634 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8103622:	f7fd fa6b 	bl	8100afc <HAL_GetTick>
 8103626:	4602      	mov	r2, r0
 8103628:	68bb      	ldr	r3, [r7, #8]
 810362a:	1ad3      	subs	r3, r2, r3
 810362c:	2b02      	cmp	r3, #2
 810362e:	d901      	bls.n	8103634 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103630:	2303      	movs	r3, #3
 8103632:	e006      	b.n	8103642 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103634:	4b05      	ldr	r3, [pc, #20]	@ (810364c <RCCEx_PLL2_Config+0x160>)
 8103636:	681b      	ldr	r3, [r3, #0]
 8103638:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810363c:	2b00      	cmp	r3, #0
 810363e:	d0f0      	beq.n	8103622 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8103640:	7bfb      	ldrb	r3, [r7, #15]
}
 8103642:	4618      	mov	r0, r3
 8103644:	3710      	adds	r7, #16
 8103646:	46bd      	mov	sp, r7
 8103648:	bd80      	pop	{r7, pc}
 810364a:	bf00      	nop
 810364c:	58024400 	.word	0x58024400

08103650 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8103650:	b580      	push	{r7, lr}
 8103652:	b084      	sub	sp, #16
 8103654:	af00      	add	r7, sp, #0
 8103656:	6078      	str	r0, [r7, #4]
 8103658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810365a:	2300      	movs	r3, #0
 810365c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810365e:	4b54      	ldr	r3, [pc, #336]	@ (81037b0 <RCCEx_PLL3_Config+0x160>)
 8103660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103662:	f003 0303 	and.w	r3, r3, #3
 8103666:	2b03      	cmp	r3, #3
 8103668:	d101      	bne.n	810366e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810366a:	2301      	movs	r3, #1
 810366c:	e09b      	b.n	81037a6 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810366e:	4b50      	ldr	r3, [pc, #320]	@ (81037b0 <RCCEx_PLL3_Config+0x160>)
 8103670:	681b      	ldr	r3, [r3, #0]
 8103672:	4a4f      	ldr	r2, [pc, #316]	@ (81037b0 <RCCEx_PLL3_Config+0x160>)
 8103674:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8103678:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810367a:	f7fd fa3f 	bl	8100afc <HAL_GetTick>
 810367e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103680:	e008      	b.n	8103694 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8103682:	f7fd fa3b 	bl	8100afc <HAL_GetTick>
 8103686:	4602      	mov	r2, r0
 8103688:	68bb      	ldr	r3, [r7, #8]
 810368a:	1ad3      	subs	r3, r2, r3
 810368c:	2b02      	cmp	r3, #2
 810368e:	d901      	bls.n	8103694 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103690:	2303      	movs	r3, #3
 8103692:	e088      	b.n	81037a6 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103694:	4b46      	ldr	r3, [pc, #280]	@ (81037b0 <RCCEx_PLL3_Config+0x160>)
 8103696:	681b      	ldr	r3, [r3, #0]
 8103698:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810369c:	2b00      	cmp	r3, #0
 810369e:	d1f0      	bne.n	8103682 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81036a0:	4b43      	ldr	r3, [pc, #268]	@ (81037b0 <RCCEx_PLL3_Config+0x160>)
 81036a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81036a4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 81036a8:	687b      	ldr	r3, [r7, #4]
 81036aa:	681b      	ldr	r3, [r3, #0]
 81036ac:	051b      	lsls	r3, r3, #20
 81036ae:	4940      	ldr	r1, [pc, #256]	@ (81037b0 <RCCEx_PLL3_Config+0x160>)
 81036b0:	4313      	orrs	r3, r2
 81036b2:	628b      	str	r3, [r1, #40]	@ 0x28
 81036b4:	687b      	ldr	r3, [r7, #4]
 81036b6:	685b      	ldr	r3, [r3, #4]
 81036b8:	3b01      	subs	r3, #1
 81036ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81036be:	687b      	ldr	r3, [r7, #4]
 81036c0:	689b      	ldr	r3, [r3, #8]
 81036c2:	3b01      	subs	r3, #1
 81036c4:	025b      	lsls	r3, r3, #9
 81036c6:	b29b      	uxth	r3, r3
 81036c8:	431a      	orrs	r2, r3
 81036ca:	687b      	ldr	r3, [r7, #4]
 81036cc:	68db      	ldr	r3, [r3, #12]
 81036ce:	3b01      	subs	r3, #1
 81036d0:	041b      	lsls	r3, r3, #16
 81036d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81036d6:	431a      	orrs	r2, r3
 81036d8:	687b      	ldr	r3, [r7, #4]
 81036da:	691b      	ldr	r3, [r3, #16]
 81036dc:	3b01      	subs	r3, #1
 81036de:	061b      	lsls	r3, r3, #24
 81036e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 81036e4:	4932      	ldr	r1, [pc, #200]	@ (81037b0 <RCCEx_PLL3_Config+0x160>)
 81036e6:	4313      	orrs	r3, r2
 81036e8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 81036ea:	4b31      	ldr	r3, [pc, #196]	@ (81037b0 <RCCEx_PLL3_Config+0x160>)
 81036ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81036ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 81036f2:	687b      	ldr	r3, [r7, #4]
 81036f4:	695b      	ldr	r3, [r3, #20]
 81036f6:	492e      	ldr	r1, [pc, #184]	@ (81037b0 <RCCEx_PLL3_Config+0x160>)
 81036f8:	4313      	orrs	r3, r2
 81036fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81036fc:	4b2c      	ldr	r3, [pc, #176]	@ (81037b0 <RCCEx_PLL3_Config+0x160>)
 81036fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103700:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8103704:	687b      	ldr	r3, [r7, #4]
 8103706:	699b      	ldr	r3, [r3, #24]
 8103708:	4929      	ldr	r1, [pc, #164]	@ (81037b0 <RCCEx_PLL3_Config+0x160>)
 810370a:	4313      	orrs	r3, r2
 810370c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810370e:	4b28      	ldr	r3, [pc, #160]	@ (81037b0 <RCCEx_PLL3_Config+0x160>)
 8103710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103712:	4a27      	ldr	r2, [pc, #156]	@ (81037b0 <RCCEx_PLL3_Config+0x160>)
 8103714:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8103718:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810371a:	4b25      	ldr	r3, [pc, #148]	@ (81037b0 <RCCEx_PLL3_Config+0x160>)
 810371c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810371e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8103722:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8103726:	687a      	ldr	r2, [r7, #4]
 8103728:	69d2      	ldr	r2, [r2, #28]
 810372a:	00d2      	lsls	r2, r2, #3
 810372c:	4920      	ldr	r1, [pc, #128]	@ (81037b0 <RCCEx_PLL3_Config+0x160>)
 810372e:	4313      	orrs	r3, r2
 8103730:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8103732:	4b1f      	ldr	r3, [pc, #124]	@ (81037b0 <RCCEx_PLL3_Config+0x160>)
 8103734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103736:	4a1e      	ldr	r2, [pc, #120]	@ (81037b0 <RCCEx_PLL3_Config+0x160>)
 8103738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810373c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810373e:	683b      	ldr	r3, [r7, #0]
 8103740:	2b00      	cmp	r3, #0
 8103742:	d106      	bne.n	8103752 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8103744:	4b1a      	ldr	r3, [pc, #104]	@ (81037b0 <RCCEx_PLL3_Config+0x160>)
 8103746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103748:	4a19      	ldr	r2, [pc, #100]	@ (81037b0 <RCCEx_PLL3_Config+0x160>)
 810374a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810374e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8103750:	e00f      	b.n	8103772 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8103752:	683b      	ldr	r3, [r7, #0]
 8103754:	2b01      	cmp	r3, #1
 8103756:	d106      	bne.n	8103766 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8103758:	4b15      	ldr	r3, [pc, #84]	@ (81037b0 <RCCEx_PLL3_Config+0x160>)
 810375a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810375c:	4a14      	ldr	r2, [pc, #80]	@ (81037b0 <RCCEx_PLL3_Config+0x160>)
 810375e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8103762:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8103764:	e005      	b.n	8103772 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8103766:	4b12      	ldr	r3, [pc, #72]	@ (81037b0 <RCCEx_PLL3_Config+0x160>)
 8103768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810376a:	4a11      	ldr	r2, [pc, #68]	@ (81037b0 <RCCEx_PLL3_Config+0x160>)
 810376c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8103770:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8103772:	4b0f      	ldr	r3, [pc, #60]	@ (81037b0 <RCCEx_PLL3_Config+0x160>)
 8103774:	681b      	ldr	r3, [r3, #0]
 8103776:	4a0e      	ldr	r2, [pc, #56]	@ (81037b0 <RCCEx_PLL3_Config+0x160>)
 8103778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810377c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810377e:	f7fd f9bd 	bl	8100afc <HAL_GetTick>
 8103782:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103784:	e008      	b.n	8103798 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8103786:	f7fd f9b9 	bl	8100afc <HAL_GetTick>
 810378a:	4602      	mov	r2, r0
 810378c:	68bb      	ldr	r3, [r7, #8]
 810378e:	1ad3      	subs	r3, r2, r3
 8103790:	2b02      	cmp	r3, #2
 8103792:	d901      	bls.n	8103798 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103794:	2303      	movs	r3, #3
 8103796:	e006      	b.n	81037a6 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103798:	4b05      	ldr	r3, [pc, #20]	@ (81037b0 <RCCEx_PLL3_Config+0x160>)
 810379a:	681b      	ldr	r3, [r3, #0]
 810379c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81037a0:	2b00      	cmp	r3, #0
 81037a2:	d0f0      	beq.n	8103786 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81037a4:	7bfb      	ldrb	r3, [r7, #15]
}
 81037a6:	4618      	mov	r0, r3
 81037a8:	3710      	adds	r7, #16
 81037aa:	46bd      	mov	sp, r7
 81037ac:	bd80      	pop	{r7, pc}
 81037ae:	bf00      	nop
 81037b0:	58024400 	.word	0x58024400

081037b4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 81037b4:	b580      	push	{r7, lr}
 81037b6:	b084      	sub	sp, #16
 81037b8:	af00      	add	r7, sp, #0
 81037ba:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 81037bc:	687b      	ldr	r3, [r7, #4]
 81037be:	2b00      	cmp	r3, #0
 81037c0:	d101      	bne.n	81037c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 81037c2:	2301      	movs	r3, #1
 81037c4:	e10f      	b.n	81039e6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81037c6:	687b      	ldr	r3, [r7, #4]
 81037c8:	2200      	movs	r2, #0
 81037ca:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 81037cc:	687b      	ldr	r3, [r7, #4]
 81037ce:	681b      	ldr	r3, [r3, #0]
 81037d0:	4a87      	ldr	r2, [pc, #540]	@ (81039f0 <HAL_SPI_Init+0x23c>)
 81037d2:	4293      	cmp	r3, r2
 81037d4:	d00f      	beq.n	81037f6 <HAL_SPI_Init+0x42>
 81037d6:	687b      	ldr	r3, [r7, #4]
 81037d8:	681b      	ldr	r3, [r3, #0]
 81037da:	4a86      	ldr	r2, [pc, #536]	@ (81039f4 <HAL_SPI_Init+0x240>)
 81037dc:	4293      	cmp	r3, r2
 81037de:	d00a      	beq.n	81037f6 <HAL_SPI_Init+0x42>
 81037e0:	687b      	ldr	r3, [r7, #4]
 81037e2:	681b      	ldr	r3, [r3, #0]
 81037e4:	4a84      	ldr	r2, [pc, #528]	@ (81039f8 <HAL_SPI_Init+0x244>)
 81037e6:	4293      	cmp	r3, r2
 81037e8:	d005      	beq.n	81037f6 <HAL_SPI_Init+0x42>
 81037ea:	687b      	ldr	r3, [r7, #4]
 81037ec:	68db      	ldr	r3, [r3, #12]
 81037ee:	2b0f      	cmp	r3, #15
 81037f0:	d901      	bls.n	81037f6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 81037f2:	2301      	movs	r3, #1
 81037f4:	e0f7      	b.n	81039e6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 81037f6:	6878      	ldr	r0, [r7, #4]
 81037f8:	f000 f900 	bl	81039fc <SPI_GetPacketSize>
 81037fc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81037fe:	687b      	ldr	r3, [r7, #4]
 8103800:	681b      	ldr	r3, [r3, #0]
 8103802:	4a7b      	ldr	r2, [pc, #492]	@ (81039f0 <HAL_SPI_Init+0x23c>)
 8103804:	4293      	cmp	r3, r2
 8103806:	d00c      	beq.n	8103822 <HAL_SPI_Init+0x6e>
 8103808:	687b      	ldr	r3, [r7, #4]
 810380a:	681b      	ldr	r3, [r3, #0]
 810380c:	4a79      	ldr	r2, [pc, #484]	@ (81039f4 <HAL_SPI_Init+0x240>)
 810380e:	4293      	cmp	r3, r2
 8103810:	d007      	beq.n	8103822 <HAL_SPI_Init+0x6e>
 8103812:	687b      	ldr	r3, [r7, #4]
 8103814:	681b      	ldr	r3, [r3, #0]
 8103816:	4a78      	ldr	r2, [pc, #480]	@ (81039f8 <HAL_SPI_Init+0x244>)
 8103818:	4293      	cmp	r3, r2
 810381a:	d002      	beq.n	8103822 <HAL_SPI_Init+0x6e>
 810381c:	68fb      	ldr	r3, [r7, #12]
 810381e:	2b08      	cmp	r3, #8
 8103820:	d811      	bhi.n	8103846 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8103822:	687b      	ldr	r3, [r7, #4]
 8103824:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8103826:	4a72      	ldr	r2, [pc, #456]	@ (81039f0 <HAL_SPI_Init+0x23c>)
 8103828:	4293      	cmp	r3, r2
 810382a:	d009      	beq.n	8103840 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810382c:	687b      	ldr	r3, [r7, #4]
 810382e:	681b      	ldr	r3, [r3, #0]
 8103830:	4a70      	ldr	r2, [pc, #448]	@ (81039f4 <HAL_SPI_Init+0x240>)
 8103832:	4293      	cmp	r3, r2
 8103834:	d004      	beq.n	8103840 <HAL_SPI_Init+0x8c>
 8103836:	687b      	ldr	r3, [r7, #4]
 8103838:	681b      	ldr	r3, [r3, #0]
 810383a:	4a6f      	ldr	r2, [pc, #444]	@ (81039f8 <HAL_SPI_Init+0x244>)
 810383c:	4293      	cmp	r3, r2
 810383e:	d104      	bne.n	810384a <HAL_SPI_Init+0x96>
 8103840:	68fb      	ldr	r3, [r7, #12]
 8103842:	2b10      	cmp	r3, #16
 8103844:	d901      	bls.n	810384a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8103846:	2301      	movs	r3, #1
 8103848:	e0cd      	b.n	81039e6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 810384a:	687b      	ldr	r3, [r7, #4]
 810384c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8103850:	b2db      	uxtb	r3, r3
 8103852:	2b00      	cmp	r3, #0
 8103854:	d106      	bne.n	8103864 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8103856:	687b      	ldr	r3, [r7, #4]
 8103858:	2200      	movs	r2, #0
 810385a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 810385e:	6878      	ldr	r0, [r7, #4]
 8103860:	f7fc ff68 	bl	8100734 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8103864:	687b      	ldr	r3, [r7, #4]
 8103866:	2202      	movs	r2, #2
 8103868:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810386c:	687b      	ldr	r3, [r7, #4]
 810386e:	681b      	ldr	r3, [r3, #0]
 8103870:	681a      	ldr	r2, [r3, #0]
 8103872:	687b      	ldr	r3, [r7, #4]
 8103874:	681b      	ldr	r3, [r3, #0]
 8103876:	f022 0201 	bic.w	r2, r2, #1
 810387a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 810387c:	687b      	ldr	r3, [r7, #4]
 810387e:	681b      	ldr	r3, [r3, #0]
 8103880:	689b      	ldr	r3, [r3, #8]
 8103882:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8103886:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8103888:	687b      	ldr	r3, [r7, #4]
 810388a:	699b      	ldr	r3, [r3, #24]
 810388c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8103890:	d119      	bne.n	81038c6 <HAL_SPI_Init+0x112>
 8103892:	687b      	ldr	r3, [r7, #4]
 8103894:	685b      	ldr	r3, [r3, #4]
 8103896:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810389a:	d103      	bne.n	81038a4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810389c:	687b      	ldr	r3, [r7, #4]
 810389e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 81038a0:	2b00      	cmp	r3, #0
 81038a2:	d008      	beq.n	81038b6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 81038a4:	687b      	ldr	r3, [r7, #4]
 81038a6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 81038a8:	2b00      	cmp	r3, #0
 81038aa:	d10c      	bne.n	81038c6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 81038ac:	687b      	ldr	r3, [r7, #4]
 81038ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 81038b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81038b4:	d107      	bne.n	81038c6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 81038b6:	687b      	ldr	r3, [r7, #4]
 81038b8:	681b      	ldr	r3, [r3, #0]
 81038ba:	681a      	ldr	r2, [r3, #0]
 81038bc:	687b      	ldr	r3, [r7, #4]
 81038be:	681b      	ldr	r3, [r3, #0]
 81038c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 81038c4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 81038c6:	687b      	ldr	r3, [r7, #4]
 81038c8:	685b      	ldr	r3, [r3, #4]
 81038ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81038ce:	2b00      	cmp	r3, #0
 81038d0:	d00f      	beq.n	81038f2 <HAL_SPI_Init+0x13e>
 81038d2:	687b      	ldr	r3, [r7, #4]
 81038d4:	68db      	ldr	r3, [r3, #12]
 81038d6:	2b06      	cmp	r3, #6
 81038d8:	d90b      	bls.n	81038f2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 81038da:	687b      	ldr	r3, [r7, #4]
 81038dc:	681b      	ldr	r3, [r3, #0]
 81038de:	681b      	ldr	r3, [r3, #0]
 81038e0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 81038e4:	687b      	ldr	r3, [r7, #4]
 81038e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 81038e8:	687b      	ldr	r3, [r7, #4]
 81038ea:	681b      	ldr	r3, [r3, #0]
 81038ec:	430a      	orrs	r2, r1
 81038ee:	601a      	str	r2, [r3, #0]
 81038f0:	e007      	b.n	8103902 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 81038f2:	687b      	ldr	r3, [r7, #4]
 81038f4:	681b      	ldr	r3, [r3, #0]
 81038f6:	681a      	ldr	r2, [r3, #0]
 81038f8:	687b      	ldr	r3, [r7, #4]
 81038fa:	681b      	ldr	r3, [r3, #0]
 81038fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8103900:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8103902:	687b      	ldr	r3, [r7, #4]
 8103904:	69da      	ldr	r2, [r3, #28]
 8103906:	687b      	ldr	r3, [r7, #4]
 8103908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810390a:	431a      	orrs	r2, r3
 810390c:	68bb      	ldr	r3, [r7, #8]
 810390e:	431a      	orrs	r2, r3
 8103910:	687b      	ldr	r3, [r7, #4]
 8103912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103914:	ea42 0103 	orr.w	r1, r2, r3
 8103918:	687b      	ldr	r3, [r7, #4]
 810391a:	68da      	ldr	r2, [r3, #12]
 810391c:	687b      	ldr	r3, [r7, #4]
 810391e:	681b      	ldr	r3, [r3, #0]
 8103920:	430a      	orrs	r2, r1
 8103922:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8103924:	687b      	ldr	r3, [r7, #4]
 8103926:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103928:	687b      	ldr	r3, [r7, #4]
 810392a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810392c:	431a      	orrs	r2, r3
 810392e:	687b      	ldr	r3, [r7, #4]
 8103930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103932:	431a      	orrs	r2, r3
 8103934:	687b      	ldr	r3, [r7, #4]
 8103936:	699b      	ldr	r3, [r3, #24]
 8103938:	431a      	orrs	r2, r3
 810393a:	687b      	ldr	r3, [r7, #4]
 810393c:	691b      	ldr	r3, [r3, #16]
 810393e:	431a      	orrs	r2, r3
 8103940:	687b      	ldr	r3, [r7, #4]
 8103942:	695b      	ldr	r3, [r3, #20]
 8103944:	431a      	orrs	r2, r3
 8103946:	687b      	ldr	r3, [r7, #4]
 8103948:	6a1b      	ldr	r3, [r3, #32]
 810394a:	431a      	orrs	r2, r3
 810394c:	687b      	ldr	r3, [r7, #4]
 810394e:	685b      	ldr	r3, [r3, #4]
 8103950:	431a      	orrs	r2, r3
 8103952:	687b      	ldr	r3, [r7, #4]
 8103954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103956:	431a      	orrs	r2, r3
 8103958:	687b      	ldr	r3, [r7, #4]
 810395a:	689b      	ldr	r3, [r3, #8]
 810395c:	431a      	orrs	r2, r3
 810395e:	687b      	ldr	r3, [r7, #4]
 8103960:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103962:	ea42 0103 	orr.w	r1, r2, r3
 8103966:	687b      	ldr	r3, [r7, #4]
 8103968:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 810396a:	687b      	ldr	r3, [r7, #4]
 810396c:	681b      	ldr	r3, [r3, #0]
 810396e:	430a      	orrs	r2, r1
 8103970:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8103972:	687b      	ldr	r3, [r7, #4]
 8103974:	685b      	ldr	r3, [r3, #4]
 8103976:	2b00      	cmp	r3, #0
 8103978:	d113      	bne.n	81039a2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 810397a:	687b      	ldr	r3, [r7, #4]
 810397c:	681b      	ldr	r3, [r3, #0]
 810397e:	689b      	ldr	r3, [r3, #8]
 8103980:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8103984:	687b      	ldr	r3, [r7, #4]
 8103986:	681b      	ldr	r3, [r3, #0]
 8103988:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810398c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 810398e:	687b      	ldr	r3, [r7, #4]
 8103990:	681b      	ldr	r3, [r3, #0]
 8103992:	689b      	ldr	r3, [r3, #8]
 8103994:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8103998:	687b      	ldr	r3, [r7, #4]
 810399a:	681b      	ldr	r3, [r3, #0]
 810399c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 81039a0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 81039a2:	687b      	ldr	r3, [r7, #4]
 81039a4:	681b      	ldr	r3, [r3, #0]
 81039a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 81039a8:	687b      	ldr	r3, [r7, #4]
 81039aa:	681b      	ldr	r3, [r3, #0]
 81039ac:	f022 0201 	bic.w	r2, r2, #1
 81039b0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 81039b2:	687b      	ldr	r3, [r7, #4]
 81039b4:	685b      	ldr	r3, [r3, #4]
 81039b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81039ba:	2b00      	cmp	r3, #0
 81039bc:	d00a      	beq.n	81039d4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 81039be:	687b      	ldr	r3, [r7, #4]
 81039c0:	681b      	ldr	r3, [r3, #0]
 81039c2:	68db      	ldr	r3, [r3, #12]
 81039c4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 81039c8:	687b      	ldr	r3, [r7, #4]
 81039ca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 81039cc:	687b      	ldr	r3, [r7, #4]
 81039ce:	681b      	ldr	r3, [r3, #0]
 81039d0:	430a      	orrs	r2, r1
 81039d2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 81039d4:	687b      	ldr	r3, [r7, #4]
 81039d6:	2200      	movs	r2, #0
 81039d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 81039dc:	687b      	ldr	r3, [r7, #4]
 81039de:	2201      	movs	r2, #1
 81039e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 81039e4:	2300      	movs	r3, #0
}
 81039e6:	4618      	mov	r0, r3
 81039e8:	3710      	adds	r7, #16
 81039ea:	46bd      	mov	sp, r7
 81039ec:	bd80      	pop	{r7, pc}
 81039ee:	bf00      	nop
 81039f0:	40013000 	.word	0x40013000
 81039f4:	40003800 	.word	0x40003800
 81039f8:	40003c00 	.word	0x40003c00

081039fc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 81039fc:	b480      	push	{r7}
 81039fe:	b085      	sub	sp, #20
 8103a00:	af00      	add	r7, sp, #0
 8103a02:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8103a04:	687b      	ldr	r3, [r7, #4]
 8103a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103a08:	095b      	lsrs	r3, r3, #5
 8103a0a:	3301      	adds	r3, #1
 8103a0c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8103a0e:	687b      	ldr	r3, [r7, #4]
 8103a10:	68db      	ldr	r3, [r3, #12]
 8103a12:	3301      	adds	r3, #1
 8103a14:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8103a16:	68bb      	ldr	r3, [r7, #8]
 8103a18:	3307      	adds	r3, #7
 8103a1a:	08db      	lsrs	r3, r3, #3
 8103a1c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8103a1e:	68bb      	ldr	r3, [r7, #8]
 8103a20:	68fa      	ldr	r2, [r7, #12]
 8103a22:	fb02 f303 	mul.w	r3, r2, r3
}
 8103a26:	4618      	mov	r0, r3
 8103a28:	3714      	adds	r7, #20
 8103a2a:	46bd      	mov	sp, r7
 8103a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a30:	4770      	bx	lr

08103a32 <memset>:
 8103a32:	4402      	add	r2, r0
 8103a34:	4603      	mov	r3, r0
 8103a36:	4293      	cmp	r3, r2
 8103a38:	d100      	bne.n	8103a3c <memset+0xa>
 8103a3a:	4770      	bx	lr
 8103a3c:	f803 1b01 	strb.w	r1, [r3], #1
 8103a40:	e7f9      	b.n	8103a36 <memset+0x4>
	...

08103a44 <__libc_init_array>:
 8103a44:	b570      	push	{r4, r5, r6, lr}
 8103a46:	4d0d      	ldr	r5, [pc, #52]	@ (8103a7c <__libc_init_array+0x38>)
 8103a48:	4c0d      	ldr	r4, [pc, #52]	@ (8103a80 <__libc_init_array+0x3c>)
 8103a4a:	1b64      	subs	r4, r4, r5
 8103a4c:	10a4      	asrs	r4, r4, #2
 8103a4e:	2600      	movs	r6, #0
 8103a50:	42a6      	cmp	r6, r4
 8103a52:	d109      	bne.n	8103a68 <__libc_init_array+0x24>
 8103a54:	4d0b      	ldr	r5, [pc, #44]	@ (8103a84 <__libc_init_array+0x40>)
 8103a56:	4c0c      	ldr	r4, [pc, #48]	@ (8103a88 <__libc_init_array+0x44>)
 8103a58:	f000 f818 	bl	8103a8c <_init>
 8103a5c:	1b64      	subs	r4, r4, r5
 8103a5e:	10a4      	asrs	r4, r4, #2
 8103a60:	2600      	movs	r6, #0
 8103a62:	42a6      	cmp	r6, r4
 8103a64:	d105      	bne.n	8103a72 <__libc_init_array+0x2e>
 8103a66:	bd70      	pop	{r4, r5, r6, pc}
 8103a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8103a6c:	4798      	blx	r3
 8103a6e:	3601      	adds	r6, #1
 8103a70:	e7ee      	b.n	8103a50 <__libc_init_array+0xc>
 8103a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8103a76:	4798      	blx	r3
 8103a78:	3601      	adds	r6, #1
 8103a7a:	e7f2      	b.n	8103a62 <__libc_init_array+0x1e>
 8103a7c:	08103abc 	.word	0x08103abc
 8103a80:	08103abc 	.word	0x08103abc
 8103a84:	08103abc 	.word	0x08103abc
 8103a88:	08103ac0 	.word	0x08103ac0

08103a8c <_init>:
 8103a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8103a8e:	bf00      	nop
 8103a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8103a92:	bc08      	pop	{r3}
 8103a94:	469e      	mov	lr, r3
 8103a96:	4770      	bx	lr

08103a98 <_fini>:
 8103a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8103a9a:	bf00      	nop
 8103a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8103a9e:	bc08      	pop	{r3}
 8103aa0:	469e      	mov	lr, r3
 8103aa2:	4770      	bx	lr
