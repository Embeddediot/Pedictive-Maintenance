
data_gather_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071c8  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08107468  08107468  00008468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  081074fc  081074fc  000084fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08107504  08107504  00008504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0810750c  0810750c  0000850c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000007c  10000000  08107510  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000344  1000007c  0810758c  0000907c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  100003c0  0810758c  000093c0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000907c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019154  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003075  00000000  00000000  00022200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001178  00000000  00000000  00025278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d6f  00000000  00000000  000263f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e5ec  00000000  00000000  0002715f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019615  00000000  00000000  0006574b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001842c0  00000000  00000000  0007ed60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00203020  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000052f0  00000000  00000000  00203064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  00208354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	1000007c 	.word	0x1000007c
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08107450 	.word	0x08107450

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000080 	.word	0x10000080
 81002dc:	08107450 	.word	0x08107450

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <__aeabi_dmul>:
 8100380:	b570      	push	{r4, r5, r6, lr}
 8100382:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8100386:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 810038a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810038e:	bf1d      	ittte	ne
 8100390:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100394:	ea94 0f0c 	teqne	r4, ip
 8100398:	ea95 0f0c 	teqne	r5, ip
 810039c:	f000 f8de 	bleq	810055c <__aeabi_dmul+0x1dc>
 81003a0:	442c      	add	r4, r5
 81003a2:	ea81 0603 	eor.w	r6, r1, r3
 81003a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 81003aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 81003ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 81003b2:	bf18      	it	ne
 81003b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 81003b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 81003bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 81003c0:	d038      	beq.n	8100434 <__aeabi_dmul+0xb4>
 81003c2:	fba0 ce02 	umull	ip, lr, r0, r2
 81003c6:	f04f 0500 	mov.w	r5, #0
 81003ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 81003ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 81003d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 81003d6:	f04f 0600 	mov.w	r6, #0
 81003da:	fbe1 5603 	umlal	r5, r6, r1, r3
 81003de:	f09c 0f00 	teq	ip, #0
 81003e2:	bf18      	it	ne
 81003e4:	f04e 0e01 	orrne.w	lr, lr, #1
 81003e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 81003ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 81003f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 81003f4:	d204      	bcs.n	8100400 <__aeabi_dmul+0x80>
 81003f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81003fa:	416d      	adcs	r5, r5
 81003fc:	eb46 0606 	adc.w	r6, r6, r6
 8100400:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8100404:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100408:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 810040c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100410:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8100414:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8100418:	bf88      	it	hi
 810041a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 810041e:	d81e      	bhi.n	810045e <__aeabi_dmul+0xde>
 8100420:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8100424:	bf08      	it	eq
 8100426:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 810042a:	f150 0000 	adcs.w	r0, r0, #0
 810042e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100432:	bd70      	pop	{r4, r5, r6, pc}
 8100434:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8100438:	ea46 0101 	orr.w	r1, r6, r1
 810043c:	ea40 0002 	orr.w	r0, r0, r2
 8100440:	ea81 0103 	eor.w	r1, r1, r3
 8100444:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8100448:	bfc2      	ittt	gt
 810044a:	ebd4 050c 	rsbsgt	r5, r4, ip
 810044e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100452:	bd70      	popgt	{r4, r5, r6, pc}
 8100454:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100458:	f04f 0e00 	mov.w	lr, #0
 810045c:	3c01      	subs	r4, #1
 810045e:	f300 80ab 	bgt.w	81005b8 <__aeabi_dmul+0x238>
 8100462:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8100466:	bfde      	ittt	le
 8100468:	2000      	movle	r0, #0
 810046a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 810046e:	bd70      	pople	{r4, r5, r6, pc}
 8100470:	f1c4 0400 	rsb	r4, r4, #0
 8100474:	3c20      	subs	r4, #32
 8100476:	da35      	bge.n	81004e4 <__aeabi_dmul+0x164>
 8100478:	340c      	adds	r4, #12
 810047a:	dc1b      	bgt.n	81004b4 <__aeabi_dmul+0x134>
 810047c:	f104 0414 	add.w	r4, r4, #20
 8100480:	f1c4 0520 	rsb	r5, r4, #32
 8100484:	fa00 f305 	lsl.w	r3, r0, r5
 8100488:	fa20 f004 	lsr.w	r0, r0, r4
 810048c:	fa01 f205 	lsl.w	r2, r1, r5
 8100490:	ea40 0002 	orr.w	r0, r0, r2
 8100494:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8100498:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 810049c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 81004a0:	fa21 f604 	lsr.w	r6, r1, r4
 81004a4:	eb42 0106 	adc.w	r1, r2, r6
 81004a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81004ac:	bf08      	it	eq
 81004ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81004b2:	bd70      	pop	{r4, r5, r6, pc}
 81004b4:	f1c4 040c 	rsb	r4, r4, #12
 81004b8:	f1c4 0520 	rsb	r5, r4, #32
 81004bc:	fa00 f304 	lsl.w	r3, r0, r4
 81004c0:	fa20 f005 	lsr.w	r0, r0, r5
 81004c4:	fa01 f204 	lsl.w	r2, r1, r4
 81004c8:	ea40 0002 	orr.w	r0, r0, r2
 81004cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 81004d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 81004d4:	f141 0100 	adc.w	r1, r1, #0
 81004d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81004dc:	bf08      	it	eq
 81004de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81004e2:	bd70      	pop	{r4, r5, r6, pc}
 81004e4:	f1c4 0520 	rsb	r5, r4, #32
 81004e8:	fa00 f205 	lsl.w	r2, r0, r5
 81004ec:	ea4e 0e02 	orr.w	lr, lr, r2
 81004f0:	fa20 f304 	lsr.w	r3, r0, r4
 81004f4:	fa01 f205 	lsl.w	r2, r1, r5
 81004f8:	ea43 0302 	orr.w	r3, r3, r2
 81004fc:	fa21 f004 	lsr.w	r0, r1, r4
 8100500:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100504:	fa21 f204 	lsr.w	r2, r1, r4
 8100508:	ea20 0002 	bic.w	r0, r0, r2
 810050c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100510:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100514:	bf08      	it	eq
 8100516:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810051a:	bd70      	pop	{r4, r5, r6, pc}
 810051c:	f094 0f00 	teq	r4, #0
 8100520:	d10f      	bne.n	8100542 <__aeabi_dmul+0x1c2>
 8100522:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8100526:	0040      	lsls	r0, r0, #1
 8100528:	eb41 0101 	adc.w	r1, r1, r1
 810052c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100530:	bf08      	it	eq
 8100532:	3c01      	subeq	r4, #1
 8100534:	d0f7      	beq.n	8100526 <__aeabi_dmul+0x1a6>
 8100536:	ea41 0106 	orr.w	r1, r1, r6
 810053a:	f095 0f00 	teq	r5, #0
 810053e:	bf18      	it	ne
 8100540:	4770      	bxne	lr
 8100542:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8100546:	0052      	lsls	r2, r2, #1
 8100548:	eb43 0303 	adc.w	r3, r3, r3
 810054c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8100550:	bf08      	it	eq
 8100552:	3d01      	subeq	r5, #1
 8100554:	d0f7      	beq.n	8100546 <__aeabi_dmul+0x1c6>
 8100556:	ea43 0306 	orr.w	r3, r3, r6
 810055a:	4770      	bx	lr
 810055c:	ea94 0f0c 	teq	r4, ip
 8100560:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100564:	bf18      	it	ne
 8100566:	ea95 0f0c 	teqne	r5, ip
 810056a:	d00c      	beq.n	8100586 <__aeabi_dmul+0x206>
 810056c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100570:	bf18      	it	ne
 8100572:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100576:	d1d1      	bne.n	810051c <__aeabi_dmul+0x19c>
 8100578:	ea81 0103 	eor.w	r1, r1, r3
 810057c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100580:	f04f 0000 	mov.w	r0, #0
 8100584:	bd70      	pop	{r4, r5, r6, pc}
 8100586:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 810058a:	bf06      	itte	eq
 810058c:	4610      	moveq	r0, r2
 810058e:	4619      	moveq	r1, r3
 8100590:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100594:	d019      	beq.n	81005ca <__aeabi_dmul+0x24a>
 8100596:	ea94 0f0c 	teq	r4, ip
 810059a:	d102      	bne.n	81005a2 <__aeabi_dmul+0x222>
 810059c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 81005a0:	d113      	bne.n	81005ca <__aeabi_dmul+0x24a>
 81005a2:	ea95 0f0c 	teq	r5, ip
 81005a6:	d105      	bne.n	81005b4 <__aeabi_dmul+0x234>
 81005a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 81005ac:	bf1c      	itt	ne
 81005ae:	4610      	movne	r0, r2
 81005b0:	4619      	movne	r1, r3
 81005b2:	d10a      	bne.n	81005ca <__aeabi_dmul+0x24a>
 81005b4:	ea81 0103 	eor.w	r1, r1, r3
 81005b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 81005bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 81005c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81005c4:	f04f 0000 	mov.w	r0, #0
 81005c8:	bd70      	pop	{r4, r5, r6, pc}
 81005ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 81005ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 81005d2:	bd70      	pop	{r4, r5, r6, pc}

081005d4 <__aeabi_drsub>:
 81005d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 81005d8:	e002      	b.n	81005e0 <__adddf3>
 81005da:	bf00      	nop

081005dc <__aeabi_dsub>:
 81005dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

081005e0 <__adddf3>:
 81005e0:	b530      	push	{r4, r5, lr}
 81005e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81005e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81005ea:	ea94 0f05 	teq	r4, r5
 81005ee:	bf08      	it	eq
 81005f0:	ea90 0f02 	teqeq	r0, r2
 81005f4:	bf1f      	itttt	ne
 81005f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 81005fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 81005fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8100602:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100606:	f000 80e2 	beq.w	81007ce <__adddf3+0x1ee>
 810060a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 810060e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8100612:	bfb8      	it	lt
 8100614:	426d      	neglt	r5, r5
 8100616:	dd0c      	ble.n	8100632 <__adddf3+0x52>
 8100618:	442c      	add	r4, r5
 810061a:	ea80 0202 	eor.w	r2, r0, r2
 810061e:	ea81 0303 	eor.w	r3, r1, r3
 8100622:	ea82 0000 	eor.w	r0, r2, r0
 8100626:	ea83 0101 	eor.w	r1, r3, r1
 810062a:	ea80 0202 	eor.w	r2, r0, r2
 810062e:	ea81 0303 	eor.w	r3, r1, r3
 8100632:	2d36      	cmp	r5, #54	@ 0x36
 8100634:	bf88      	it	hi
 8100636:	bd30      	pophi	{r4, r5, pc}
 8100638:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 810063c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8100640:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8100644:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100648:	d002      	beq.n	8100650 <__adddf3+0x70>
 810064a:	4240      	negs	r0, r0
 810064c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100650:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100654:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100658:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 810065c:	d002      	beq.n	8100664 <__adddf3+0x84>
 810065e:	4252      	negs	r2, r2
 8100660:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100664:	ea94 0f05 	teq	r4, r5
 8100668:	f000 80a7 	beq.w	81007ba <__adddf3+0x1da>
 810066c:	f1a4 0401 	sub.w	r4, r4, #1
 8100670:	f1d5 0e20 	rsbs	lr, r5, #32
 8100674:	db0d      	blt.n	8100692 <__adddf3+0xb2>
 8100676:	fa02 fc0e 	lsl.w	ip, r2, lr
 810067a:	fa22 f205 	lsr.w	r2, r2, r5
 810067e:	1880      	adds	r0, r0, r2
 8100680:	f141 0100 	adc.w	r1, r1, #0
 8100684:	fa03 f20e 	lsl.w	r2, r3, lr
 8100688:	1880      	adds	r0, r0, r2
 810068a:	fa43 f305 	asr.w	r3, r3, r5
 810068e:	4159      	adcs	r1, r3
 8100690:	e00e      	b.n	81006b0 <__adddf3+0xd0>
 8100692:	f1a5 0520 	sub.w	r5, r5, #32
 8100696:	f10e 0e20 	add.w	lr, lr, #32
 810069a:	2a01      	cmp	r2, #1
 810069c:	fa03 fc0e 	lsl.w	ip, r3, lr
 81006a0:	bf28      	it	cs
 81006a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 81006a6:	fa43 f305 	asr.w	r3, r3, r5
 81006aa:	18c0      	adds	r0, r0, r3
 81006ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 81006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81006b4:	d507      	bpl.n	81006c6 <__adddf3+0xe6>
 81006b6:	f04f 0e00 	mov.w	lr, #0
 81006ba:	f1dc 0c00 	rsbs	ip, ip, #0
 81006be:	eb7e 0000 	sbcs.w	r0, lr, r0
 81006c2:	eb6e 0101 	sbc.w	r1, lr, r1
 81006c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 81006ca:	d31b      	bcc.n	8100704 <__adddf3+0x124>
 81006cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 81006d0:	d30c      	bcc.n	81006ec <__adddf3+0x10c>
 81006d2:	0849      	lsrs	r1, r1, #1
 81006d4:	ea5f 0030 	movs.w	r0, r0, rrx
 81006d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81006dc:	f104 0401 	add.w	r4, r4, #1
 81006e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81006e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 81006e8:	f080 809a 	bcs.w	8100820 <__adddf3+0x240>
 81006ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 81006f0:	bf08      	it	eq
 81006f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81006f6:	f150 0000 	adcs.w	r0, r0, #0
 81006fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81006fe:	ea41 0105 	orr.w	r1, r1, r5
 8100702:	bd30      	pop	{r4, r5, pc}
 8100704:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8100708:	4140      	adcs	r0, r0
 810070a:	eb41 0101 	adc.w	r1, r1, r1
 810070e:	3c01      	subs	r4, #1
 8100710:	bf28      	it	cs
 8100712:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8100716:	d2e9      	bcs.n	81006ec <__adddf3+0x10c>
 8100718:	f091 0f00 	teq	r1, #0
 810071c:	bf04      	itt	eq
 810071e:	4601      	moveq	r1, r0
 8100720:	2000      	moveq	r0, #0
 8100722:	fab1 f381 	clz	r3, r1
 8100726:	bf08      	it	eq
 8100728:	3320      	addeq	r3, #32
 810072a:	f1a3 030b 	sub.w	r3, r3, #11
 810072e:	f1b3 0220 	subs.w	r2, r3, #32
 8100732:	da0c      	bge.n	810074e <__adddf3+0x16e>
 8100734:	320c      	adds	r2, #12
 8100736:	dd08      	ble.n	810074a <__adddf3+0x16a>
 8100738:	f102 0c14 	add.w	ip, r2, #20
 810073c:	f1c2 020c 	rsb	r2, r2, #12
 8100740:	fa01 f00c 	lsl.w	r0, r1, ip
 8100744:	fa21 f102 	lsr.w	r1, r1, r2
 8100748:	e00c      	b.n	8100764 <__adddf3+0x184>
 810074a:	f102 0214 	add.w	r2, r2, #20
 810074e:	bfd8      	it	le
 8100750:	f1c2 0c20 	rsble	ip, r2, #32
 8100754:	fa01 f102 	lsl.w	r1, r1, r2
 8100758:	fa20 fc0c 	lsr.w	ip, r0, ip
 810075c:	bfdc      	itt	le
 810075e:	ea41 010c 	orrle.w	r1, r1, ip
 8100762:	4090      	lslle	r0, r2
 8100764:	1ae4      	subs	r4, r4, r3
 8100766:	bfa2      	ittt	ge
 8100768:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 810076c:	4329      	orrge	r1, r5
 810076e:	bd30      	popge	{r4, r5, pc}
 8100770:	ea6f 0404 	mvn.w	r4, r4
 8100774:	3c1f      	subs	r4, #31
 8100776:	da1c      	bge.n	81007b2 <__adddf3+0x1d2>
 8100778:	340c      	adds	r4, #12
 810077a:	dc0e      	bgt.n	810079a <__adddf3+0x1ba>
 810077c:	f104 0414 	add.w	r4, r4, #20
 8100780:	f1c4 0220 	rsb	r2, r4, #32
 8100784:	fa20 f004 	lsr.w	r0, r0, r4
 8100788:	fa01 f302 	lsl.w	r3, r1, r2
 810078c:	ea40 0003 	orr.w	r0, r0, r3
 8100790:	fa21 f304 	lsr.w	r3, r1, r4
 8100794:	ea45 0103 	orr.w	r1, r5, r3
 8100798:	bd30      	pop	{r4, r5, pc}
 810079a:	f1c4 040c 	rsb	r4, r4, #12
 810079e:	f1c4 0220 	rsb	r2, r4, #32
 81007a2:	fa20 f002 	lsr.w	r0, r0, r2
 81007a6:	fa01 f304 	lsl.w	r3, r1, r4
 81007aa:	ea40 0003 	orr.w	r0, r0, r3
 81007ae:	4629      	mov	r1, r5
 81007b0:	bd30      	pop	{r4, r5, pc}
 81007b2:	fa21 f004 	lsr.w	r0, r1, r4
 81007b6:	4629      	mov	r1, r5
 81007b8:	bd30      	pop	{r4, r5, pc}
 81007ba:	f094 0f00 	teq	r4, #0
 81007be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 81007c2:	bf06      	itte	eq
 81007c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 81007c8:	3401      	addeq	r4, #1
 81007ca:	3d01      	subne	r5, #1
 81007cc:	e74e      	b.n	810066c <__adddf3+0x8c>
 81007ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81007d2:	bf18      	it	ne
 81007d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81007d8:	d029      	beq.n	810082e <__adddf3+0x24e>
 81007da:	ea94 0f05 	teq	r4, r5
 81007de:	bf08      	it	eq
 81007e0:	ea90 0f02 	teqeq	r0, r2
 81007e4:	d005      	beq.n	81007f2 <__adddf3+0x212>
 81007e6:	ea54 0c00 	orrs.w	ip, r4, r0
 81007ea:	bf04      	itt	eq
 81007ec:	4619      	moveq	r1, r3
 81007ee:	4610      	moveq	r0, r2
 81007f0:	bd30      	pop	{r4, r5, pc}
 81007f2:	ea91 0f03 	teq	r1, r3
 81007f6:	bf1e      	ittt	ne
 81007f8:	2100      	movne	r1, #0
 81007fa:	2000      	movne	r0, #0
 81007fc:	bd30      	popne	{r4, r5, pc}
 81007fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8100802:	d105      	bne.n	8100810 <__adddf3+0x230>
 8100804:	0040      	lsls	r0, r0, #1
 8100806:	4149      	adcs	r1, r1
 8100808:	bf28      	it	cs
 810080a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 810080e:	bd30      	pop	{r4, r5, pc}
 8100810:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8100814:	bf3c      	itt	cc
 8100816:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 810081a:	bd30      	popcc	{r4, r5, pc}
 810081c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100820:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8100824:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8100828:	f04f 0000 	mov.w	r0, #0
 810082c:	bd30      	pop	{r4, r5, pc}
 810082e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8100832:	bf1a      	itte	ne
 8100834:	4619      	movne	r1, r3
 8100836:	4610      	movne	r0, r2
 8100838:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 810083c:	bf1c      	itt	ne
 810083e:	460b      	movne	r3, r1
 8100840:	4602      	movne	r2, r0
 8100842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100846:	bf06      	itte	eq
 8100848:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 810084c:	ea91 0f03 	teqeq	r1, r3
 8100850:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100854:	bd30      	pop	{r4, r5, pc}
 8100856:	bf00      	nop

08100858 <__aeabi_ui2d>:
 8100858:	f090 0f00 	teq	r0, #0
 810085c:	bf04      	itt	eq
 810085e:	2100      	moveq	r1, #0
 8100860:	4770      	bxeq	lr
 8100862:	b530      	push	{r4, r5, lr}
 8100864:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100868:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 810086c:	f04f 0500 	mov.w	r5, #0
 8100870:	f04f 0100 	mov.w	r1, #0
 8100874:	e750      	b.n	8100718 <__adddf3+0x138>
 8100876:	bf00      	nop

08100878 <__aeabi_i2d>:
 8100878:	f090 0f00 	teq	r0, #0
 810087c:	bf04      	itt	eq
 810087e:	2100      	moveq	r1, #0
 8100880:	4770      	bxeq	lr
 8100882:	b530      	push	{r4, r5, lr}
 8100884:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100888:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 810088c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8100890:	bf48      	it	mi
 8100892:	4240      	negmi	r0, r0
 8100894:	f04f 0100 	mov.w	r1, #0
 8100898:	e73e      	b.n	8100718 <__adddf3+0x138>
 810089a:	bf00      	nop

0810089c <__aeabi_f2d>:
 810089c:	0042      	lsls	r2, r0, #1
 810089e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 81008a2:	ea4f 0131 	mov.w	r1, r1, rrx
 81008a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 81008aa:	bf1f      	itttt	ne
 81008ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 81008b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 81008b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 81008b8:	4770      	bxne	lr
 81008ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 81008be:	bf08      	it	eq
 81008c0:	4770      	bxeq	lr
 81008c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 81008c6:	bf04      	itt	eq
 81008c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 81008cc:	4770      	bxeq	lr
 81008ce:	b530      	push	{r4, r5, lr}
 81008d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 81008d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81008d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 81008dc:	e71c      	b.n	8100718 <__adddf3+0x138>
 81008de:	bf00      	nop

081008e0 <__aeabi_ul2d>:
 81008e0:	ea50 0201 	orrs.w	r2, r0, r1
 81008e4:	bf08      	it	eq
 81008e6:	4770      	bxeq	lr
 81008e8:	b530      	push	{r4, r5, lr}
 81008ea:	f04f 0500 	mov.w	r5, #0
 81008ee:	e00a      	b.n	8100906 <__aeabi_l2d+0x16>

081008f0 <__aeabi_l2d>:
 81008f0:	ea50 0201 	orrs.w	r2, r0, r1
 81008f4:	bf08      	it	eq
 81008f6:	4770      	bxeq	lr
 81008f8:	b530      	push	{r4, r5, lr}
 81008fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 81008fe:	d502      	bpl.n	8100906 <__aeabi_l2d+0x16>
 8100900:	4240      	negs	r0, r0
 8100902:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100906:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 810090a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 810090e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8100912:	f43f aed8 	beq.w	81006c6 <__adddf3+0xe6>
 8100916:	f04f 0203 	mov.w	r2, #3
 810091a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 810091e:	bf18      	it	ne
 8100920:	3203      	addne	r2, #3
 8100922:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100926:	bf18      	it	ne
 8100928:	3203      	addne	r2, #3
 810092a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 810092e:	f1c2 0320 	rsb	r3, r2, #32
 8100932:	fa00 fc03 	lsl.w	ip, r0, r3
 8100936:	fa20 f002 	lsr.w	r0, r0, r2
 810093a:	fa01 fe03 	lsl.w	lr, r1, r3
 810093e:	ea40 000e 	orr.w	r0, r0, lr
 8100942:	fa21 f102 	lsr.w	r1, r1, r2
 8100946:	4414      	add	r4, r2
 8100948:	e6bd      	b.n	81006c6 <__adddf3+0xe6>
 810094a:	bf00      	nop

0810094c <__aeabi_d2f>:
 810094c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100950:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8100954:	bf24      	itt	cs
 8100956:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 810095a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 810095e:	d90d      	bls.n	810097c <__aeabi_d2f+0x30>
 8100960:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8100964:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100968:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 810096c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8100970:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100974:	bf08      	it	eq
 8100976:	f020 0001 	biceq.w	r0, r0, #1
 810097a:	4770      	bx	lr
 810097c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8100980:	d121      	bne.n	81009c6 <__aeabi_d2f+0x7a>
 8100982:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8100986:	bfbc      	itt	lt
 8100988:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 810098c:	4770      	bxlt	lr
 810098e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100992:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100996:	f1c2 0218 	rsb	r2, r2, #24
 810099a:	f1c2 0c20 	rsb	ip, r2, #32
 810099e:	fa10 f30c 	lsls.w	r3, r0, ip
 81009a2:	fa20 f002 	lsr.w	r0, r0, r2
 81009a6:	bf18      	it	ne
 81009a8:	f040 0001 	orrne.w	r0, r0, #1
 81009ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 81009b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 81009b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 81009b8:	ea40 000c 	orr.w	r0, r0, ip
 81009bc:	fa23 f302 	lsr.w	r3, r3, r2
 81009c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 81009c4:	e7cc      	b.n	8100960 <__aeabi_d2f+0x14>
 81009c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 81009ca:	d107      	bne.n	81009dc <__aeabi_d2f+0x90>
 81009cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 81009d0:	bf1e      	ittt	ne
 81009d2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 81009d6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 81009da:	4770      	bxne	lr
 81009dc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 81009e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 81009e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 81009e8:	4770      	bx	lr
 81009ea:	bf00      	nop

081009ec <__aeabi_uldivmod>:
 81009ec:	b953      	cbnz	r3, 8100a04 <__aeabi_uldivmod+0x18>
 81009ee:	b94a      	cbnz	r2, 8100a04 <__aeabi_uldivmod+0x18>
 81009f0:	2900      	cmp	r1, #0
 81009f2:	bf08      	it	eq
 81009f4:	2800      	cmpeq	r0, #0
 81009f6:	bf1c      	itt	ne
 81009f8:	f04f 31ff 	movne.w	r1, #4294967295
 81009fc:	f04f 30ff 	movne.w	r0, #4294967295
 8100a00:	f000 b96a 	b.w	8100cd8 <__aeabi_idiv0>
 8100a04:	f1ad 0c08 	sub.w	ip, sp, #8
 8100a08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100a0c:	f000 f806 	bl	8100a1c <__udivmoddi4>
 8100a10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100a14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100a18:	b004      	add	sp, #16
 8100a1a:	4770      	bx	lr

08100a1c <__udivmoddi4>:
 8100a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100a20:	9d08      	ldr	r5, [sp, #32]
 8100a22:	460c      	mov	r4, r1
 8100a24:	2b00      	cmp	r3, #0
 8100a26:	d14e      	bne.n	8100ac6 <__udivmoddi4+0xaa>
 8100a28:	4694      	mov	ip, r2
 8100a2a:	458c      	cmp	ip, r1
 8100a2c:	4686      	mov	lr, r0
 8100a2e:	fab2 f282 	clz	r2, r2
 8100a32:	d962      	bls.n	8100afa <__udivmoddi4+0xde>
 8100a34:	b14a      	cbz	r2, 8100a4a <__udivmoddi4+0x2e>
 8100a36:	f1c2 0320 	rsb	r3, r2, #32
 8100a3a:	4091      	lsls	r1, r2
 8100a3c:	fa20 f303 	lsr.w	r3, r0, r3
 8100a40:	fa0c fc02 	lsl.w	ip, ip, r2
 8100a44:	4319      	orrs	r1, r3
 8100a46:	fa00 fe02 	lsl.w	lr, r0, r2
 8100a4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100a4e:	fa1f f68c 	uxth.w	r6, ip
 8100a52:	fbb1 f4f7 	udiv	r4, r1, r7
 8100a56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100a5a:	fb07 1114 	mls	r1, r7, r4, r1
 8100a5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100a62:	fb04 f106 	mul.w	r1, r4, r6
 8100a66:	4299      	cmp	r1, r3
 8100a68:	d90a      	bls.n	8100a80 <__udivmoddi4+0x64>
 8100a6a:	eb1c 0303 	adds.w	r3, ip, r3
 8100a6e:	f104 30ff 	add.w	r0, r4, #4294967295
 8100a72:	f080 8112 	bcs.w	8100c9a <__udivmoddi4+0x27e>
 8100a76:	4299      	cmp	r1, r3
 8100a78:	f240 810f 	bls.w	8100c9a <__udivmoddi4+0x27e>
 8100a7c:	3c02      	subs	r4, #2
 8100a7e:	4463      	add	r3, ip
 8100a80:	1a59      	subs	r1, r3, r1
 8100a82:	fa1f f38e 	uxth.w	r3, lr
 8100a86:	fbb1 f0f7 	udiv	r0, r1, r7
 8100a8a:	fb07 1110 	mls	r1, r7, r0, r1
 8100a8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100a92:	fb00 f606 	mul.w	r6, r0, r6
 8100a96:	429e      	cmp	r6, r3
 8100a98:	d90a      	bls.n	8100ab0 <__udivmoddi4+0x94>
 8100a9a:	eb1c 0303 	adds.w	r3, ip, r3
 8100a9e:	f100 31ff 	add.w	r1, r0, #4294967295
 8100aa2:	f080 80fc 	bcs.w	8100c9e <__udivmoddi4+0x282>
 8100aa6:	429e      	cmp	r6, r3
 8100aa8:	f240 80f9 	bls.w	8100c9e <__udivmoddi4+0x282>
 8100aac:	4463      	add	r3, ip
 8100aae:	3802      	subs	r0, #2
 8100ab0:	1b9b      	subs	r3, r3, r6
 8100ab2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8100ab6:	2100      	movs	r1, #0
 8100ab8:	b11d      	cbz	r5, 8100ac2 <__udivmoddi4+0xa6>
 8100aba:	40d3      	lsrs	r3, r2
 8100abc:	2200      	movs	r2, #0
 8100abe:	e9c5 3200 	strd	r3, r2, [r5]
 8100ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ac6:	428b      	cmp	r3, r1
 8100ac8:	d905      	bls.n	8100ad6 <__udivmoddi4+0xba>
 8100aca:	b10d      	cbz	r5, 8100ad0 <__udivmoddi4+0xb4>
 8100acc:	e9c5 0100 	strd	r0, r1, [r5]
 8100ad0:	2100      	movs	r1, #0
 8100ad2:	4608      	mov	r0, r1
 8100ad4:	e7f5      	b.n	8100ac2 <__udivmoddi4+0xa6>
 8100ad6:	fab3 f183 	clz	r1, r3
 8100ada:	2900      	cmp	r1, #0
 8100adc:	d146      	bne.n	8100b6c <__udivmoddi4+0x150>
 8100ade:	42a3      	cmp	r3, r4
 8100ae0:	d302      	bcc.n	8100ae8 <__udivmoddi4+0xcc>
 8100ae2:	4290      	cmp	r0, r2
 8100ae4:	f0c0 80f0 	bcc.w	8100cc8 <__udivmoddi4+0x2ac>
 8100ae8:	1a86      	subs	r6, r0, r2
 8100aea:	eb64 0303 	sbc.w	r3, r4, r3
 8100aee:	2001      	movs	r0, #1
 8100af0:	2d00      	cmp	r5, #0
 8100af2:	d0e6      	beq.n	8100ac2 <__udivmoddi4+0xa6>
 8100af4:	e9c5 6300 	strd	r6, r3, [r5]
 8100af8:	e7e3      	b.n	8100ac2 <__udivmoddi4+0xa6>
 8100afa:	2a00      	cmp	r2, #0
 8100afc:	f040 8090 	bne.w	8100c20 <__udivmoddi4+0x204>
 8100b00:	eba1 040c 	sub.w	r4, r1, ip
 8100b04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100b08:	fa1f f78c 	uxth.w	r7, ip
 8100b0c:	2101      	movs	r1, #1
 8100b0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8100b12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100b16:	fb08 4416 	mls	r4, r8, r6, r4
 8100b1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100b1e:	fb07 f006 	mul.w	r0, r7, r6
 8100b22:	4298      	cmp	r0, r3
 8100b24:	d908      	bls.n	8100b38 <__udivmoddi4+0x11c>
 8100b26:	eb1c 0303 	adds.w	r3, ip, r3
 8100b2a:	f106 34ff 	add.w	r4, r6, #4294967295
 8100b2e:	d202      	bcs.n	8100b36 <__udivmoddi4+0x11a>
 8100b30:	4298      	cmp	r0, r3
 8100b32:	f200 80cd 	bhi.w	8100cd0 <__udivmoddi4+0x2b4>
 8100b36:	4626      	mov	r6, r4
 8100b38:	1a1c      	subs	r4, r3, r0
 8100b3a:	fa1f f38e 	uxth.w	r3, lr
 8100b3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8100b42:	fb08 4410 	mls	r4, r8, r0, r4
 8100b46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100b4a:	fb00 f707 	mul.w	r7, r0, r7
 8100b4e:	429f      	cmp	r7, r3
 8100b50:	d908      	bls.n	8100b64 <__udivmoddi4+0x148>
 8100b52:	eb1c 0303 	adds.w	r3, ip, r3
 8100b56:	f100 34ff 	add.w	r4, r0, #4294967295
 8100b5a:	d202      	bcs.n	8100b62 <__udivmoddi4+0x146>
 8100b5c:	429f      	cmp	r7, r3
 8100b5e:	f200 80b0 	bhi.w	8100cc2 <__udivmoddi4+0x2a6>
 8100b62:	4620      	mov	r0, r4
 8100b64:	1bdb      	subs	r3, r3, r7
 8100b66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100b6a:	e7a5      	b.n	8100ab8 <__udivmoddi4+0x9c>
 8100b6c:	f1c1 0620 	rsb	r6, r1, #32
 8100b70:	408b      	lsls	r3, r1
 8100b72:	fa22 f706 	lsr.w	r7, r2, r6
 8100b76:	431f      	orrs	r7, r3
 8100b78:	fa20 fc06 	lsr.w	ip, r0, r6
 8100b7c:	fa04 f301 	lsl.w	r3, r4, r1
 8100b80:	ea43 030c 	orr.w	r3, r3, ip
 8100b84:	40f4      	lsrs	r4, r6
 8100b86:	fa00 f801 	lsl.w	r8, r0, r1
 8100b8a:	0c38      	lsrs	r0, r7, #16
 8100b8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8100b90:	fbb4 fef0 	udiv	lr, r4, r0
 8100b94:	fa1f fc87 	uxth.w	ip, r7
 8100b98:	fb00 441e 	mls	r4, r0, lr, r4
 8100b9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100ba0:	fb0e f90c 	mul.w	r9, lr, ip
 8100ba4:	45a1      	cmp	r9, r4
 8100ba6:	fa02 f201 	lsl.w	r2, r2, r1
 8100baa:	d90a      	bls.n	8100bc2 <__udivmoddi4+0x1a6>
 8100bac:	193c      	adds	r4, r7, r4
 8100bae:	f10e 3aff 	add.w	sl, lr, #4294967295
 8100bb2:	f080 8084 	bcs.w	8100cbe <__udivmoddi4+0x2a2>
 8100bb6:	45a1      	cmp	r9, r4
 8100bb8:	f240 8081 	bls.w	8100cbe <__udivmoddi4+0x2a2>
 8100bbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8100bc0:	443c      	add	r4, r7
 8100bc2:	eba4 0409 	sub.w	r4, r4, r9
 8100bc6:	fa1f f983 	uxth.w	r9, r3
 8100bca:	fbb4 f3f0 	udiv	r3, r4, r0
 8100bce:	fb00 4413 	mls	r4, r0, r3, r4
 8100bd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100bd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8100bda:	45a4      	cmp	ip, r4
 8100bdc:	d907      	bls.n	8100bee <__udivmoddi4+0x1d2>
 8100bde:	193c      	adds	r4, r7, r4
 8100be0:	f103 30ff 	add.w	r0, r3, #4294967295
 8100be4:	d267      	bcs.n	8100cb6 <__udivmoddi4+0x29a>
 8100be6:	45a4      	cmp	ip, r4
 8100be8:	d965      	bls.n	8100cb6 <__udivmoddi4+0x29a>
 8100bea:	3b02      	subs	r3, #2
 8100bec:	443c      	add	r4, r7
 8100bee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8100bf2:	fba0 9302 	umull	r9, r3, r0, r2
 8100bf6:	eba4 040c 	sub.w	r4, r4, ip
 8100bfa:	429c      	cmp	r4, r3
 8100bfc:	46ce      	mov	lr, r9
 8100bfe:	469c      	mov	ip, r3
 8100c00:	d351      	bcc.n	8100ca6 <__udivmoddi4+0x28a>
 8100c02:	d04e      	beq.n	8100ca2 <__udivmoddi4+0x286>
 8100c04:	b155      	cbz	r5, 8100c1c <__udivmoddi4+0x200>
 8100c06:	ebb8 030e 	subs.w	r3, r8, lr
 8100c0a:	eb64 040c 	sbc.w	r4, r4, ip
 8100c0e:	fa04 f606 	lsl.w	r6, r4, r6
 8100c12:	40cb      	lsrs	r3, r1
 8100c14:	431e      	orrs	r6, r3
 8100c16:	40cc      	lsrs	r4, r1
 8100c18:	e9c5 6400 	strd	r6, r4, [r5]
 8100c1c:	2100      	movs	r1, #0
 8100c1e:	e750      	b.n	8100ac2 <__udivmoddi4+0xa6>
 8100c20:	f1c2 0320 	rsb	r3, r2, #32
 8100c24:	fa20 f103 	lsr.w	r1, r0, r3
 8100c28:	fa0c fc02 	lsl.w	ip, ip, r2
 8100c2c:	fa24 f303 	lsr.w	r3, r4, r3
 8100c30:	4094      	lsls	r4, r2
 8100c32:	430c      	orrs	r4, r1
 8100c34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100c38:	fa00 fe02 	lsl.w	lr, r0, r2
 8100c3c:	fa1f f78c 	uxth.w	r7, ip
 8100c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8100c44:	fb08 3110 	mls	r1, r8, r0, r3
 8100c48:	0c23      	lsrs	r3, r4, #16
 8100c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100c4e:	fb00 f107 	mul.w	r1, r0, r7
 8100c52:	4299      	cmp	r1, r3
 8100c54:	d908      	bls.n	8100c68 <__udivmoddi4+0x24c>
 8100c56:	eb1c 0303 	adds.w	r3, ip, r3
 8100c5a:	f100 36ff 	add.w	r6, r0, #4294967295
 8100c5e:	d22c      	bcs.n	8100cba <__udivmoddi4+0x29e>
 8100c60:	4299      	cmp	r1, r3
 8100c62:	d92a      	bls.n	8100cba <__udivmoddi4+0x29e>
 8100c64:	3802      	subs	r0, #2
 8100c66:	4463      	add	r3, ip
 8100c68:	1a5b      	subs	r3, r3, r1
 8100c6a:	b2a4      	uxth	r4, r4
 8100c6c:	fbb3 f1f8 	udiv	r1, r3, r8
 8100c70:	fb08 3311 	mls	r3, r8, r1, r3
 8100c74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100c78:	fb01 f307 	mul.w	r3, r1, r7
 8100c7c:	42a3      	cmp	r3, r4
 8100c7e:	d908      	bls.n	8100c92 <__udivmoddi4+0x276>
 8100c80:	eb1c 0404 	adds.w	r4, ip, r4
 8100c84:	f101 36ff 	add.w	r6, r1, #4294967295
 8100c88:	d213      	bcs.n	8100cb2 <__udivmoddi4+0x296>
 8100c8a:	42a3      	cmp	r3, r4
 8100c8c:	d911      	bls.n	8100cb2 <__udivmoddi4+0x296>
 8100c8e:	3902      	subs	r1, #2
 8100c90:	4464      	add	r4, ip
 8100c92:	1ae4      	subs	r4, r4, r3
 8100c94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8100c98:	e739      	b.n	8100b0e <__udivmoddi4+0xf2>
 8100c9a:	4604      	mov	r4, r0
 8100c9c:	e6f0      	b.n	8100a80 <__udivmoddi4+0x64>
 8100c9e:	4608      	mov	r0, r1
 8100ca0:	e706      	b.n	8100ab0 <__udivmoddi4+0x94>
 8100ca2:	45c8      	cmp	r8, r9
 8100ca4:	d2ae      	bcs.n	8100c04 <__udivmoddi4+0x1e8>
 8100ca6:	ebb9 0e02 	subs.w	lr, r9, r2
 8100caa:	eb63 0c07 	sbc.w	ip, r3, r7
 8100cae:	3801      	subs	r0, #1
 8100cb0:	e7a8      	b.n	8100c04 <__udivmoddi4+0x1e8>
 8100cb2:	4631      	mov	r1, r6
 8100cb4:	e7ed      	b.n	8100c92 <__udivmoddi4+0x276>
 8100cb6:	4603      	mov	r3, r0
 8100cb8:	e799      	b.n	8100bee <__udivmoddi4+0x1d2>
 8100cba:	4630      	mov	r0, r6
 8100cbc:	e7d4      	b.n	8100c68 <__udivmoddi4+0x24c>
 8100cbe:	46d6      	mov	lr, sl
 8100cc0:	e77f      	b.n	8100bc2 <__udivmoddi4+0x1a6>
 8100cc2:	4463      	add	r3, ip
 8100cc4:	3802      	subs	r0, #2
 8100cc6:	e74d      	b.n	8100b64 <__udivmoddi4+0x148>
 8100cc8:	4606      	mov	r6, r0
 8100cca:	4623      	mov	r3, r4
 8100ccc:	4608      	mov	r0, r1
 8100cce:	e70f      	b.n	8100af0 <__udivmoddi4+0xd4>
 8100cd0:	3e02      	subs	r6, #2
 8100cd2:	4463      	add	r3, ip
 8100cd4:	e730      	b.n	8100b38 <__udivmoddi4+0x11c>
 8100cd6:	bf00      	nop

08100cd8 <__aeabi_idiv0>:
 8100cd8:	4770      	bx	lr
 8100cda:	bf00      	nop

08100cdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100cdc:	b480      	push	{r7}
 8100cde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100ce0:	4b09      	ldr	r3, [pc, #36]	@ (8100d08 <SystemInit+0x2c>)
 8100ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8100ce6:	4a08      	ldr	r2, [pc, #32]	@ (8100d08 <SystemInit+0x2c>)
 8100ce8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8100cec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100cf0:	4b05      	ldr	r3, [pc, #20]	@ (8100d08 <SystemInit+0x2c>)
 8100cf2:	691b      	ldr	r3, [r3, #16]
 8100cf4:	4a04      	ldr	r2, [pc, #16]	@ (8100d08 <SystemInit+0x2c>)
 8100cf6:	f043 0310 	orr.w	r3, r3, #16
 8100cfa:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100cfc:	bf00      	nop
 8100cfe:	46bd      	mov	sp, r7
 8100d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d04:	4770      	bx	lr
 8100d06:	bf00      	nop
 8100d08:	e000ed00 	.word	0xe000ed00

08100d0c <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8100d0c:	b580      	push	{r7, lr}
 8100d0e:	b086      	sub	sp, #24
 8100d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	static char dataOut[64];
	HAL_Init();
 8100d12:	f000 fd11 	bl	8101738 <HAL_Init>
	MX_GPIO_Init();
 8100d16:	f000 f943 	bl	8100fa0 <_ZL12MX_GPIO_Initv>
	MX_I2C2_Init();
 8100d1a:	f000 f897 	bl	8100e4c <_ZL12MX_I2C2_Initv>
	MX_SPI1_Init();
 8100d1e:	f000 f8e3 	bl	8100ee8 <_ZL12MX_SPI1_Initv>
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8100d22:	2101      	movs	r1, #1
 8100d24:	2000      	movs	r0, #0
 8100d26:	f000 fbab 	bl	8101480 <BSP_PB_Init>

	  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
	    BspCOMInit.BaudRate   = 115200;
 8100d2a:	4b3f      	ldr	r3, [pc, #252]	@ (8100e28 <main+0x11c>)
 8100d2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8100d30:	601a      	str	r2, [r3, #0]
	    BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8100d32:	4b3d      	ldr	r3, [pc, #244]	@ (8100e28 <main+0x11c>)
 8100d34:	2200      	movs	r2, #0
 8100d36:	605a      	str	r2, [r3, #4]
	    BspCOMInit.StopBits   = COM_STOPBITS_1;
 8100d38:	4b3b      	ldr	r3, [pc, #236]	@ (8100e28 <main+0x11c>)
 8100d3a:	2200      	movs	r2, #0
 8100d3c:	811a      	strh	r2, [r3, #8]
	    BspCOMInit.Parity     = COM_PARITY_NONE;
 8100d3e:	4b3a      	ldr	r3, [pc, #232]	@ (8100e28 <main+0x11c>)
 8100d40:	2200      	movs	r2, #0
 8100d42:	815a      	strh	r2, [r3, #10]
	    BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8100d44:	4b38      	ldr	r3, [pc, #224]	@ (8100e28 <main+0x11c>)
 8100d46:	2200      	movs	r2, #0
 8100d48:	819a      	strh	r2, [r3, #12]
	    if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8100d4a:	4937      	ldr	r1, [pc, #220]	@ (8100e28 <main+0x11c>)
 8100d4c:	2000      	movs	r0, #0
 8100d4e:	f000 fc15 	bl	810157c <BSP_COM_Init>
 8100d52:	4603      	mov	r3, r0
 8100d54:	2b00      	cmp	r3, #0
 8100d56:	bf14      	ite	ne
 8100d58:	2301      	movne	r3, #1
 8100d5a:	2300      	moveq	r3, #0
 8100d5c:	b2db      	uxtb	r3, r3
 8100d5e:	2b00      	cmp	r3, #0
 8100d60:	d001      	beq.n	8100d66 <main+0x5a>
	    {
	      Error_Handler();
 8100d62:	f000 f955 	bl	8101010 <Error_Handler>
	    }
	// Initialize temperature sensor
	if (!tempSensor.initialize()) {
 8100d66:	4831      	ldr	r0, [pc, #196]	@ (8100e2c <main+0x120>)
 8100d68:	f005 f9a4 	bl	81060b4 <_ZN7STTS22H10initializeEv>
 8100d6c:	4603      	mov	r3, r0
 8100d6e:	f083 0301 	eor.w	r3, r3, #1
 8100d72:	b2db      	uxtb	r3, r3
 8100d74:	2b00      	cmp	r3, #0
 8100d76:	d001      	beq.n	8100d7c <main+0x70>
	// Handle initialization error
	Error_Handler();
 8100d78:	f000 f94a 	bl	8101010 <Error_Handler>
	}

	// Initialize vibrometer
	vibrometer.initialize();
 8100d7c:	482c      	ldr	r0, [pc, #176]	@ (8100e30 <main+0x124>)
 8100d7e:	f005 f8ed 	bl	8105f5c <_ZN7IIS3DWB10initializeEv>

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100d82:	4b2c      	ldr	r3, [pc, #176]	@ (8100e34 <main+0x128>)
 8100d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100d88:	4a2a      	ldr	r2, [pc, #168]	@ (8100e34 <main+0x128>)
 8100d8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8100d8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100d92:	4b28      	ldr	r3, [pc, #160]	@ (8100e34 <main+0x128>)
 8100d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100d98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100d9c:	607b      	str	r3, [r7, #4]
 8100d9e:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100da0:	2001      	movs	r0, #1
 8100da2:	f001 f8a9 	bl	8101ef8 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  //HAL_PWREx_ClearPendingEvent();
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100da6:	2201      	movs	r2, #1
 8100da8:	2102      	movs	r1, #2
 8100daa:	2000      	movs	r0, #0
 8100dac:	f001 fe9e 	bl	8102aec <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100db0:	4b21      	ldr	r3, [pc, #132]	@ (8100e38 <main+0x12c>)
 8100db2:	681b      	ldr	r3, [r3, #0]
 8100db4:	091b      	lsrs	r3, r3, #4
 8100db6:	f003 030f 	and.w	r3, r3, #15
 8100dba:	2b07      	cmp	r3, #7
 8100dbc:	d108      	bne.n	8100dd0 <main+0xc4>
 8100dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8100e3c <main+0x130>)
 8100dc0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8100dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8100e3c <main+0x130>)
 8100dc6:	f043 0301 	orr.w	r3, r3, #1
 8100dca:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8100dce:	e007      	b.n	8100de0 <main+0xd4>
 8100dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8100e3c <main+0x130>)
 8100dd2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8100dd6:	4a19      	ldr	r2, [pc, #100]	@ (8100e3c <main+0x130>)
 8100dd8:	f043 0301 	orr.w	r3, r3, #1
 8100ddc:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100de0:	f000 fcaa 	bl	8101738 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100de4:	f000 f8dc 	bl	8100fa0 <_ZL12MX_GPIO_Initv>
  MX_I2C2_Init();
 8100de8:	f000 f830 	bl	8100e4c <_ZL12MX_I2C2_Initv>
  MX_SPI1_Init();
 8100dec:	f000 f87c 	bl	8100ee8 <_ZL12MX_SPI1_Initv>
  /* USER CODE BEGIN WHILE */
  float temperature;
  float accelX, accelY, accelZ;

  while (1) {
	sprintf(dataOut, "\r\n LED2 OFF\r\n Press Key button to put it ON\r\n ");
 8100df0:	4913      	ldr	r1, [pc, #76]	@ (8100e40 <main+0x134>)
 8100df2:	4814      	ldr	r0, [pc, #80]	@ (8100e44 <main+0x138>)
 8100df4:	f005 fafa 	bl	81063ec <siprintf>
	printf("%s", dataOut);
 8100df8:	4912      	ldr	r1, [pc, #72]	@ (8100e44 <main+0x138>)
 8100dfa:	4813      	ldr	r0, [pc, #76]	@ (8100e48 <main+0x13c>)
 8100dfc:	f005 fae4 	bl	81063c8 <iprintf>
    if (tempSensor.readTemperature(temperature)) {
 8100e00:	f107 0314 	add.w	r3, r7, #20
 8100e04:	4619      	mov	r1, r3
 8100e06:	4809      	ldr	r0, [pc, #36]	@ (8100e2c <main+0x120>)
 8100e08:	f005 f976 	bl	81060f8 <_ZN7STTS22H15readTemperatureERf>
      // Use the temperature value
    } else {
      // Handle read error
    }

    if (vibrometer.readAcceleration(accelX, accelY, accelZ)) {
 8100e0c:	f107 0308 	add.w	r3, r7, #8
 8100e10:	f107 020c 	add.w	r2, r7, #12
 8100e14:	f107 0110 	add.w	r1, r7, #16
 8100e18:	4805      	ldr	r0, [pc, #20]	@ (8100e30 <main+0x124>)
 8100e1a:	f005 f8c1 	bl	8105fa0 <_ZN7IIS3DWB16readAccelerationERfS0_S0_>
      // Use the acceleration values
    } else {
      // Handle read error
    }

    HAL_Delay(1000); // Read every second
 8100e1e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8100e22:	f000 fd3d 	bl	81018a0 <HAL_Delay>
	sprintf(dataOut, "\r\n LED2 OFF\r\n Press Key button to put it ON\r\n ");
 8100e26:	e7e3      	b.n	8100df0 <main+0xe4>
 8100e28:	100000ec 	.word	0x100000ec
 8100e2c:	10000184 	.word	0x10000184
 8100e30:	10000188 	.word	0x10000188
 8100e34:	58024400 	.word	0x58024400
 8100e38:	e000ed00 	.word	0xe000ed00
 8100e3c:	58026400 	.word	0x58026400
 8100e40:	08107468 	.word	0x08107468
 8100e44:	1000018c 	.word	0x1000018c
 8100e48:	08107498 	.word	0x08107498

08100e4c <_ZL12MX_I2C2_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8100e4c:	b580      	push	{r7, lr}
 8100e4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8100e50:	4b22      	ldr	r3, [pc, #136]	@ (8100edc <_ZL12MX_I2C2_Initv+0x90>)
 8100e52:	4a23      	ldr	r2, [pc, #140]	@ (8100ee0 <_ZL12MX_I2C2_Initv+0x94>)
 8100e54:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8100e56:	4b21      	ldr	r3, [pc, #132]	@ (8100edc <_ZL12MX_I2C2_Initv+0x90>)
 8100e58:	4a22      	ldr	r2, [pc, #136]	@ (8100ee4 <_ZL12MX_I2C2_Initv+0x98>)
 8100e5a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8100e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8100edc <_ZL12MX_I2C2_Initv+0x90>)
 8100e5e:	2200      	movs	r2, #0
 8100e60:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8100e62:	4b1e      	ldr	r3, [pc, #120]	@ (8100edc <_ZL12MX_I2C2_Initv+0x90>)
 8100e64:	2201      	movs	r2, #1
 8100e66:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8100e68:	4b1c      	ldr	r3, [pc, #112]	@ (8100edc <_ZL12MX_I2C2_Initv+0x90>)
 8100e6a:	2200      	movs	r2, #0
 8100e6c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8100e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8100edc <_ZL12MX_I2C2_Initv+0x90>)
 8100e70:	2200      	movs	r2, #0
 8100e72:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8100e74:	4b19      	ldr	r3, [pc, #100]	@ (8100edc <_ZL12MX_I2C2_Initv+0x90>)
 8100e76:	2200      	movs	r2, #0
 8100e78:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8100e7a:	4b18      	ldr	r3, [pc, #96]	@ (8100edc <_ZL12MX_I2C2_Initv+0x90>)
 8100e7c:	2200      	movs	r2, #0
 8100e7e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8100e80:	4b16      	ldr	r3, [pc, #88]	@ (8100edc <_ZL12MX_I2C2_Initv+0x90>)
 8100e82:	2200      	movs	r2, #0
 8100e84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8100e86:	4815      	ldr	r0, [pc, #84]	@ (8100edc <_ZL12MX_I2C2_Initv+0x90>)
 8100e88:	f001 f848 	bl	8101f1c <HAL_I2C_Init>
 8100e8c:	4603      	mov	r3, r0
 8100e8e:	2b00      	cmp	r3, #0
 8100e90:	bf14      	ite	ne
 8100e92:	2301      	movne	r3, #1
 8100e94:	2300      	moveq	r3, #0
 8100e96:	b2db      	uxtb	r3, r3
 8100e98:	2b00      	cmp	r3, #0
 8100e9a:	d001      	beq.n	8100ea0 <_ZL12MX_I2C2_Initv+0x54>
  {
    Error_Handler();
 8100e9c:	f000 f8b8 	bl	8101010 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8100ea0:	2100      	movs	r1, #0
 8100ea2:	480e      	ldr	r0, [pc, #56]	@ (8100edc <_ZL12MX_I2C2_Initv+0x90>)
 8100ea4:	f001 fd8a 	bl	81029bc <HAL_I2CEx_ConfigAnalogFilter>
 8100ea8:	4603      	mov	r3, r0
 8100eaa:	2b00      	cmp	r3, #0
 8100eac:	bf14      	ite	ne
 8100eae:	2301      	movne	r3, #1
 8100eb0:	2300      	moveq	r3, #0
 8100eb2:	b2db      	uxtb	r3, r3
 8100eb4:	2b00      	cmp	r3, #0
 8100eb6:	d001      	beq.n	8100ebc <_ZL12MX_I2C2_Initv+0x70>
  {
    Error_Handler();
 8100eb8:	f000 f8aa 	bl	8101010 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8100ebc:	2100      	movs	r1, #0
 8100ebe:	4807      	ldr	r0, [pc, #28]	@ (8100edc <_ZL12MX_I2C2_Initv+0x90>)
 8100ec0:	f001 fdc7 	bl	8102a52 <HAL_I2CEx_ConfigDigitalFilter>
 8100ec4:	4603      	mov	r3, r0
 8100ec6:	2b00      	cmp	r3, #0
 8100ec8:	bf14      	ite	ne
 8100eca:	2301      	movne	r3, #1
 8100ecc:	2300      	moveq	r3, #0
 8100ece:	b2db      	uxtb	r3, r3
 8100ed0:	2b00      	cmp	r3, #0
 8100ed2:	d001      	beq.n	8100ed8 <_ZL12MX_I2C2_Initv+0x8c>
  {
    Error_Handler();
 8100ed4:	f000 f89c 	bl	8101010 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8100ed8:	bf00      	nop
 8100eda:	bd80      	pop	{r7, pc}
 8100edc:	10000098 	.word	0x10000098
 8100ee0:	40005800 	.word	0x40005800
 8100ee4:	307075b1 	.word	0x307075b1

08100ee8 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8100ee8:	b580      	push	{r7, lr}
 8100eea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8100eec:	4b2a      	ldr	r3, [pc, #168]	@ (8100f98 <_ZL12MX_SPI1_Initv+0xb0>)
 8100eee:	4a2b      	ldr	r2, [pc, #172]	@ (8100f9c <_ZL12MX_SPI1_Initv+0xb4>)
 8100ef0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8100ef2:	4b29      	ldr	r3, [pc, #164]	@ (8100f98 <_ZL12MX_SPI1_Initv+0xb0>)
 8100ef4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8100ef8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8100efa:	4b27      	ldr	r3, [pc, #156]	@ (8100f98 <_ZL12MX_SPI1_Initv+0xb0>)
 8100efc:	2200      	movs	r2, #0
 8100efe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8100f00:	4b25      	ldr	r3, [pc, #148]	@ (8100f98 <_ZL12MX_SPI1_Initv+0xb0>)
 8100f02:	2207      	movs	r2, #7
 8100f04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100f06:	4b24      	ldr	r3, [pc, #144]	@ (8100f98 <_ZL12MX_SPI1_Initv+0xb0>)
 8100f08:	2200      	movs	r2, #0
 8100f0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100f0c:	4b22      	ldr	r3, [pc, #136]	@ (8100f98 <_ZL12MX_SPI1_Initv+0xb0>)
 8100f0e:	2200      	movs	r2, #0
 8100f10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8100f12:	4b21      	ldr	r3, [pc, #132]	@ (8100f98 <_ZL12MX_SPI1_Initv+0xb0>)
 8100f14:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8100f18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8100f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8100f98 <_ZL12MX_SPI1_Initv+0xb0>)
 8100f1c:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8100f20:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100f22:	4b1d      	ldr	r3, [pc, #116]	@ (8100f98 <_ZL12MX_SPI1_Initv+0xb0>)
 8100f24:	2200      	movs	r2, #0
 8100f26:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8100f28:	4b1b      	ldr	r3, [pc, #108]	@ (8100f98 <_ZL12MX_SPI1_Initv+0xb0>)
 8100f2a:	2200      	movs	r2, #0
 8100f2c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8100f98 <_ZL12MX_SPI1_Initv+0xb0>)
 8100f30:	2200      	movs	r2, #0
 8100f32:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8100f34:	4b18      	ldr	r3, [pc, #96]	@ (8100f98 <_ZL12MX_SPI1_Initv+0xb0>)
 8100f36:	2200      	movs	r2, #0
 8100f38:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100f3a:	4b17      	ldr	r3, [pc, #92]	@ (8100f98 <_ZL12MX_SPI1_Initv+0xb0>)
 8100f3c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8100f40:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100f42:	4b15      	ldr	r3, [pc, #84]	@ (8100f98 <_ZL12MX_SPI1_Initv+0xb0>)
 8100f44:	2200      	movs	r2, #0
 8100f46:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100f48:	4b13      	ldr	r3, [pc, #76]	@ (8100f98 <_ZL12MX_SPI1_Initv+0xb0>)
 8100f4a:	2200      	movs	r2, #0
 8100f4c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100f4e:	4b12      	ldr	r3, [pc, #72]	@ (8100f98 <_ZL12MX_SPI1_Initv+0xb0>)
 8100f50:	2200      	movs	r2, #0
 8100f52:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100f54:	4b10      	ldr	r3, [pc, #64]	@ (8100f98 <_ZL12MX_SPI1_Initv+0xb0>)
 8100f56:	2200      	movs	r2, #0
 8100f58:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8100f98 <_ZL12MX_SPI1_Initv+0xb0>)
 8100f5c:	2200      	movs	r2, #0
 8100f5e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100f60:	4b0d      	ldr	r3, [pc, #52]	@ (8100f98 <_ZL12MX_SPI1_Initv+0xb0>)
 8100f62:	2200      	movs	r2, #0
 8100f64:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100f66:	4b0c      	ldr	r3, [pc, #48]	@ (8100f98 <_ZL12MX_SPI1_Initv+0xb0>)
 8100f68:	2200      	movs	r2, #0
 8100f6a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8100f98 <_ZL12MX_SPI1_Initv+0xb0>)
 8100f6e:	2200      	movs	r2, #0
 8100f70:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100f72:	4b09      	ldr	r3, [pc, #36]	@ (8100f98 <_ZL12MX_SPI1_Initv+0xb0>)
 8100f74:	2200      	movs	r2, #0
 8100f76:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8100f78:	4807      	ldr	r0, [pc, #28]	@ (8100f98 <_ZL12MX_SPI1_Initv+0xb0>)
 8100f7a:	f003 fe35 	bl	8104be8 <HAL_SPI_Init>
 8100f7e:	4603      	mov	r3, r0
 8100f80:	2b00      	cmp	r3, #0
 8100f82:	bf14      	ite	ne
 8100f84:	2301      	movne	r3, #1
 8100f86:	2300      	moveq	r3, #0
 8100f88:	b2db      	uxtb	r3, r3
 8100f8a:	2b00      	cmp	r3, #0
 8100f8c:	d001      	beq.n	8100f92 <_ZL12MX_SPI1_Initv+0xaa>
  {
    Error_Handler();
 8100f8e:	f000 f83f 	bl	8101010 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8100f92:	bf00      	nop
 8100f94:	bd80      	pop	{r7, pc}
 8100f96:	bf00      	nop
 8100f98:	100000fc 	.word	0x100000fc
 8100f9c:	40013000 	.word	0x40013000

08100fa0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100fa0:	b480      	push	{r7}
 8100fa2:	b085      	sub	sp, #20
 8100fa4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100fa6:	4b19      	ldr	r3, [pc, #100]	@ (810100c <_ZL12MX_GPIO_Initv+0x6c>)
 8100fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100fac:	4a17      	ldr	r2, [pc, #92]	@ (810100c <_ZL12MX_GPIO_Initv+0x6c>)
 8100fae:	f043 0301 	orr.w	r3, r3, #1
 8100fb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100fb6:	4b15      	ldr	r3, [pc, #84]	@ (810100c <_ZL12MX_GPIO_Initv+0x6c>)
 8100fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100fbc:	f003 0301 	and.w	r3, r3, #1
 8100fc0:	60fb      	str	r3, [r7, #12]
 8100fc2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100fc4:	4b11      	ldr	r3, [pc, #68]	@ (810100c <_ZL12MX_GPIO_Initv+0x6c>)
 8100fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100fca:	4a10      	ldr	r2, [pc, #64]	@ (810100c <_ZL12MX_GPIO_Initv+0x6c>)
 8100fcc:	f043 0308 	orr.w	r3, r3, #8
 8100fd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100fd4:	4b0d      	ldr	r3, [pc, #52]	@ (810100c <_ZL12MX_GPIO_Initv+0x6c>)
 8100fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100fda:	f003 0308 	and.w	r3, r3, #8
 8100fde:	60bb      	str	r3, [r7, #8]
 8100fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100fe2:	4b0a      	ldr	r3, [pc, #40]	@ (810100c <_ZL12MX_GPIO_Initv+0x6c>)
 8100fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100fe8:	4a08      	ldr	r2, [pc, #32]	@ (810100c <_ZL12MX_GPIO_Initv+0x6c>)
 8100fea:	f043 0302 	orr.w	r3, r3, #2
 8100fee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100ff2:	4b06      	ldr	r3, [pc, #24]	@ (810100c <_ZL12MX_GPIO_Initv+0x6c>)
 8100ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100ff8:	f003 0302 	and.w	r3, r3, #2
 8100ffc:	607b      	str	r3, [r7, #4]
 8100ffe:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8101000:	bf00      	nop
 8101002:	3714      	adds	r7, #20
 8101004:	46bd      	mov	sp, r7
 8101006:	f85d 7b04 	ldr.w	r7, [sp], #4
 810100a:	4770      	bx	lr
 810100c:	58024400 	.word	0x58024400

08101010 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101010:	b480      	push	{r7}
 8101012:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101014:	b672      	cpsid	i
}
 8101016:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101018:	bf00      	nop
 810101a:	e7fd      	b.n	8101018 <Error_Handler+0x8>

0810101c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 810101c:	b580      	push	{r7, lr}
 810101e:	b082      	sub	sp, #8
 8101020:	af00      	add	r7, sp, #0
 8101022:	6078      	str	r0, [r7, #4]
 8101024:	6039      	str	r1, [r7, #0]
 8101026:	687b      	ldr	r3, [r7, #4]
 8101028:	2b01      	cmp	r3, #1
 810102a:	d10a      	bne.n	8101042 <_Z41__static_initialization_and_destruction_0ii+0x26>
 810102c:	683b      	ldr	r3, [r7, #0]
 810102e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8101032:	4293      	cmp	r3, r2
 8101034:	d105      	bne.n	8101042 <_Z41__static_initialization_and_destruction_0ii+0x26>
STTS22H tempSensor;
 8101036:	4805      	ldr	r0, [pc, #20]	@ (810104c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8101038:	f005 f831 	bl	810609e <_ZN7STTS22HC1Ev>
IIS3DWB vibrometer;
 810103c:	4804      	ldr	r0, [pc, #16]	@ (8101050 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 810103e:	f004 ff82 	bl	8105f46 <_ZN7IIS3DWBC1Ev>
}
 8101042:	bf00      	nop
 8101044:	3708      	adds	r7, #8
 8101046:	46bd      	mov	sp, r7
 8101048:	bd80      	pop	{r7, pc}
 810104a:	bf00      	nop
 810104c:	10000184 	.word	0x10000184
 8101050:	10000188 	.word	0x10000188

08101054 <_GLOBAL__sub_I_hi2c2>:
 8101054:	b580      	push	{r7, lr}
 8101056:	af00      	add	r7, sp, #0
 8101058:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 810105c:	2001      	movs	r0, #1
 810105e:	f7ff ffdd 	bl	810101c <_Z41__static_initialization_and_destruction_0ii>
 8101062:	bd80      	pop	{r7, pc}

08101064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101064:	b480      	push	{r7}
 8101066:	b083      	sub	sp, #12
 8101068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810106a:	4b0a      	ldr	r3, [pc, #40]	@ (8101094 <HAL_MspInit+0x30>)
 810106c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101070:	4a08      	ldr	r2, [pc, #32]	@ (8101094 <HAL_MspInit+0x30>)
 8101072:	f043 0302 	orr.w	r3, r3, #2
 8101076:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 810107a:	4b06      	ldr	r3, [pc, #24]	@ (8101094 <HAL_MspInit+0x30>)
 810107c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101080:	f003 0302 	and.w	r3, r3, #2
 8101084:	607b      	str	r3, [r7, #4]
 8101086:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101088:	bf00      	nop
 810108a:	370c      	adds	r7, #12
 810108c:	46bd      	mov	sp, r7
 810108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101092:	4770      	bx	lr
 8101094:	58024400 	.word	0x58024400

08101098 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8101098:	b580      	push	{r7, lr}
 810109a:	b0ba      	sub	sp, #232	@ 0xe8
 810109c:	af00      	add	r7, sp, #0
 810109e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81010a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81010a4:	2200      	movs	r2, #0
 81010a6:	601a      	str	r2, [r3, #0]
 81010a8:	605a      	str	r2, [r3, #4]
 81010aa:	609a      	str	r2, [r3, #8]
 81010ac:	60da      	str	r2, [r3, #12]
 81010ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81010b0:	f107 0310 	add.w	r3, r7, #16
 81010b4:	22c0      	movs	r2, #192	@ 0xc0
 81010b6:	2100      	movs	r1, #0
 81010b8:	4618      	mov	r0, r3
 81010ba:	f005 f9fa 	bl	81064b2 <memset>
  if(hi2c->Instance==I2C2)
 81010be:	687b      	ldr	r3, [r7, #4]
 81010c0:	681b      	ldr	r3, [r3, #0]
 81010c2:	4a27      	ldr	r2, [pc, #156]	@ (8101160 <HAL_I2C_MspInit+0xc8>)
 81010c4:	4293      	cmp	r3, r2
 81010c6:	d146      	bne.n	8101156 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 81010c8:	f04f 0208 	mov.w	r2, #8
 81010cc:	f04f 0300 	mov.w	r3, #0
 81010d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 81010d4:	2300      	movs	r3, #0
 81010d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81010da:	f107 0310 	add.w	r3, r7, #16
 81010de:	4618      	mov	r0, r3
 81010e0:	f001 ff56 	bl	8102f90 <HAL_RCCEx_PeriphCLKConfig>
 81010e4:	4603      	mov	r3, r0
 81010e6:	2b00      	cmp	r3, #0
 81010e8:	d001      	beq.n	81010ee <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 81010ea:	f7ff ff91 	bl	8101010 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81010ee:	4b1d      	ldr	r3, [pc, #116]	@ (8101164 <HAL_I2C_MspInit+0xcc>)
 81010f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81010f4:	4a1b      	ldr	r2, [pc, #108]	@ (8101164 <HAL_I2C_MspInit+0xcc>)
 81010f6:	f043 0302 	orr.w	r3, r3, #2
 81010fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81010fe:	4b19      	ldr	r3, [pc, #100]	@ (8101164 <HAL_I2C_MspInit+0xcc>)
 8101100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101104:	f003 0302 	and.w	r3, r3, #2
 8101108:	60fb      	str	r3, [r7, #12]
 810110a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 810110c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8101110:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101114:	2312      	movs	r3, #18
 8101116:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810111a:	2300      	movs	r3, #0
 810111c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101120:	2300      	movs	r3, #0
 8101122:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8101126:	2304      	movs	r3, #4
 8101128:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810112c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8101130:	4619      	mov	r1, r3
 8101132:	480d      	ldr	r0, [pc, #52]	@ (8101168 <HAL_I2C_MspInit+0xd0>)
 8101134:	f000 fd30 	bl	8101b98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8101138:	4b0a      	ldr	r3, [pc, #40]	@ (8101164 <HAL_I2C_MspInit+0xcc>)
 810113a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810113e:	4a09      	ldr	r2, [pc, #36]	@ (8101164 <HAL_I2C_MspInit+0xcc>)
 8101140:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8101144:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101148:	4b06      	ldr	r3, [pc, #24]	@ (8101164 <HAL_I2C_MspInit+0xcc>)
 810114a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810114e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8101152:	60bb      	str	r3, [r7, #8]
 8101154:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8101156:	bf00      	nop
 8101158:	37e8      	adds	r7, #232	@ 0xe8
 810115a:	46bd      	mov	sp, r7
 810115c:	bd80      	pop	{r7, pc}
 810115e:	bf00      	nop
 8101160:	40005800 	.word	0x40005800
 8101164:	58024400 	.word	0x58024400
 8101168:	58020400 	.word	0x58020400

0810116c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 810116c:	b580      	push	{r7, lr}
 810116e:	b0bc      	sub	sp, #240	@ 0xf0
 8101170:	af00      	add	r7, sp, #0
 8101172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101174:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101178:	2200      	movs	r2, #0
 810117a:	601a      	str	r2, [r3, #0]
 810117c:	605a      	str	r2, [r3, #4]
 810117e:	609a      	str	r2, [r3, #8]
 8101180:	60da      	str	r2, [r3, #12]
 8101182:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101184:	f107 0318 	add.w	r3, r7, #24
 8101188:	22c0      	movs	r2, #192	@ 0xc0
 810118a:	2100      	movs	r1, #0
 810118c:	4618      	mov	r0, r3
 810118e:	f005 f990 	bl	81064b2 <memset>
  if(hspi->Instance==SPI1)
 8101192:	687b      	ldr	r3, [r7, #4]
 8101194:	681b      	ldr	r3, [r3, #0]
 8101196:	4a38      	ldr	r2, [pc, #224]	@ (8101278 <HAL_SPI_MspInit+0x10c>)
 8101198:	4293      	cmp	r3, r2
 810119a:	d168      	bne.n	810126e <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 810119c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 81011a0:	f04f 0300 	mov.w	r3, #0
 81011a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 81011a8:	2300      	movs	r3, #0
 81011aa:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81011ac:	f107 0318 	add.w	r3, r7, #24
 81011b0:	4618      	mov	r0, r3
 81011b2:	f001 feed 	bl	8102f90 <HAL_RCCEx_PeriphCLKConfig>
 81011b6:	4603      	mov	r3, r0
 81011b8:	2b00      	cmp	r3, #0
 81011ba:	d001      	beq.n	81011c0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 81011bc:	f7ff ff28 	bl	8101010 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 81011c0:	4b2e      	ldr	r3, [pc, #184]	@ (810127c <HAL_SPI_MspInit+0x110>)
 81011c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81011c6:	4a2d      	ldr	r2, [pc, #180]	@ (810127c <HAL_SPI_MspInit+0x110>)
 81011c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 81011cc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 81011d0:	4b2a      	ldr	r3, [pc, #168]	@ (810127c <HAL_SPI_MspInit+0x110>)
 81011d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81011d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 81011da:	617b      	str	r3, [r7, #20]
 81011dc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81011de:	4b27      	ldr	r3, [pc, #156]	@ (810127c <HAL_SPI_MspInit+0x110>)
 81011e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011e4:	4a25      	ldr	r2, [pc, #148]	@ (810127c <HAL_SPI_MspInit+0x110>)
 81011e6:	f043 0301 	orr.w	r3, r3, #1
 81011ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81011ee:	4b23      	ldr	r3, [pc, #140]	@ (810127c <HAL_SPI_MspInit+0x110>)
 81011f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011f4:	f003 0301 	and.w	r3, r3, #1
 81011f8:	613b      	str	r3, [r7, #16]
 81011fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 81011fc:	4b1f      	ldr	r3, [pc, #124]	@ (810127c <HAL_SPI_MspInit+0x110>)
 81011fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101202:	4a1e      	ldr	r2, [pc, #120]	@ (810127c <HAL_SPI_MspInit+0x110>)
 8101204:	f043 0302 	orr.w	r3, r3, #2
 8101208:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810120c:	4b1b      	ldr	r3, [pc, #108]	@ (810127c <HAL_SPI_MspInit+0x110>)
 810120e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101212:	f003 0302 	and.w	r3, r3, #2
 8101216:	60fb      	str	r3, [r7, #12]
 8101218:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 810121a:	2360      	movs	r3, #96	@ 0x60
 810121c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101220:	2302      	movs	r3, #2
 8101222:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101226:	2300      	movs	r3, #0
 8101228:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810122c:	2300      	movs	r3, #0
 810122e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101232:	2305      	movs	r3, #5
 8101234:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101238:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 810123c:	4619      	mov	r1, r3
 810123e:	4810      	ldr	r0, [pc, #64]	@ (8101280 <HAL_SPI_MspInit+0x114>)
 8101240:	f000 fcaa 	bl	8101b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8101244:	2320      	movs	r3, #32
 8101246:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810124a:	2302      	movs	r3, #2
 810124c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101250:	2300      	movs	r3, #0
 8101252:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101256:	2300      	movs	r3, #0
 8101258:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 810125c:	2305      	movs	r3, #5
 810125e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101262:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101266:	4619      	mov	r1, r3
 8101268:	4806      	ldr	r0, [pc, #24]	@ (8101284 <HAL_SPI_MspInit+0x118>)
 810126a:	f000 fc95 	bl	8101b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 810126e:	bf00      	nop
 8101270:	37f0      	adds	r7, #240	@ 0xf0
 8101272:	46bd      	mov	sp, r7
 8101274:	bd80      	pop	{r7, pc}
 8101276:	bf00      	nop
 8101278:	40013000 	.word	0x40013000
 810127c:	58024400 	.word	0x58024400
 8101280:	58020000 	.word	0x58020000
 8101284:	58020400 	.word	0x58020400

08101288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101288:	b480      	push	{r7}
 810128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 810128c:	bf00      	nop
 810128e:	e7fd      	b.n	810128c <NMI_Handler+0x4>

08101290 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101290:	b480      	push	{r7}
 8101292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101294:	bf00      	nop
 8101296:	e7fd      	b.n	8101294 <HardFault_Handler+0x4>

08101298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101298:	b480      	push	{r7}
 810129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810129c:	bf00      	nop
 810129e:	e7fd      	b.n	810129c <MemManage_Handler+0x4>

081012a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81012a0:	b480      	push	{r7}
 81012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81012a4:	bf00      	nop
 81012a6:	e7fd      	b.n	81012a4 <BusFault_Handler+0x4>

081012a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81012a8:	b480      	push	{r7}
 81012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81012ac:	bf00      	nop
 81012ae:	e7fd      	b.n	81012ac <UsageFault_Handler+0x4>

081012b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81012b0:	b480      	push	{r7}
 81012b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81012b4:	bf00      	nop
 81012b6:	46bd      	mov	sp, r7
 81012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012bc:	4770      	bx	lr

081012be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81012be:	b480      	push	{r7}
 81012c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81012c2:	bf00      	nop
 81012c4:	46bd      	mov	sp, r7
 81012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012ca:	4770      	bx	lr

081012cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81012cc:	b480      	push	{r7}
 81012ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81012d0:	bf00      	nop
 81012d2:	46bd      	mov	sp, r7
 81012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012d8:	4770      	bx	lr

081012da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81012da:	b580      	push	{r7, lr}
 81012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81012de:	f000 fabf 	bl	8101860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81012e2:	bf00      	nop
 81012e4:	bd80      	pop	{r7, pc}

081012e6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 81012e6:	b580      	push	{r7, lr}
 81012e8:	b086      	sub	sp, #24
 81012ea:	af00      	add	r7, sp, #0
 81012ec:	60f8      	str	r0, [r7, #12]
 81012ee:	60b9      	str	r1, [r7, #8]
 81012f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81012f2:	2300      	movs	r3, #0
 81012f4:	617b      	str	r3, [r7, #20]
 81012f6:	e00a      	b.n	810130e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 81012f8:	f3af 8000 	nop.w
 81012fc:	4601      	mov	r1, r0
 81012fe:	68bb      	ldr	r3, [r7, #8]
 8101300:	1c5a      	adds	r2, r3, #1
 8101302:	60ba      	str	r2, [r7, #8]
 8101304:	b2ca      	uxtb	r2, r1
 8101306:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101308:	697b      	ldr	r3, [r7, #20]
 810130a:	3301      	adds	r3, #1
 810130c:	617b      	str	r3, [r7, #20]
 810130e:	697a      	ldr	r2, [r7, #20]
 8101310:	687b      	ldr	r3, [r7, #4]
 8101312:	429a      	cmp	r2, r3
 8101314:	dbf0      	blt.n	81012f8 <_read+0x12>
  }

  return len;
 8101316:	687b      	ldr	r3, [r7, #4]
}
 8101318:	4618      	mov	r0, r3
 810131a:	3718      	adds	r7, #24
 810131c:	46bd      	mov	sp, r7
 810131e:	bd80      	pop	{r7, pc}

08101320 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101320:	b580      	push	{r7, lr}
 8101322:	b086      	sub	sp, #24
 8101324:	af00      	add	r7, sp, #0
 8101326:	60f8      	str	r0, [r7, #12]
 8101328:	60b9      	str	r1, [r7, #8]
 810132a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810132c:	2300      	movs	r3, #0
 810132e:	617b      	str	r3, [r7, #20]
 8101330:	e009      	b.n	8101346 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8101332:	68bb      	ldr	r3, [r7, #8]
 8101334:	1c5a      	adds	r2, r3, #1
 8101336:	60ba      	str	r2, [r7, #8]
 8101338:	781b      	ldrb	r3, [r3, #0]
 810133a:	4618      	mov	r0, r3
 810133c:	f000 f980 	bl	8101640 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101340:	697b      	ldr	r3, [r7, #20]
 8101342:	3301      	adds	r3, #1
 8101344:	617b      	str	r3, [r7, #20]
 8101346:	697a      	ldr	r2, [r7, #20]
 8101348:	687b      	ldr	r3, [r7, #4]
 810134a:	429a      	cmp	r2, r3
 810134c:	dbf1      	blt.n	8101332 <_write+0x12>
  }
  return len;
 810134e:	687b      	ldr	r3, [r7, #4]
}
 8101350:	4618      	mov	r0, r3
 8101352:	3718      	adds	r7, #24
 8101354:	46bd      	mov	sp, r7
 8101356:	bd80      	pop	{r7, pc}

08101358 <_close>:

int _close(int file)
{
 8101358:	b480      	push	{r7}
 810135a:	b083      	sub	sp, #12
 810135c:	af00      	add	r7, sp, #0
 810135e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8101360:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101364:	4618      	mov	r0, r3
 8101366:	370c      	adds	r7, #12
 8101368:	46bd      	mov	sp, r7
 810136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810136e:	4770      	bx	lr

08101370 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101370:	b480      	push	{r7}
 8101372:	b083      	sub	sp, #12
 8101374:	af00      	add	r7, sp, #0
 8101376:	6078      	str	r0, [r7, #4]
 8101378:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 810137a:	683b      	ldr	r3, [r7, #0]
 810137c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8101380:	605a      	str	r2, [r3, #4]
  return 0;
 8101382:	2300      	movs	r3, #0
}
 8101384:	4618      	mov	r0, r3
 8101386:	370c      	adds	r7, #12
 8101388:	46bd      	mov	sp, r7
 810138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810138e:	4770      	bx	lr

08101390 <_isatty>:

int _isatty(int file)
{
 8101390:	b480      	push	{r7}
 8101392:	b083      	sub	sp, #12
 8101394:	af00      	add	r7, sp, #0
 8101396:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8101398:	2301      	movs	r3, #1
}
 810139a:	4618      	mov	r0, r3
 810139c:	370c      	adds	r7, #12
 810139e:	46bd      	mov	sp, r7
 81013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013a4:	4770      	bx	lr

081013a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 81013a6:	b480      	push	{r7}
 81013a8:	b085      	sub	sp, #20
 81013aa:	af00      	add	r7, sp, #0
 81013ac:	60f8      	str	r0, [r7, #12]
 81013ae:	60b9      	str	r1, [r7, #8]
 81013b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 81013b2:	2300      	movs	r3, #0
}
 81013b4:	4618      	mov	r0, r3
 81013b6:	3714      	adds	r7, #20
 81013b8:	46bd      	mov	sp, r7
 81013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013be:	4770      	bx	lr

081013c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 81013c0:	b580      	push	{r7, lr}
 81013c2:	b086      	sub	sp, #24
 81013c4:	af00      	add	r7, sp, #0
 81013c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 81013c8:	4a14      	ldr	r2, [pc, #80]	@ (810141c <_sbrk+0x5c>)
 81013ca:	4b15      	ldr	r3, [pc, #84]	@ (8101420 <_sbrk+0x60>)
 81013cc:	1ad3      	subs	r3, r2, r3
 81013ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 81013d0:	697b      	ldr	r3, [r7, #20]
 81013d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 81013d4:	4b13      	ldr	r3, [pc, #76]	@ (8101424 <_sbrk+0x64>)
 81013d6:	681b      	ldr	r3, [r3, #0]
 81013d8:	2b00      	cmp	r3, #0
 81013da:	d102      	bne.n	81013e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 81013dc:	4b11      	ldr	r3, [pc, #68]	@ (8101424 <_sbrk+0x64>)
 81013de:	4a12      	ldr	r2, [pc, #72]	@ (8101428 <_sbrk+0x68>)
 81013e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 81013e2:	4b10      	ldr	r3, [pc, #64]	@ (8101424 <_sbrk+0x64>)
 81013e4:	681a      	ldr	r2, [r3, #0]
 81013e6:	687b      	ldr	r3, [r7, #4]
 81013e8:	4413      	add	r3, r2
 81013ea:	693a      	ldr	r2, [r7, #16]
 81013ec:	429a      	cmp	r2, r3
 81013ee:	d207      	bcs.n	8101400 <_sbrk+0x40>
  {
    errno = ENOMEM;
 81013f0:	f005 f8ae 	bl	8106550 <__errno>
 81013f4:	4603      	mov	r3, r0
 81013f6:	220c      	movs	r2, #12
 81013f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 81013fa:	f04f 33ff 	mov.w	r3, #4294967295
 81013fe:	e009      	b.n	8101414 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101400:	4b08      	ldr	r3, [pc, #32]	@ (8101424 <_sbrk+0x64>)
 8101402:	681b      	ldr	r3, [r3, #0]
 8101404:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101406:	4b07      	ldr	r3, [pc, #28]	@ (8101424 <_sbrk+0x64>)
 8101408:	681a      	ldr	r2, [r3, #0]
 810140a:	687b      	ldr	r3, [r7, #4]
 810140c:	4413      	add	r3, r2
 810140e:	4a05      	ldr	r2, [pc, #20]	@ (8101424 <_sbrk+0x64>)
 8101410:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101412:	68fb      	ldr	r3, [r7, #12]
}
 8101414:	4618      	mov	r0, r3
 8101416:	3718      	adds	r7, #24
 8101418:	46bd      	mov	sp, r7
 810141a:	bd80      	pop	{r7, pc}
 810141c:	10048000 	.word	0x10048000
 8101420:	00000400 	.word	0x00000400
 8101424:	100001cc 	.word	0x100001cc
 8101428:	100003c0 	.word	0x100003c0

0810142c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 810142c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8101464 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101430:	f7ff fc54 	bl	8100cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101434:	480c      	ldr	r0, [pc, #48]	@ (8101468 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101436:	490d      	ldr	r1, [pc, #52]	@ (810146c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101438:	4a0d      	ldr	r2, [pc, #52]	@ (8101470 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810143a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 810143c:	e002      	b.n	8101444 <LoopCopyDataInit>

0810143e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810143e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101442:	3304      	adds	r3, #4

08101444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101448:	d3f9      	bcc.n	810143e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810144a:	4a0a      	ldr	r2, [pc, #40]	@ (8101474 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 810144c:	4c0a      	ldr	r4, [pc, #40]	@ (8101478 <LoopFillZerobss+0x22>)
  movs r3, #0
 810144e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101450:	e001      	b.n	8101456 <LoopFillZerobss>

08101452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101454:	3204      	adds	r2, #4

08101456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101458:	d3fb      	bcc.n	8101452 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810145a:	f005 f87f 	bl	810655c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810145e:	f7ff fc55 	bl	8100d0c <main>
  bx  lr
 8101462:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101464:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101468:	10000000 	.word	0x10000000
  ldr r1, =_edata
 810146c:	1000007c 	.word	0x1000007c
  ldr r2, =_sidata
 8101470:	08107510 	.word	0x08107510
  ldr r2, =_sbss
 8101474:	1000007c 	.word	0x1000007c
  ldr r4, =_ebss
 8101478:	100003c0 	.word	0x100003c0

0810147c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810147c:	e7fe      	b.n	810147c <ADC3_IRQHandler>
	...

08101480 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8101480:	b580      	push	{r7, lr}
 8101482:	b088      	sub	sp, #32
 8101484:	af00      	add	r7, sp, #0
 8101486:	4603      	mov	r3, r0
 8101488:	460a      	mov	r2, r1
 810148a:	71fb      	strb	r3, [r7, #7]
 810148c:	4613      	mov	r3, r2
 810148e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8101490:	4b2e      	ldr	r3, [pc, #184]	@ (810154c <BSP_PB_Init+0xcc>)
 8101492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101496:	4a2d      	ldr	r2, [pc, #180]	@ (810154c <BSP_PB_Init+0xcc>)
 8101498:	f043 0304 	orr.w	r3, r3, #4
 810149c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81014a0:	4b2a      	ldr	r3, [pc, #168]	@ (810154c <BSP_PB_Init+0xcc>)
 81014a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81014a6:	f003 0304 	and.w	r3, r3, #4
 81014aa:	60bb      	str	r3, [r7, #8]
 81014ac:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 81014ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 81014b2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 81014b4:	2302      	movs	r3, #2
 81014b6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 81014b8:	2302      	movs	r3, #2
 81014ba:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 81014bc:	79bb      	ldrb	r3, [r7, #6]
 81014be:	2b00      	cmp	r3, #0
 81014c0:	d10c      	bne.n	81014dc <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 81014c2:	2300      	movs	r3, #0
 81014c4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 81014c6:	79fb      	ldrb	r3, [r7, #7]
 81014c8:	4a21      	ldr	r2, [pc, #132]	@ (8101550 <BSP_PB_Init+0xd0>)
 81014ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81014ce:	f107 020c 	add.w	r2, r7, #12
 81014d2:	4611      	mov	r1, r2
 81014d4:	4618      	mov	r0, r3
 81014d6:	f000 fb5f 	bl	8101b98 <HAL_GPIO_Init>
 81014da:	e031      	b.n	8101540 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 81014dc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 81014e0:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 81014e2:	79fb      	ldrb	r3, [r7, #7]
 81014e4:	4a1a      	ldr	r2, [pc, #104]	@ (8101550 <BSP_PB_Init+0xd0>)
 81014e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81014ea:	f107 020c 	add.w	r2, r7, #12
 81014ee:	4611      	mov	r1, r2
 81014f0:	4618      	mov	r0, r3
 81014f2:	f000 fb51 	bl	8101b98 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 81014f6:	79fb      	ldrb	r3, [r7, #7]
 81014f8:	00db      	lsls	r3, r3, #3
 81014fa:	4a16      	ldr	r2, [pc, #88]	@ (8101554 <BSP_PB_Init+0xd4>)
 81014fc:	441a      	add	r2, r3
 81014fe:	79fb      	ldrb	r3, [r7, #7]
 8101500:	4915      	ldr	r1, [pc, #84]	@ (8101558 <BSP_PB_Init+0xd8>)
 8101502:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8101506:	4619      	mov	r1, r3
 8101508:	4610      	mov	r0, r2
 810150a:	f000 fb30 	bl	8101b6e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 810150e:	79fb      	ldrb	r3, [r7, #7]
 8101510:	00db      	lsls	r3, r3, #3
 8101512:	4a10      	ldr	r2, [pc, #64]	@ (8101554 <BSP_PB_Init+0xd4>)
 8101514:	1898      	adds	r0, r3, r2
 8101516:	79fb      	ldrb	r3, [r7, #7]
 8101518:	4a10      	ldr	r2, [pc, #64]	@ (810155c <BSP_PB_Init+0xdc>)
 810151a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810151e:	461a      	mov	r2, r3
 8101520:	2100      	movs	r1, #0
 8101522:	f000 fb05 	bl	8101b30 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8101526:	2028      	movs	r0, #40	@ 0x28
 8101528:	79fb      	ldrb	r3, [r7, #7]
 810152a:	4a0d      	ldr	r2, [pc, #52]	@ (8101560 <BSP_PB_Init+0xe0>)
 810152c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101530:	2200      	movs	r2, #0
 8101532:	4619      	mov	r1, r3
 8101534:	f000 fab3 	bl	8101a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8101538:	2328      	movs	r3, #40	@ 0x28
 810153a:	4618      	mov	r0, r3
 810153c:	f000 fac9 	bl	8101ad2 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8101540:	2300      	movs	r3, #0
}
 8101542:	4618      	mov	r0, r3
 8101544:	3720      	adds	r7, #32
 8101546:	46bd      	mov	sp, r7
 8101548:	bd80      	pop	{r7, pc}
 810154a:	bf00      	nop
 810154c:	58024400 	.word	0x58024400
 8101550:	1000000c 	.word	0x1000000c
 8101554:	100001d0 	.word	0x100001d0
 8101558:	081074ac 	.word	0x081074ac
 810155c:	10000010 	.word	0x10000010
 8101560:	10000014 	.word	0x10000014

08101564 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8101564:	b480      	push	{r7}
 8101566:	b083      	sub	sp, #12
 8101568:	af00      	add	r7, sp, #0
 810156a:	4603      	mov	r3, r0
 810156c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 810156e:	bf00      	nop
 8101570:	370c      	adds	r7, #12
 8101572:	46bd      	mov	sp, r7
 8101574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101578:	4770      	bx	lr
	...

0810157c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 810157c:	b580      	push	{r7, lr}
 810157e:	b084      	sub	sp, #16
 8101580:	af00      	add	r7, sp, #0
 8101582:	4603      	mov	r3, r0
 8101584:	6039      	str	r1, [r7, #0]
 8101586:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8101588:	2300      	movs	r3, #0
 810158a:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 810158c:	79fb      	ldrb	r3, [r7, #7]
 810158e:	2b00      	cmp	r3, #0
 8101590:	d003      	beq.n	810159a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8101592:	f06f 0301 	mvn.w	r3, #1
 8101596:	60fb      	str	r3, [r7, #12]
 8101598:	e018      	b.n	81015cc <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 810159a:	79fb      	ldrb	r3, [r7, #7]
 810159c:	2294      	movs	r2, #148	@ 0x94
 810159e:	fb02 f303 	mul.w	r3, r2, r3
 81015a2:	4a0d      	ldr	r2, [pc, #52]	@ (81015d8 <BSP_COM_Init+0x5c>)
 81015a4:	4413      	add	r3, r2
 81015a6:	4618      	mov	r0, r3
 81015a8:	f000 f86e 	bl	8101688 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 81015ac:	79fb      	ldrb	r3, [r7, #7]
 81015ae:	2294      	movs	r2, #148	@ 0x94
 81015b0:	fb02 f303 	mul.w	r3, r2, r3
 81015b4:	4a08      	ldr	r2, [pc, #32]	@ (81015d8 <BSP_COM_Init+0x5c>)
 81015b6:	4413      	add	r3, r2
 81015b8:	6839      	ldr	r1, [r7, #0]
 81015ba:	4618      	mov	r0, r3
 81015bc:	f000 f80e 	bl	81015dc <MX_USART3_Init>
 81015c0:	4603      	mov	r3, r0
 81015c2:	2b00      	cmp	r3, #0
 81015c4:	d002      	beq.n	81015cc <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 81015c6:	f06f 0303 	mvn.w	r3, #3
 81015ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 81015cc:	68fb      	ldr	r3, [r7, #12]
}
 81015ce:	4618      	mov	r0, r3
 81015d0:	3710      	adds	r7, #16
 81015d2:	46bd      	mov	sp, r7
 81015d4:	bd80      	pop	{r7, pc}
 81015d6:	bf00      	nop
 81015d8:	100001d8 	.word	0x100001d8

081015dc <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 81015dc:	b580      	push	{r7, lr}
 81015de:	b082      	sub	sp, #8
 81015e0:	af00      	add	r7, sp, #0
 81015e2:	6078      	str	r0, [r7, #4]
 81015e4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 81015e6:	4b15      	ldr	r3, [pc, #84]	@ (810163c <MX_USART3_Init+0x60>)
 81015e8:	681a      	ldr	r2, [r3, #0]
 81015ea:	687b      	ldr	r3, [r7, #4]
 81015ec:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 81015ee:	683b      	ldr	r3, [r7, #0]
 81015f0:	681a      	ldr	r2, [r3, #0]
 81015f2:	687b      	ldr	r3, [r7, #4]
 81015f4:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 81015f6:	687b      	ldr	r3, [r7, #4]
 81015f8:	220c      	movs	r2, #12
 81015fa:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 81015fc:	683b      	ldr	r3, [r7, #0]
 81015fe:	895b      	ldrh	r3, [r3, #10]
 8101600:	461a      	mov	r2, r3
 8101602:	687b      	ldr	r3, [r7, #4]
 8101604:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8101606:	683b      	ldr	r3, [r7, #0]
 8101608:	685a      	ldr	r2, [r3, #4]
 810160a:	687b      	ldr	r3, [r7, #4]
 810160c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 810160e:	683b      	ldr	r3, [r7, #0]
 8101610:	891b      	ldrh	r3, [r3, #8]
 8101612:	461a      	mov	r2, r3
 8101614:	687b      	ldr	r3, [r7, #4]
 8101616:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8101618:	683b      	ldr	r3, [r7, #0]
 810161a:	899b      	ldrh	r3, [r3, #12]
 810161c:	461a      	mov	r2, r3
 810161e:	687b      	ldr	r3, [r7, #4]
 8101620:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8101622:	687b      	ldr	r3, [r7, #4]
 8101624:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8101628:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 810162a:	6878      	ldr	r0, [r7, #4]
 810162c:	f003 fc1b 	bl	8104e66 <HAL_UART_Init>
 8101630:	4603      	mov	r3, r0
}
 8101632:	4618      	mov	r0, r3
 8101634:	3708      	adds	r7, #8
 8101636:	46bd      	mov	sp, r7
 8101638:	bd80      	pop	{r7, pc}
 810163a:	bf00      	nop
 810163c:	10000008 	.word	0x10000008

08101640 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8101640:	b580      	push	{r7, lr}
 8101642:	b082      	sub	sp, #8
 8101644:	af00      	add	r7, sp, #0
 8101646:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8101648:	4b09      	ldr	r3, [pc, #36]	@ (8101670 <__io_putchar+0x30>)
 810164a:	781b      	ldrb	r3, [r3, #0]
 810164c:	461a      	mov	r2, r3
 810164e:	2394      	movs	r3, #148	@ 0x94
 8101650:	fb02 f303 	mul.w	r3, r2, r3
 8101654:	4a07      	ldr	r2, [pc, #28]	@ (8101674 <__io_putchar+0x34>)
 8101656:	1898      	adds	r0, r3, r2
 8101658:	1d39      	adds	r1, r7, #4
 810165a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 810165e:	2201      	movs	r2, #1
 8101660:	f003 fc5b 	bl	8104f1a <HAL_UART_Transmit>
  return ch;
 8101664:	687b      	ldr	r3, [r7, #4]
}
 8101666:	4618      	mov	r0, r3
 8101668:	3708      	adds	r7, #8
 810166a:	46bd      	mov	sp, r7
 810166c:	bd80      	pop	{r7, pc}
 810166e:	bf00      	nop
 8101670:	1000026c 	.word	0x1000026c
 8101674:	100001d8 	.word	0x100001d8

08101678 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8101678:	b580      	push	{r7, lr}
 810167a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 810167c:	2000      	movs	r0, #0
 810167e:	f7ff ff71 	bl	8101564 <BSP_PB_Callback>
}
 8101682:	bf00      	nop
 8101684:	bd80      	pop	{r7, pc}
	...

08101688 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8101688:	b580      	push	{r7, lr}
 810168a:	b08a      	sub	sp, #40	@ 0x28
 810168c:	af00      	add	r7, sp, #0
 810168e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8101690:	4b27      	ldr	r3, [pc, #156]	@ (8101730 <COM1_MspInit+0xa8>)
 8101692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101696:	4a26      	ldr	r2, [pc, #152]	@ (8101730 <COM1_MspInit+0xa8>)
 8101698:	f043 0308 	orr.w	r3, r3, #8
 810169c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81016a0:	4b23      	ldr	r3, [pc, #140]	@ (8101730 <COM1_MspInit+0xa8>)
 81016a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016a6:	f003 0308 	and.w	r3, r3, #8
 81016aa:	613b      	str	r3, [r7, #16]
 81016ac:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 81016ae:	4b20      	ldr	r3, [pc, #128]	@ (8101730 <COM1_MspInit+0xa8>)
 81016b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016b4:	4a1e      	ldr	r2, [pc, #120]	@ (8101730 <COM1_MspInit+0xa8>)
 81016b6:	f043 0308 	orr.w	r3, r3, #8
 81016ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81016be:	4b1c      	ldr	r3, [pc, #112]	@ (8101730 <COM1_MspInit+0xa8>)
 81016c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81016c4:	f003 0308 	and.w	r3, r3, #8
 81016c8:	60fb      	str	r3, [r7, #12]
 81016ca:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 81016cc:	4b18      	ldr	r3, [pc, #96]	@ (8101730 <COM1_MspInit+0xa8>)
 81016ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81016d2:	4a17      	ldr	r2, [pc, #92]	@ (8101730 <COM1_MspInit+0xa8>)
 81016d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 81016d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81016dc:	4b14      	ldr	r3, [pc, #80]	@ (8101730 <COM1_MspInit+0xa8>)
 81016de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81016e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 81016e6:	60bb      	str	r3, [r7, #8]
 81016e8:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 81016ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 81016ee:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 81016f0:	2302      	movs	r3, #2
 81016f2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 81016f4:	2302      	movs	r3, #2
 81016f6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 81016f8:	2301      	movs	r3, #1
 81016fa:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 81016fc:	2307      	movs	r3, #7
 81016fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8101700:	f107 0314 	add.w	r3, r7, #20
 8101704:	4619      	mov	r1, r3
 8101706:	480b      	ldr	r0, [pc, #44]	@ (8101734 <COM1_MspInit+0xac>)
 8101708:	f000 fa46 	bl	8101b98 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 810170c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8101710:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8101712:	2302      	movs	r3, #2
 8101714:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8101716:	2307      	movs	r3, #7
 8101718:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 810171a:	f107 0314 	add.w	r3, r7, #20
 810171e:	4619      	mov	r1, r3
 8101720:	4804      	ldr	r0, [pc, #16]	@ (8101734 <COM1_MspInit+0xac>)
 8101722:	f000 fa39 	bl	8101b98 <HAL_GPIO_Init>
}
 8101726:	bf00      	nop
 8101728:	3728      	adds	r7, #40	@ 0x28
 810172a:	46bd      	mov	sp, r7
 810172c:	bd80      	pop	{r7, pc}
 810172e:	bf00      	nop
 8101730:	58024400 	.word	0x58024400
 8101734:	58020c00 	.word	0x58020c00

08101738 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101738:	b580      	push	{r7, lr}
 810173a:	b082      	sub	sp, #8
 810173c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810173e:	4b28      	ldr	r3, [pc, #160]	@ (81017e0 <HAL_Init+0xa8>)
 8101740:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101744:	4a26      	ldr	r2, [pc, #152]	@ (81017e0 <HAL_Init+0xa8>)
 8101746:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 810174a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810174e:	4b24      	ldr	r3, [pc, #144]	@ (81017e0 <HAL_Init+0xa8>)
 8101750:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101754:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8101758:	603b      	str	r3, [r7, #0]
 810175a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 810175c:	4b21      	ldr	r3, [pc, #132]	@ (81017e4 <HAL_Init+0xac>)
 810175e:	681b      	ldr	r3, [r3, #0]
 8101760:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8101764:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8101768:	4a1e      	ldr	r2, [pc, #120]	@ (81017e4 <HAL_Init+0xac>)
 810176a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 810176e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101770:	4b1c      	ldr	r3, [pc, #112]	@ (81017e4 <HAL_Init+0xac>)
 8101772:	681b      	ldr	r3, [r3, #0]
 8101774:	4a1b      	ldr	r2, [pc, #108]	@ (81017e4 <HAL_Init+0xac>)
 8101776:	f043 0301 	orr.w	r3, r3, #1
 810177a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 810177c:	2003      	movs	r0, #3
 810177e:	f000 f983 	bl	8101a88 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101782:	f001 fa2d 	bl	8102be0 <HAL_RCC_GetSysClockFreq>
 8101786:	4602      	mov	r2, r0
 8101788:	4b15      	ldr	r3, [pc, #84]	@ (81017e0 <HAL_Init+0xa8>)
 810178a:	699b      	ldr	r3, [r3, #24]
 810178c:	0a1b      	lsrs	r3, r3, #8
 810178e:	f003 030f 	and.w	r3, r3, #15
 8101792:	4915      	ldr	r1, [pc, #84]	@ (81017e8 <HAL_Init+0xb0>)
 8101794:	5ccb      	ldrb	r3, [r1, r3]
 8101796:	f003 031f 	and.w	r3, r3, #31
 810179a:	fa22 f303 	lsr.w	r3, r2, r3
 810179e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81017a0:	4b0f      	ldr	r3, [pc, #60]	@ (81017e0 <HAL_Init+0xa8>)
 81017a2:	699b      	ldr	r3, [r3, #24]
 81017a4:	f003 030f 	and.w	r3, r3, #15
 81017a8:	4a0f      	ldr	r2, [pc, #60]	@ (81017e8 <HAL_Init+0xb0>)
 81017aa:	5cd3      	ldrb	r3, [r2, r3]
 81017ac:	f003 031f 	and.w	r3, r3, #31
 81017b0:	687a      	ldr	r2, [r7, #4]
 81017b2:	fa22 f303 	lsr.w	r3, r2, r3
 81017b6:	4a0d      	ldr	r2, [pc, #52]	@ (81017ec <HAL_Init+0xb4>)
 81017b8:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81017ba:	4b0c      	ldr	r3, [pc, #48]	@ (81017ec <HAL_Init+0xb4>)
 81017bc:	681b      	ldr	r3, [r3, #0]
 81017be:	4a0c      	ldr	r2, [pc, #48]	@ (81017f0 <HAL_Init+0xb8>)
 81017c0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81017c2:	2000      	movs	r0, #0
 81017c4:	f000 f816 	bl	81017f4 <HAL_InitTick>
 81017c8:	4603      	mov	r3, r0
 81017ca:	2b00      	cmp	r3, #0
 81017cc:	d001      	beq.n	81017d2 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81017ce:	2301      	movs	r3, #1
 81017d0:	e002      	b.n	81017d8 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81017d2:	f7ff fc47 	bl	8101064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81017d6:	2300      	movs	r3, #0
}
 81017d8:	4618      	mov	r0, r3
 81017da:	3708      	adds	r7, #8
 81017dc:	46bd      	mov	sp, r7
 81017de:	bd80      	pop	{r7, pc}
 81017e0:	58024400 	.word	0x58024400
 81017e4:	40024400 	.word	0x40024400
 81017e8:	0810749c 	.word	0x0810749c
 81017ec:	10000004 	.word	0x10000004
 81017f0:	10000000 	.word	0x10000000

081017f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81017f4:	b580      	push	{r7, lr}
 81017f6:	b082      	sub	sp, #8
 81017f8:	af00      	add	r7, sp, #0
 81017fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81017fc:	4b15      	ldr	r3, [pc, #84]	@ (8101854 <HAL_InitTick+0x60>)
 81017fe:	781b      	ldrb	r3, [r3, #0]
 8101800:	2b00      	cmp	r3, #0
 8101802:	d101      	bne.n	8101808 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101804:	2301      	movs	r3, #1
 8101806:	e021      	b.n	810184c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101808:	4b13      	ldr	r3, [pc, #76]	@ (8101858 <HAL_InitTick+0x64>)
 810180a:	681a      	ldr	r2, [r3, #0]
 810180c:	4b11      	ldr	r3, [pc, #68]	@ (8101854 <HAL_InitTick+0x60>)
 810180e:	781b      	ldrb	r3, [r3, #0]
 8101810:	4619      	mov	r1, r3
 8101812:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8101816:	fbb3 f3f1 	udiv	r3, r3, r1
 810181a:	fbb2 f3f3 	udiv	r3, r2, r3
 810181e:	4618      	mov	r0, r3
 8101820:	f000 f965 	bl	8101aee <HAL_SYSTICK_Config>
 8101824:	4603      	mov	r3, r0
 8101826:	2b00      	cmp	r3, #0
 8101828:	d001      	beq.n	810182e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810182a:	2301      	movs	r3, #1
 810182c:	e00e      	b.n	810184c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810182e:	687b      	ldr	r3, [r7, #4]
 8101830:	2b0f      	cmp	r3, #15
 8101832:	d80a      	bhi.n	810184a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101834:	2200      	movs	r2, #0
 8101836:	6879      	ldr	r1, [r7, #4]
 8101838:	f04f 30ff 	mov.w	r0, #4294967295
 810183c:	f000 f92f 	bl	8101a9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101840:	4a06      	ldr	r2, [pc, #24]	@ (810185c <HAL_InitTick+0x68>)
 8101842:	687b      	ldr	r3, [r7, #4]
 8101844:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101846:	2300      	movs	r3, #0
 8101848:	e000      	b.n	810184c <HAL_InitTick+0x58>
    return HAL_ERROR;
 810184a:	2301      	movs	r3, #1
}
 810184c:	4618      	mov	r0, r3
 810184e:	3708      	adds	r7, #8
 8101850:	46bd      	mov	sp, r7
 8101852:	bd80      	pop	{r7, pc}
 8101854:	1000001c 	.word	0x1000001c
 8101858:	10000000 	.word	0x10000000
 810185c:	10000018 	.word	0x10000018

08101860 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101860:	b480      	push	{r7}
 8101862:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101864:	4b06      	ldr	r3, [pc, #24]	@ (8101880 <HAL_IncTick+0x20>)
 8101866:	781b      	ldrb	r3, [r3, #0]
 8101868:	461a      	mov	r2, r3
 810186a:	4b06      	ldr	r3, [pc, #24]	@ (8101884 <HAL_IncTick+0x24>)
 810186c:	681b      	ldr	r3, [r3, #0]
 810186e:	4413      	add	r3, r2
 8101870:	4a04      	ldr	r2, [pc, #16]	@ (8101884 <HAL_IncTick+0x24>)
 8101872:	6013      	str	r3, [r2, #0]
}
 8101874:	bf00      	nop
 8101876:	46bd      	mov	sp, r7
 8101878:	f85d 7b04 	ldr.w	r7, [sp], #4
 810187c:	4770      	bx	lr
 810187e:	bf00      	nop
 8101880:	1000001c 	.word	0x1000001c
 8101884:	10000270 	.word	0x10000270

08101888 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101888:	b480      	push	{r7}
 810188a:	af00      	add	r7, sp, #0
  return uwTick;
 810188c:	4b03      	ldr	r3, [pc, #12]	@ (810189c <HAL_GetTick+0x14>)
 810188e:	681b      	ldr	r3, [r3, #0]
}
 8101890:	4618      	mov	r0, r3
 8101892:	46bd      	mov	sp, r7
 8101894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101898:	4770      	bx	lr
 810189a:	bf00      	nop
 810189c:	10000270 	.word	0x10000270

081018a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81018a0:	b580      	push	{r7, lr}
 81018a2:	b084      	sub	sp, #16
 81018a4:	af00      	add	r7, sp, #0
 81018a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81018a8:	f7ff ffee 	bl	8101888 <HAL_GetTick>
 81018ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81018ae:	687b      	ldr	r3, [r7, #4]
 81018b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81018b2:	68fb      	ldr	r3, [r7, #12]
 81018b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81018b8:	d005      	beq.n	81018c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81018ba:	4b0a      	ldr	r3, [pc, #40]	@ (81018e4 <HAL_Delay+0x44>)
 81018bc:	781b      	ldrb	r3, [r3, #0]
 81018be:	461a      	mov	r2, r3
 81018c0:	68fb      	ldr	r3, [r7, #12]
 81018c2:	4413      	add	r3, r2
 81018c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81018c6:	bf00      	nop
 81018c8:	f7ff ffde 	bl	8101888 <HAL_GetTick>
 81018cc:	4602      	mov	r2, r0
 81018ce:	68bb      	ldr	r3, [r7, #8]
 81018d0:	1ad3      	subs	r3, r2, r3
 81018d2:	68fa      	ldr	r2, [r7, #12]
 81018d4:	429a      	cmp	r2, r3
 81018d6:	d8f7      	bhi.n	81018c8 <HAL_Delay+0x28>
  {
  }
}
 81018d8:	bf00      	nop
 81018da:	bf00      	nop
 81018dc:	3710      	adds	r7, #16
 81018de:	46bd      	mov	sp, r7
 81018e0:	bd80      	pop	{r7, pc}
 81018e2:	bf00      	nop
 81018e4:	1000001c 	.word	0x1000001c

081018e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81018e8:	b480      	push	{r7}
 81018ea:	b085      	sub	sp, #20
 81018ec:	af00      	add	r7, sp, #0
 81018ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81018f0:	687b      	ldr	r3, [r7, #4]
 81018f2:	f003 0307 	and.w	r3, r3, #7
 81018f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81018f8:	4b0c      	ldr	r3, [pc, #48]	@ (810192c <__NVIC_SetPriorityGrouping+0x44>)
 81018fa:	68db      	ldr	r3, [r3, #12]
 81018fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81018fe:	68ba      	ldr	r2, [r7, #8]
 8101900:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8101904:	4013      	ands	r3, r2
 8101906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101908:	68fb      	ldr	r3, [r7, #12]
 810190a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810190c:	68bb      	ldr	r3, [r7, #8]
 810190e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101910:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8101914:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810191a:	4a04      	ldr	r2, [pc, #16]	@ (810192c <__NVIC_SetPriorityGrouping+0x44>)
 810191c:	68bb      	ldr	r3, [r7, #8]
 810191e:	60d3      	str	r3, [r2, #12]
}
 8101920:	bf00      	nop
 8101922:	3714      	adds	r7, #20
 8101924:	46bd      	mov	sp, r7
 8101926:	f85d 7b04 	ldr.w	r7, [sp], #4
 810192a:	4770      	bx	lr
 810192c:	e000ed00 	.word	0xe000ed00

08101930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101930:	b480      	push	{r7}
 8101932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101934:	4b04      	ldr	r3, [pc, #16]	@ (8101948 <__NVIC_GetPriorityGrouping+0x18>)
 8101936:	68db      	ldr	r3, [r3, #12]
 8101938:	0a1b      	lsrs	r3, r3, #8
 810193a:	f003 0307 	and.w	r3, r3, #7
}
 810193e:	4618      	mov	r0, r3
 8101940:	46bd      	mov	sp, r7
 8101942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101946:	4770      	bx	lr
 8101948:	e000ed00 	.word	0xe000ed00

0810194c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810194c:	b480      	push	{r7}
 810194e:	b083      	sub	sp, #12
 8101950:	af00      	add	r7, sp, #0
 8101952:	4603      	mov	r3, r0
 8101954:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101956:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810195a:	2b00      	cmp	r3, #0
 810195c:	db0b      	blt.n	8101976 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810195e:	88fb      	ldrh	r3, [r7, #6]
 8101960:	f003 021f 	and.w	r2, r3, #31
 8101964:	4907      	ldr	r1, [pc, #28]	@ (8101984 <__NVIC_EnableIRQ+0x38>)
 8101966:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810196a:	095b      	lsrs	r3, r3, #5
 810196c:	2001      	movs	r0, #1
 810196e:	fa00 f202 	lsl.w	r2, r0, r2
 8101972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8101976:	bf00      	nop
 8101978:	370c      	adds	r7, #12
 810197a:	46bd      	mov	sp, r7
 810197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101980:	4770      	bx	lr
 8101982:	bf00      	nop
 8101984:	e000e100 	.word	0xe000e100

08101988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101988:	b480      	push	{r7}
 810198a:	b083      	sub	sp, #12
 810198c:	af00      	add	r7, sp, #0
 810198e:	4603      	mov	r3, r0
 8101990:	6039      	str	r1, [r7, #0]
 8101992:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101994:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101998:	2b00      	cmp	r3, #0
 810199a:	db0a      	blt.n	81019b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810199c:	683b      	ldr	r3, [r7, #0]
 810199e:	b2da      	uxtb	r2, r3
 81019a0:	490c      	ldr	r1, [pc, #48]	@ (81019d4 <__NVIC_SetPriority+0x4c>)
 81019a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81019a6:	0112      	lsls	r2, r2, #4
 81019a8:	b2d2      	uxtb	r2, r2
 81019aa:	440b      	add	r3, r1
 81019ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81019b0:	e00a      	b.n	81019c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81019b2:	683b      	ldr	r3, [r7, #0]
 81019b4:	b2da      	uxtb	r2, r3
 81019b6:	4908      	ldr	r1, [pc, #32]	@ (81019d8 <__NVIC_SetPriority+0x50>)
 81019b8:	88fb      	ldrh	r3, [r7, #6]
 81019ba:	f003 030f 	and.w	r3, r3, #15
 81019be:	3b04      	subs	r3, #4
 81019c0:	0112      	lsls	r2, r2, #4
 81019c2:	b2d2      	uxtb	r2, r2
 81019c4:	440b      	add	r3, r1
 81019c6:	761a      	strb	r2, [r3, #24]
}
 81019c8:	bf00      	nop
 81019ca:	370c      	adds	r7, #12
 81019cc:	46bd      	mov	sp, r7
 81019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019d2:	4770      	bx	lr
 81019d4:	e000e100 	.word	0xe000e100
 81019d8:	e000ed00 	.word	0xe000ed00

081019dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81019dc:	b480      	push	{r7}
 81019de:	b089      	sub	sp, #36	@ 0x24
 81019e0:	af00      	add	r7, sp, #0
 81019e2:	60f8      	str	r0, [r7, #12]
 81019e4:	60b9      	str	r1, [r7, #8]
 81019e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81019e8:	68fb      	ldr	r3, [r7, #12]
 81019ea:	f003 0307 	and.w	r3, r3, #7
 81019ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81019f0:	69fb      	ldr	r3, [r7, #28]
 81019f2:	f1c3 0307 	rsb	r3, r3, #7
 81019f6:	2b04      	cmp	r3, #4
 81019f8:	bf28      	it	cs
 81019fa:	2304      	movcs	r3, #4
 81019fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81019fe:	69fb      	ldr	r3, [r7, #28]
 8101a00:	3304      	adds	r3, #4
 8101a02:	2b06      	cmp	r3, #6
 8101a04:	d902      	bls.n	8101a0c <NVIC_EncodePriority+0x30>
 8101a06:	69fb      	ldr	r3, [r7, #28]
 8101a08:	3b03      	subs	r3, #3
 8101a0a:	e000      	b.n	8101a0e <NVIC_EncodePriority+0x32>
 8101a0c:	2300      	movs	r3, #0
 8101a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101a10:	f04f 32ff 	mov.w	r2, #4294967295
 8101a14:	69bb      	ldr	r3, [r7, #24]
 8101a16:	fa02 f303 	lsl.w	r3, r2, r3
 8101a1a:	43da      	mvns	r2, r3
 8101a1c:	68bb      	ldr	r3, [r7, #8]
 8101a1e:	401a      	ands	r2, r3
 8101a20:	697b      	ldr	r3, [r7, #20]
 8101a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101a24:	f04f 31ff 	mov.w	r1, #4294967295
 8101a28:	697b      	ldr	r3, [r7, #20]
 8101a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8101a2e:	43d9      	mvns	r1, r3
 8101a30:	687b      	ldr	r3, [r7, #4]
 8101a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101a34:	4313      	orrs	r3, r2
         );
}
 8101a36:	4618      	mov	r0, r3
 8101a38:	3724      	adds	r7, #36	@ 0x24
 8101a3a:	46bd      	mov	sp, r7
 8101a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a40:	4770      	bx	lr
	...

08101a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101a44:	b580      	push	{r7, lr}
 8101a46:	b082      	sub	sp, #8
 8101a48:	af00      	add	r7, sp, #0
 8101a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101a4c:	687b      	ldr	r3, [r7, #4]
 8101a4e:	3b01      	subs	r3, #1
 8101a50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8101a54:	d301      	bcc.n	8101a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101a56:	2301      	movs	r3, #1
 8101a58:	e00f      	b.n	8101a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8101a84 <SysTick_Config+0x40>)
 8101a5c:	687b      	ldr	r3, [r7, #4]
 8101a5e:	3b01      	subs	r3, #1
 8101a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101a62:	210f      	movs	r1, #15
 8101a64:	f04f 30ff 	mov.w	r0, #4294967295
 8101a68:	f7ff ff8e 	bl	8101988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101a6c:	4b05      	ldr	r3, [pc, #20]	@ (8101a84 <SysTick_Config+0x40>)
 8101a6e:	2200      	movs	r2, #0
 8101a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101a72:	4b04      	ldr	r3, [pc, #16]	@ (8101a84 <SysTick_Config+0x40>)
 8101a74:	2207      	movs	r2, #7
 8101a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101a78:	2300      	movs	r3, #0
}
 8101a7a:	4618      	mov	r0, r3
 8101a7c:	3708      	adds	r7, #8
 8101a7e:	46bd      	mov	sp, r7
 8101a80:	bd80      	pop	{r7, pc}
 8101a82:	bf00      	nop
 8101a84:	e000e010 	.word	0xe000e010

08101a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101a88:	b580      	push	{r7, lr}
 8101a8a:	b082      	sub	sp, #8
 8101a8c:	af00      	add	r7, sp, #0
 8101a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101a90:	6878      	ldr	r0, [r7, #4]
 8101a92:	f7ff ff29 	bl	81018e8 <__NVIC_SetPriorityGrouping>
}
 8101a96:	bf00      	nop
 8101a98:	3708      	adds	r7, #8
 8101a9a:	46bd      	mov	sp, r7
 8101a9c:	bd80      	pop	{r7, pc}

08101a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101a9e:	b580      	push	{r7, lr}
 8101aa0:	b086      	sub	sp, #24
 8101aa2:	af00      	add	r7, sp, #0
 8101aa4:	4603      	mov	r3, r0
 8101aa6:	60b9      	str	r1, [r7, #8]
 8101aa8:	607a      	str	r2, [r7, #4]
 8101aaa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101aac:	f7ff ff40 	bl	8101930 <__NVIC_GetPriorityGrouping>
 8101ab0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101ab2:	687a      	ldr	r2, [r7, #4]
 8101ab4:	68b9      	ldr	r1, [r7, #8]
 8101ab6:	6978      	ldr	r0, [r7, #20]
 8101ab8:	f7ff ff90 	bl	81019dc <NVIC_EncodePriority>
 8101abc:	4602      	mov	r2, r0
 8101abe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101ac2:	4611      	mov	r1, r2
 8101ac4:	4618      	mov	r0, r3
 8101ac6:	f7ff ff5f 	bl	8101988 <__NVIC_SetPriority>
}
 8101aca:	bf00      	nop
 8101acc:	3718      	adds	r7, #24
 8101ace:	46bd      	mov	sp, r7
 8101ad0:	bd80      	pop	{r7, pc}

08101ad2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101ad2:	b580      	push	{r7, lr}
 8101ad4:	b082      	sub	sp, #8
 8101ad6:	af00      	add	r7, sp, #0
 8101ad8:	4603      	mov	r3, r0
 8101ada:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8101adc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101ae0:	4618      	mov	r0, r3
 8101ae2:	f7ff ff33 	bl	810194c <__NVIC_EnableIRQ>
}
 8101ae6:	bf00      	nop
 8101ae8:	3708      	adds	r7, #8
 8101aea:	46bd      	mov	sp, r7
 8101aec:	bd80      	pop	{r7, pc}

08101aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101aee:	b580      	push	{r7, lr}
 8101af0:	b082      	sub	sp, #8
 8101af2:	af00      	add	r7, sp, #0
 8101af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101af6:	6878      	ldr	r0, [r7, #4]
 8101af8:	f7ff ffa4 	bl	8101a44 <SysTick_Config>
 8101afc:	4603      	mov	r3, r0
}
 8101afe:	4618      	mov	r0, r3
 8101b00:	3708      	adds	r7, #8
 8101b02:	46bd      	mov	sp, r7
 8101b04:	bd80      	pop	{r7, pc}
	...

08101b08 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101b08:	b480      	push	{r7}
 8101b0a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101b0c:	4b07      	ldr	r3, [pc, #28]	@ (8101b2c <HAL_GetCurrentCPUID+0x24>)
 8101b0e:	681b      	ldr	r3, [r3, #0]
 8101b10:	091b      	lsrs	r3, r3, #4
 8101b12:	f003 030f 	and.w	r3, r3, #15
 8101b16:	2b07      	cmp	r3, #7
 8101b18:	d101      	bne.n	8101b1e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101b1a:	2303      	movs	r3, #3
 8101b1c:	e000      	b.n	8101b20 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101b1e:	2301      	movs	r3, #1
  }
}
 8101b20:	4618      	mov	r0, r3
 8101b22:	46bd      	mov	sp, r7
 8101b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b28:	4770      	bx	lr
 8101b2a:	bf00      	nop
 8101b2c:	e000ed00 	.word	0xe000ed00

08101b30 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8101b30:	b480      	push	{r7}
 8101b32:	b087      	sub	sp, #28
 8101b34:	af00      	add	r7, sp, #0
 8101b36:	60f8      	str	r0, [r7, #12]
 8101b38:	460b      	mov	r3, r1
 8101b3a:	607a      	str	r2, [r7, #4]
 8101b3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8101b3e:	2300      	movs	r3, #0
 8101b40:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8101b42:	68fb      	ldr	r3, [r7, #12]
 8101b44:	2b00      	cmp	r3, #0
 8101b46:	d101      	bne.n	8101b4c <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8101b48:	2301      	movs	r3, #1
 8101b4a:	e00a      	b.n	8101b62 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8101b4c:	7afb      	ldrb	r3, [r7, #11]
 8101b4e:	2b00      	cmp	r3, #0
 8101b50:	d103      	bne.n	8101b5a <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8101b52:	68fb      	ldr	r3, [r7, #12]
 8101b54:	687a      	ldr	r2, [r7, #4]
 8101b56:	605a      	str	r2, [r3, #4]
      break;
 8101b58:	e002      	b.n	8101b60 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8101b5a:	2301      	movs	r3, #1
 8101b5c:	75fb      	strb	r3, [r7, #23]
      break;
 8101b5e:	bf00      	nop
  }

  return status;
 8101b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8101b62:	4618      	mov	r0, r3
 8101b64:	371c      	adds	r7, #28
 8101b66:	46bd      	mov	sp, r7
 8101b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b6c:	4770      	bx	lr

08101b6e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8101b6e:	b480      	push	{r7}
 8101b70:	b083      	sub	sp, #12
 8101b72:	af00      	add	r7, sp, #0
 8101b74:	6078      	str	r0, [r7, #4]
 8101b76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8101b78:	687b      	ldr	r3, [r7, #4]
 8101b7a:	2b00      	cmp	r3, #0
 8101b7c:	d101      	bne.n	8101b82 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8101b7e:	2301      	movs	r3, #1
 8101b80:	e003      	b.n	8101b8a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8101b82:	687b      	ldr	r3, [r7, #4]
 8101b84:	683a      	ldr	r2, [r7, #0]
 8101b86:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8101b88:	2300      	movs	r3, #0
  }
}
 8101b8a:	4618      	mov	r0, r3
 8101b8c:	370c      	adds	r7, #12
 8101b8e:	46bd      	mov	sp, r7
 8101b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b94:	4770      	bx	lr
	...

08101b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8101b98:	b480      	push	{r7}
 8101b9a:	b089      	sub	sp, #36	@ 0x24
 8101b9c:	af00      	add	r7, sp, #0
 8101b9e:	6078      	str	r0, [r7, #4]
 8101ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8101ba2:	2300      	movs	r3, #0
 8101ba4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8101ba6:	4b89      	ldr	r3, [pc, #548]	@ (8101dcc <HAL_GPIO_Init+0x234>)
 8101ba8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101baa:	e194      	b.n	8101ed6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101bac:	683b      	ldr	r3, [r7, #0]
 8101bae:	681a      	ldr	r2, [r3, #0]
 8101bb0:	2101      	movs	r1, #1
 8101bb2:	69fb      	ldr	r3, [r7, #28]
 8101bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8101bb8:	4013      	ands	r3, r2
 8101bba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8101bbc:	693b      	ldr	r3, [r7, #16]
 8101bbe:	2b00      	cmp	r3, #0
 8101bc0:	f000 8186 	beq.w	8101ed0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8101bc4:	683b      	ldr	r3, [r7, #0]
 8101bc6:	685b      	ldr	r3, [r3, #4]
 8101bc8:	f003 0303 	and.w	r3, r3, #3
 8101bcc:	2b01      	cmp	r3, #1
 8101bce:	d005      	beq.n	8101bdc <HAL_GPIO_Init+0x44>
 8101bd0:	683b      	ldr	r3, [r7, #0]
 8101bd2:	685b      	ldr	r3, [r3, #4]
 8101bd4:	f003 0303 	and.w	r3, r3, #3
 8101bd8:	2b02      	cmp	r3, #2
 8101bda:	d130      	bne.n	8101c3e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101bdc:	687b      	ldr	r3, [r7, #4]
 8101bde:	689b      	ldr	r3, [r3, #8]
 8101be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8101be2:	69fb      	ldr	r3, [r7, #28]
 8101be4:	005b      	lsls	r3, r3, #1
 8101be6:	2203      	movs	r2, #3
 8101be8:	fa02 f303 	lsl.w	r3, r2, r3
 8101bec:	43db      	mvns	r3, r3
 8101bee:	69ba      	ldr	r2, [r7, #24]
 8101bf0:	4013      	ands	r3, r2
 8101bf2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8101bf4:	683b      	ldr	r3, [r7, #0]
 8101bf6:	68da      	ldr	r2, [r3, #12]
 8101bf8:	69fb      	ldr	r3, [r7, #28]
 8101bfa:	005b      	lsls	r3, r3, #1
 8101bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8101c00:	69ba      	ldr	r2, [r7, #24]
 8101c02:	4313      	orrs	r3, r2
 8101c04:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8101c06:	687b      	ldr	r3, [r7, #4]
 8101c08:	69ba      	ldr	r2, [r7, #24]
 8101c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8101c0c:	687b      	ldr	r3, [r7, #4]
 8101c0e:	685b      	ldr	r3, [r3, #4]
 8101c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8101c12:	2201      	movs	r2, #1
 8101c14:	69fb      	ldr	r3, [r7, #28]
 8101c16:	fa02 f303 	lsl.w	r3, r2, r3
 8101c1a:	43db      	mvns	r3, r3
 8101c1c:	69ba      	ldr	r2, [r7, #24]
 8101c1e:	4013      	ands	r3, r2
 8101c20:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8101c22:	683b      	ldr	r3, [r7, #0]
 8101c24:	685b      	ldr	r3, [r3, #4]
 8101c26:	091b      	lsrs	r3, r3, #4
 8101c28:	f003 0201 	and.w	r2, r3, #1
 8101c2c:	69fb      	ldr	r3, [r7, #28]
 8101c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8101c32:	69ba      	ldr	r2, [r7, #24]
 8101c34:	4313      	orrs	r3, r2
 8101c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8101c38:	687b      	ldr	r3, [r7, #4]
 8101c3a:	69ba      	ldr	r2, [r7, #24]
 8101c3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8101c3e:	683b      	ldr	r3, [r7, #0]
 8101c40:	685b      	ldr	r3, [r3, #4]
 8101c42:	f003 0303 	and.w	r3, r3, #3
 8101c46:	2b03      	cmp	r3, #3
 8101c48:	d017      	beq.n	8101c7a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8101c4a:	687b      	ldr	r3, [r7, #4]
 8101c4c:	68db      	ldr	r3, [r3, #12]
 8101c4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8101c50:	69fb      	ldr	r3, [r7, #28]
 8101c52:	005b      	lsls	r3, r3, #1
 8101c54:	2203      	movs	r2, #3
 8101c56:	fa02 f303 	lsl.w	r3, r2, r3
 8101c5a:	43db      	mvns	r3, r3
 8101c5c:	69ba      	ldr	r2, [r7, #24]
 8101c5e:	4013      	ands	r3, r2
 8101c60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8101c62:	683b      	ldr	r3, [r7, #0]
 8101c64:	689a      	ldr	r2, [r3, #8]
 8101c66:	69fb      	ldr	r3, [r7, #28]
 8101c68:	005b      	lsls	r3, r3, #1
 8101c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8101c6e:	69ba      	ldr	r2, [r7, #24]
 8101c70:	4313      	orrs	r3, r2
 8101c72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8101c74:	687b      	ldr	r3, [r7, #4]
 8101c76:	69ba      	ldr	r2, [r7, #24]
 8101c78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8101c7a:	683b      	ldr	r3, [r7, #0]
 8101c7c:	685b      	ldr	r3, [r3, #4]
 8101c7e:	f003 0303 	and.w	r3, r3, #3
 8101c82:	2b02      	cmp	r3, #2
 8101c84:	d123      	bne.n	8101cce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8101c86:	69fb      	ldr	r3, [r7, #28]
 8101c88:	08da      	lsrs	r2, r3, #3
 8101c8a:	687b      	ldr	r3, [r7, #4]
 8101c8c:	3208      	adds	r2, #8
 8101c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8101c94:	69fb      	ldr	r3, [r7, #28]
 8101c96:	f003 0307 	and.w	r3, r3, #7
 8101c9a:	009b      	lsls	r3, r3, #2
 8101c9c:	220f      	movs	r2, #15
 8101c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8101ca2:	43db      	mvns	r3, r3
 8101ca4:	69ba      	ldr	r2, [r7, #24]
 8101ca6:	4013      	ands	r3, r2
 8101ca8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8101caa:	683b      	ldr	r3, [r7, #0]
 8101cac:	691a      	ldr	r2, [r3, #16]
 8101cae:	69fb      	ldr	r3, [r7, #28]
 8101cb0:	f003 0307 	and.w	r3, r3, #7
 8101cb4:	009b      	lsls	r3, r3, #2
 8101cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8101cba:	69ba      	ldr	r2, [r7, #24]
 8101cbc:	4313      	orrs	r3, r2
 8101cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8101cc0:	69fb      	ldr	r3, [r7, #28]
 8101cc2:	08da      	lsrs	r2, r3, #3
 8101cc4:	687b      	ldr	r3, [r7, #4]
 8101cc6:	3208      	adds	r2, #8
 8101cc8:	69b9      	ldr	r1, [r7, #24]
 8101cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8101cce:	687b      	ldr	r3, [r7, #4]
 8101cd0:	681b      	ldr	r3, [r3, #0]
 8101cd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8101cd4:	69fb      	ldr	r3, [r7, #28]
 8101cd6:	005b      	lsls	r3, r3, #1
 8101cd8:	2203      	movs	r2, #3
 8101cda:	fa02 f303 	lsl.w	r3, r2, r3
 8101cde:	43db      	mvns	r3, r3
 8101ce0:	69ba      	ldr	r2, [r7, #24]
 8101ce2:	4013      	ands	r3, r2
 8101ce4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8101ce6:	683b      	ldr	r3, [r7, #0]
 8101ce8:	685b      	ldr	r3, [r3, #4]
 8101cea:	f003 0203 	and.w	r2, r3, #3
 8101cee:	69fb      	ldr	r3, [r7, #28]
 8101cf0:	005b      	lsls	r3, r3, #1
 8101cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8101cf6:	69ba      	ldr	r2, [r7, #24]
 8101cf8:	4313      	orrs	r3, r2
 8101cfa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8101cfc:	687b      	ldr	r3, [r7, #4]
 8101cfe:	69ba      	ldr	r2, [r7, #24]
 8101d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8101d02:	683b      	ldr	r3, [r7, #0]
 8101d04:	685b      	ldr	r3, [r3, #4]
 8101d06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8101d0a:	2b00      	cmp	r3, #0
 8101d0c:	f000 80e0 	beq.w	8101ed0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101d10:	4b2f      	ldr	r3, [pc, #188]	@ (8101dd0 <HAL_GPIO_Init+0x238>)
 8101d12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101d16:	4a2e      	ldr	r2, [pc, #184]	@ (8101dd0 <HAL_GPIO_Init+0x238>)
 8101d18:	f043 0302 	orr.w	r3, r3, #2
 8101d1c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8101d20:	4b2b      	ldr	r3, [pc, #172]	@ (8101dd0 <HAL_GPIO_Init+0x238>)
 8101d22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101d26:	f003 0302 	and.w	r3, r3, #2
 8101d2a:	60fb      	str	r3, [r7, #12]
 8101d2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8101d2e:	4a29      	ldr	r2, [pc, #164]	@ (8101dd4 <HAL_GPIO_Init+0x23c>)
 8101d30:	69fb      	ldr	r3, [r7, #28]
 8101d32:	089b      	lsrs	r3, r3, #2
 8101d34:	3302      	adds	r3, #2
 8101d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8101d3c:	69fb      	ldr	r3, [r7, #28]
 8101d3e:	f003 0303 	and.w	r3, r3, #3
 8101d42:	009b      	lsls	r3, r3, #2
 8101d44:	220f      	movs	r2, #15
 8101d46:	fa02 f303 	lsl.w	r3, r2, r3
 8101d4a:	43db      	mvns	r3, r3
 8101d4c:	69ba      	ldr	r2, [r7, #24]
 8101d4e:	4013      	ands	r3, r2
 8101d50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8101d52:	687b      	ldr	r3, [r7, #4]
 8101d54:	4a20      	ldr	r2, [pc, #128]	@ (8101dd8 <HAL_GPIO_Init+0x240>)
 8101d56:	4293      	cmp	r3, r2
 8101d58:	d052      	beq.n	8101e00 <HAL_GPIO_Init+0x268>
 8101d5a:	687b      	ldr	r3, [r7, #4]
 8101d5c:	4a1f      	ldr	r2, [pc, #124]	@ (8101ddc <HAL_GPIO_Init+0x244>)
 8101d5e:	4293      	cmp	r3, r2
 8101d60:	d031      	beq.n	8101dc6 <HAL_GPIO_Init+0x22e>
 8101d62:	687b      	ldr	r3, [r7, #4]
 8101d64:	4a1e      	ldr	r2, [pc, #120]	@ (8101de0 <HAL_GPIO_Init+0x248>)
 8101d66:	4293      	cmp	r3, r2
 8101d68:	d02b      	beq.n	8101dc2 <HAL_GPIO_Init+0x22a>
 8101d6a:	687b      	ldr	r3, [r7, #4]
 8101d6c:	4a1d      	ldr	r2, [pc, #116]	@ (8101de4 <HAL_GPIO_Init+0x24c>)
 8101d6e:	4293      	cmp	r3, r2
 8101d70:	d025      	beq.n	8101dbe <HAL_GPIO_Init+0x226>
 8101d72:	687b      	ldr	r3, [r7, #4]
 8101d74:	4a1c      	ldr	r2, [pc, #112]	@ (8101de8 <HAL_GPIO_Init+0x250>)
 8101d76:	4293      	cmp	r3, r2
 8101d78:	d01f      	beq.n	8101dba <HAL_GPIO_Init+0x222>
 8101d7a:	687b      	ldr	r3, [r7, #4]
 8101d7c:	4a1b      	ldr	r2, [pc, #108]	@ (8101dec <HAL_GPIO_Init+0x254>)
 8101d7e:	4293      	cmp	r3, r2
 8101d80:	d019      	beq.n	8101db6 <HAL_GPIO_Init+0x21e>
 8101d82:	687b      	ldr	r3, [r7, #4]
 8101d84:	4a1a      	ldr	r2, [pc, #104]	@ (8101df0 <HAL_GPIO_Init+0x258>)
 8101d86:	4293      	cmp	r3, r2
 8101d88:	d013      	beq.n	8101db2 <HAL_GPIO_Init+0x21a>
 8101d8a:	687b      	ldr	r3, [r7, #4]
 8101d8c:	4a19      	ldr	r2, [pc, #100]	@ (8101df4 <HAL_GPIO_Init+0x25c>)
 8101d8e:	4293      	cmp	r3, r2
 8101d90:	d00d      	beq.n	8101dae <HAL_GPIO_Init+0x216>
 8101d92:	687b      	ldr	r3, [r7, #4]
 8101d94:	4a18      	ldr	r2, [pc, #96]	@ (8101df8 <HAL_GPIO_Init+0x260>)
 8101d96:	4293      	cmp	r3, r2
 8101d98:	d007      	beq.n	8101daa <HAL_GPIO_Init+0x212>
 8101d9a:	687b      	ldr	r3, [r7, #4]
 8101d9c:	4a17      	ldr	r2, [pc, #92]	@ (8101dfc <HAL_GPIO_Init+0x264>)
 8101d9e:	4293      	cmp	r3, r2
 8101da0:	d101      	bne.n	8101da6 <HAL_GPIO_Init+0x20e>
 8101da2:	2309      	movs	r3, #9
 8101da4:	e02d      	b.n	8101e02 <HAL_GPIO_Init+0x26a>
 8101da6:	230a      	movs	r3, #10
 8101da8:	e02b      	b.n	8101e02 <HAL_GPIO_Init+0x26a>
 8101daa:	2308      	movs	r3, #8
 8101dac:	e029      	b.n	8101e02 <HAL_GPIO_Init+0x26a>
 8101dae:	2307      	movs	r3, #7
 8101db0:	e027      	b.n	8101e02 <HAL_GPIO_Init+0x26a>
 8101db2:	2306      	movs	r3, #6
 8101db4:	e025      	b.n	8101e02 <HAL_GPIO_Init+0x26a>
 8101db6:	2305      	movs	r3, #5
 8101db8:	e023      	b.n	8101e02 <HAL_GPIO_Init+0x26a>
 8101dba:	2304      	movs	r3, #4
 8101dbc:	e021      	b.n	8101e02 <HAL_GPIO_Init+0x26a>
 8101dbe:	2303      	movs	r3, #3
 8101dc0:	e01f      	b.n	8101e02 <HAL_GPIO_Init+0x26a>
 8101dc2:	2302      	movs	r3, #2
 8101dc4:	e01d      	b.n	8101e02 <HAL_GPIO_Init+0x26a>
 8101dc6:	2301      	movs	r3, #1
 8101dc8:	e01b      	b.n	8101e02 <HAL_GPIO_Init+0x26a>
 8101dca:	bf00      	nop
 8101dcc:	580000c0 	.word	0x580000c0
 8101dd0:	58024400 	.word	0x58024400
 8101dd4:	58000400 	.word	0x58000400
 8101dd8:	58020000 	.word	0x58020000
 8101ddc:	58020400 	.word	0x58020400
 8101de0:	58020800 	.word	0x58020800
 8101de4:	58020c00 	.word	0x58020c00
 8101de8:	58021000 	.word	0x58021000
 8101dec:	58021400 	.word	0x58021400
 8101df0:	58021800 	.word	0x58021800
 8101df4:	58021c00 	.word	0x58021c00
 8101df8:	58022000 	.word	0x58022000
 8101dfc:	58022400 	.word	0x58022400
 8101e00:	2300      	movs	r3, #0
 8101e02:	69fa      	ldr	r2, [r7, #28]
 8101e04:	f002 0203 	and.w	r2, r2, #3
 8101e08:	0092      	lsls	r2, r2, #2
 8101e0a:	4093      	lsls	r3, r2
 8101e0c:	69ba      	ldr	r2, [r7, #24]
 8101e0e:	4313      	orrs	r3, r2
 8101e10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8101e12:	4938      	ldr	r1, [pc, #224]	@ (8101ef4 <HAL_GPIO_Init+0x35c>)
 8101e14:	69fb      	ldr	r3, [r7, #28]
 8101e16:	089b      	lsrs	r3, r3, #2
 8101e18:	3302      	adds	r3, #2
 8101e1a:	69ba      	ldr	r2, [r7, #24]
 8101e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8101e20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8101e24:	681b      	ldr	r3, [r3, #0]
 8101e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101e28:	693b      	ldr	r3, [r7, #16]
 8101e2a:	43db      	mvns	r3, r3
 8101e2c:	69ba      	ldr	r2, [r7, #24]
 8101e2e:	4013      	ands	r3, r2
 8101e30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8101e32:	683b      	ldr	r3, [r7, #0]
 8101e34:	685b      	ldr	r3, [r3, #4]
 8101e36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8101e3a:	2b00      	cmp	r3, #0
 8101e3c:	d003      	beq.n	8101e46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8101e3e:	69ba      	ldr	r2, [r7, #24]
 8101e40:	693b      	ldr	r3, [r7, #16]
 8101e42:	4313      	orrs	r3, r2
 8101e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8101e46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8101e4a:	69bb      	ldr	r3, [r7, #24]
 8101e4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8101e4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8101e52:	685b      	ldr	r3, [r3, #4]
 8101e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101e56:	693b      	ldr	r3, [r7, #16]
 8101e58:	43db      	mvns	r3, r3
 8101e5a:	69ba      	ldr	r2, [r7, #24]
 8101e5c:	4013      	ands	r3, r2
 8101e5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8101e60:	683b      	ldr	r3, [r7, #0]
 8101e62:	685b      	ldr	r3, [r3, #4]
 8101e64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8101e68:	2b00      	cmp	r3, #0
 8101e6a:	d003      	beq.n	8101e74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8101e6c:	69ba      	ldr	r2, [r7, #24]
 8101e6e:	693b      	ldr	r3, [r7, #16]
 8101e70:	4313      	orrs	r3, r2
 8101e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101e74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8101e78:	69bb      	ldr	r3, [r7, #24]
 8101e7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8101e7c:	697b      	ldr	r3, [r7, #20]
 8101e7e:	685b      	ldr	r3, [r3, #4]
 8101e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101e82:	693b      	ldr	r3, [r7, #16]
 8101e84:	43db      	mvns	r3, r3
 8101e86:	69ba      	ldr	r2, [r7, #24]
 8101e88:	4013      	ands	r3, r2
 8101e8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8101e8c:	683b      	ldr	r3, [r7, #0]
 8101e8e:	685b      	ldr	r3, [r3, #4]
 8101e90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8101e94:	2b00      	cmp	r3, #0
 8101e96:	d003      	beq.n	8101ea0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8101e98:	69ba      	ldr	r2, [r7, #24]
 8101e9a:	693b      	ldr	r3, [r7, #16]
 8101e9c:	4313      	orrs	r3, r2
 8101e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101ea0:	697b      	ldr	r3, [r7, #20]
 8101ea2:	69ba      	ldr	r2, [r7, #24]
 8101ea4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8101ea6:	697b      	ldr	r3, [r7, #20]
 8101ea8:	681b      	ldr	r3, [r3, #0]
 8101eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101eac:	693b      	ldr	r3, [r7, #16]
 8101eae:	43db      	mvns	r3, r3
 8101eb0:	69ba      	ldr	r2, [r7, #24]
 8101eb2:	4013      	ands	r3, r2
 8101eb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8101eb6:	683b      	ldr	r3, [r7, #0]
 8101eb8:	685b      	ldr	r3, [r3, #4]
 8101eba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8101ebe:	2b00      	cmp	r3, #0
 8101ec0:	d003      	beq.n	8101eca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8101ec2:	69ba      	ldr	r2, [r7, #24]
 8101ec4:	693b      	ldr	r3, [r7, #16]
 8101ec6:	4313      	orrs	r3, r2
 8101ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8101eca:	697b      	ldr	r3, [r7, #20]
 8101ecc:	69ba      	ldr	r2, [r7, #24]
 8101ece:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8101ed0:	69fb      	ldr	r3, [r7, #28]
 8101ed2:	3301      	adds	r3, #1
 8101ed4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101ed6:	683b      	ldr	r3, [r7, #0]
 8101ed8:	681a      	ldr	r2, [r3, #0]
 8101eda:	69fb      	ldr	r3, [r7, #28]
 8101edc:	fa22 f303 	lsr.w	r3, r2, r3
 8101ee0:	2b00      	cmp	r3, #0
 8101ee2:	f47f ae63 	bne.w	8101bac <HAL_GPIO_Init+0x14>
  }
}
 8101ee6:	bf00      	nop
 8101ee8:	bf00      	nop
 8101eea:	3724      	adds	r7, #36	@ 0x24
 8101eec:	46bd      	mov	sp, r7
 8101eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ef2:	4770      	bx	lr
 8101ef4:	58000400 	.word	0x58000400

08101ef8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101ef8:	b480      	push	{r7}
 8101efa:	b083      	sub	sp, #12
 8101efc:	af00      	add	r7, sp, #0
 8101efe:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101f00:	4b05      	ldr	r3, [pc, #20]	@ (8101f18 <HAL_HSEM_ActivateNotification+0x20>)
 8101f02:	681a      	ldr	r2, [r3, #0]
 8101f04:	4904      	ldr	r1, [pc, #16]	@ (8101f18 <HAL_HSEM_ActivateNotification+0x20>)
 8101f06:	687b      	ldr	r3, [r7, #4]
 8101f08:	4313      	orrs	r3, r2
 8101f0a:	600b      	str	r3, [r1, #0]
#endif
}
 8101f0c:	bf00      	nop
 8101f0e:	370c      	adds	r7, #12
 8101f10:	46bd      	mov	sp, r7
 8101f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f16:	4770      	bx	lr
 8101f18:	58026510 	.word	0x58026510

08101f1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8101f1c:	b580      	push	{r7, lr}
 8101f1e:	b082      	sub	sp, #8
 8101f20:	af00      	add	r7, sp, #0
 8101f22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8101f24:	687b      	ldr	r3, [r7, #4]
 8101f26:	2b00      	cmp	r3, #0
 8101f28:	d101      	bne.n	8101f2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8101f2a:	2301      	movs	r3, #1
 8101f2c:	e08d      	b.n	810204a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8101f2e:	687b      	ldr	r3, [r7, #4]
 8101f30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8101f34:	b2db      	uxtb	r3, r3
 8101f36:	2b00      	cmp	r3, #0
 8101f38:	d106      	bne.n	8101f48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8101f3a:	687b      	ldr	r3, [r7, #4]
 8101f3c:	2200      	movs	r2, #0
 8101f3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8101f42:	6878      	ldr	r0, [r7, #4]
 8101f44:	f7ff f8a8 	bl	8101098 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8101f48:	687b      	ldr	r3, [r7, #4]
 8101f4a:	2224      	movs	r2, #36	@ 0x24
 8101f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8101f50:	687b      	ldr	r3, [r7, #4]
 8101f52:	681b      	ldr	r3, [r3, #0]
 8101f54:	681a      	ldr	r2, [r3, #0]
 8101f56:	687b      	ldr	r3, [r7, #4]
 8101f58:	681b      	ldr	r3, [r3, #0]
 8101f5a:	f022 0201 	bic.w	r2, r2, #1
 8101f5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8101f60:	687b      	ldr	r3, [r7, #4]
 8101f62:	685a      	ldr	r2, [r3, #4]
 8101f64:	687b      	ldr	r3, [r7, #4]
 8101f66:	681b      	ldr	r3, [r3, #0]
 8101f68:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8101f6c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8101f6e:	687b      	ldr	r3, [r7, #4]
 8101f70:	681b      	ldr	r3, [r3, #0]
 8101f72:	689a      	ldr	r2, [r3, #8]
 8101f74:	687b      	ldr	r3, [r7, #4]
 8101f76:	681b      	ldr	r3, [r3, #0]
 8101f78:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8101f7c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8101f7e:	687b      	ldr	r3, [r7, #4]
 8101f80:	68db      	ldr	r3, [r3, #12]
 8101f82:	2b01      	cmp	r3, #1
 8101f84:	d107      	bne.n	8101f96 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8101f86:	687b      	ldr	r3, [r7, #4]
 8101f88:	689a      	ldr	r2, [r3, #8]
 8101f8a:	687b      	ldr	r3, [r7, #4]
 8101f8c:	681b      	ldr	r3, [r3, #0]
 8101f8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8101f92:	609a      	str	r2, [r3, #8]
 8101f94:	e006      	b.n	8101fa4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8101f96:	687b      	ldr	r3, [r7, #4]
 8101f98:	689a      	ldr	r2, [r3, #8]
 8101f9a:	687b      	ldr	r3, [r7, #4]
 8101f9c:	681b      	ldr	r3, [r3, #0]
 8101f9e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8101fa2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8101fa4:	687b      	ldr	r3, [r7, #4]
 8101fa6:	68db      	ldr	r3, [r3, #12]
 8101fa8:	2b02      	cmp	r3, #2
 8101faa:	d108      	bne.n	8101fbe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8101fac:	687b      	ldr	r3, [r7, #4]
 8101fae:	681b      	ldr	r3, [r3, #0]
 8101fb0:	685a      	ldr	r2, [r3, #4]
 8101fb2:	687b      	ldr	r3, [r7, #4]
 8101fb4:	681b      	ldr	r3, [r3, #0]
 8101fb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8101fba:	605a      	str	r2, [r3, #4]
 8101fbc:	e007      	b.n	8101fce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8101fbe:	687b      	ldr	r3, [r7, #4]
 8101fc0:	681b      	ldr	r3, [r3, #0]
 8101fc2:	685a      	ldr	r2, [r3, #4]
 8101fc4:	687b      	ldr	r3, [r7, #4]
 8101fc6:	681b      	ldr	r3, [r3, #0]
 8101fc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8101fcc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8101fce:	687b      	ldr	r3, [r7, #4]
 8101fd0:	681b      	ldr	r3, [r3, #0]
 8101fd2:	685b      	ldr	r3, [r3, #4]
 8101fd4:	687a      	ldr	r2, [r7, #4]
 8101fd6:	6812      	ldr	r2, [r2, #0]
 8101fd8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8101fdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8101fe0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8101fe2:	687b      	ldr	r3, [r7, #4]
 8101fe4:	681b      	ldr	r3, [r3, #0]
 8101fe6:	68da      	ldr	r2, [r3, #12]
 8101fe8:	687b      	ldr	r3, [r7, #4]
 8101fea:	681b      	ldr	r3, [r3, #0]
 8101fec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8101ff0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8101ff2:	687b      	ldr	r3, [r7, #4]
 8101ff4:	691a      	ldr	r2, [r3, #16]
 8101ff6:	687b      	ldr	r3, [r7, #4]
 8101ff8:	695b      	ldr	r3, [r3, #20]
 8101ffa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8101ffe:	687b      	ldr	r3, [r7, #4]
 8102000:	699b      	ldr	r3, [r3, #24]
 8102002:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8102004:	687b      	ldr	r3, [r7, #4]
 8102006:	681b      	ldr	r3, [r3, #0]
 8102008:	430a      	orrs	r2, r1
 810200a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 810200c:	687b      	ldr	r3, [r7, #4]
 810200e:	69d9      	ldr	r1, [r3, #28]
 8102010:	687b      	ldr	r3, [r7, #4]
 8102012:	6a1a      	ldr	r2, [r3, #32]
 8102014:	687b      	ldr	r3, [r7, #4]
 8102016:	681b      	ldr	r3, [r3, #0]
 8102018:	430a      	orrs	r2, r1
 810201a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 810201c:	687b      	ldr	r3, [r7, #4]
 810201e:	681b      	ldr	r3, [r3, #0]
 8102020:	681a      	ldr	r2, [r3, #0]
 8102022:	687b      	ldr	r3, [r7, #4]
 8102024:	681b      	ldr	r3, [r3, #0]
 8102026:	f042 0201 	orr.w	r2, r2, #1
 810202a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810202c:	687b      	ldr	r3, [r7, #4]
 810202e:	2200      	movs	r2, #0
 8102030:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8102032:	687b      	ldr	r3, [r7, #4]
 8102034:	2220      	movs	r2, #32
 8102036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810203a:	687b      	ldr	r3, [r7, #4]
 810203c:	2200      	movs	r2, #0
 810203e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8102040:	687b      	ldr	r3, [r7, #4]
 8102042:	2200      	movs	r2, #0
 8102044:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8102048:	2300      	movs	r3, #0
}
 810204a:	4618      	mov	r0, r3
 810204c:	3708      	adds	r7, #8
 810204e:	46bd      	mov	sp, r7
 8102050:	bd80      	pop	{r7, pc}
	...

08102054 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8102054:	b580      	push	{r7, lr}
 8102056:	b088      	sub	sp, #32
 8102058:	af02      	add	r7, sp, #8
 810205a:	60f8      	str	r0, [r7, #12]
 810205c:	607a      	str	r2, [r7, #4]
 810205e:	461a      	mov	r2, r3
 8102060:	460b      	mov	r3, r1
 8102062:	817b      	strh	r3, [r7, #10]
 8102064:	4613      	mov	r3, r2
 8102066:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102068:	68fb      	ldr	r3, [r7, #12]
 810206a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810206e:	b2db      	uxtb	r3, r3
 8102070:	2b20      	cmp	r3, #32
 8102072:	f040 80fd 	bne.w	8102270 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102076:	68fb      	ldr	r3, [r7, #12]
 8102078:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810207c:	2b01      	cmp	r3, #1
 810207e:	d101      	bne.n	8102084 <HAL_I2C_Master_Transmit+0x30>
 8102080:	2302      	movs	r3, #2
 8102082:	e0f6      	b.n	8102272 <HAL_I2C_Master_Transmit+0x21e>
 8102084:	68fb      	ldr	r3, [r7, #12]
 8102086:	2201      	movs	r2, #1
 8102088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 810208c:	f7ff fbfc 	bl	8101888 <HAL_GetTick>
 8102090:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8102092:	693b      	ldr	r3, [r7, #16]
 8102094:	9300      	str	r3, [sp, #0]
 8102096:	2319      	movs	r3, #25
 8102098:	2201      	movs	r2, #1
 810209a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 810209e:	68f8      	ldr	r0, [r7, #12]
 81020a0:	f000 fa0a 	bl	81024b8 <I2C_WaitOnFlagUntilTimeout>
 81020a4:	4603      	mov	r3, r0
 81020a6:	2b00      	cmp	r3, #0
 81020a8:	d001      	beq.n	81020ae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 81020aa:	2301      	movs	r3, #1
 81020ac:	e0e1      	b.n	8102272 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 81020ae:	68fb      	ldr	r3, [r7, #12]
 81020b0:	2221      	movs	r2, #33	@ 0x21
 81020b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 81020b6:	68fb      	ldr	r3, [r7, #12]
 81020b8:	2210      	movs	r2, #16
 81020ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81020be:	68fb      	ldr	r3, [r7, #12]
 81020c0:	2200      	movs	r2, #0
 81020c2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81020c4:	68fb      	ldr	r3, [r7, #12]
 81020c6:	687a      	ldr	r2, [r7, #4]
 81020c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 81020ca:	68fb      	ldr	r3, [r7, #12]
 81020cc:	893a      	ldrh	r2, [r7, #8]
 81020ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 81020d0:	68fb      	ldr	r3, [r7, #12]
 81020d2:	2200      	movs	r2, #0
 81020d4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81020d6:	68fb      	ldr	r3, [r7, #12]
 81020d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81020da:	b29b      	uxth	r3, r3
 81020dc:	2bff      	cmp	r3, #255	@ 0xff
 81020de:	d906      	bls.n	81020ee <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81020e0:	68fb      	ldr	r3, [r7, #12]
 81020e2:	22ff      	movs	r2, #255	@ 0xff
 81020e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 81020e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81020ea:	617b      	str	r3, [r7, #20]
 81020ec:	e007      	b.n	81020fe <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81020ee:	68fb      	ldr	r3, [r7, #12]
 81020f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81020f2:	b29a      	uxth	r2, r3
 81020f4:	68fb      	ldr	r3, [r7, #12]
 81020f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 81020f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81020fc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 81020fe:	68fb      	ldr	r3, [r7, #12]
 8102100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8102102:	2b00      	cmp	r3, #0
 8102104:	d024      	beq.n	8102150 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8102106:	68fb      	ldr	r3, [r7, #12]
 8102108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810210a:	781a      	ldrb	r2, [r3, #0]
 810210c:	68fb      	ldr	r3, [r7, #12]
 810210e:	681b      	ldr	r3, [r3, #0]
 8102110:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8102112:	68fb      	ldr	r3, [r7, #12]
 8102114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102116:	1c5a      	adds	r2, r3, #1
 8102118:	68fb      	ldr	r3, [r7, #12]
 810211a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 810211c:	68fb      	ldr	r3, [r7, #12]
 810211e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8102120:	b29b      	uxth	r3, r3
 8102122:	3b01      	subs	r3, #1
 8102124:	b29a      	uxth	r2, r3
 8102126:	68fb      	ldr	r3, [r7, #12]
 8102128:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 810212a:	68fb      	ldr	r3, [r7, #12]
 810212c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810212e:	3b01      	subs	r3, #1
 8102130:	b29a      	uxth	r2, r3
 8102132:	68fb      	ldr	r3, [r7, #12]
 8102134:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8102136:	68fb      	ldr	r3, [r7, #12]
 8102138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810213a:	b2db      	uxtb	r3, r3
 810213c:	3301      	adds	r3, #1
 810213e:	b2da      	uxtb	r2, r3
 8102140:	8979      	ldrh	r1, [r7, #10]
 8102142:	4b4e      	ldr	r3, [pc, #312]	@ (810227c <HAL_I2C_Master_Transmit+0x228>)
 8102144:	9300      	str	r3, [sp, #0]
 8102146:	697b      	ldr	r3, [r7, #20]
 8102148:	68f8      	ldr	r0, [r7, #12]
 810214a:	f000 fc05 	bl	8102958 <I2C_TransferConfig>
 810214e:	e066      	b.n	810221e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8102150:	68fb      	ldr	r3, [r7, #12]
 8102152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8102154:	b2da      	uxtb	r2, r3
 8102156:	8979      	ldrh	r1, [r7, #10]
 8102158:	4b48      	ldr	r3, [pc, #288]	@ (810227c <HAL_I2C_Master_Transmit+0x228>)
 810215a:	9300      	str	r3, [sp, #0]
 810215c:	697b      	ldr	r3, [r7, #20]
 810215e:	68f8      	ldr	r0, [r7, #12]
 8102160:	f000 fbfa 	bl	8102958 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8102164:	e05b      	b.n	810221e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102166:	693a      	ldr	r2, [r7, #16]
 8102168:	6a39      	ldr	r1, [r7, #32]
 810216a:	68f8      	ldr	r0, [r7, #12]
 810216c:	f000 f9fd 	bl	810256a <I2C_WaitOnTXISFlagUntilTimeout>
 8102170:	4603      	mov	r3, r0
 8102172:	2b00      	cmp	r3, #0
 8102174:	d001      	beq.n	810217a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8102176:	2301      	movs	r3, #1
 8102178:	e07b      	b.n	8102272 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 810217a:	68fb      	ldr	r3, [r7, #12]
 810217c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810217e:	781a      	ldrb	r2, [r3, #0]
 8102180:	68fb      	ldr	r3, [r7, #12]
 8102182:	681b      	ldr	r3, [r3, #0]
 8102184:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8102186:	68fb      	ldr	r3, [r7, #12]
 8102188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810218a:	1c5a      	adds	r2, r3, #1
 810218c:	68fb      	ldr	r3, [r7, #12]
 810218e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8102190:	68fb      	ldr	r3, [r7, #12]
 8102192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8102194:	b29b      	uxth	r3, r3
 8102196:	3b01      	subs	r3, #1
 8102198:	b29a      	uxth	r2, r3
 810219a:	68fb      	ldr	r3, [r7, #12]
 810219c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 810219e:	68fb      	ldr	r3, [r7, #12]
 81021a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81021a2:	3b01      	subs	r3, #1
 81021a4:	b29a      	uxth	r2, r3
 81021a6:	68fb      	ldr	r3, [r7, #12]
 81021a8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81021aa:	68fb      	ldr	r3, [r7, #12]
 81021ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81021ae:	b29b      	uxth	r3, r3
 81021b0:	2b00      	cmp	r3, #0
 81021b2:	d034      	beq.n	810221e <HAL_I2C_Master_Transmit+0x1ca>
 81021b4:	68fb      	ldr	r3, [r7, #12]
 81021b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81021b8:	2b00      	cmp	r3, #0
 81021ba:	d130      	bne.n	810221e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81021bc:	693b      	ldr	r3, [r7, #16]
 81021be:	9300      	str	r3, [sp, #0]
 81021c0:	6a3b      	ldr	r3, [r7, #32]
 81021c2:	2200      	movs	r2, #0
 81021c4:	2180      	movs	r1, #128	@ 0x80
 81021c6:	68f8      	ldr	r0, [r7, #12]
 81021c8:	f000 f976 	bl	81024b8 <I2C_WaitOnFlagUntilTimeout>
 81021cc:	4603      	mov	r3, r0
 81021ce:	2b00      	cmp	r3, #0
 81021d0:	d001      	beq.n	81021d6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 81021d2:	2301      	movs	r3, #1
 81021d4:	e04d      	b.n	8102272 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81021d6:	68fb      	ldr	r3, [r7, #12]
 81021d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81021da:	b29b      	uxth	r3, r3
 81021dc:	2bff      	cmp	r3, #255	@ 0xff
 81021de:	d90e      	bls.n	81021fe <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81021e0:	68fb      	ldr	r3, [r7, #12]
 81021e2:	22ff      	movs	r2, #255	@ 0xff
 81021e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81021e6:	68fb      	ldr	r3, [r7, #12]
 81021e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81021ea:	b2da      	uxtb	r2, r3
 81021ec:	8979      	ldrh	r1, [r7, #10]
 81021ee:	2300      	movs	r3, #0
 81021f0:	9300      	str	r3, [sp, #0]
 81021f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81021f6:	68f8      	ldr	r0, [r7, #12]
 81021f8:	f000 fbae 	bl	8102958 <I2C_TransferConfig>
 81021fc:	e00f      	b.n	810221e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81021fe:	68fb      	ldr	r3, [r7, #12]
 8102200:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8102202:	b29a      	uxth	r2, r3
 8102204:	68fb      	ldr	r3, [r7, #12]
 8102206:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102208:	68fb      	ldr	r3, [r7, #12]
 810220a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810220c:	b2da      	uxtb	r2, r3
 810220e:	8979      	ldrh	r1, [r7, #10]
 8102210:	2300      	movs	r3, #0
 8102212:	9300      	str	r3, [sp, #0]
 8102214:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8102218:	68f8      	ldr	r0, [r7, #12]
 810221a:	f000 fb9d 	bl	8102958 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 810221e:	68fb      	ldr	r3, [r7, #12]
 8102220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8102222:	b29b      	uxth	r3, r3
 8102224:	2b00      	cmp	r3, #0
 8102226:	d19e      	bne.n	8102166 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102228:	693a      	ldr	r2, [r7, #16]
 810222a:	6a39      	ldr	r1, [r7, #32]
 810222c:	68f8      	ldr	r0, [r7, #12]
 810222e:	f000 f9e3 	bl	81025f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8102232:	4603      	mov	r3, r0
 8102234:	2b00      	cmp	r3, #0
 8102236:	d001      	beq.n	810223c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8102238:	2301      	movs	r3, #1
 810223a:	e01a      	b.n	8102272 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810223c:	68fb      	ldr	r3, [r7, #12]
 810223e:	681b      	ldr	r3, [r3, #0]
 8102240:	2220      	movs	r2, #32
 8102242:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102244:	68fb      	ldr	r3, [r7, #12]
 8102246:	681b      	ldr	r3, [r3, #0]
 8102248:	6859      	ldr	r1, [r3, #4]
 810224a:	68fb      	ldr	r3, [r7, #12]
 810224c:	681a      	ldr	r2, [r3, #0]
 810224e:	4b0c      	ldr	r3, [pc, #48]	@ (8102280 <HAL_I2C_Master_Transmit+0x22c>)
 8102250:	400b      	ands	r3, r1
 8102252:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8102254:	68fb      	ldr	r3, [r7, #12]
 8102256:	2220      	movs	r2, #32
 8102258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810225c:	68fb      	ldr	r3, [r7, #12]
 810225e:	2200      	movs	r2, #0
 8102260:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102264:	68fb      	ldr	r3, [r7, #12]
 8102266:	2200      	movs	r2, #0
 8102268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 810226c:	2300      	movs	r3, #0
 810226e:	e000      	b.n	8102272 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8102270:	2302      	movs	r3, #2
  }
}
 8102272:	4618      	mov	r0, r3
 8102274:	3718      	adds	r7, #24
 8102276:	46bd      	mov	sp, r7
 8102278:	bd80      	pop	{r7, pc}
 810227a:	bf00      	nop
 810227c:	80002000 	.word	0x80002000
 8102280:	fe00e800 	.word	0xfe00e800

08102284 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8102284:	b580      	push	{r7, lr}
 8102286:	b088      	sub	sp, #32
 8102288:	af02      	add	r7, sp, #8
 810228a:	60f8      	str	r0, [r7, #12]
 810228c:	607a      	str	r2, [r7, #4]
 810228e:	461a      	mov	r2, r3
 8102290:	460b      	mov	r3, r1
 8102292:	817b      	strh	r3, [r7, #10]
 8102294:	4613      	mov	r3, r2
 8102296:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102298:	68fb      	ldr	r3, [r7, #12]
 810229a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810229e:	b2db      	uxtb	r3, r3
 81022a0:	2b20      	cmp	r3, #32
 81022a2:	f040 80db 	bne.w	810245c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81022a6:	68fb      	ldr	r3, [r7, #12]
 81022a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 81022ac:	2b01      	cmp	r3, #1
 81022ae:	d101      	bne.n	81022b4 <HAL_I2C_Master_Receive+0x30>
 81022b0:	2302      	movs	r3, #2
 81022b2:	e0d4      	b.n	810245e <HAL_I2C_Master_Receive+0x1da>
 81022b4:	68fb      	ldr	r3, [r7, #12]
 81022b6:	2201      	movs	r2, #1
 81022b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81022bc:	f7ff fae4 	bl	8101888 <HAL_GetTick>
 81022c0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81022c2:	697b      	ldr	r3, [r7, #20]
 81022c4:	9300      	str	r3, [sp, #0]
 81022c6:	2319      	movs	r3, #25
 81022c8:	2201      	movs	r2, #1
 81022ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 81022ce:	68f8      	ldr	r0, [r7, #12]
 81022d0:	f000 f8f2 	bl	81024b8 <I2C_WaitOnFlagUntilTimeout>
 81022d4:	4603      	mov	r3, r0
 81022d6:	2b00      	cmp	r3, #0
 81022d8:	d001      	beq.n	81022de <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 81022da:	2301      	movs	r3, #1
 81022dc:	e0bf      	b.n	810245e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 81022de:	68fb      	ldr	r3, [r7, #12]
 81022e0:	2222      	movs	r2, #34	@ 0x22
 81022e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 81022e6:	68fb      	ldr	r3, [r7, #12]
 81022e8:	2210      	movs	r2, #16
 81022ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81022ee:	68fb      	ldr	r3, [r7, #12]
 81022f0:	2200      	movs	r2, #0
 81022f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81022f4:	68fb      	ldr	r3, [r7, #12]
 81022f6:	687a      	ldr	r2, [r7, #4]
 81022f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 81022fa:	68fb      	ldr	r3, [r7, #12]
 81022fc:	893a      	ldrh	r2, [r7, #8]
 81022fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8102300:	68fb      	ldr	r3, [r7, #12]
 8102302:	2200      	movs	r2, #0
 8102304:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102306:	68fb      	ldr	r3, [r7, #12]
 8102308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810230a:	b29b      	uxth	r3, r3
 810230c:	2bff      	cmp	r3, #255	@ 0xff
 810230e:	d90e      	bls.n	810232e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8102310:	68fb      	ldr	r3, [r7, #12]
 8102312:	22ff      	movs	r2, #255	@ 0xff
 8102314:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8102316:	68fb      	ldr	r3, [r7, #12]
 8102318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810231a:	b2da      	uxtb	r2, r3
 810231c:	8979      	ldrh	r1, [r7, #10]
 810231e:	4b52      	ldr	r3, [pc, #328]	@ (8102468 <HAL_I2C_Master_Receive+0x1e4>)
 8102320:	9300      	str	r3, [sp, #0]
 8102322:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8102326:	68f8      	ldr	r0, [r7, #12]
 8102328:	f000 fb16 	bl	8102958 <I2C_TransferConfig>
 810232c:	e06d      	b.n	810240a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 810232e:	68fb      	ldr	r3, [r7, #12]
 8102330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8102332:	b29a      	uxth	r2, r3
 8102334:	68fb      	ldr	r3, [r7, #12]
 8102336:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102338:	68fb      	ldr	r3, [r7, #12]
 810233a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810233c:	b2da      	uxtb	r2, r3
 810233e:	8979      	ldrh	r1, [r7, #10]
 8102340:	4b49      	ldr	r3, [pc, #292]	@ (8102468 <HAL_I2C_Master_Receive+0x1e4>)
 8102342:	9300      	str	r3, [sp, #0]
 8102344:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8102348:	68f8      	ldr	r0, [r7, #12]
 810234a:	f000 fb05 	bl	8102958 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 810234e:	e05c      	b.n	810240a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102350:	697a      	ldr	r2, [r7, #20]
 8102352:	6a39      	ldr	r1, [r7, #32]
 8102354:	68f8      	ldr	r0, [r7, #12]
 8102356:	f000 f993 	bl	8102680 <I2C_WaitOnRXNEFlagUntilTimeout>
 810235a:	4603      	mov	r3, r0
 810235c:	2b00      	cmp	r3, #0
 810235e:	d001      	beq.n	8102364 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8102360:	2301      	movs	r3, #1
 8102362:	e07c      	b.n	810245e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8102364:	68fb      	ldr	r3, [r7, #12]
 8102366:	681b      	ldr	r3, [r3, #0]
 8102368:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810236a:	68fb      	ldr	r3, [r7, #12]
 810236c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810236e:	b2d2      	uxtb	r2, r2
 8102370:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8102372:	68fb      	ldr	r3, [r7, #12]
 8102374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102376:	1c5a      	adds	r2, r3, #1
 8102378:	68fb      	ldr	r3, [r7, #12]
 810237a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 810237c:	68fb      	ldr	r3, [r7, #12]
 810237e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8102380:	3b01      	subs	r3, #1
 8102382:	b29a      	uxth	r2, r3
 8102384:	68fb      	ldr	r3, [r7, #12]
 8102386:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8102388:	68fb      	ldr	r3, [r7, #12]
 810238a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810238c:	b29b      	uxth	r3, r3
 810238e:	3b01      	subs	r3, #1
 8102390:	b29a      	uxth	r2, r3
 8102392:	68fb      	ldr	r3, [r7, #12]
 8102394:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8102396:	68fb      	ldr	r3, [r7, #12]
 8102398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810239a:	b29b      	uxth	r3, r3
 810239c:	2b00      	cmp	r3, #0
 810239e:	d034      	beq.n	810240a <HAL_I2C_Master_Receive+0x186>
 81023a0:	68fb      	ldr	r3, [r7, #12]
 81023a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81023a4:	2b00      	cmp	r3, #0
 81023a6:	d130      	bne.n	810240a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81023a8:	697b      	ldr	r3, [r7, #20]
 81023aa:	9300      	str	r3, [sp, #0]
 81023ac:	6a3b      	ldr	r3, [r7, #32]
 81023ae:	2200      	movs	r2, #0
 81023b0:	2180      	movs	r1, #128	@ 0x80
 81023b2:	68f8      	ldr	r0, [r7, #12]
 81023b4:	f000 f880 	bl	81024b8 <I2C_WaitOnFlagUntilTimeout>
 81023b8:	4603      	mov	r3, r0
 81023ba:	2b00      	cmp	r3, #0
 81023bc:	d001      	beq.n	81023c2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 81023be:	2301      	movs	r3, #1
 81023c0:	e04d      	b.n	810245e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81023c2:	68fb      	ldr	r3, [r7, #12]
 81023c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81023c6:	b29b      	uxth	r3, r3
 81023c8:	2bff      	cmp	r3, #255	@ 0xff
 81023ca:	d90e      	bls.n	81023ea <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81023cc:	68fb      	ldr	r3, [r7, #12]
 81023ce:	22ff      	movs	r2, #255	@ 0xff
 81023d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81023d2:	68fb      	ldr	r3, [r7, #12]
 81023d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81023d6:	b2da      	uxtb	r2, r3
 81023d8:	8979      	ldrh	r1, [r7, #10]
 81023da:	2300      	movs	r3, #0
 81023dc:	9300      	str	r3, [sp, #0]
 81023de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81023e2:	68f8      	ldr	r0, [r7, #12]
 81023e4:	f000 fab8 	bl	8102958 <I2C_TransferConfig>
 81023e8:	e00f      	b.n	810240a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81023ea:	68fb      	ldr	r3, [r7, #12]
 81023ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81023ee:	b29a      	uxth	r2, r3
 81023f0:	68fb      	ldr	r3, [r7, #12]
 81023f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81023f4:	68fb      	ldr	r3, [r7, #12]
 81023f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81023f8:	b2da      	uxtb	r2, r3
 81023fa:	8979      	ldrh	r1, [r7, #10]
 81023fc:	2300      	movs	r3, #0
 81023fe:	9300      	str	r3, [sp, #0]
 8102400:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8102404:	68f8      	ldr	r0, [r7, #12]
 8102406:	f000 faa7 	bl	8102958 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 810240a:	68fb      	ldr	r3, [r7, #12]
 810240c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810240e:	b29b      	uxth	r3, r3
 8102410:	2b00      	cmp	r3, #0
 8102412:	d19d      	bne.n	8102350 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102414:	697a      	ldr	r2, [r7, #20]
 8102416:	6a39      	ldr	r1, [r7, #32]
 8102418:	68f8      	ldr	r0, [r7, #12]
 810241a:	f000 f8ed 	bl	81025f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 810241e:	4603      	mov	r3, r0
 8102420:	2b00      	cmp	r3, #0
 8102422:	d001      	beq.n	8102428 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8102424:	2301      	movs	r3, #1
 8102426:	e01a      	b.n	810245e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102428:	68fb      	ldr	r3, [r7, #12]
 810242a:	681b      	ldr	r3, [r3, #0]
 810242c:	2220      	movs	r2, #32
 810242e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102430:	68fb      	ldr	r3, [r7, #12]
 8102432:	681b      	ldr	r3, [r3, #0]
 8102434:	6859      	ldr	r1, [r3, #4]
 8102436:	68fb      	ldr	r3, [r7, #12]
 8102438:	681a      	ldr	r2, [r3, #0]
 810243a:	4b0c      	ldr	r3, [pc, #48]	@ (810246c <HAL_I2C_Master_Receive+0x1e8>)
 810243c:	400b      	ands	r3, r1
 810243e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8102440:	68fb      	ldr	r3, [r7, #12]
 8102442:	2220      	movs	r2, #32
 8102444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8102448:	68fb      	ldr	r3, [r7, #12]
 810244a:	2200      	movs	r2, #0
 810244c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102450:	68fb      	ldr	r3, [r7, #12]
 8102452:	2200      	movs	r2, #0
 8102454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8102458:	2300      	movs	r3, #0
 810245a:	e000      	b.n	810245e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 810245c:	2302      	movs	r3, #2
  }
}
 810245e:	4618      	mov	r0, r3
 8102460:	3718      	adds	r7, #24
 8102462:	46bd      	mov	sp, r7
 8102464:	bd80      	pop	{r7, pc}
 8102466:	bf00      	nop
 8102468:	80002400 	.word	0x80002400
 810246c:	fe00e800 	.word	0xfe00e800

08102470 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8102470:	b480      	push	{r7}
 8102472:	b083      	sub	sp, #12
 8102474:	af00      	add	r7, sp, #0
 8102476:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8102478:	687b      	ldr	r3, [r7, #4]
 810247a:	681b      	ldr	r3, [r3, #0]
 810247c:	699b      	ldr	r3, [r3, #24]
 810247e:	f003 0302 	and.w	r3, r3, #2
 8102482:	2b02      	cmp	r3, #2
 8102484:	d103      	bne.n	810248e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8102486:	687b      	ldr	r3, [r7, #4]
 8102488:	681b      	ldr	r3, [r3, #0]
 810248a:	2200      	movs	r2, #0
 810248c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 810248e:	687b      	ldr	r3, [r7, #4]
 8102490:	681b      	ldr	r3, [r3, #0]
 8102492:	699b      	ldr	r3, [r3, #24]
 8102494:	f003 0301 	and.w	r3, r3, #1
 8102498:	2b01      	cmp	r3, #1
 810249a:	d007      	beq.n	81024ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 810249c:	687b      	ldr	r3, [r7, #4]
 810249e:	681b      	ldr	r3, [r3, #0]
 81024a0:	699a      	ldr	r2, [r3, #24]
 81024a2:	687b      	ldr	r3, [r7, #4]
 81024a4:	681b      	ldr	r3, [r3, #0]
 81024a6:	f042 0201 	orr.w	r2, r2, #1
 81024aa:	619a      	str	r2, [r3, #24]
  }
}
 81024ac:	bf00      	nop
 81024ae:	370c      	adds	r7, #12
 81024b0:	46bd      	mov	sp, r7
 81024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024b6:	4770      	bx	lr

081024b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 81024b8:	b580      	push	{r7, lr}
 81024ba:	b084      	sub	sp, #16
 81024bc:	af00      	add	r7, sp, #0
 81024be:	60f8      	str	r0, [r7, #12]
 81024c0:	60b9      	str	r1, [r7, #8]
 81024c2:	603b      	str	r3, [r7, #0]
 81024c4:	4613      	mov	r3, r2
 81024c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81024c8:	e03b      	b.n	8102542 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81024ca:	69ba      	ldr	r2, [r7, #24]
 81024cc:	6839      	ldr	r1, [r7, #0]
 81024ce:	68f8      	ldr	r0, [r7, #12]
 81024d0:	f000 f962 	bl	8102798 <I2C_IsErrorOccurred>
 81024d4:	4603      	mov	r3, r0
 81024d6:	2b00      	cmp	r3, #0
 81024d8:	d001      	beq.n	81024de <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 81024da:	2301      	movs	r3, #1
 81024dc:	e041      	b.n	8102562 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81024de:	683b      	ldr	r3, [r7, #0]
 81024e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81024e4:	d02d      	beq.n	8102542 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81024e6:	f7ff f9cf 	bl	8101888 <HAL_GetTick>
 81024ea:	4602      	mov	r2, r0
 81024ec:	69bb      	ldr	r3, [r7, #24]
 81024ee:	1ad3      	subs	r3, r2, r3
 81024f0:	683a      	ldr	r2, [r7, #0]
 81024f2:	429a      	cmp	r2, r3
 81024f4:	d302      	bcc.n	81024fc <I2C_WaitOnFlagUntilTimeout+0x44>
 81024f6:	683b      	ldr	r3, [r7, #0]
 81024f8:	2b00      	cmp	r3, #0
 81024fa:	d122      	bne.n	8102542 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 81024fc:	68fb      	ldr	r3, [r7, #12]
 81024fe:	681b      	ldr	r3, [r3, #0]
 8102500:	699a      	ldr	r2, [r3, #24]
 8102502:	68bb      	ldr	r3, [r7, #8]
 8102504:	4013      	ands	r3, r2
 8102506:	68ba      	ldr	r2, [r7, #8]
 8102508:	429a      	cmp	r2, r3
 810250a:	bf0c      	ite	eq
 810250c:	2301      	moveq	r3, #1
 810250e:	2300      	movne	r3, #0
 8102510:	b2db      	uxtb	r3, r3
 8102512:	461a      	mov	r2, r3
 8102514:	79fb      	ldrb	r3, [r7, #7]
 8102516:	429a      	cmp	r2, r3
 8102518:	d113      	bne.n	8102542 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810251a:	68fb      	ldr	r3, [r7, #12]
 810251c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810251e:	f043 0220 	orr.w	r2, r3, #32
 8102522:	68fb      	ldr	r3, [r7, #12]
 8102524:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8102526:	68fb      	ldr	r3, [r7, #12]
 8102528:	2220      	movs	r2, #32
 810252a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 810252e:	68fb      	ldr	r3, [r7, #12]
 8102530:	2200      	movs	r2, #0
 8102532:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8102536:	68fb      	ldr	r3, [r7, #12]
 8102538:	2200      	movs	r2, #0
 810253a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 810253e:	2301      	movs	r3, #1
 8102540:	e00f      	b.n	8102562 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8102542:	68fb      	ldr	r3, [r7, #12]
 8102544:	681b      	ldr	r3, [r3, #0]
 8102546:	699a      	ldr	r2, [r3, #24]
 8102548:	68bb      	ldr	r3, [r7, #8]
 810254a:	4013      	ands	r3, r2
 810254c:	68ba      	ldr	r2, [r7, #8]
 810254e:	429a      	cmp	r2, r3
 8102550:	bf0c      	ite	eq
 8102552:	2301      	moveq	r3, #1
 8102554:	2300      	movne	r3, #0
 8102556:	b2db      	uxtb	r3, r3
 8102558:	461a      	mov	r2, r3
 810255a:	79fb      	ldrb	r3, [r7, #7]
 810255c:	429a      	cmp	r2, r3
 810255e:	d0b4      	beq.n	81024ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8102560:	2300      	movs	r3, #0
}
 8102562:	4618      	mov	r0, r3
 8102564:	3710      	adds	r7, #16
 8102566:	46bd      	mov	sp, r7
 8102568:	bd80      	pop	{r7, pc}

0810256a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 810256a:	b580      	push	{r7, lr}
 810256c:	b084      	sub	sp, #16
 810256e:	af00      	add	r7, sp, #0
 8102570:	60f8      	str	r0, [r7, #12]
 8102572:	60b9      	str	r1, [r7, #8]
 8102574:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8102576:	e033      	b.n	81025e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8102578:	687a      	ldr	r2, [r7, #4]
 810257a:	68b9      	ldr	r1, [r7, #8]
 810257c:	68f8      	ldr	r0, [r7, #12]
 810257e:	f000 f90b 	bl	8102798 <I2C_IsErrorOccurred>
 8102582:	4603      	mov	r3, r0
 8102584:	2b00      	cmp	r3, #0
 8102586:	d001      	beq.n	810258c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8102588:	2301      	movs	r3, #1
 810258a:	e031      	b.n	81025f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810258c:	68bb      	ldr	r3, [r7, #8]
 810258e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102592:	d025      	beq.n	81025e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102594:	f7ff f978 	bl	8101888 <HAL_GetTick>
 8102598:	4602      	mov	r2, r0
 810259a:	687b      	ldr	r3, [r7, #4]
 810259c:	1ad3      	subs	r3, r2, r3
 810259e:	68ba      	ldr	r2, [r7, #8]
 81025a0:	429a      	cmp	r2, r3
 81025a2:	d302      	bcc.n	81025aa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 81025a4:	68bb      	ldr	r3, [r7, #8]
 81025a6:	2b00      	cmp	r3, #0
 81025a8:	d11a      	bne.n	81025e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 81025aa:	68fb      	ldr	r3, [r7, #12]
 81025ac:	681b      	ldr	r3, [r3, #0]
 81025ae:	699b      	ldr	r3, [r3, #24]
 81025b0:	f003 0302 	and.w	r3, r3, #2
 81025b4:	2b02      	cmp	r3, #2
 81025b6:	d013      	beq.n	81025e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81025b8:	68fb      	ldr	r3, [r7, #12]
 81025ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81025bc:	f043 0220 	orr.w	r2, r3, #32
 81025c0:	68fb      	ldr	r3, [r7, #12]
 81025c2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 81025c4:	68fb      	ldr	r3, [r7, #12]
 81025c6:	2220      	movs	r2, #32
 81025c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 81025cc:	68fb      	ldr	r3, [r7, #12]
 81025ce:	2200      	movs	r2, #0
 81025d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 81025d4:	68fb      	ldr	r3, [r7, #12]
 81025d6:	2200      	movs	r2, #0
 81025d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 81025dc:	2301      	movs	r3, #1
 81025de:	e007      	b.n	81025f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81025e0:	68fb      	ldr	r3, [r7, #12]
 81025e2:	681b      	ldr	r3, [r3, #0]
 81025e4:	699b      	ldr	r3, [r3, #24]
 81025e6:	f003 0302 	and.w	r3, r3, #2
 81025ea:	2b02      	cmp	r3, #2
 81025ec:	d1c4      	bne.n	8102578 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 81025ee:	2300      	movs	r3, #0
}
 81025f0:	4618      	mov	r0, r3
 81025f2:	3710      	adds	r7, #16
 81025f4:	46bd      	mov	sp, r7
 81025f6:	bd80      	pop	{r7, pc}

081025f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81025f8:	b580      	push	{r7, lr}
 81025fa:	b084      	sub	sp, #16
 81025fc:	af00      	add	r7, sp, #0
 81025fe:	60f8      	str	r0, [r7, #12]
 8102600:	60b9      	str	r1, [r7, #8]
 8102602:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102604:	e02f      	b.n	8102666 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8102606:	687a      	ldr	r2, [r7, #4]
 8102608:	68b9      	ldr	r1, [r7, #8]
 810260a:	68f8      	ldr	r0, [r7, #12]
 810260c:	f000 f8c4 	bl	8102798 <I2C_IsErrorOccurred>
 8102610:	4603      	mov	r3, r0
 8102612:	2b00      	cmp	r3, #0
 8102614:	d001      	beq.n	810261a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8102616:	2301      	movs	r3, #1
 8102618:	e02d      	b.n	8102676 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810261a:	f7ff f935 	bl	8101888 <HAL_GetTick>
 810261e:	4602      	mov	r2, r0
 8102620:	687b      	ldr	r3, [r7, #4]
 8102622:	1ad3      	subs	r3, r2, r3
 8102624:	68ba      	ldr	r2, [r7, #8]
 8102626:	429a      	cmp	r2, r3
 8102628:	d302      	bcc.n	8102630 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 810262a:	68bb      	ldr	r3, [r7, #8]
 810262c:	2b00      	cmp	r3, #0
 810262e:	d11a      	bne.n	8102666 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8102630:	68fb      	ldr	r3, [r7, #12]
 8102632:	681b      	ldr	r3, [r3, #0]
 8102634:	699b      	ldr	r3, [r3, #24]
 8102636:	f003 0320 	and.w	r3, r3, #32
 810263a:	2b20      	cmp	r3, #32
 810263c:	d013      	beq.n	8102666 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810263e:	68fb      	ldr	r3, [r7, #12]
 8102640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8102642:	f043 0220 	orr.w	r2, r3, #32
 8102646:	68fb      	ldr	r3, [r7, #12]
 8102648:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810264a:	68fb      	ldr	r3, [r7, #12]
 810264c:	2220      	movs	r2, #32
 810264e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8102652:	68fb      	ldr	r3, [r7, #12]
 8102654:	2200      	movs	r2, #0
 8102656:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 810265a:	68fb      	ldr	r3, [r7, #12]
 810265c:	2200      	movs	r2, #0
 810265e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8102662:	2301      	movs	r3, #1
 8102664:	e007      	b.n	8102676 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102666:	68fb      	ldr	r3, [r7, #12]
 8102668:	681b      	ldr	r3, [r3, #0]
 810266a:	699b      	ldr	r3, [r3, #24]
 810266c:	f003 0320 	and.w	r3, r3, #32
 8102670:	2b20      	cmp	r3, #32
 8102672:	d1c8      	bne.n	8102606 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8102674:	2300      	movs	r3, #0
}
 8102676:	4618      	mov	r0, r3
 8102678:	3710      	adds	r7, #16
 810267a:	46bd      	mov	sp, r7
 810267c:	bd80      	pop	{r7, pc}
	...

08102680 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8102680:	b580      	push	{r7, lr}
 8102682:	b086      	sub	sp, #24
 8102684:	af00      	add	r7, sp, #0
 8102686:	60f8      	str	r0, [r7, #12]
 8102688:	60b9      	str	r1, [r7, #8]
 810268a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810268c:	2300      	movs	r3, #0
 810268e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8102690:	e071      	b.n	8102776 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8102692:	687a      	ldr	r2, [r7, #4]
 8102694:	68b9      	ldr	r1, [r7, #8]
 8102696:	68f8      	ldr	r0, [r7, #12]
 8102698:	f000 f87e 	bl	8102798 <I2C_IsErrorOccurred>
 810269c:	4603      	mov	r3, r0
 810269e:	2b00      	cmp	r3, #0
 81026a0:	d001      	beq.n	81026a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 81026a2:	2301      	movs	r3, #1
 81026a4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 81026a6:	68fb      	ldr	r3, [r7, #12]
 81026a8:	681b      	ldr	r3, [r3, #0]
 81026aa:	699b      	ldr	r3, [r3, #24]
 81026ac:	f003 0320 	and.w	r3, r3, #32
 81026b0:	2b20      	cmp	r3, #32
 81026b2:	d13b      	bne.n	810272c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 81026b4:	7dfb      	ldrb	r3, [r7, #23]
 81026b6:	2b00      	cmp	r3, #0
 81026b8:	d138      	bne.n	810272c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 81026ba:	68fb      	ldr	r3, [r7, #12]
 81026bc:	681b      	ldr	r3, [r3, #0]
 81026be:	699b      	ldr	r3, [r3, #24]
 81026c0:	f003 0304 	and.w	r3, r3, #4
 81026c4:	2b04      	cmp	r3, #4
 81026c6:	d105      	bne.n	81026d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 81026c8:	68fb      	ldr	r3, [r7, #12]
 81026ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81026cc:	2b00      	cmp	r3, #0
 81026ce:	d001      	beq.n	81026d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 81026d0:	2300      	movs	r3, #0
 81026d2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 81026d4:	68fb      	ldr	r3, [r7, #12]
 81026d6:	681b      	ldr	r3, [r3, #0]
 81026d8:	699b      	ldr	r3, [r3, #24]
 81026da:	f003 0310 	and.w	r3, r3, #16
 81026de:	2b10      	cmp	r3, #16
 81026e0:	d121      	bne.n	8102726 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81026e2:	68fb      	ldr	r3, [r7, #12]
 81026e4:	681b      	ldr	r3, [r3, #0]
 81026e6:	2210      	movs	r2, #16
 81026e8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 81026ea:	68fb      	ldr	r3, [r7, #12]
 81026ec:	2204      	movs	r2, #4
 81026ee:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81026f0:	68fb      	ldr	r3, [r7, #12]
 81026f2:	681b      	ldr	r3, [r3, #0]
 81026f4:	2220      	movs	r2, #32
 81026f6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 81026f8:	68fb      	ldr	r3, [r7, #12]
 81026fa:	681b      	ldr	r3, [r3, #0]
 81026fc:	6859      	ldr	r1, [r3, #4]
 81026fe:	68fb      	ldr	r3, [r7, #12]
 8102700:	681a      	ldr	r2, [r3, #0]
 8102702:	4b24      	ldr	r3, [pc, #144]	@ (8102794 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8102704:	400b      	ands	r3, r1
 8102706:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8102708:	68fb      	ldr	r3, [r7, #12]
 810270a:	2220      	movs	r2, #32
 810270c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8102710:	68fb      	ldr	r3, [r7, #12]
 8102712:	2200      	movs	r2, #0
 8102714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102718:	68fb      	ldr	r3, [r7, #12]
 810271a:	2200      	movs	r2, #0
 810271c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8102720:	2301      	movs	r3, #1
 8102722:	75fb      	strb	r3, [r7, #23]
 8102724:	e002      	b.n	810272c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102726:	68fb      	ldr	r3, [r7, #12]
 8102728:	2200      	movs	r2, #0
 810272a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 810272c:	f7ff f8ac 	bl	8101888 <HAL_GetTick>
 8102730:	4602      	mov	r2, r0
 8102732:	687b      	ldr	r3, [r7, #4]
 8102734:	1ad3      	subs	r3, r2, r3
 8102736:	68ba      	ldr	r2, [r7, #8]
 8102738:	429a      	cmp	r2, r3
 810273a:	d302      	bcc.n	8102742 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 810273c:	68bb      	ldr	r3, [r7, #8]
 810273e:	2b00      	cmp	r3, #0
 8102740:	d119      	bne.n	8102776 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8102742:	7dfb      	ldrb	r3, [r7, #23]
 8102744:	2b00      	cmp	r3, #0
 8102746:	d116      	bne.n	8102776 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8102748:	68fb      	ldr	r3, [r7, #12]
 810274a:	681b      	ldr	r3, [r3, #0]
 810274c:	699b      	ldr	r3, [r3, #24]
 810274e:	f003 0304 	and.w	r3, r3, #4
 8102752:	2b04      	cmp	r3, #4
 8102754:	d00f      	beq.n	8102776 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102756:	68fb      	ldr	r3, [r7, #12]
 8102758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810275a:	f043 0220 	orr.w	r2, r3, #32
 810275e:	68fb      	ldr	r3, [r7, #12]
 8102760:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8102762:	68fb      	ldr	r3, [r7, #12]
 8102764:	2220      	movs	r2, #32
 8102766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 810276a:	68fb      	ldr	r3, [r7, #12]
 810276c:	2200      	movs	r2, #0
 810276e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8102772:	2301      	movs	r3, #1
 8102774:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8102776:	68fb      	ldr	r3, [r7, #12]
 8102778:	681b      	ldr	r3, [r3, #0]
 810277a:	699b      	ldr	r3, [r3, #24]
 810277c:	f003 0304 	and.w	r3, r3, #4
 8102780:	2b04      	cmp	r3, #4
 8102782:	d002      	beq.n	810278a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8102784:	7dfb      	ldrb	r3, [r7, #23]
 8102786:	2b00      	cmp	r3, #0
 8102788:	d083      	beq.n	8102692 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 810278a:	7dfb      	ldrb	r3, [r7, #23]
}
 810278c:	4618      	mov	r0, r3
 810278e:	3718      	adds	r7, #24
 8102790:	46bd      	mov	sp, r7
 8102792:	bd80      	pop	{r7, pc}
 8102794:	fe00e800 	.word	0xfe00e800

08102798 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8102798:	b580      	push	{r7, lr}
 810279a:	b08a      	sub	sp, #40	@ 0x28
 810279c:	af00      	add	r7, sp, #0
 810279e:	60f8      	str	r0, [r7, #12]
 81027a0:	60b9      	str	r1, [r7, #8]
 81027a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81027a4:	2300      	movs	r3, #0
 81027a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 81027aa:	68fb      	ldr	r3, [r7, #12]
 81027ac:	681b      	ldr	r3, [r3, #0]
 81027ae:	699b      	ldr	r3, [r3, #24]
 81027b0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 81027b2:	2300      	movs	r3, #0
 81027b4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 81027b6:	687b      	ldr	r3, [r7, #4]
 81027b8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 81027ba:	69bb      	ldr	r3, [r7, #24]
 81027bc:	f003 0310 	and.w	r3, r3, #16
 81027c0:	2b00      	cmp	r3, #0
 81027c2:	d068      	beq.n	8102896 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81027c4:	68fb      	ldr	r3, [r7, #12]
 81027c6:	681b      	ldr	r3, [r3, #0]
 81027c8:	2210      	movs	r2, #16
 81027ca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 81027cc:	e049      	b.n	8102862 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 81027ce:	68bb      	ldr	r3, [r7, #8]
 81027d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81027d4:	d045      	beq.n	8102862 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 81027d6:	f7ff f857 	bl	8101888 <HAL_GetTick>
 81027da:	4602      	mov	r2, r0
 81027dc:	69fb      	ldr	r3, [r7, #28]
 81027de:	1ad3      	subs	r3, r2, r3
 81027e0:	68ba      	ldr	r2, [r7, #8]
 81027e2:	429a      	cmp	r2, r3
 81027e4:	d302      	bcc.n	81027ec <I2C_IsErrorOccurred+0x54>
 81027e6:	68bb      	ldr	r3, [r7, #8]
 81027e8:	2b00      	cmp	r3, #0
 81027ea:	d13a      	bne.n	8102862 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 81027ec:	68fb      	ldr	r3, [r7, #12]
 81027ee:	681b      	ldr	r3, [r3, #0]
 81027f0:	685b      	ldr	r3, [r3, #4]
 81027f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81027f6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 81027f8:	68fb      	ldr	r3, [r7, #12]
 81027fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 81027fe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8102800:	68fb      	ldr	r3, [r7, #12]
 8102802:	681b      	ldr	r3, [r3, #0]
 8102804:	699b      	ldr	r3, [r3, #24]
 8102806:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810280a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810280e:	d121      	bne.n	8102854 <I2C_IsErrorOccurred+0xbc>
 8102810:	697b      	ldr	r3, [r7, #20]
 8102812:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102816:	d01d      	beq.n	8102854 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8102818:	7cfb      	ldrb	r3, [r7, #19]
 810281a:	2b20      	cmp	r3, #32
 810281c:	d01a      	beq.n	8102854 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 810281e:	68fb      	ldr	r3, [r7, #12]
 8102820:	681b      	ldr	r3, [r3, #0]
 8102822:	685a      	ldr	r2, [r3, #4]
 8102824:	68fb      	ldr	r3, [r7, #12]
 8102826:	681b      	ldr	r3, [r3, #0]
 8102828:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 810282c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 810282e:	f7ff f82b 	bl	8101888 <HAL_GetTick>
 8102832:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102834:	e00e      	b.n	8102854 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8102836:	f7ff f827 	bl	8101888 <HAL_GetTick>
 810283a:	4602      	mov	r2, r0
 810283c:	69fb      	ldr	r3, [r7, #28]
 810283e:	1ad3      	subs	r3, r2, r3
 8102840:	2b19      	cmp	r3, #25
 8102842:	d907      	bls.n	8102854 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8102844:	6a3b      	ldr	r3, [r7, #32]
 8102846:	f043 0320 	orr.w	r3, r3, #32
 810284a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 810284c:	2301      	movs	r3, #1
 810284e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8102852:	e006      	b.n	8102862 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102854:	68fb      	ldr	r3, [r7, #12]
 8102856:	681b      	ldr	r3, [r3, #0]
 8102858:	699b      	ldr	r3, [r3, #24]
 810285a:	f003 0320 	and.w	r3, r3, #32
 810285e:	2b20      	cmp	r3, #32
 8102860:	d1e9      	bne.n	8102836 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8102862:	68fb      	ldr	r3, [r7, #12]
 8102864:	681b      	ldr	r3, [r3, #0]
 8102866:	699b      	ldr	r3, [r3, #24]
 8102868:	f003 0320 	and.w	r3, r3, #32
 810286c:	2b20      	cmp	r3, #32
 810286e:	d003      	beq.n	8102878 <I2C_IsErrorOccurred+0xe0>
 8102870:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8102874:	2b00      	cmp	r3, #0
 8102876:	d0aa      	beq.n	81027ce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8102878:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810287c:	2b00      	cmp	r3, #0
 810287e:	d103      	bne.n	8102888 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102880:	68fb      	ldr	r3, [r7, #12]
 8102882:	681b      	ldr	r3, [r3, #0]
 8102884:	2220      	movs	r2, #32
 8102886:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8102888:	6a3b      	ldr	r3, [r7, #32]
 810288a:	f043 0304 	orr.w	r3, r3, #4
 810288e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8102890:	2301      	movs	r3, #1
 8102892:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8102896:	68fb      	ldr	r3, [r7, #12]
 8102898:	681b      	ldr	r3, [r3, #0]
 810289a:	699b      	ldr	r3, [r3, #24]
 810289c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 810289e:	69bb      	ldr	r3, [r7, #24]
 81028a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81028a4:	2b00      	cmp	r3, #0
 81028a6:	d00b      	beq.n	81028c0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 81028a8:	6a3b      	ldr	r3, [r7, #32]
 81028aa:	f043 0301 	orr.w	r3, r3, #1
 81028ae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 81028b0:	68fb      	ldr	r3, [r7, #12]
 81028b2:	681b      	ldr	r3, [r3, #0]
 81028b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81028b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81028ba:	2301      	movs	r3, #1
 81028bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 81028c0:	69bb      	ldr	r3, [r7, #24]
 81028c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 81028c6:	2b00      	cmp	r3, #0
 81028c8:	d00b      	beq.n	81028e2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 81028ca:	6a3b      	ldr	r3, [r7, #32]
 81028cc:	f043 0308 	orr.w	r3, r3, #8
 81028d0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 81028d2:	68fb      	ldr	r3, [r7, #12]
 81028d4:	681b      	ldr	r3, [r3, #0]
 81028d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 81028da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81028dc:	2301      	movs	r3, #1
 81028de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 81028e2:	69bb      	ldr	r3, [r7, #24]
 81028e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81028e8:	2b00      	cmp	r3, #0
 81028ea:	d00b      	beq.n	8102904 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 81028ec:	6a3b      	ldr	r3, [r7, #32]
 81028ee:	f043 0302 	orr.w	r3, r3, #2
 81028f2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 81028f4:	68fb      	ldr	r3, [r7, #12]
 81028f6:	681b      	ldr	r3, [r3, #0]
 81028f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 81028fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81028fe:	2301      	movs	r3, #1
 8102900:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8102904:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8102908:	2b00      	cmp	r3, #0
 810290a:	d01c      	beq.n	8102946 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 810290c:	68f8      	ldr	r0, [r7, #12]
 810290e:	f7ff fdaf 	bl	8102470 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102912:	68fb      	ldr	r3, [r7, #12]
 8102914:	681b      	ldr	r3, [r3, #0]
 8102916:	6859      	ldr	r1, [r3, #4]
 8102918:	68fb      	ldr	r3, [r7, #12]
 810291a:	681a      	ldr	r2, [r3, #0]
 810291c:	4b0d      	ldr	r3, [pc, #52]	@ (8102954 <I2C_IsErrorOccurred+0x1bc>)
 810291e:	400b      	ands	r3, r1
 8102920:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8102922:	68fb      	ldr	r3, [r7, #12]
 8102924:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8102926:	6a3b      	ldr	r3, [r7, #32]
 8102928:	431a      	orrs	r2, r3
 810292a:	68fb      	ldr	r3, [r7, #12]
 810292c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 810292e:	68fb      	ldr	r3, [r7, #12]
 8102930:	2220      	movs	r2, #32
 8102932:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8102936:	68fb      	ldr	r3, [r7, #12]
 8102938:	2200      	movs	r2, #0
 810293a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810293e:	68fb      	ldr	r3, [r7, #12]
 8102940:	2200      	movs	r2, #0
 8102942:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8102946:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 810294a:	4618      	mov	r0, r3
 810294c:	3728      	adds	r7, #40	@ 0x28
 810294e:	46bd      	mov	sp, r7
 8102950:	bd80      	pop	{r7, pc}
 8102952:	bf00      	nop
 8102954:	fe00e800 	.word	0xfe00e800

08102958 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8102958:	b480      	push	{r7}
 810295a:	b087      	sub	sp, #28
 810295c:	af00      	add	r7, sp, #0
 810295e:	60f8      	str	r0, [r7, #12]
 8102960:	607b      	str	r3, [r7, #4]
 8102962:	460b      	mov	r3, r1
 8102964:	817b      	strh	r3, [r7, #10]
 8102966:	4613      	mov	r3, r2
 8102968:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810296a:	897b      	ldrh	r3, [r7, #10]
 810296c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8102970:	7a7b      	ldrb	r3, [r7, #9]
 8102972:	041b      	lsls	r3, r3, #16
 8102974:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8102978:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 810297a:	687b      	ldr	r3, [r7, #4]
 810297c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810297e:	6a3b      	ldr	r3, [r7, #32]
 8102980:	4313      	orrs	r3, r2
 8102982:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8102986:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8102988:	68fb      	ldr	r3, [r7, #12]
 810298a:	681b      	ldr	r3, [r3, #0]
 810298c:	685a      	ldr	r2, [r3, #4]
 810298e:	6a3b      	ldr	r3, [r7, #32]
 8102990:	0d5b      	lsrs	r3, r3, #21
 8102992:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8102996:	4b08      	ldr	r3, [pc, #32]	@ (81029b8 <I2C_TransferConfig+0x60>)
 8102998:	430b      	orrs	r3, r1
 810299a:	43db      	mvns	r3, r3
 810299c:	ea02 0103 	and.w	r1, r2, r3
 81029a0:	68fb      	ldr	r3, [r7, #12]
 81029a2:	681b      	ldr	r3, [r3, #0]
 81029a4:	697a      	ldr	r2, [r7, #20]
 81029a6:	430a      	orrs	r2, r1
 81029a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 81029aa:	bf00      	nop
 81029ac:	371c      	adds	r7, #28
 81029ae:	46bd      	mov	sp, r7
 81029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029b4:	4770      	bx	lr
 81029b6:	bf00      	nop
 81029b8:	03ff63ff 	.word	0x03ff63ff

081029bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 81029bc:	b480      	push	{r7}
 81029be:	b083      	sub	sp, #12
 81029c0:	af00      	add	r7, sp, #0
 81029c2:	6078      	str	r0, [r7, #4]
 81029c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81029c6:	687b      	ldr	r3, [r7, #4]
 81029c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81029cc:	b2db      	uxtb	r3, r3
 81029ce:	2b20      	cmp	r3, #32
 81029d0:	d138      	bne.n	8102a44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81029d2:	687b      	ldr	r3, [r7, #4]
 81029d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 81029d8:	2b01      	cmp	r3, #1
 81029da:	d101      	bne.n	81029e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 81029dc:	2302      	movs	r3, #2
 81029de:	e032      	b.n	8102a46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 81029e0:	687b      	ldr	r3, [r7, #4]
 81029e2:	2201      	movs	r2, #1
 81029e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81029e8:	687b      	ldr	r3, [r7, #4]
 81029ea:	2224      	movs	r2, #36	@ 0x24
 81029ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81029f0:	687b      	ldr	r3, [r7, #4]
 81029f2:	681b      	ldr	r3, [r3, #0]
 81029f4:	681a      	ldr	r2, [r3, #0]
 81029f6:	687b      	ldr	r3, [r7, #4]
 81029f8:	681b      	ldr	r3, [r3, #0]
 81029fa:	f022 0201 	bic.w	r2, r2, #1
 81029fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8102a00:	687b      	ldr	r3, [r7, #4]
 8102a02:	681b      	ldr	r3, [r3, #0]
 8102a04:	681a      	ldr	r2, [r3, #0]
 8102a06:	687b      	ldr	r3, [r7, #4]
 8102a08:	681b      	ldr	r3, [r3, #0]
 8102a0a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8102a0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8102a10:	687b      	ldr	r3, [r7, #4]
 8102a12:	681b      	ldr	r3, [r3, #0]
 8102a14:	6819      	ldr	r1, [r3, #0]
 8102a16:	687b      	ldr	r3, [r7, #4]
 8102a18:	681b      	ldr	r3, [r3, #0]
 8102a1a:	683a      	ldr	r2, [r7, #0]
 8102a1c:	430a      	orrs	r2, r1
 8102a1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8102a20:	687b      	ldr	r3, [r7, #4]
 8102a22:	681b      	ldr	r3, [r3, #0]
 8102a24:	681a      	ldr	r2, [r3, #0]
 8102a26:	687b      	ldr	r3, [r7, #4]
 8102a28:	681b      	ldr	r3, [r3, #0]
 8102a2a:	f042 0201 	orr.w	r2, r2, #1
 8102a2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8102a30:	687b      	ldr	r3, [r7, #4]
 8102a32:	2220      	movs	r2, #32
 8102a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102a38:	687b      	ldr	r3, [r7, #4]
 8102a3a:	2200      	movs	r2, #0
 8102a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8102a40:	2300      	movs	r3, #0
 8102a42:	e000      	b.n	8102a46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8102a44:	2302      	movs	r3, #2
  }
}
 8102a46:	4618      	mov	r0, r3
 8102a48:	370c      	adds	r7, #12
 8102a4a:	46bd      	mov	sp, r7
 8102a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a50:	4770      	bx	lr

08102a52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8102a52:	b480      	push	{r7}
 8102a54:	b085      	sub	sp, #20
 8102a56:	af00      	add	r7, sp, #0
 8102a58:	6078      	str	r0, [r7, #4]
 8102a5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102a5c:	687b      	ldr	r3, [r7, #4]
 8102a5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8102a62:	b2db      	uxtb	r3, r3
 8102a64:	2b20      	cmp	r3, #32
 8102a66:	d139      	bne.n	8102adc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102a68:	687b      	ldr	r3, [r7, #4]
 8102a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8102a6e:	2b01      	cmp	r3, #1
 8102a70:	d101      	bne.n	8102a76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8102a72:	2302      	movs	r3, #2
 8102a74:	e033      	b.n	8102ade <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8102a76:	687b      	ldr	r3, [r7, #4]
 8102a78:	2201      	movs	r2, #1
 8102a7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8102a7e:	687b      	ldr	r3, [r7, #4]
 8102a80:	2224      	movs	r2, #36	@ 0x24
 8102a82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8102a86:	687b      	ldr	r3, [r7, #4]
 8102a88:	681b      	ldr	r3, [r3, #0]
 8102a8a:	681a      	ldr	r2, [r3, #0]
 8102a8c:	687b      	ldr	r3, [r7, #4]
 8102a8e:	681b      	ldr	r3, [r3, #0]
 8102a90:	f022 0201 	bic.w	r2, r2, #1
 8102a94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8102a96:	687b      	ldr	r3, [r7, #4]
 8102a98:	681b      	ldr	r3, [r3, #0]
 8102a9a:	681b      	ldr	r3, [r3, #0]
 8102a9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8102a9e:	68fb      	ldr	r3, [r7, #12]
 8102aa0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8102aa4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8102aa6:	683b      	ldr	r3, [r7, #0]
 8102aa8:	021b      	lsls	r3, r3, #8
 8102aaa:	68fa      	ldr	r2, [r7, #12]
 8102aac:	4313      	orrs	r3, r2
 8102aae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8102ab0:	687b      	ldr	r3, [r7, #4]
 8102ab2:	681b      	ldr	r3, [r3, #0]
 8102ab4:	68fa      	ldr	r2, [r7, #12]
 8102ab6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8102ab8:	687b      	ldr	r3, [r7, #4]
 8102aba:	681b      	ldr	r3, [r3, #0]
 8102abc:	681a      	ldr	r2, [r3, #0]
 8102abe:	687b      	ldr	r3, [r7, #4]
 8102ac0:	681b      	ldr	r3, [r3, #0]
 8102ac2:	f042 0201 	orr.w	r2, r2, #1
 8102ac6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8102ac8:	687b      	ldr	r3, [r7, #4]
 8102aca:	2220      	movs	r2, #32
 8102acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102ad0:	687b      	ldr	r3, [r7, #4]
 8102ad2:	2200      	movs	r2, #0
 8102ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8102ad8:	2300      	movs	r3, #0
 8102ada:	e000      	b.n	8102ade <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8102adc:	2302      	movs	r3, #2
  }
}
 8102ade:	4618      	mov	r0, r3
 8102ae0:	3714      	adds	r7, #20
 8102ae2:	46bd      	mov	sp, r7
 8102ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ae8:	4770      	bx	lr
	...

08102aec <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8102aec:	b580      	push	{r7, lr}
 8102aee:	b084      	sub	sp, #16
 8102af0:	af00      	add	r7, sp, #0
 8102af2:	60f8      	str	r0, [r7, #12]
 8102af4:	460b      	mov	r3, r1
 8102af6:	607a      	str	r2, [r7, #4]
 8102af8:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8102afa:	4b37      	ldr	r3, [pc, #220]	@ (8102bd8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102afc:	681b      	ldr	r3, [r3, #0]
 8102afe:	f023 0201 	bic.w	r2, r3, #1
 8102b02:	4935      	ldr	r1, [pc, #212]	@ (8102bd8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b04:	68fb      	ldr	r3, [r7, #12]
 8102b06:	4313      	orrs	r3, r2
 8102b08:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8102b0a:	687b      	ldr	r3, [r7, #4]
 8102b0c:	2b00      	cmp	r3, #0
 8102b0e:	d123      	bne.n	8102b58 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102b10:	f7fe fffa 	bl	8101b08 <HAL_GetCurrentCPUID>
 8102b14:	4603      	mov	r3, r0
 8102b16:	2b03      	cmp	r3, #3
 8102b18:	d158      	bne.n	8102bcc <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8102b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8102bd8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b1c:	691b      	ldr	r3, [r3, #16]
 8102b1e:	4a2e      	ldr	r2, [pc, #184]	@ (8102bd8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b20:	f023 0301 	bic.w	r3, r3, #1
 8102b24:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102b26:	4b2d      	ldr	r3, [pc, #180]	@ (8102bdc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b28:	691b      	ldr	r3, [r3, #16]
 8102b2a:	4a2c      	ldr	r2, [pc, #176]	@ (8102bdc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b2c:	f043 0304 	orr.w	r3, r3, #4
 8102b30:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8102b32:	f3bf 8f4f 	dsb	sy
}
 8102b36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102b38:	f3bf 8f6f 	isb	sy
}
 8102b3c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102b3e:	7afb      	ldrb	r3, [r7, #11]
 8102b40:	2b01      	cmp	r3, #1
 8102b42:	d101      	bne.n	8102b48 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102b44:	bf30      	wfi
 8102b46:	e000      	b.n	8102b4a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102b48:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102b4a:	4b24      	ldr	r3, [pc, #144]	@ (8102bdc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b4c:	691b      	ldr	r3, [r3, #16]
 8102b4e:	4a23      	ldr	r2, [pc, #140]	@ (8102bdc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b50:	f023 0304 	bic.w	r3, r3, #4
 8102b54:	6113      	str	r3, [r2, #16]
 8102b56:	e03c      	b.n	8102bd2 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8102b58:	687b      	ldr	r3, [r7, #4]
 8102b5a:	2b01      	cmp	r3, #1
 8102b5c:	d123      	bne.n	8102ba6 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8102b5e:	f7fe ffd3 	bl	8101b08 <HAL_GetCurrentCPUID>
 8102b62:	4603      	mov	r3, r0
 8102b64:	2b01      	cmp	r3, #1
 8102b66:	d133      	bne.n	8102bd0 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8102b68:	4b1b      	ldr	r3, [pc, #108]	@ (8102bd8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b6a:	695b      	ldr	r3, [r3, #20]
 8102b6c:	4a1a      	ldr	r2, [pc, #104]	@ (8102bd8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102b6e:	f023 0302 	bic.w	r3, r3, #2
 8102b72:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102b74:	4b19      	ldr	r3, [pc, #100]	@ (8102bdc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b76:	691b      	ldr	r3, [r3, #16]
 8102b78:	4a18      	ldr	r2, [pc, #96]	@ (8102bdc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b7a:	f043 0304 	orr.w	r3, r3, #4
 8102b7e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102b80:	f3bf 8f4f 	dsb	sy
}
 8102b84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102b86:	f3bf 8f6f 	isb	sy
}
 8102b8a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102b8c:	7afb      	ldrb	r3, [r7, #11]
 8102b8e:	2b01      	cmp	r3, #1
 8102b90:	d101      	bne.n	8102b96 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102b92:	bf30      	wfi
 8102b94:	e000      	b.n	8102b98 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102b96:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102b98:	4b10      	ldr	r3, [pc, #64]	@ (8102bdc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b9a:	691b      	ldr	r3, [r3, #16]
 8102b9c:	4a0f      	ldr	r2, [pc, #60]	@ (8102bdc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102b9e:	f023 0304 	bic.w	r3, r3, #4
 8102ba2:	6113      	str	r3, [r2, #16]
 8102ba4:	e015      	b.n	8102bd2 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102ba6:	f7fe ffaf 	bl	8101b08 <HAL_GetCurrentCPUID>
 8102baa:	4603      	mov	r3, r0
 8102bac:	2b03      	cmp	r3, #3
 8102bae:	d106      	bne.n	8102bbe <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102bb0:	4b09      	ldr	r3, [pc, #36]	@ (8102bd8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102bb2:	691b      	ldr	r3, [r3, #16]
 8102bb4:	4a08      	ldr	r2, [pc, #32]	@ (8102bd8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102bb6:	f023 0304 	bic.w	r3, r3, #4
 8102bba:	6113      	str	r3, [r2, #16]
 8102bbc:	e009      	b.n	8102bd2 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8102bbe:	4b06      	ldr	r3, [pc, #24]	@ (8102bd8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102bc0:	695b      	ldr	r3, [r3, #20]
 8102bc2:	4a05      	ldr	r2, [pc, #20]	@ (8102bd8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102bc4:	f023 0304 	bic.w	r3, r3, #4
 8102bc8:	6153      	str	r3, [r2, #20]
 8102bca:	e002      	b.n	8102bd2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102bcc:	bf00      	nop
 8102bce:	e000      	b.n	8102bd2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102bd0:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8102bd2:	3710      	adds	r7, #16
 8102bd4:	46bd      	mov	sp, r7
 8102bd6:	bd80      	pop	{r7, pc}
 8102bd8:	58024800 	.word	0x58024800
 8102bdc:	e000ed00 	.word	0xe000ed00

08102be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8102be0:	b480      	push	{r7}
 8102be2:	b089      	sub	sp, #36	@ 0x24
 8102be4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8102be6:	4bb3      	ldr	r3, [pc, #716]	@ (8102eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102be8:	691b      	ldr	r3, [r3, #16]
 8102bea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8102bee:	2b18      	cmp	r3, #24
 8102bf0:	f200 8155 	bhi.w	8102e9e <HAL_RCC_GetSysClockFreq+0x2be>
 8102bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8102bfc <HAL_RCC_GetSysClockFreq+0x1c>)
 8102bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102bfa:	bf00      	nop
 8102bfc:	08102c61 	.word	0x08102c61
 8102c00:	08102e9f 	.word	0x08102e9f
 8102c04:	08102e9f 	.word	0x08102e9f
 8102c08:	08102e9f 	.word	0x08102e9f
 8102c0c:	08102e9f 	.word	0x08102e9f
 8102c10:	08102e9f 	.word	0x08102e9f
 8102c14:	08102e9f 	.word	0x08102e9f
 8102c18:	08102e9f 	.word	0x08102e9f
 8102c1c:	08102c87 	.word	0x08102c87
 8102c20:	08102e9f 	.word	0x08102e9f
 8102c24:	08102e9f 	.word	0x08102e9f
 8102c28:	08102e9f 	.word	0x08102e9f
 8102c2c:	08102e9f 	.word	0x08102e9f
 8102c30:	08102e9f 	.word	0x08102e9f
 8102c34:	08102e9f 	.word	0x08102e9f
 8102c38:	08102e9f 	.word	0x08102e9f
 8102c3c:	08102c8d 	.word	0x08102c8d
 8102c40:	08102e9f 	.word	0x08102e9f
 8102c44:	08102e9f 	.word	0x08102e9f
 8102c48:	08102e9f 	.word	0x08102e9f
 8102c4c:	08102e9f 	.word	0x08102e9f
 8102c50:	08102e9f 	.word	0x08102e9f
 8102c54:	08102e9f 	.word	0x08102e9f
 8102c58:	08102e9f 	.word	0x08102e9f
 8102c5c:	08102c93 	.word	0x08102c93
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102c60:	4b94      	ldr	r3, [pc, #592]	@ (8102eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c62:	681b      	ldr	r3, [r3, #0]
 8102c64:	f003 0320 	and.w	r3, r3, #32
 8102c68:	2b00      	cmp	r3, #0
 8102c6a:	d009      	beq.n	8102c80 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102c6c:	4b91      	ldr	r3, [pc, #580]	@ (8102eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c6e:	681b      	ldr	r3, [r3, #0]
 8102c70:	08db      	lsrs	r3, r3, #3
 8102c72:	f003 0303 	and.w	r3, r3, #3
 8102c76:	4a90      	ldr	r2, [pc, #576]	@ (8102eb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102c78:	fa22 f303 	lsr.w	r3, r2, r3
 8102c7c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8102c7e:	e111      	b.n	8102ea4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8102c80:	4b8d      	ldr	r3, [pc, #564]	@ (8102eb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102c82:	61bb      	str	r3, [r7, #24]
      break;
 8102c84:	e10e      	b.n	8102ea4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8102c86:	4b8d      	ldr	r3, [pc, #564]	@ (8102ebc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102c88:	61bb      	str	r3, [r7, #24]
      break;
 8102c8a:	e10b      	b.n	8102ea4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8102c8c:	4b8c      	ldr	r3, [pc, #560]	@ (8102ec0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8102c8e:	61bb      	str	r3, [r7, #24]
      break;
 8102c90:	e108      	b.n	8102ea4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102c92:	4b88      	ldr	r3, [pc, #544]	@ (8102eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102c96:	f003 0303 	and.w	r3, r3, #3
 8102c9a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8102c9c:	4b85      	ldr	r3, [pc, #532]	@ (8102eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102ca0:	091b      	lsrs	r3, r3, #4
 8102ca2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8102ca6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8102ca8:	4b82      	ldr	r3, [pc, #520]	@ (8102eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102cac:	f003 0301 	and.w	r3, r3, #1
 8102cb0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8102cb2:	4b80      	ldr	r3, [pc, #512]	@ (8102eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8102cb6:	08db      	lsrs	r3, r3, #3
 8102cb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102cbc:	68fa      	ldr	r2, [r7, #12]
 8102cbe:	fb02 f303 	mul.w	r3, r2, r3
 8102cc2:	ee07 3a90 	vmov	s15, r3
 8102cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102cca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8102cce:	693b      	ldr	r3, [r7, #16]
 8102cd0:	2b00      	cmp	r3, #0
 8102cd2:	f000 80e1 	beq.w	8102e98 <HAL_RCC_GetSysClockFreq+0x2b8>
 8102cd6:	697b      	ldr	r3, [r7, #20]
 8102cd8:	2b02      	cmp	r3, #2
 8102cda:	f000 8083 	beq.w	8102de4 <HAL_RCC_GetSysClockFreq+0x204>
 8102cde:	697b      	ldr	r3, [r7, #20]
 8102ce0:	2b02      	cmp	r3, #2
 8102ce2:	f200 80a1 	bhi.w	8102e28 <HAL_RCC_GetSysClockFreq+0x248>
 8102ce6:	697b      	ldr	r3, [r7, #20]
 8102ce8:	2b00      	cmp	r3, #0
 8102cea:	d003      	beq.n	8102cf4 <HAL_RCC_GetSysClockFreq+0x114>
 8102cec:	697b      	ldr	r3, [r7, #20]
 8102cee:	2b01      	cmp	r3, #1
 8102cf0:	d056      	beq.n	8102da0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8102cf2:	e099      	b.n	8102e28 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102cf4:	4b6f      	ldr	r3, [pc, #444]	@ (8102eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102cf6:	681b      	ldr	r3, [r3, #0]
 8102cf8:	f003 0320 	and.w	r3, r3, #32
 8102cfc:	2b00      	cmp	r3, #0
 8102cfe:	d02d      	beq.n	8102d5c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102d00:	4b6c      	ldr	r3, [pc, #432]	@ (8102eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102d02:	681b      	ldr	r3, [r3, #0]
 8102d04:	08db      	lsrs	r3, r3, #3
 8102d06:	f003 0303 	and.w	r3, r3, #3
 8102d0a:	4a6b      	ldr	r2, [pc, #428]	@ (8102eb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8102d10:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102d12:	687b      	ldr	r3, [r7, #4]
 8102d14:	ee07 3a90 	vmov	s15, r3
 8102d18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102d1c:	693b      	ldr	r3, [r7, #16]
 8102d1e:	ee07 3a90 	vmov	s15, r3
 8102d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102d2a:	4b62      	ldr	r3, [pc, #392]	@ (8102eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102d32:	ee07 3a90 	vmov	s15, r3
 8102d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102d3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8102d3e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8102ec4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102d4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102d56:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8102d5a:	e087      	b.n	8102e6c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102d5c:	693b      	ldr	r3, [r7, #16]
 8102d5e:	ee07 3a90 	vmov	s15, r3
 8102d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d66:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8102ec8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8102d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102d6e:	4b51      	ldr	r3, [pc, #324]	@ (8102eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102d76:	ee07 3a90 	vmov	s15, r3
 8102d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102d7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8102d82:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8102ec4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102d8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102d9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102d9e:	e065      	b.n	8102e6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102da0:	693b      	ldr	r3, [r7, #16]
 8102da2:	ee07 3a90 	vmov	s15, r3
 8102da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102daa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8102ecc <HAL_RCC_GetSysClockFreq+0x2ec>
 8102dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102db2:	4b40      	ldr	r3, [pc, #256]	@ (8102eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102dba:	ee07 3a90 	vmov	s15, r3
 8102dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102dc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8102dc6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8102ec4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102dd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102dde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102de2:	e043      	b.n	8102e6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102de4:	693b      	ldr	r3, [r7, #16]
 8102de6:	ee07 3a90 	vmov	s15, r3
 8102dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102dee:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8102ed0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8102df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102df6:	4b2f      	ldr	r3, [pc, #188]	@ (8102eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102dfe:	ee07 3a90 	vmov	s15, r3
 8102e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102e06:	ed97 6a02 	vldr	s12, [r7, #8]
 8102e0a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8102ec4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102e16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102e22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102e26:	e021      	b.n	8102e6c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102e28:	693b      	ldr	r3, [r7, #16]
 8102e2a:	ee07 3a90 	vmov	s15, r3
 8102e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102e32:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8102ecc <HAL_RCC_GetSysClockFreq+0x2ec>
 8102e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8102eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102e42:	ee07 3a90 	vmov	s15, r3
 8102e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102e4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8102e4e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8102ec4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102e5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102e66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102e6a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8102e6c:	4b11      	ldr	r3, [pc, #68]	@ (8102eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102e70:	0a5b      	lsrs	r3, r3, #9
 8102e72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8102e76:	3301      	adds	r3, #1
 8102e78:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8102e7a:	683b      	ldr	r3, [r7, #0]
 8102e7c:	ee07 3a90 	vmov	s15, r3
 8102e80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102e84:	edd7 6a07 	vldr	s13, [r7, #28]
 8102e88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102e8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102e90:	ee17 3a90 	vmov	r3, s15
 8102e94:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8102e96:	e005      	b.n	8102ea4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8102e98:	2300      	movs	r3, #0
 8102e9a:	61bb      	str	r3, [r7, #24]
      break;
 8102e9c:	e002      	b.n	8102ea4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8102e9e:	4b07      	ldr	r3, [pc, #28]	@ (8102ebc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102ea0:	61bb      	str	r3, [r7, #24]
      break;
 8102ea2:	bf00      	nop
  }

  return sysclockfreq;
 8102ea4:	69bb      	ldr	r3, [r7, #24]
}
 8102ea6:	4618      	mov	r0, r3
 8102ea8:	3724      	adds	r7, #36	@ 0x24
 8102eaa:	46bd      	mov	sp, r7
 8102eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102eb0:	4770      	bx	lr
 8102eb2:	bf00      	nop
 8102eb4:	58024400 	.word	0x58024400
 8102eb8:	03d09000 	.word	0x03d09000
 8102ebc:	003d0900 	.word	0x003d0900
 8102ec0:	017d7840 	.word	0x017d7840
 8102ec4:	46000000 	.word	0x46000000
 8102ec8:	4c742400 	.word	0x4c742400
 8102ecc:	4a742400 	.word	0x4a742400
 8102ed0:	4bbebc20 	.word	0x4bbebc20

08102ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8102ed4:	b580      	push	{r7, lr}
 8102ed6:	b082      	sub	sp, #8
 8102ed8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8102eda:	f7ff fe81 	bl	8102be0 <HAL_RCC_GetSysClockFreq>
 8102ede:	4602      	mov	r2, r0
 8102ee0:	4b11      	ldr	r3, [pc, #68]	@ (8102f28 <HAL_RCC_GetHCLKFreq+0x54>)
 8102ee2:	699b      	ldr	r3, [r3, #24]
 8102ee4:	0a1b      	lsrs	r3, r3, #8
 8102ee6:	f003 030f 	and.w	r3, r3, #15
 8102eea:	4910      	ldr	r1, [pc, #64]	@ (8102f2c <HAL_RCC_GetHCLKFreq+0x58>)
 8102eec:	5ccb      	ldrb	r3, [r1, r3]
 8102eee:	f003 031f 	and.w	r3, r3, #31
 8102ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8102ef6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8102f28 <HAL_RCC_GetHCLKFreq+0x54>)
 8102efa:	699b      	ldr	r3, [r3, #24]
 8102efc:	f003 030f 	and.w	r3, r3, #15
 8102f00:	4a0a      	ldr	r2, [pc, #40]	@ (8102f2c <HAL_RCC_GetHCLKFreq+0x58>)
 8102f02:	5cd3      	ldrb	r3, [r2, r3]
 8102f04:	f003 031f 	and.w	r3, r3, #31
 8102f08:	687a      	ldr	r2, [r7, #4]
 8102f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8102f0e:	4a08      	ldr	r2, [pc, #32]	@ (8102f30 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102f10:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102f12:	4b07      	ldr	r3, [pc, #28]	@ (8102f30 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102f14:	681b      	ldr	r3, [r3, #0]
 8102f16:	4a07      	ldr	r2, [pc, #28]	@ (8102f34 <HAL_RCC_GetHCLKFreq+0x60>)
 8102f18:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8102f1a:	4b05      	ldr	r3, [pc, #20]	@ (8102f30 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102f1c:	681b      	ldr	r3, [r3, #0]
}
 8102f1e:	4618      	mov	r0, r3
 8102f20:	3708      	adds	r7, #8
 8102f22:	46bd      	mov	sp, r7
 8102f24:	bd80      	pop	{r7, pc}
 8102f26:	bf00      	nop
 8102f28:	58024400 	.word	0x58024400
 8102f2c:	0810749c 	.word	0x0810749c
 8102f30:	10000004 	.word	0x10000004
 8102f34:	10000000 	.word	0x10000000

08102f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8102f38:	b580      	push	{r7, lr}
 8102f3a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8102f3c:	f7ff ffca 	bl	8102ed4 <HAL_RCC_GetHCLKFreq>
 8102f40:	4602      	mov	r2, r0
 8102f42:	4b06      	ldr	r3, [pc, #24]	@ (8102f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8102f44:	69db      	ldr	r3, [r3, #28]
 8102f46:	091b      	lsrs	r3, r3, #4
 8102f48:	f003 0307 	and.w	r3, r3, #7
 8102f4c:	4904      	ldr	r1, [pc, #16]	@ (8102f60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8102f4e:	5ccb      	ldrb	r3, [r1, r3]
 8102f50:	f003 031f 	and.w	r3, r3, #31
 8102f54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8102f58:	4618      	mov	r0, r3
 8102f5a:	bd80      	pop	{r7, pc}
 8102f5c:	58024400 	.word	0x58024400
 8102f60:	0810749c 	.word	0x0810749c

08102f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8102f64:	b580      	push	{r7, lr}
 8102f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8102f68:	f7ff ffb4 	bl	8102ed4 <HAL_RCC_GetHCLKFreq>
 8102f6c:	4602      	mov	r2, r0
 8102f6e:	4b06      	ldr	r3, [pc, #24]	@ (8102f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8102f70:	69db      	ldr	r3, [r3, #28]
 8102f72:	0a1b      	lsrs	r3, r3, #8
 8102f74:	f003 0307 	and.w	r3, r3, #7
 8102f78:	4904      	ldr	r1, [pc, #16]	@ (8102f8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8102f7a:	5ccb      	ldrb	r3, [r1, r3]
 8102f7c:	f003 031f 	and.w	r3, r3, #31
 8102f80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8102f84:	4618      	mov	r0, r3
 8102f86:	bd80      	pop	{r7, pc}
 8102f88:	58024400 	.word	0x58024400
 8102f8c:	0810749c 	.word	0x0810749c

08102f90 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8102f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8102f94:	b0ca      	sub	sp, #296	@ 0x128
 8102f96:	af00      	add	r7, sp, #0
 8102f98:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8102f9c:	2300      	movs	r3, #0
 8102f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8102fa2:	2300      	movs	r3, #0
 8102fa4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8102fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102fb0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8102fb4:	2500      	movs	r5, #0
 8102fb6:	ea54 0305 	orrs.w	r3, r4, r5
 8102fba:	d049      	beq.n	8103050 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8102fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102fc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8102fc2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102fc6:	d02f      	beq.n	8103028 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8102fc8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102fcc:	d828      	bhi.n	8103020 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8102fce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102fd2:	d01a      	beq.n	810300a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8102fd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102fd8:	d822      	bhi.n	8103020 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8102fda:	2b00      	cmp	r3, #0
 8102fdc:	d003      	beq.n	8102fe6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8102fde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8102fe2:	d007      	beq.n	8102ff4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8102fe4:	e01c      	b.n	8103020 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102fe6:	4bb8      	ldr	r3, [pc, #736]	@ (81032c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102fea:	4ab7      	ldr	r2, [pc, #732]	@ (81032c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102fec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102ff0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102ff2:	e01a      	b.n	810302a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ff8:	3308      	adds	r3, #8
 8102ffa:	2102      	movs	r1, #2
 8102ffc:	4618      	mov	r0, r3
 8102ffe:	f001 fc8f 	bl	8104920 <RCCEx_PLL2_Config>
 8103002:	4603      	mov	r3, r0
 8103004:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8103008:	e00f      	b.n	810302a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810300a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810300e:	3328      	adds	r3, #40	@ 0x28
 8103010:	2102      	movs	r1, #2
 8103012:	4618      	mov	r0, r3
 8103014:	f001 fd36 	bl	8104a84 <RCCEx_PLL3_Config>
 8103018:	4603      	mov	r3, r0
 810301a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810301e:	e004      	b.n	810302a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103020:	2301      	movs	r3, #1
 8103022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103026:	e000      	b.n	810302a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8103028:	bf00      	nop
    }

    if (ret == HAL_OK)
 810302a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810302e:	2b00      	cmp	r3, #0
 8103030:	d10a      	bne.n	8103048 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8103032:	4ba5      	ldr	r3, [pc, #660]	@ (81032c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103034:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103036:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810303a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810303e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8103040:	4aa1      	ldr	r2, [pc, #644]	@ (81032c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103042:	430b      	orrs	r3, r1
 8103044:	6513      	str	r3, [r2, #80]	@ 0x50
 8103046:	e003      	b.n	8103050 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103048:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810304c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8103050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103058:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 810305c:	f04f 0900 	mov.w	r9, #0
 8103060:	ea58 0309 	orrs.w	r3, r8, r9
 8103064:	d047      	beq.n	81030f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8103066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810306a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810306c:	2b04      	cmp	r3, #4
 810306e:	d82a      	bhi.n	81030c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8103070:	a201      	add	r2, pc, #4	@ (adr r2, 8103078 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8103072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103076:	bf00      	nop
 8103078:	0810308d 	.word	0x0810308d
 810307c:	0810309b 	.word	0x0810309b
 8103080:	081030b1 	.word	0x081030b1
 8103084:	081030cf 	.word	0x081030cf
 8103088:	081030cf 	.word	0x081030cf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810308c:	4b8e      	ldr	r3, [pc, #568]	@ (81032c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810308e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103090:	4a8d      	ldr	r2, [pc, #564]	@ (81032c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103092:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103096:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103098:	e01a      	b.n	81030d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810309a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810309e:	3308      	adds	r3, #8
 81030a0:	2100      	movs	r1, #0
 81030a2:	4618      	mov	r0, r3
 81030a4:	f001 fc3c 	bl	8104920 <RCCEx_PLL2_Config>
 81030a8:	4603      	mov	r3, r0
 81030aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81030ae:	e00f      	b.n	81030d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81030b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81030b4:	3328      	adds	r3, #40	@ 0x28
 81030b6:	2100      	movs	r1, #0
 81030b8:	4618      	mov	r0, r3
 81030ba:	f001 fce3 	bl	8104a84 <RCCEx_PLL3_Config>
 81030be:	4603      	mov	r3, r0
 81030c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81030c4:	e004      	b.n	81030d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81030c6:	2301      	movs	r3, #1
 81030c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81030cc:	e000      	b.n	81030d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 81030ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 81030d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81030d4:	2b00      	cmp	r3, #0
 81030d6:	d10a      	bne.n	81030ee <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81030d8:	4b7b      	ldr	r3, [pc, #492]	@ (81032c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81030da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81030dc:	f023 0107 	bic.w	r1, r3, #7
 81030e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81030e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81030e6:	4a78      	ldr	r2, [pc, #480]	@ (81032c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81030e8:	430b      	orrs	r3, r1
 81030ea:	6513      	str	r3, [r2, #80]	@ 0x50
 81030ec:	e003      	b.n	81030f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81030ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81030f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81030f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81030fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81030fe:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8103102:	f04f 0b00 	mov.w	fp, #0
 8103106:	ea5a 030b 	orrs.w	r3, sl, fp
 810310a:	d04c      	beq.n	81031a6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 810310c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103112:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103116:	d030      	beq.n	810317a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8103118:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810311c:	d829      	bhi.n	8103172 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810311e:	2bc0      	cmp	r3, #192	@ 0xc0
 8103120:	d02d      	beq.n	810317e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8103122:	2bc0      	cmp	r3, #192	@ 0xc0
 8103124:	d825      	bhi.n	8103172 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8103126:	2b80      	cmp	r3, #128	@ 0x80
 8103128:	d018      	beq.n	810315c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 810312a:	2b80      	cmp	r3, #128	@ 0x80
 810312c:	d821      	bhi.n	8103172 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810312e:	2b00      	cmp	r3, #0
 8103130:	d002      	beq.n	8103138 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8103132:	2b40      	cmp	r3, #64	@ 0x40
 8103134:	d007      	beq.n	8103146 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8103136:	e01c      	b.n	8103172 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103138:	4b63      	ldr	r3, [pc, #396]	@ (81032c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810313a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810313c:	4a62      	ldr	r2, [pc, #392]	@ (81032c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810313e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103142:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8103144:	e01c      	b.n	8103180 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810314a:	3308      	adds	r3, #8
 810314c:	2100      	movs	r1, #0
 810314e:	4618      	mov	r0, r3
 8103150:	f001 fbe6 	bl	8104920 <RCCEx_PLL2_Config>
 8103154:	4603      	mov	r3, r0
 8103156:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810315a:	e011      	b.n	8103180 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810315c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103160:	3328      	adds	r3, #40	@ 0x28
 8103162:	2100      	movs	r1, #0
 8103164:	4618      	mov	r0, r3
 8103166:	f001 fc8d 	bl	8104a84 <RCCEx_PLL3_Config>
 810316a:	4603      	mov	r3, r0
 810316c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8103170:	e006      	b.n	8103180 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103172:	2301      	movs	r3, #1
 8103174:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103178:	e002      	b.n	8103180 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810317a:	bf00      	nop
 810317c:	e000      	b.n	8103180 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810317e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103180:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103184:	2b00      	cmp	r3, #0
 8103186:	d10a      	bne.n	810319e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8103188:	4b4f      	ldr	r3, [pc, #316]	@ (81032c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810318a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810318c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8103190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103196:	4a4c      	ldr	r2, [pc, #304]	@ (81032c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103198:	430b      	orrs	r3, r1
 810319a:	6513      	str	r3, [r2, #80]	@ 0x50
 810319c:	e003      	b.n	81031a6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810319e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81031a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81031a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81031aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81031ae:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 81031b2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 81031b6:	2300      	movs	r3, #0
 81031b8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 81031bc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 81031c0:	460b      	mov	r3, r1
 81031c2:	4313      	orrs	r3, r2
 81031c4:	d053      	beq.n	810326e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 81031c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81031ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 81031ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81031d2:	d035      	beq.n	8103240 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 81031d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81031d8:	d82e      	bhi.n	8103238 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81031da:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81031de:	d031      	beq.n	8103244 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 81031e0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81031e4:	d828      	bhi.n	8103238 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81031e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81031ea:	d01a      	beq.n	8103222 <HAL_RCCEx_PeriphCLKConfig+0x292>
 81031ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81031f0:	d822      	bhi.n	8103238 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81031f2:	2b00      	cmp	r3, #0
 81031f4:	d003      	beq.n	81031fe <HAL_RCCEx_PeriphCLKConfig+0x26e>
 81031f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81031fa:	d007      	beq.n	810320c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 81031fc:	e01c      	b.n	8103238 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81031fe:	4b32      	ldr	r3, [pc, #200]	@ (81032c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103202:	4a31      	ldr	r2, [pc, #196]	@ (81032c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103204:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103208:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810320a:	e01c      	b.n	8103246 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810320c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103210:	3308      	adds	r3, #8
 8103212:	2100      	movs	r1, #0
 8103214:	4618      	mov	r0, r3
 8103216:	f001 fb83 	bl	8104920 <RCCEx_PLL2_Config>
 810321a:	4603      	mov	r3, r0
 810321c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8103220:	e011      	b.n	8103246 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103226:	3328      	adds	r3, #40	@ 0x28
 8103228:	2100      	movs	r1, #0
 810322a:	4618      	mov	r0, r3
 810322c:	f001 fc2a 	bl	8104a84 <RCCEx_PLL3_Config>
 8103230:	4603      	mov	r3, r0
 8103232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103236:	e006      	b.n	8103246 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8103238:	2301      	movs	r3, #1
 810323a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810323e:	e002      	b.n	8103246 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8103240:	bf00      	nop
 8103242:	e000      	b.n	8103246 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8103244:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103246:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810324a:	2b00      	cmp	r3, #0
 810324c:	d10b      	bne.n	8103266 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810324e:	4b1e      	ldr	r3, [pc, #120]	@ (81032c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103252:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8103256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810325a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810325e:	4a1a      	ldr	r2, [pc, #104]	@ (81032c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103260:	430b      	orrs	r3, r1
 8103262:	6593      	str	r3, [r2, #88]	@ 0x58
 8103264:	e003      	b.n	810326e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103266:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810326a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810326e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103276:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 810327a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 810327e:	2300      	movs	r3, #0
 8103280:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8103284:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8103288:	460b      	mov	r3, r1
 810328a:	4313      	orrs	r3, r2
 810328c:	d056      	beq.n	810333c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 810328e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103292:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8103296:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810329a:	d038      	beq.n	810330e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 810329c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81032a0:	d831      	bhi.n	8103306 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81032a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81032a6:	d034      	beq.n	8103312 <HAL_RCCEx_PeriphCLKConfig+0x382>
 81032a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81032ac:	d82b      	bhi.n	8103306 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81032ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81032b2:	d01d      	beq.n	81032f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 81032b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81032b8:	d825      	bhi.n	8103306 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81032ba:	2b00      	cmp	r3, #0
 81032bc:	d006      	beq.n	81032cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 81032be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81032c2:	d00a      	beq.n	81032da <HAL_RCCEx_PeriphCLKConfig+0x34a>
 81032c4:	e01f      	b.n	8103306 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81032c6:	bf00      	nop
 81032c8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81032cc:	4ba2      	ldr	r3, [pc, #648]	@ (8103558 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81032ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81032d0:	4aa1      	ldr	r2, [pc, #644]	@ (8103558 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81032d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81032d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81032d8:	e01c      	b.n	8103314 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81032da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81032de:	3308      	adds	r3, #8
 81032e0:	2100      	movs	r1, #0
 81032e2:	4618      	mov	r0, r3
 81032e4:	f001 fb1c 	bl	8104920 <RCCEx_PLL2_Config>
 81032e8:	4603      	mov	r3, r0
 81032ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81032ee:	e011      	b.n	8103314 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81032f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81032f4:	3328      	adds	r3, #40	@ 0x28
 81032f6:	2100      	movs	r1, #0
 81032f8:	4618      	mov	r0, r3
 81032fa:	f001 fbc3 	bl	8104a84 <RCCEx_PLL3_Config>
 81032fe:	4603      	mov	r3, r0
 8103300:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103304:	e006      	b.n	8103314 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8103306:	2301      	movs	r3, #1
 8103308:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810330c:	e002      	b.n	8103314 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810330e:	bf00      	nop
 8103310:	e000      	b.n	8103314 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8103312:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103314:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103318:	2b00      	cmp	r3, #0
 810331a:	d10b      	bne.n	8103334 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 810331c:	4b8e      	ldr	r3, [pc, #568]	@ (8103558 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810331e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103320:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8103324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103328:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810332c:	4a8a      	ldr	r2, [pc, #552]	@ (8103558 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810332e:	430b      	orrs	r3, r1
 8103330:	6593      	str	r3, [r2, #88]	@ 0x58
 8103332:	e003      	b.n	810333c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103334:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103338:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 810333c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103344:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8103348:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 810334c:	2300      	movs	r3, #0
 810334e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8103352:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8103356:	460b      	mov	r3, r1
 8103358:	4313      	orrs	r3, r2
 810335a:	d03a      	beq.n	81033d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 810335c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103362:	2b30      	cmp	r3, #48	@ 0x30
 8103364:	d01f      	beq.n	81033a6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8103366:	2b30      	cmp	r3, #48	@ 0x30
 8103368:	d819      	bhi.n	810339e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810336a:	2b20      	cmp	r3, #32
 810336c:	d00c      	beq.n	8103388 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 810336e:	2b20      	cmp	r3, #32
 8103370:	d815      	bhi.n	810339e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8103372:	2b00      	cmp	r3, #0
 8103374:	d019      	beq.n	81033aa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8103376:	2b10      	cmp	r3, #16
 8103378:	d111      	bne.n	810339e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810337a:	4b77      	ldr	r3, [pc, #476]	@ (8103558 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810337c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810337e:	4a76      	ldr	r2, [pc, #472]	@ (8103558 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103380:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103384:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8103386:	e011      	b.n	81033ac <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810338c:	3308      	adds	r3, #8
 810338e:	2102      	movs	r1, #2
 8103390:	4618      	mov	r0, r3
 8103392:	f001 fac5 	bl	8104920 <RCCEx_PLL2_Config>
 8103396:	4603      	mov	r3, r0
 8103398:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810339c:	e006      	b.n	81033ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810339e:	2301      	movs	r3, #1
 81033a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81033a4:	e002      	b.n	81033ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81033a6:	bf00      	nop
 81033a8:	e000      	b.n	81033ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81033aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 81033ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81033b0:	2b00      	cmp	r3, #0
 81033b2:	d10a      	bne.n	81033ca <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81033b4:	4b68      	ldr	r3, [pc, #416]	@ (8103558 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81033b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81033b8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 81033bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81033c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81033c2:	4a65      	ldr	r2, [pc, #404]	@ (8103558 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81033c4:	430b      	orrs	r3, r1
 81033c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81033c8:	e003      	b.n	81033d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81033ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81033ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81033d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81033d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81033da:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 81033de:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 81033e2:	2300      	movs	r3, #0
 81033e4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 81033e8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 81033ec:	460b      	mov	r3, r1
 81033ee:	4313      	orrs	r3, r2
 81033f0:	d051      	beq.n	8103496 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 81033f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81033f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81033f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81033fc:	d035      	beq.n	810346a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 81033fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8103402:	d82e      	bhi.n	8103462 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103404:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8103408:	d031      	beq.n	810346e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 810340a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810340e:	d828      	bhi.n	8103462 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103410:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8103414:	d01a      	beq.n	810344c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8103416:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810341a:	d822      	bhi.n	8103462 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810341c:	2b00      	cmp	r3, #0
 810341e:	d003      	beq.n	8103428 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8103420:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103424:	d007      	beq.n	8103436 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8103426:	e01c      	b.n	8103462 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103428:	4b4b      	ldr	r3, [pc, #300]	@ (8103558 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810342a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810342c:	4a4a      	ldr	r2, [pc, #296]	@ (8103558 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810342e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103432:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103434:	e01c      	b.n	8103470 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810343a:	3308      	adds	r3, #8
 810343c:	2100      	movs	r1, #0
 810343e:	4618      	mov	r0, r3
 8103440:	f001 fa6e 	bl	8104920 <RCCEx_PLL2_Config>
 8103444:	4603      	mov	r3, r0
 8103446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810344a:	e011      	b.n	8103470 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810344c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103450:	3328      	adds	r3, #40	@ 0x28
 8103452:	2100      	movs	r1, #0
 8103454:	4618      	mov	r0, r3
 8103456:	f001 fb15 	bl	8104a84 <RCCEx_PLL3_Config>
 810345a:	4603      	mov	r3, r0
 810345c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103460:	e006      	b.n	8103470 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103462:	2301      	movs	r3, #1
 8103464:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103468:	e002      	b.n	8103470 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810346a:	bf00      	nop
 810346c:	e000      	b.n	8103470 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810346e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103470:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103474:	2b00      	cmp	r3, #0
 8103476:	d10a      	bne.n	810348e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8103478:	4b37      	ldr	r3, [pc, #220]	@ (8103558 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810347a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810347c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8103480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103486:	4a34      	ldr	r2, [pc, #208]	@ (8103558 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103488:	430b      	orrs	r3, r1
 810348a:	6513      	str	r3, [r2, #80]	@ 0x50
 810348c:	e003      	b.n	8103496 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810348e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103492:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8103496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810349a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810349e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 81034a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 81034a6:	2300      	movs	r3, #0
 81034a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 81034ac:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 81034b0:	460b      	mov	r3, r1
 81034b2:	4313      	orrs	r3, r2
 81034b4:	d056      	beq.n	8103564 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 81034b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81034ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81034bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 81034c0:	d033      	beq.n	810352a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 81034c2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 81034c6:	d82c      	bhi.n	8103522 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81034c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81034cc:	d02f      	beq.n	810352e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 81034ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81034d2:	d826      	bhi.n	8103522 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81034d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81034d8:	d02b      	beq.n	8103532 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 81034da:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81034de:	d820      	bhi.n	8103522 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81034e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81034e4:	d012      	beq.n	810350c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 81034e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81034ea:	d81a      	bhi.n	8103522 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81034ec:	2b00      	cmp	r3, #0
 81034ee:	d022      	beq.n	8103536 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 81034f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81034f4:	d115      	bne.n	8103522 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81034f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81034fa:	3308      	adds	r3, #8
 81034fc:	2101      	movs	r1, #1
 81034fe:	4618      	mov	r0, r3
 8103500:	f001 fa0e 	bl	8104920 <RCCEx_PLL2_Config>
 8103504:	4603      	mov	r3, r0
 8103506:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810350a:	e015      	b.n	8103538 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810350c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103510:	3328      	adds	r3, #40	@ 0x28
 8103512:	2101      	movs	r1, #1
 8103514:	4618      	mov	r0, r3
 8103516:	f001 fab5 	bl	8104a84 <RCCEx_PLL3_Config>
 810351a:	4603      	mov	r3, r0
 810351c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8103520:	e00a      	b.n	8103538 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103522:	2301      	movs	r3, #1
 8103524:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103528:	e006      	b.n	8103538 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810352a:	bf00      	nop
 810352c:	e004      	b.n	8103538 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810352e:	bf00      	nop
 8103530:	e002      	b.n	8103538 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103532:	bf00      	nop
 8103534:	e000      	b.n	8103538 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103536:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103538:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810353c:	2b00      	cmp	r3, #0
 810353e:	d10d      	bne.n	810355c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8103540:	4b05      	ldr	r3, [pc, #20]	@ (8103558 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103542:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103544:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8103548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810354c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810354e:	4a02      	ldr	r2, [pc, #8]	@ (8103558 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103550:	430b      	orrs	r3, r1
 8103552:	6513      	str	r3, [r2, #80]	@ 0x50
 8103554:	e006      	b.n	8103564 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8103556:	bf00      	nop
 8103558:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810355c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103560:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8103564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103568:	e9d3 2300 	ldrd	r2, r3, [r3]
 810356c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8103570:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8103574:	2300      	movs	r3, #0
 8103576:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 810357a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 810357e:	460b      	mov	r3, r1
 8103580:	4313      	orrs	r3, r2
 8103582:	d055      	beq.n	8103630 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8103584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103588:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810358c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103590:	d033      	beq.n	81035fa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8103592:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103596:	d82c      	bhi.n	81035f2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103598:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810359c:	d02f      	beq.n	81035fe <HAL_RCCEx_PeriphCLKConfig+0x66e>
 810359e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81035a2:	d826      	bhi.n	81035f2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81035a4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81035a8:	d02b      	beq.n	8103602 <HAL_RCCEx_PeriphCLKConfig+0x672>
 81035aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81035ae:	d820      	bhi.n	81035f2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81035b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81035b4:	d012      	beq.n	81035dc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 81035b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81035ba:	d81a      	bhi.n	81035f2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81035bc:	2b00      	cmp	r3, #0
 81035be:	d022      	beq.n	8103606 <HAL_RCCEx_PeriphCLKConfig+0x676>
 81035c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81035c4:	d115      	bne.n	81035f2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81035c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81035ca:	3308      	adds	r3, #8
 81035cc:	2101      	movs	r1, #1
 81035ce:	4618      	mov	r0, r3
 81035d0:	f001 f9a6 	bl	8104920 <RCCEx_PLL2_Config>
 81035d4:	4603      	mov	r3, r0
 81035d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81035da:	e015      	b.n	8103608 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81035dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81035e0:	3328      	adds	r3, #40	@ 0x28
 81035e2:	2101      	movs	r1, #1
 81035e4:	4618      	mov	r0, r3
 81035e6:	f001 fa4d 	bl	8104a84 <RCCEx_PLL3_Config>
 81035ea:	4603      	mov	r3, r0
 81035ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81035f0:	e00a      	b.n	8103608 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 81035f2:	2301      	movs	r3, #1
 81035f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81035f8:	e006      	b.n	8103608 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81035fa:	bf00      	nop
 81035fc:	e004      	b.n	8103608 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81035fe:	bf00      	nop
 8103600:	e002      	b.n	8103608 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103602:	bf00      	nop
 8103604:	e000      	b.n	8103608 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103606:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103608:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810360c:	2b00      	cmp	r3, #0
 810360e:	d10b      	bne.n	8103628 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103610:	4ba4      	ldr	r3, [pc, #656]	@ (81038a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103614:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8103618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810361c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8103620:	4aa0      	ldr	r2, [pc, #640]	@ (81038a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103622:	430b      	orrs	r3, r1
 8103624:	6593      	str	r3, [r2, #88]	@ 0x58
 8103626:	e003      	b.n	8103630 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103628:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810362c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8103630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103638:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 810363c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8103640:	2300      	movs	r3, #0
 8103642:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8103646:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 810364a:	460b      	mov	r3, r1
 810364c:	4313      	orrs	r3, r2
 810364e:	d037      	beq.n	81036c0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8103650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103656:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810365a:	d00e      	beq.n	810367a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 810365c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103660:	d816      	bhi.n	8103690 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8103662:	2b00      	cmp	r3, #0
 8103664:	d018      	beq.n	8103698 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8103666:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810366a:	d111      	bne.n	8103690 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810366c:	4b8d      	ldr	r3, [pc, #564]	@ (81038a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810366e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103670:	4a8c      	ldr	r2, [pc, #560]	@ (81038a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103672:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103676:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8103678:	e00f      	b.n	810369a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810367a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810367e:	3308      	adds	r3, #8
 8103680:	2101      	movs	r1, #1
 8103682:	4618      	mov	r0, r3
 8103684:	f001 f94c 	bl	8104920 <RCCEx_PLL2_Config>
 8103688:	4603      	mov	r3, r0
 810368a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810368e:	e004      	b.n	810369a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103690:	2301      	movs	r3, #1
 8103692:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103696:	e000      	b.n	810369a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8103698:	bf00      	nop
    }

    if (ret == HAL_OK)
 810369a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810369e:	2b00      	cmp	r3, #0
 81036a0:	d10a      	bne.n	81036b8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81036a2:	4b80      	ldr	r3, [pc, #512]	@ (81038a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81036a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81036a6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 81036aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81036ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81036b0:	4a7c      	ldr	r2, [pc, #496]	@ (81038a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81036b2:	430b      	orrs	r3, r1
 81036b4:	6513      	str	r3, [r2, #80]	@ 0x50
 81036b6:	e003      	b.n	81036c0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81036b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81036bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81036c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81036c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81036c8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 81036cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 81036d0:	2300      	movs	r3, #0
 81036d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 81036d6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 81036da:	460b      	mov	r3, r1
 81036dc:	4313      	orrs	r3, r2
 81036de:	d039      	beq.n	8103754 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 81036e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81036e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81036e6:	2b03      	cmp	r3, #3
 81036e8:	d81c      	bhi.n	8103724 <HAL_RCCEx_PeriphCLKConfig+0x794>
 81036ea:	a201      	add	r2, pc, #4	@ (adr r2, 81036f0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 81036ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81036f0:	0810372d 	.word	0x0810372d
 81036f4:	08103701 	.word	0x08103701
 81036f8:	0810370f 	.word	0x0810370f
 81036fc:	0810372d 	.word	0x0810372d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103700:	4b68      	ldr	r3, [pc, #416]	@ (81038a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103704:	4a67      	ldr	r2, [pc, #412]	@ (81038a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103706:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810370a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 810370c:	e00f      	b.n	810372e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810370e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103712:	3308      	adds	r3, #8
 8103714:	2102      	movs	r1, #2
 8103716:	4618      	mov	r0, r3
 8103718:	f001 f902 	bl	8104920 <RCCEx_PLL2_Config>
 810371c:	4603      	mov	r3, r0
 810371e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8103722:	e004      	b.n	810372e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8103724:	2301      	movs	r3, #1
 8103726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810372a:	e000      	b.n	810372e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 810372c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810372e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103732:	2b00      	cmp	r3, #0
 8103734:	d10a      	bne.n	810374c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8103736:	4b5b      	ldr	r3, [pc, #364]	@ (81038a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810373a:	f023 0103 	bic.w	r1, r3, #3
 810373e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103742:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103744:	4a57      	ldr	r2, [pc, #348]	@ (81038a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103746:	430b      	orrs	r3, r1
 8103748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810374a:	e003      	b.n	8103754 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810374c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103750:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8103754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103758:	e9d3 2300 	ldrd	r2, r3, [r3]
 810375c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8103760:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8103764:	2300      	movs	r3, #0
 8103766:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 810376a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 810376e:	460b      	mov	r3, r1
 8103770:	4313      	orrs	r3, r2
 8103772:	f000 809f 	beq.w	81038b4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8103776:	4b4c      	ldr	r3, [pc, #304]	@ (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8103778:	681b      	ldr	r3, [r3, #0]
 810377a:	4a4b      	ldr	r2, [pc, #300]	@ (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810377c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8103780:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8103782:	f7fe f881 	bl	8101888 <HAL_GetTick>
 8103786:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810378a:	e00b      	b.n	81037a4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 810378c:	f7fe f87c 	bl	8101888 <HAL_GetTick>
 8103790:	4602      	mov	r2, r0
 8103792:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8103796:	1ad3      	subs	r3, r2, r3
 8103798:	2b64      	cmp	r3, #100	@ 0x64
 810379a:	d903      	bls.n	81037a4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 810379c:	2303      	movs	r3, #3
 810379e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81037a2:	e005      	b.n	81037b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81037a4:	4b40      	ldr	r3, [pc, #256]	@ (81038a8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81037a6:	681b      	ldr	r3, [r3, #0]
 81037a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81037ac:	2b00      	cmp	r3, #0
 81037ae:	d0ed      	beq.n	810378c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 81037b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81037b4:	2b00      	cmp	r3, #0
 81037b6:	d179      	bne.n	81038ac <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81037b8:	4b3a      	ldr	r3, [pc, #232]	@ (81038a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81037ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 81037bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81037c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81037c4:	4053      	eors	r3, r2
 81037c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81037ca:	2b00      	cmp	r3, #0
 81037cc:	d015      	beq.n	81037fa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81037ce:	4b35      	ldr	r3, [pc, #212]	@ (81038a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81037d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81037d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 81037d6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81037da:	4b32      	ldr	r3, [pc, #200]	@ (81038a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81037dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81037de:	4a31      	ldr	r2, [pc, #196]	@ (81038a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81037e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 81037e4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81037e6:	4b2f      	ldr	r3, [pc, #188]	@ (81038a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81037e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81037ea:	4a2e      	ldr	r2, [pc, #184]	@ (81038a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81037ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 81037f0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81037f2:	4a2c      	ldr	r2, [pc, #176]	@ (81038a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81037f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81037f8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81037fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81037fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8103802:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103806:	d118      	bne.n	810383a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103808:	f7fe f83e 	bl	8101888 <HAL_GetTick>
 810380c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103810:	e00d      	b.n	810382e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103812:	f7fe f839 	bl	8101888 <HAL_GetTick>
 8103816:	4602      	mov	r2, r0
 8103818:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 810381c:	1ad2      	subs	r2, r2, r3
 810381e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8103822:	429a      	cmp	r2, r3
 8103824:	d903      	bls.n	810382e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8103826:	2303      	movs	r3, #3
 8103828:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 810382c:	e005      	b.n	810383a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810382e:	4b1d      	ldr	r3, [pc, #116]	@ (81038a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103832:	f003 0302 	and.w	r3, r3, #2
 8103836:	2b00      	cmp	r3, #0
 8103838:	d0eb      	beq.n	8103812 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 810383a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810383e:	2b00      	cmp	r3, #0
 8103840:	d12b      	bne.n	810389a <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8103842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103846:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810384a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810384e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8103852:	d110      	bne.n	8103876 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8103854:	4b13      	ldr	r3, [pc, #76]	@ (81038a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103856:	691b      	ldr	r3, [r3, #16]
 8103858:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 810385c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103860:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8103864:	091b      	lsrs	r3, r3, #4
 8103866:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 810386a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 810386e:	4a0d      	ldr	r2, [pc, #52]	@ (81038a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103870:	430b      	orrs	r3, r1
 8103872:	6113      	str	r3, [r2, #16]
 8103874:	e005      	b.n	8103882 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8103876:	4b0b      	ldr	r3, [pc, #44]	@ (81038a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103878:	691b      	ldr	r3, [r3, #16]
 810387a:	4a0a      	ldr	r2, [pc, #40]	@ (81038a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810387c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8103880:	6113      	str	r3, [r2, #16]
 8103882:	4b08      	ldr	r3, [pc, #32]	@ (81038a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103884:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8103886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810388a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810388e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8103892:	4a04      	ldr	r2, [pc, #16]	@ (81038a4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103894:	430b      	orrs	r3, r1
 8103896:	6713      	str	r3, [r2, #112]	@ 0x70
 8103898:	e00c      	b.n	81038b4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810389a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810389e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 81038a2:	e007      	b.n	81038b4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 81038a4:	58024400 	.word	0x58024400
 81038a8:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81038ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81038b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81038b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81038b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81038bc:	f002 0301 	and.w	r3, r2, #1
 81038c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 81038c4:	2300      	movs	r3, #0
 81038c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 81038ca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 81038ce:	460b      	mov	r3, r1
 81038d0:	4313      	orrs	r3, r2
 81038d2:	f000 8089 	beq.w	81039e8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 81038d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81038da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81038dc:	2b28      	cmp	r3, #40	@ 0x28
 81038de:	d86b      	bhi.n	81039b8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 81038e0:	a201      	add	r2, pc, #4	@ (adr r2, 81038e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 81038e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81038e6:	bf00      	nop
 81038e8:	081039c1 	.word	0x081039c1
 81038ec:	081039b9 	.word	0x081039b9
 81038f0:	081039b9 	.word	0x081039b9
 81038f4:	081039b9 	.word	0x081039b9
 81038f8:	081039b9 	.word	0x081039b9
 81038fc:	081039b9 	.word	0x081039b9
 8103900:	081039b9 	.word	0x081039b9
 8103904:	081039b9 	.word	0x081039b9
 8103908:	0810398d 	.word	0x0810398d
 810390c:	081039b9 	.word	0x081039b9
 8103910:	081039b9 	.word	0x081039b9
 8103914:	081039b9 	.word	0x081039b9
 8103918:	081039b9 	.word	0x081039b9
 810391c:	081039b9 	.word	0x081039b9
 8103920:	081039b9 	.word	0x081039b9
 8103924:	081039b9 	.word	0x081039b9
 8103928:	081039a3 	.word	0x081039a3
 810392c:	081039b9 	.word	0x081039b9
 8103930:	081039b9 	.word	0x081039b9
 8103934:	081039b9 	.word	0x081039b9
 8103938:	081039b9 	.word	0x081039b9
 810393c:	081039b9 	.word	0x081039b9
 8103940:	081039b9 	.word	0x081039b9
 8103944:	081039b9 	.word	0x081039b9
 8103948:	081039c1 	.word	0x081039c1
 810394c:	081039b9 	.word	0x081039b9
 8103950:	081039b9 	.word	0x081039b9
 8103954:	081039b9 	.word	0x081039b9
 8103958:	081039b9 	.word	0x081039b9
 810395c:	081039b9 	.word	0x081039b9
 8103960:	081039b9 	.word	0x081039b9
 8103964:	081039b9 	.word	0x081039b9
 8103968:	081039c1 	.word	0x081039c1
 810396c:	081039b9 	.word	0x081039b9
 8103970:	081039b9 	.word	0x081039b9
 8103974:	081039b9 	.word	0x081039b9
 8103978:	081039b9 	.word	0x081039b9
 810397c:	081039b9 	.word	0x081039b9
 8103980:	081039b9 	.word	0x081039b9
 8103984:	081039b9 	.word	0x081039b9
 8103988:	081039c1 	.word	0x081039c1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810398c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103990:	3308      	adds	r3, #8
 8103992:	2101      	movs	r1, #1
 8103994:	4618      	mov	r0, r3
 8103996:	f000 ffc3 	bl	8104920 <RCCEx_PLL2_Config>
 810399a:	4603      	mov	r3, r0
 810399c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81039a0:	e00f      	b.n	81039c2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81039a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81039a6:	3328      	adds	r3, #40	@ 0x28
 81039a8:	2101      	movs	r1, #1
 81039aa:	4618      	mov	r0, r3
 81039ac:	f001 f86a 	bl	8104a84 <RCCEx_PLL3_Config>
 81039b0:	4603      	mov	r3, r0
 81039b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81039b6:	e004      	b.n	81039c2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81039b8:	2301      	movs	r3, #1
 81039ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81039be:	e000      	b.n	81039c2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 81039c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81039c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81039c6:	2b00      	cmp	r3, #0
 81039c8:	d10a      	bne.n	81039e0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81039ca:	4bbf      	ldr	r3, [pc, #764]	@ (8103cc8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81039cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81039ce:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 81039d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81039d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81039d8:	4abb      	ldr	r2, [pc, #748]	@ (8103cc8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81039da:	430b      	orrs	r3, r1
 81039dc:	6553      	str	r3, [r2, #84]	@ 0x54
 81039de:	e003      	b.n	81039e8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81039e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81039e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81039e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81039ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 81039f0:	f002 0302 	and.w	r3, r2, #2
 81039f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 81039f8:	2300      	movs	r3, #0
 81039fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 81039fe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8103a02:	460b      	mov	r3, r1
 8103a04:	4313      	orrs	r3, r2
 8103a06:	d041      	beq.n	8103a8c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8103a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8103a0e:	2b05      	cmp	r3, #5
 8103a10:	d824      	bhi.n	8103a5c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8103a12:	a201      	add	r2, pc, #4	@ (adr r2, 8103a18 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8103a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103a18:	08103a65 	.word	0x08103a65
 8103a1c:	08103a31 	.word	0x08103a31
 8103a20:	08103a47 	.word	0x08103a47
 8103a24:	08103a65 	.word	0x08103a65
 8103a28:	08103a65 	.word	0x08103a65
 8103a2c:	08103a65 	.word	0x08103a65
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a34:	3308      	adds	r3, #8
 8103a36:	2101      	movs	r1, #1
 8103a38:	4618      	mov	r0, r3
 8103a3a:	f000 ff71 	bl	8104920 <RCCEx_PLL2_Config>
 8103a3e:	4603      	mov	r3, r0
 8103a40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8103a44:	e00f      	b.n	8103a66 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a4a:	3328      	adds	r3, #40	@ 0x28
 8103a4c:	2101      	movs	r1, #1
 8103a4e:	4618      	mov	r0, r3
 8103a50:	f001 f818 	bl	8104a84 <RCCEx_PLL3_Config>
 8103a54:	4603      	mov	r3, r0
 8103a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8103a5a:	e004      	b.n	8103a66 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103a5c:	2301      	movs	r3, #1
 8103a5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103a62:	e000      	b.n	8103a66 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8103a64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103a66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103a6a:	2b00      	cmp	r3, #0
 8103a6c:	d10a      	bne.n	8103a84 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8103a6e:	4b96      	ldr	r3, [pc, #600]	@ (8103cc8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103a72:	f023 0107 	bic.w	r1, r3, #7
 8103a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8103a7c:	4a92      	ldr	r2, [pc, #584]	@ (8103cc8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103a7e:	430b      	orrs	r3, r1
 8103a80:	6553      	str	r3, [r2, #84]	@ 0x54
 8103a82:	e003      	b.n	8103a8c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103a88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8103a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103a94:	f002 0304 	and.w	r3, r2, #4
 8103a98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8103a9c:	2300      	movs	r3, #0
 8103a9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8103aa2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8103aa6:	460b      	mov	r3, r1
 8103aa8:	4313      	orrs	r3, r2
 8103aaa:	d044      	beq.n	8103b36 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8103aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103ab0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8103ab4:	2b05      	cmp	r3, #5
 8103ab6:	d825      	bhi.n	8103b04 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8103ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8103ac0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8103aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103abe:	bf00      	nop
 8103ac0:	08103b0d 	.word	0x08103b0d
 8103ac4:	08103ad9 	.word	0x08103ad9
 8103ac8:	08103aef 	.word	0x08103aef
 8103acc:	08103b0d 	.word	0x08103b0d
 8103ad0:	08103b0d 	.word	0x08103b0d
 8103ad4:	08103b0d 	.word	0x08103b0d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103adc:	3308      	adds	r3, #8
 8103ade:	2101      	movs	r1, #1
 8103ae0:	4618      	mov	r0, r3
 8103ae2:	f000 ff1d 	bl	8104920 <RCCEx_PLL2_Config>
 8103ae6:	4603      	mov	r3, r0
 8103ae8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8103aec:	e00f      	b.n	8103b0e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103af2:	3328      	adds	r3, #40	@ 0x28
 8103af4:	2101      	movs	r1, #1
 8103af6:	4618      	mov	r0, r3
 8103af8:	f000 ffc4 	bl	8104a84 <RCCEx_PLL3_Config>
 8103afc:	4603      	mov	r3, r0
 8103afe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8103b02:	e004      	b.n	8103b0e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103b04:	2301      	movs	r3, #1
 8103b06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103b0a:	e000      	b.n	8103b0e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8103b0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103b12:	2b00      	cmp	r3, #0
 8103b14:	d10b      	bne.n	8103b2e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8103b16:	4b6c      	ldr	r3, [pc, #432]	@ (8103cc8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103b1a:	f023 0107 	bic.w	r1, r3, #7
 8103b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8103b26:	4a68      	ldr	r2, [pc, #416]	@ (8103cc8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103b28:	430b      	orrs	r3, r1
 8103b2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8103b2c:	e003      	b.n	8103b36 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103b32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8103b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103b3e:	f002 0320 	and.w	r3, r2, #32
 8103b42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8103b46:	2300      	movs	r3, #0
 8103b48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8103b4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8103b50:	460b      	mov	r3, r1
 8103b52:	4313      	orrs	r3, r2
 8103b54:	d055      	beq.n	8103c02 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8103b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8103b5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103b62:	d033      	beq.n	8103bcc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8103b64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103b68:	d82c      	bhi.n	8103bc4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8103b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103b6e:	d02f      	beq.n	8103bd0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8103b70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103b74:	d826      	bhi.n	8103bc4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8103b76:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103b7a:	d02b      	beq.n	8103bd4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8103b7c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103b80:	d820      	bhi.n	8103bc4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8103b82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103b86:	d012      	beq.n	8103bae <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8103b88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103b8c:	d81a      	bhi.n	8103bc4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8103b8e:	2b00      	cmp	r3, #0
 8103b90:	d022      	beq.n	8103bd8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8103b92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103b96:	d115      	bne.n	8103bc4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b9c:	3308      	adds	r3, #8
 8103b9e:	2100      	movs	r1, #0
 8103ba0:	4618      	mov	r0, r3
 8103ba2:	f000 febd 	bl	8104920 <RCCEx_PLL2_Config>
 8103ba6:	4603      	mov	r3, r0
 8103ba8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8103bac:	e015      	b.n	8103bda <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103bb2:	3328      	adds	r3, #40	@ 0x28
 8103bb4:	2102      	movs	r1, #2
 8103bb6:	4618      	mov	r0, r3
 8103bb8:	f000 ff64 	bl	8104a84 <RCCEx_PLL3_Config>
 8103bbc:	4603      	mov	r3, r0
 8103bbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8103bc2:	e00a      	b.n	8103bda <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103bc4:	2301      	movs	r3, #1
 8103bc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103bca:	e006      	b.n	8103bda <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8103bcc:	bf00      	nop
 8103bce:	e004      	b.n	8103bda <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8103bd0:	bf00      	nop
 8103bd2:	e002      	b.n	8103bda <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8103bd4:	bf00      	nop
 8103bd6:	e000      	b.n	8103bda <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8103bd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103bda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103bde:	2b00      	cmp	r3, #0
 8103be0:	d10b      	bne.n	8103bfa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8103be2:	4b39      	ldr	r3, [pc, #228]	@ (8103cc8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103be6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8103bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8103bf2:	4a35      	ldr	r2, [pc, #212]	@ (8103cc8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103bf4:	430b      	orrs	r3, r1
 8103bf6:	6553      	str	r3, [r2, #84]	@ 0x54
 8103bf8:	e003      	b.n	8103c02 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103bfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103bfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8103c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103c0a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8103c0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8103c12:	2300      	movs	r3, #0
 8103c14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8103c18:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8103c1c:	460b      	mov	r3, r1
 8103c1e:	4313      	orrs	r3, r2
 8103c20:	d058      	beq.n	8103cd4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8103c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8103c2a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8103c2e:	d033      	beq.n	8103c98 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8103c30:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8103c34:	d82c      	bhi.n	8103c90 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8103c36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103c3a:	d02f      	beq.n	8103c9c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8103c3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103c40:	d826      	bhi.n	8103c90 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8103c42:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8103c46:	d02b      	beq.n	8103ca0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8103c48:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8103c4c:	d820      	bhi.n	8103c90 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8103c4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8103c52:	d012      	beq.n	8103c7a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8103c54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8103c58:	d81a      	bhi.n	8103c90 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8103c5a:	2b00      	cmp	r3, #0
 8103c5c:	d022      	beq.n	8103ca4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8103c5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8103c62:	d115      	bne.n	8103c90 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c68:	3308      	adds	r3, #8
 8103c6a:	2100      	movs	r1, #0
 8103c6c:	4618      	mov	r0, r3
 8103c6e:	f000 fe57 	bl	8104920 <RCCEx_PLL2_Config>
 8103c72:	4603      	mov	r3, r0
 8103c74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8103c78:	e015      	b.n	8103ca6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c7e:	3328      	adds	r3, #40	@ 0x28
 8103c80:	2102      	movs	r1, #2
 8103c82:	4618      	mov	r0, r3
 8103c84:	f000 fefe 	bl	8104a84 <RCCEx_PLL3_Config>
 8103c88:	4603      	mov	r3, r0
 8103c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8103c8e:	e00a      	b.n	8103ca6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103c90:	2301      	movs	r3, #1
 8103c92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103c96:	e006      	b.n	8103ca6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8103c98:	bf00      	nop
 8103c9a:	e004      	b.n	8103ca6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8103c9c:	bf00      	nop
 8103c9e:	e002      	b.n	8103ca6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8103ca0:	bf00      	nop
 8103ca2:	e000      	b.n	8103ca6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8103ca4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103caa:	2b00      	cmp	r3, #0
 8103cac:	d10e      	bne.n	8103ccc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8103cae:	4b06      	ldr	r3, [pc, #24]	@ (8103cc8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103cb2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8103cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103cba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8103cbe:	4a02      	ldr	r2, [pc, #8]	@ (8103cc8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103cc0:	430b      	orrs	r3, r1
 8103cc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8103cc4:	e006      	b.n	8103cd4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8103cc6:	bf00      	nop
 8103cc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ccc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103cd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8103cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103cdc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8103ce0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8103ce4:	2300      	movs	r3, #0
 8103ce6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8103cea:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8103cee:	460b      	mov	r3, r1
 8103cf0:	4313      	orrs	r3, r2
 8103cf2:	d055      	beq.n	8103da0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8103cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103cf8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8103cfc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8103d00:	d033      	beq.n	8103d6a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8103d02:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8103d06:	d82c      	bhi.n	8103d62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8103d08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8103d0c:	d02f      	beq.n	8103d6e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8103d0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8103d12:	d826      	bhi.n	8103d62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8103d14:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8103d18:	d02b      	beq.n	8103d72 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8103d1a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8103d1e:	d820      	bhi.n	8103d62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8103d20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8103d24:	d012      	beq.n	8103d4c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8103d26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8103d2a:	d81a      	bhi.n	8103d62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8103d2c:	2b00      	cmp	r3, #0
 8103d2e:	d022      	beq.n	8103d76 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8103d30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8103d34:	d115      	bne.n	8103d62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103d3a:	3308      	adds	r3, #8
 8103d3c:	2100      	movs	r1, #0
 8103d3e:	4618      	mov	r0, r3
 8103d40:	f000 fdee 	bl	8104920 <RCCEx_PLL2_Config>
 8103d44:	4603      	mov	r3, r0
 8103d46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8103d4a:	e015      	b.n	8103d78 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103d50:	3328      	adds	r3, #40	@ 0x28
 8103d52:	2102      	movs	r1, #2
 8103d54:	4618      	mov	r0, r3
 8103d56:	f000 fe95 	bl	8104a84 <RCCEx_PLL3_Config>
 8103d5a:	4603      	mov	r3, r0
 8103d5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8103d60:	e00a      	b.n	8103d78 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103d62:	2301      	movs	r3, #1
 8103d64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103d68:	e006      	b.n	8103d78 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8103d6a:	bf00      	nop
 8103d6c:	e004      	b.n	8103d78 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8103d6e:	bf00      	nop
 8103d70:	e002      	b.n	8103d78 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8103d72:	bf00      	nop
 8103d74:	e000      	b.n	8103d78 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8103d76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103d78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103d7c:	2b00      	cmp	r3, #0
 8103d7e:	d10b      	bne.n	8103d98 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8103d80:	4ba1      	ldr	r3, [pc, #644]	@ (8104008 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103d84:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8103d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103d8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8103d90:	4a9d      	ldr	r2, [pc, #628]	@ (8104008 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103d92:	430b      	orrs	r3, r1
 8103d94:	6593      	str	r3, [r2, #88]	@ 0x58
 8103d96:	e003      	b.n	8103da0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103d9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8103da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103da8:	f002 0308 	and.w	r3, r2, #8
 8103dac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8103db0:	2300      	movs	r3, #0
 8103db2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8103db6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8103dba:	460b      	mov	r3, r1
 8103dbc:	4313      	orrs	r3, r2
 8103dbe:	d01e      	beq.n	8103dfe <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8103dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8103dc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103dcc:	d10c      	bne.n	8103de8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8103dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103dd2:	3328      	adds	r3, #40	@ 0x28
 8103dd4:	2102      	movs	r1, #2
 8103dd6:	4618      	mov	r0, r3
 8103dd8:	f000 fe54 	bl	8104a84 <RCCEx_PLL3_Config>
 8103ddc:	4603      	mov	r3, r0
 8103dde:	2b00      	cmp	r3, #0
 8103de0:	d002      	beq.n	8103de8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8103de2:	2301      	movs	r3, #1
 8103de4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8103de8:	4b87      	ldr	r3, [pc, #540]	@ (8104008 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103dec:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8103df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8103df8:	4a83      	ldr	r2, [pc, #524]	@ (8104008 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103dfa:	430b      	orrs	r3, r1
 8103dfc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8103dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103e06:	f002 0310 	and.w	r3, r2, #16
 8103e0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8103e0e:	2300      	movs	r3, #0
 8103e10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8103e14:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8103e18:	460b      	mov	r3, r1
 8103e1a:	4313      	orrs	r3, r2
 8103e1c:	d01e      	beq.n	8103e5c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8103e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103e22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8103e26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103e2a:	d10c      	bne.n	8103e46 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8103e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103e30:	3328      	adds	r3, #40	@ 0x28
 8103e32:	2102      	movs	r1, #2
 8103e34:	4618      	mov	r0, r3
 8103e36:	f000 fe25 	bl	8104a84 <RCCEx_PLL3_Config>
 8103e3a:	4603      	mov	r3, r0
 8103e3c:	2b00      	cmp	r3, #0
 8103e3e:	d002      	beq.n	8103e46 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8103e40:	2301      	movs	r3, #1
 8103e42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8103e46:	4b70      	ldr	r3, [pc, #448]	@ (8104008 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103e4a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8103e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103e52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8103e56:	4a6c      	ldr	r2, [pc, #432]	@ (8104008 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103e58:	430b      	orrs	r3, r1
 8103e5a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8103e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103e64:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8103e68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8103e6c:	2300      	movs	r3, #0
 8103e6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8103e72:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8103e76:	460b      	mov	r3, r1
 8103e78:	4313      	orrs	r3, r2
 8103e7a:	d03e      	beq.n	8103efa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8103e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103e80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8103e84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103e88:	d022      	beq.n	8103ed0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8103e8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103e8e:	d81b      	bhi.n	8103ec8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8103e90:	2b00      	cmp	r3, #0
 8103e92:	d003      	beq.n	8103e9c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8103e94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103e98:	d00b      	beq.n	8103eb2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8103e9a:	e015      	b.n	8103ec8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103ea0:	3308      	adds	r3, #8
 8103ea2:	2100      	movs	r1, #0
 8103ea4:	4618      	mov	r0, r3
 8103ea6:	f000 fd3b 	bl	8104920 <RCCEx_PLL2_Config>
 8103eaa:	4603      	mov	r3, r0
 8103eac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8103eb0:	e00f      	b.n	8103ed2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103eb6:	3328      	adds	r3, #40	@ 0x28
 8103eb8:	2102      	movs	r1, #2
 8103eba:	4618      	mov	r0, r3
 8103ebc:	f000 fde2 	bl	8104a84 <RCCEx_PLL3_Config>
 8103ec0:	4603      	mov	r3, r0
 8103ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8103ec6:	e004      	b.n	8103ed2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103ec8:	2301      	movs	r3, #1
 8103eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103ece:	e000      	b.n	8103ed2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8103ed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103ed6:	2b00      	cmp	r3, #0
 8103ed8:	d10b      	bne.n	8103ef2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8103eda:	4b4b      	ldr	r3, [pc, #300]	@ (8104008 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103ede:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8103ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103ee6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8103eea:	4a47      	ldr	r2, [pc, #284]	@ (8104008 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103eec:	430b      	orrs	r3, r1
 8103eee:	6593      	str	r3, [r2, #88]	@ 0x58
 8103ef0:	e003      	b.n	8103efa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103ef6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8103efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103f02:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8103f06:	67bb      	str	r3, [r7, #120]	@ 0x78
 8103f08:	2300      	movs	r3, #0
 8103f0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8103f0c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8103f10:	460b      	mov	r3, r1
 8103f12:	4313      	orrs	r3, r2
 8103f14:	d03b      	beq.n	8103f8e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8103f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8103f1e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8103f22:	d01f      	beq.n	8103f64 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8103f24:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8103f28:	d818      	bhi.n	8103f5c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8103f2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8103f2e:	d003      	beq.n	8103f38 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8103f30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8103f34:	d007      	beq.n	8103f46 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8103f36:	e011      	b.n	8103f5c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103f38:	4b33      	ldr	r3, [pc, #204]	@ (8104008 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103f3c:	4a32      	ldr	r2, [pc, #200]	@ (8104008 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103f3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103f42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8103f44:	e00f      	b.n	8103f66 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103f4a:	3328      	adds	r3, #40	@ 0x28
 8103f4c:	2101      	movs	r1, #1
 8103f4e:	4618      	mov	r0, r3
 8103f50:	f000 fd98 	bl	8104a84 <RCCEx_PLL3_Config>
 8103f54:	4603      	mov	r3, r0
 8103f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8103f5a:	e004      	b.n	8103f66 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103f5c:	2301      	movs	r3, #1
 8103f5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103f62:	e000      	b.n	8103f66 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8103f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103f66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103f6a:	2b00      	cmp	r3, #0
 8103f6c:	d10b      	bne.n	8103f86 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8103f6e:	4b26      	ldr	r3, [pc, #152]	@ (8104008 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103f72:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8103f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8103f7e:	4a22      	ldr	r2, [pc, #136]	@ (8104008 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103f80:	430b      	orrs	r3, r1
 8103f82:	6553      	str	r3, [r2, #84]	@ 0x54
 8103f84:	e003      	b.n	8103f8e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103f8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8103f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103f96:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8103f9a:	673b      	str	r3, [r7, #112]	@ 0x70
 8103f9c:	2300      	movs	r3, #0
 8103f9e:	677b      	str	r3, [r7, #116]	@ 0x74
 8103fa0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8103fa4:	460b      	mov	r3, r1
 8103fa6:	4313      	orrs	r3, r2
 8103fa8:	d034      	beq.n	8104014 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8103faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103fb0:	2b00      	cmp	r3, #0
 8103fb2:	d003      	beq.n	8103fbc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8103fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103fb8:	d007      	beq.n	8103fca <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8103fba:	e011      	b.n	8103fe0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103fbc:	4b12      	ldr	r3, [pc, #72]	@ (8104008 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103fc0:	4a11      	ldr	r2, [pc, #68]	@ (8104008 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103fc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103fc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8103fc8:	e00e      	b.n	8103fe8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103fce:	3308      	adds	r3, #8
 8103fd0:	2102      	movs	r1, #2
 8103fd2:	4618      	mov	r0, r3
 8103fd4:	f000 fca4 	bl	8104920 <RCCEx_PLL2_Config>
 8103fd8:	4603      	mov	r3, r0
 8103fda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8103fde:	e003      	b.n	8103fe8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8103fe0:	2301      	movs	r3, #1
 8103fe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103fe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103fe8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103fec:	2b00      	cmp	r3, #0
 8103fee:	d10d      	bne.n	810400c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8103ff0:	4b05      	ldr	r3, [pc, #20]	@ (8104008 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103ff2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103ff4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8103ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103ffc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103ffe:	4a02      	ldr	r2, [pc, #8]	@ (8104008 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104000:	430b      	orrs	r3, r1
 8104002:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8104004:	e006      	b.n	8104014 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8104006:	bf00      	nop
 8104008:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810400c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104010:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8104014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104018:	e9d3 2300 	ldrd	r2, r3, [r3]
 810401c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8104020:	66bb      	str	r3, [r7, #104]	@ 0x68
 8104022:	2300      	movs	r3, #0
 8104024:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8104026:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 810402a:	460b      	mov	r3, r1
 810402c:	4313      	orrs	r3, r2
 810402e:	d00c      	beq.n	810404a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8104030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104034:	3328      	adds	r3, #40	@ 0x28
 8104036:	2102      	movs	r1, #2
 8104038:	4618      	mov	r0, r3
 810403a:	f000 fd23 	bl	8104a84 <RCCEx_PLL3_Config>
 810403e:	4603      	mov	r3, r0
 8104040:	2b00      	cmp	r3, #0
 8104042:	d002      	beq.n	810404a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8104044:	2301      	movs	r3, #1
 8104046:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810404a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810404e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104052:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8104056:	663b      	str	r3, [r7, #96]	@ 0x60
 8104058:	2300      	movs	r3, #0
 810405a:	667b      	str	r3, [r7, #100]	@ 0x64
 810405c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8104060:	460b      	mov	r3, r1
 8104062:	4313      	orrs	r3, r2
 8104064:	d038      	beq.n	81040d8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8104066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810406a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810406e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8104072:	d018      	beq.n	81040a6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8104074:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8104078:	d811      	bhi.n	810409e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810407a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810407e:	d014      	beq.n	81040aa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8104080:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8104084:	d80b      	bhi.n	810409e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8104086:	2b00      	cmp	r3, #0
 8104088:	d011      	beq.n	81040ae <HAL_RCCEx_PeriphCLKConfig+0x111e>
 810408a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810408e:	d106      	bne.n	810409e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104090:	4bc3      	ldr	r3, [pc, #780]	@ (81043a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104094:	4ac2      	ldr	r2, [pc, #776]	@ (81043a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104096:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810409a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 810409c:	e008      	b.n	81040b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810409e:	2301      	movs	r3, #1
 81040a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81040a4:	e004      	b.n	81040b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81040a6:	bf00      	nop
 81040a8:	e002      	b.n	81040b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81040aa:	bf00      	nop
 81040ac:	e000      	b.n	81040b0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81040ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 81040b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81040b4:	2b00      	cmp	r3, #0
 81040b6:	d10b      	bne.n	81040d0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81040b8:	4bb9      	ldr	r3, [pc, #740]	@ (81043a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81040ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81040bc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81040c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81040c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81040c8:	4ab5      	ldr	r2, [pc, #724]	@ (81043a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81040ca:	430b      	orrs	r3, r1
 81040cc:	6553      	str	r3, [r2, #84]	@ 0x54
 81040ce:	e003      	b.n	81040d8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81040d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81040d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81040d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81040dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81040e0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 81040e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 81040e6:	2300      	movs	r3, #0
 81040e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 81040ea:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 81040ee:	460b      	mov	r3, r1
 81040f0:	4313      	orrs	r3, r2
 81040f2:	d009      	beq.n	8104108 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81040f4:	4baa      	ldr	r3, [pc, #680]	@ (81043a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81040f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81040f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 81040fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104100:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8104102:	4aa7      	ldr	r2, [pc, #668]	@ (81043a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104104:	430b      	orrs	r3, r1
 8104106:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8104108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810410c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104110:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8104114:	653b      	str	r3, [r7, #80]	@ 0x50
 8104116:	2300      	movs	r3, #0
 8104118:	657b      	str	r3, [r7, #84]	@ 0x54
 810411a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 810411e:	460b      	mov	r3, r1
 8104120:	4313      	orrs	r3, r2
 8104122:	d00a      	beq.n	810413a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8104124:	4b9e      	ldr	r3, [pc, #632]	@ (81043a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104126:	691b      	ldr	r3, [r3, #16]
 8104128:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 810412c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104130:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8104134:	4a9a      	ldr	r2, [pc, #616]	@ (81043a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104136:	430b      	orrs	r3, r1
 8104138:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810413a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810413e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104142:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8104146:	64bb      	str	r3, [r7, #72]	@ 0x48
 8104148:	2300      	movs	r3, #0
 810414a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810414c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8104150:	460b      	mov	r3, r1
 8104152:	4313      	orrs	r3, r2
 8104154:	d009      	beq.n	810416a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8104156:	4b92      	ldr	r3, [pc, #584]	@ (81043a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810415a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 810415e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104162:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104164:	4a8e      	ldr	r2, [pc, #568]	@ (81043a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104166:	430b      	orrs	r3, r1
 8104168:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810416a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104172:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8104176:	643b      	str	r3, [r7, #64]	@ 0x40
 8104178:	2300      	movs	r3, #0
 810417a:	647b      	str	r3, [r7, #68]	@ 0x44
 810417c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8104180:	460b      	mov	r3, r1
 8104182:	4313      	orrs	r3, r2
 8104184:	d00e      	beq.n	81041a4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8104186:	4b86      	ldr	r3, [pc, #536]	@ (81043a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104188:	691b      	ldr	r3, [r3, #16]
 810418a:	4a85      	ldr	r2, [pc, #532]	@ (81043a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810418c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8104190:	6113      	str	r3, [r2, #16]
 8104192:	4b83      	ldr	r3, [pc, #524]	@ (81043a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104194:	6919      	ldr	r1, [r3, #16]
 8104196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810419a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 810419e:	4a80      	ldr	r2, [pc, #512]	@ (81043a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81041a0:	430b      	orrs	r3, r1
 81041a2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81041a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81041a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81041ac:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 81041b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 81041b2:	2300      	movs	r3, #0
 81041b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81041b6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 81041ba:	460b      	mov	r3, r1
 81041bc:	4313      	orrs	r3, r2
 81041be:	d009      	beq.n	81041d4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81041c0:	4b77      	ldr	r3, [pc, #476]	@ (81043a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81041c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81041c4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 81041c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81041cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81041ce:	4a74      	ldr	r2, [pc, #464]	@ (81043a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81041d0:	430b      	orrs	r3, r1
 81041d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81041d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81041d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81041dc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 81041e0:	633b      	str	r3, [r7, #48]	@ 0x30
 81041e2:	2300      	movs	r3, #0
 81041e4:	637b      	str	r3, [r7, #52]	@ 0x34
 81041e6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 81041ea:	460b      	mov	r3, r1
 81041ec:	4313      	orrs	r3, r2
 81041ee:	d00a      	beq.n	8104206 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81041f0:	4b6b      	ldr	r3, [pc, #428]	@ (81043a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81041f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81041f4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 81041f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81041fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8104200:	4a67      	ldr	r2, [pc, #412]	@ (81043a0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104202:	430b      	orrs	r3, r1
 8104204:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8104206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810420a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810420e:	2100      	movs	r1, #0
 8104210:	62b9      	str	r1, [r7, #40]	@ 0x28
 8104212:	f003 0301 	and.w	r3, r3, #1
 8104216:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8104218:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 810421c:	460b      	mov	r3, r1
 810421e:	4313      	orrs	r3, r2
 8104220:	d011      	beq.n	8104246 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104226:	3308      	adds	r3, #8
 8104228:	2100      	movs	r1, #0
 810422a:	4618      	mov	r0, r3
 810422c:	f000 fb78 	bl	8104920 <RCCEx_PLL2_Config>
 8104230:	4603      	mov	r3, r0
 8104232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8104236:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810423a:	2b00      	cmp	r3, #0
 810423c:	d003      	beq.n	8104246 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810423e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104242:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8104246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810424a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810424e:	2100      	movs	r1, #0
 8104250:	6239      	str	r1, [r7, #32]
 8104252:	f003 0302 	and.w	r3, r3, #2
 8104256:	627b      	str	r3, [r7, #36]	@ 0x24
 8104258:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 810425c:	460b      	mov	r3, r1
 810425e:	4313      	orrs	r3, r2
 8104260:	d011      	beq.n	8104286 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104266:	3308      	adds	r3, #8
 8104268:	2101      	movs	r1, #1
 810426a:	4618      	mov	r0, r3
 810426c:	f000 fb58 	bl	8104920 <RCCEx_PLL2_Config>
 8104270:	4603      	mov	r3, r0
 8104272:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8104276:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810427a:	2b00      	cmp	r3, #0
 810427c:	d003      	beq.n	8104286 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810427e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104282:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8104286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810428a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810428e:	2100      	movs	r1, #0
 8104290:	61b9      	str	r1, [r7, #24]
 8104292:	f003 0304 	and.w	r3, r3, #4
 8104296:	61fb      	str	r3, [r7, #28]
 8104298:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 810429c:	460b      	mov	r3, r1
 810429e:	4313      	orrs	r3, r2
 81042a0:	d011      	beq.n	81042c6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81042a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81042a6:	3308      	adds	r3, #8
 81042a8:	2102      	movs	r1, #2
 81042aa:	4618      	mov	r0, r3
 81042ac:	f000 fb38 	bl	8104920 <RCCEx_PLL2_Config>
 81042b0:	4603      	mov	r3, r0
 81042b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81042b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81042ba:	2b00      	cmp	r3, #0
 81042bc:	d003      	beq.n	81042c6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81042be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81042c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 81042c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81042ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 81042ce:	2100      	movs	r1, #0
 81042d0:	6139      	str	r1, [r7, #16]
 81042d2:	f003 0308 	and.w	r3, r3, #8
 81042d6:	617b      	str	r3, [r7, #20]
 81042d8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 81042dc:	460b      	mov	r3, r1
 81042de:	4313      	orrs	r3, r2
 81042e0:	d011      	beq.n	8104306 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81042e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81042e6:	3328      	adds	r3, #40	@ 0x28
 81042e8:	2100      	movs	r1, #0
 81042ea:	4618      	mov	r0, r3
 81042ec:	f000 fbca 	bl	8104a84 <RCCEx_PLL3_Config>
 81042f0:	4603      	mov	r3, r0
 81042f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 81042f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81042fa:	2b00      	cmp	r3, #0
 81042fc:	d003      	beq.n	8104306 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81042fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104302:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8104306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810430a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810430e:	2100      	movs	r1, #0
 8104310:	60b9      	str	r1, [r7, #8]
 8104312:	f003 0310 	and.w	r3, r3, #16
 8104316:	60fb      	str	r3, [r7, #12]
 8104318:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 810431c:	460b      	mov	r3, r1
 810431e:	4313      	orrs	r3, r2
 8104320:	d011      	beq.n	8104346 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104326:	3328      	adds	r3, #40	@ 0x28
 8104328:	2101      	movs	r1, #1
 810432a:	4618      	mov	r0, r3
 810432c:	f000 fbaa 	bl	8104a84 <RCCEx_PLL3_Config>
 8104330:	4603      	mov	r3, r0
 8104332:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8104336:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810433a:	2b00      	cmp	r3, #0
 810433c:	d003      	beq.n	8104346 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810433e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104342:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8104346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810434a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810434e:	2100      	movs	r1, #0
 8104350:	6039      	str	r1, [r7, #0]
 8104352:	f003 0320 	and.w	r3, r3, #32
 8104356:	607b      	str	r3, [r7, #4]
 8104358:	e9d7 1200 	ldrd	r1, r2, [r7]
 810435c:	460b      	mov	r3, r1
 810435e:	4313      	orrs	r3, r2
 8104360:	d011      	beq.n	8104386 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104366:	3328      	adds	r3, #40	@ 0x28
 8104368:	2102      	movs	r1, #2
 810436a:	4618      	mov	r0, r3
 810436c:	f000 fb8a 	bl	8104a84 <RCCEx_PLL3_Config>
 8104370:	4603      	mov	r3, r0
 8104372:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8104376:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810437a:	2b00      	cmp	r3, #0
 810437c:	d003      	beq.n	8104386 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810437e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104382:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8104386:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 810438a:	2b00      	cmp	r3, #0
 810438c:	d101      	bne.n	8104392 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 810438e:	2300      	movs	r3, #0
 8104390:	e000      	b.n	8104394 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8104392:	2301      	movs	r3, #1
}
 8104394:	4618      	mov	r0, r3
 8104396:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 810439a:	46bd      	mov	sp, r7
 810439c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81043a0:	58024400 	.word	0x58024400

081043a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81043a4:	b580      	push	{r7, lr}
 81043a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81043a8:	f7fe fd94 	bl	8102ed4 <HAL_RCC_GetHCLKFreq>
 81043ac:	4602      	mov	r2, r0
 81043ae:	4b06      	ldr	r3, [pc, #24]	@ (81043c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81043b0:	6a1b      	ldr	r3, [r3, #32]
 81043b2:	091b      	lsrs	r3, r3, #4
 81043b4:	f003 0307 	and.w	r3, r3, #7
 81043b8:	4904      	ldr	r1, [pc, #16]	@ (81043cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81043ba:	5ccb      	ldrb	r3, [r1, r3]
 81043bc:	f003 031f 	and.w	r3, r3, #31
 81043c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81043c4:	4618      	mov	r0, r3
 81043c6:	bd80      	pop	{r7, pc}
 81043c8:	58024400 	.word	0x58024400
 81043cc:	0810749c 	.word	0x0810749c

081043d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 81043d0:	b480      	push	{r7}
 81043d2:	b089      	sub	sp, #36	@ 0x24
 81043d4:	af00      	add	r7, sp, #0
 81043d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81043d8:	4ba1      	ldr	r3, [pc, #644]	@ (8104660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81043da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81043dc:	f003 0303 	and.w	r3, r3, #3
 81043e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 81043e2:	4b9f      	ldr	r3, [pc, #636]	@ (8104660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81043e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81043e6:	0b1b      	lsrs	r3, r3, #12
 81043e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81043ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81043ee:	4b9c      	ldr	r3, [pc, #624]	@ (8104660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81043f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81043f2:	091b      	lsrs	r3, r3, #4
 81043f4:	f003 0301 	and.w	r3, r3, #1
 81043f8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 81043fa:	4b99      	ldr	r3, [pc, #612]	@ (8104660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81043fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81043fe:	08db      	lsrs	r3, r3, #3
 8104400:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104404:	693a      	ldr	r2, [r7, #16]
 8104406:	fb02 f303 	mul.w	r3, r2, r3
 810440a:	ee07 3a90 	vmov	s15, r3
 810440e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104412:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8104416:	697b      	ldr	r3, [r7, #20]
 8104418:	2b00      	cmp	r3, #0
 810441a:	f000 8111 	beq.w	8104640 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810441e:	69bb      	ldr	r3, [r7, #24]
 8104420:	2b02      	cmp	r3, #2
 8104422:	f000 8083 	beq.w	810452c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8104426:	69bb      	ldr	r3, [r7, #24]
 8104428:	2b02      	cmp	r3, #2
 810442a:	f200 80a1 	bhi.w	8104570 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810442e:	69bb      	ldr	r3, [r7, #24]
 8104430:	2b00      	cmp	r3, #0
 8104432:	d003      	beq.n	810443c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8104434:	69bb      	ldr	r3, [r7, #24]
 8104436:	2b01      	cmp	r3, #1
 8104438:	d056      	beq.n	81044e8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810443a:	e099      	b.n	8104570 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810443c:	4b88      	ldr	r3, [pc, #544]	@ (8104660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810443e:	681b      	ldr	r3, [r3, #0]
 8104440:	f003 0320 	and.w	r3, r3, #32
 8104444:	2b00      	cmp	r3, #0
 8104446:	d02d      	beq.n	81044a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104448:	4b85      	ldr	r3, [pc, #532]	@ (8104660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810444a:	681b      	ldr	r3, [r3, #0]
 810444c:	08db      	lsrs	r3, r3, #3
 810444e:	f003 0303 	and.w	r3, r3, #3
 8104452:	4a84      	ldr	r2, [pc, #528]	@ (8104664 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8104454:	fa22 f303 	lsr.w	r3, r2, r3
 8104458:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810445a:	68bb      	ldr	r3, [r7, #8]
 810445c:	ee07 3a90 	vmov	s15, r3
 8104460:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104464:	697b      	ldr	r3, [r7, #20]
 8104466:	ee07 3a90 	vmov	s15, r3
 810446a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810446e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104472:	4b7b      	ldr	r3, [pc, #492]	@ (8104660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810447a:	ee07 3a90 	vmov	s15, r3
 810447e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104482:	ed97 6a03 	vldr	s12, [r7, #12]
 8104486:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8104668 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810448a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810448e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104492:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810449a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810449e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81044a2:	e087      	b.n	81045b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81044a4:	697b      	ldr	r3, [r7, #20]
 81044a6:	ee07 3a90 	vmov	s15, r3
 81044aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81044ae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 810466c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81044b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81044b6:	4b6a      	ldr	r3, [pc, #424]	@ (8104660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81044b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81044ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81044be:	ee07 3a90 	vmov	s15, r3
 81044c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81044c6:	ed97 6a03 	vldr	s12, [r7, #12]
 81044ca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8104668 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81044ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81044d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81044d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81044da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81044de:	ee67 7a27 	vmul.f32	s15, s14, s15
 81044e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81044e6:	e065      	b.n	81045b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81044e8:	697b      	ldr	r3, [r7, #20]
 81044ea:	ee07 3a90 	vmov	s15, r3
 81044ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81044f2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8104670 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81044f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81044fa:	4b59      	ldr	r3, [pc, #356]	@ (8104660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81044fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81044fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104502:	ee07 3a90 	vmov	s15, r3
 8104506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810450a:	ed97 6a03 	vldr	s12, [r7, #12]
 810450e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8104668 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810451a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810451e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104526:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810452a:	e043      	b.n	81045b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810452c:	697b      	ldr	r3, [r7, #20]
 810452e:	ee07 3a90 	vmov	s15, r3
 8104532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104536:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8104674 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810453a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810453e:	4b48      	ldr	r3, [pc, #288]	@ (8104660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104546:	ee07 3a90 	vmov	s15, r3
 810454a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810454e:	ed97 6a03 	vldr	s12, [r7, #12]
 8104552:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8104668 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810455a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810455e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104566:	ee67 7a27 	vmul.f32	s15, s14, s15
 810456a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810456e:	e021      	b.n	81045b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104570:	697b      	ldr	r3, [r7, #20]
 8104572:	ee07 3a90 	vmov	s15, r3
 8104576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810457a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8104670 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810457e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104582:	4b37      	ldr	r3, [pc, #220]	@ (8104660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810458a:	ee07 3a90 	vmov	s15, r3
 810458e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104592:	ed97 6a03 	vldr	s12, [r7, #12]
 8104596:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8104668 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810459a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810459e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81045a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81045a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81045aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81045ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81045b2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 81045b4:	4b2a      	ldr	r3, [pc, #168]	@ (8104660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81045b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81045b8:	0a5b      	lsrs	r3, r3, #9
 81045ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81045be:	ee07 3a90 	vmov	s15, r3
 81045c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81045c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81045ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 81045ce:	edd7 6a07 	vldr	s13, [r7, #28]
 81045d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81045d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81045da:	ee17 2a90 	vmov	r2, s15
 81045de:	687b      	ldr	r3, [r7, #4]
 81045e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 81045e2:	4b1f      	ldr	r3, [pc, #124]	@ (8104660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81045e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81045e6:	0c1b      	lsrs	r3, r3, #16
 81045e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81045ec:	ee07 3a90 	vmov	s15, r3
 81045f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81045f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81045f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 81045fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8104600:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104604:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104608:	ee17 2a90 	vmov	r2, s15
 810460c:	687b      	ldr	r3, [r7, #4]
 810460e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8104610:	4b13      	ldr	r3, [pc, #76]	@ (8104660 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104614:	0e1b      	lsrs	r3, r3, #24
 8104616:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810461a:	ee07 3a90 	vmov	s15, r3
 810461e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104622:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8104626:	ee37 7a87 	vadd.f32	s14, s15, s14
 810462a:	edd7 6a07 	vldr	s13, [r7, #28]
 810462e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104636:	ee17 2a90 	vmov	r2, s15
 810463a:	687b      	ldr	r3, [r7, #4]
 810463c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810463e:	e008      	b.n	8104652 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8104640:	687b      	ldr	r3, [r7, #4]
 8104642:	2200      	movs	r2, #0
 8104644:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8104646:	687b      	ldr	r3, [r7, #4]
 8104648:	2200      	movs	r2, #0
 810464a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810464c:	687b      	ldr	r3, [r7, #4]
 810464e:	2200      	movs	r2, #0
 8104650:	609a      	str	r2, [r3, #8]
}
 8104652:	bf00      	nop
 8104654:	3724      	adds	r7, #36	@ 0x24
 8104656:	46bd      	mov	sp, r7
 8104658:	f85d 7b04 	ldr.w	r7, [sp], #4
 810465c:	4770      	bx	lr
 810465e:	bf00      	nop
 8104660:	58024400 	.word	0x58024400
 8104664:	03d09000 	.word	0x03d09000
 8104668:	46000000 	.word	0x46000000
 810466c:	4c742400 	.word	0x4c742400
 8104670:	4a742400 	.word	0x4a742400
 8104674:	4bbebc20 	.word	0x4bbebc20

08104678 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8104678:	b480      	push	{r7}
 810467a:	b089      	sub	sp, #36	@ 0x24
 810467c:	af00      	add	r7, sp, #0
 810467e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104680:	4ba1      	ldr	r3, [pc, #644]	@ (8104908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104684:	f003 0303 	and.w	r3, r3, #3
 8104688:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 810468a:	4b9f      	ldr	r3, [pc, #636]	@ (8104908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810468c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810468e:	0d1b      	lsrs	r3, r3, #20
 8104690:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8104694:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8104696:	4b9c      	ldr	r3, [pc, #624]	@ (8104908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810469a:	0a1b      	lsrs	r3, r3, #8
 810469c:	f003 0301 	and.w	r3, r3, #1
 81046a0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 81046a2:	4b99      	ldr	r3, [pc, #612]	@ (8104908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81046a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81046a6:	08db      	lsrs	r3, r3, #3
 81046a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81046ac:	693a      	ldr	r2, [r7, #16]
 81046ae:	fb02 f303 	mul.w	r3, r2, r3
 81046b2:	ee07 3a90 	vmov	s15, r3
 81046b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81046ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81046be:	697b      	ldr	r3, [r7, #20]
 81046c0:	2b00      	cmp	r3, #0
 81046c2:	f000 8111 	beq.w	81048e8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 81046c6:	69bb      	ldr	r3, [r7, #24]
 81046c8:	2b02      	cmp	r3, #2
 81046ca:	f000 8083 	beq.w	81047d4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 81046ce:	69bb      	ldr	r3, [r7, #24]
 81046d0:	2b02      	cmp	r3, #2
 81046d2:	f200 80a1 	bhi.w	8104818 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 81046d6:	69bb      	ldr	r3, [r7, #24]
 81046d8:	2b00      	cmp	r3, #0
 81046da:	d003      	beq.n	81046e4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 81046dc:	69bb      	ldr	r3, [r7, #24]
 81046de:	2b01      	cmp	r3, #1
 81046e0:	d056      	beq.n	8104790 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 81046e2:	e099      	b.n	8104818 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81046e4:	4b88      	ldr	r3, [pc, #544]	@ (8104908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81046e6:	681b      	ldr	r3, [r3, #0]
 81046e8:	f003 0320 	and.w	r3, r3, #32
 81046ec:	2b00      	cmp	r3, #0
 81046ee:	d02d      	beq.n	810474c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81046f0:	4b85      	ldr	r3, [pc, #532]	@ (8104908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81046f2:	681b      	ldr	r3, [r3, #0]
 81046f4:	08db      	lsrs	r3, r3, #3
 81046f6:	f003 0303 	and.w	r3, r3, #3
 81046fa:	4a84      	ldr	r2, [pc, #528]	@ (810490c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 81046fc:	fa22 f303 	lsr.w	r3, r2, r3
 8104700:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8104702:	68bb      	ldr	r3, [r7, #8]
 8104704:	ee07 3a90 	vmov	s15, r3
 8104708:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810470c:	697b      	ldr	r3, [r7, #20]
 810470e:	ee07 3a90 	vmov	s15, r3
 8104712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810471a:	4b7b      	ldr	r3, [pc, #492]	@ (8104908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810471c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810471e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104722:	ee07 3a90 	vmov	s15, r3
 8104726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810472a:	ed97 6a03 	vldr	s12, [r7, #12]
 810472e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8104910 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810473a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810473e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104746:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810474a:	e087      	b.n	810485c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810474c:	697b      	ldr	r3, [r7, #20]
 810474e:	ee07 3a90 	vmov	s15, r3
 8104752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104756:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8104914 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810475a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810475e:	4b6a      	ldr	r3, [pc, #424]	@ (8104908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8104762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104766:	ee07 3a90 	vmov	s15, r3
 810476a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810476e:	ed97 6a03 	vldr	s12, [r7, #12]
 8104772:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8104910 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810477a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810477e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104786:	ee67 7a27 	vmul.f32	s15, s14, s15
 810478a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810478e:	e065      	b.n	810485c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8104790:	697b      	ldr	r3, [r7, #20]
 8104792:	ee07 3a90 	vmov	s15, r3
 8104796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810479a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8104918 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810479e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81047a2:	4b59      	ldr	r3, [pc, #356]	@ (8104908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81047a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81047a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81047aa:	ee07 3a90 	vmov	s15, r3
 81047ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81047b2:	ed97 6a03 	vldr	s12, [r7, #12]
 81047b6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8104910 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81047ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81047be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81047c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81047c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81047ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81047ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81047d2:	e043      	b.n	810485c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81047d4:	697b      	ldr	r3, [r7, #20]
 81047d6:	ee07 3a90 	vmov	s15, r3
 81047da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81047de:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 810491c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 81047e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81047e6:	4b48      	ldr	r3, [pc, #288]	@ (8104908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81047e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81047ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81047ee:	ee07 3a90 	vmov	s15, r3
 81047f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81047f6:	ed97 6a03 	vldr	s12, [r7, #12]
 81047fa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8104910 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81047fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104806:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810480a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810480e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104812:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104816:	e021      	b.n	810485c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8104818:	697b      	ldr	r3, [r7, #20]
 810481a:	ee07 3a90 	vmov	s15, r3
 810481e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104822:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8104918 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8104826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810482a:	4b37      	ldr	r3, [pc, #220]	@ (8104908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810482c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810482e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104832:	ee07 3a90 	vmov	s15, r3
 8104836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810483a:	ed97 6a03 	vldr	s12, [r7, #12]
 810483e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8104910 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810484a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810484e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104856:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810485a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 810485c:	4b2a      	ldr	r3, [pc, #168]	@ (8104908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810485e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8104860:	0a5b      	lsrs	r3, r3, #9
 8104862:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104866:	ee07 3a90 	vmov	s15, r3
 810486a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810486e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8104872:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104876:	edd7 6a07 	vldr	s13, [r7, #28]
 810487a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810487e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104882:	ee17 2a90 	vmov	r2, s15
 8104886:	687b      	ldr	r3, [r7, #4]
 8104888:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 810488a:	4b1f      	ldr	r3, [pc, #124]	@ (8104908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810488c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810488e:	0c1b      	lsrs	r3, r3, #16
 8104890:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104894:	ee07 3a90 	vmov	s15, r3
 8104898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810489c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81048a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 81048a4:	edd7 6a07 	vldr	s13, [r7, #28]
 81048a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81048ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81048b0:	ee17 2a90 	vmov	r2, s15
 81048b4:	687b      	ldr	r3, [r7, #4]
 81048b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 81048b8:	4b13      	ldr	r3, [pc, #76]	@ (8104908 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81048ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81048bc:	0e1b      	lsrs	r3, r3, #24
 81048be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81048c2:	ee07 3a90 	vmov	s15, r3
 81048c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81048ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81048ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 81048d2:	edd7 6a07 	vldr	s13, [r7, #28]
 81048d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81048da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81048de:	ee17 2a90 	vmov	r2, s15
 81048e2:	687b      	ldr	r3, [r7, #4]
 81048e4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 81048e6:	e008      	b.n	81048fa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 81048e8:	687b      	ldr	r3, [r7, #4]
 81048ea:	2200      	movs	r2, #0
 81048ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 81048ee:	687b      	ldr	r3, [r7, #4]
 81048f0:	2200      	movs	r2, #0
 81048f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 81048f4:	687b      	ldr	r3, [r7, #4]
 81048f6:	2200      	movs	r2, #0
 81048f8:	609a      	str	r2, [r3, #8]
}
 81048fa:	bf00      	nop
 81048fc:	3724      	adds	r7, #36	@ 0x24
 81048fe:	46bd      	mov	sp, r7
 8104900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104904:	4770      	bx	lr
 8104906:	bf00      	nop
 8104908:	58024400 	.word	0x58024400
 810490c:	03d09000 	.word	0x03d09000
 8104910:	46000000 	.word	0x46000000
 8104914:	4c742400 	.word	0x4c742400
 8104918:	4a742400 	.word	0x4a742400
 810491c:	4bbebc20 	.word	0x4bbebc20

08104920 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8104920:	b580      	push	{r7, lr}
 8104922:	b084      	sub	sp, #16
 8104924:	af00      	add	r7, sp, #0
 8104926:	6078      	str	r0, [r7, #4]
 8104928:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810492a:	2300      	movs	r3, #0
 810492c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810492e:	4b54      	ldr	r3, [pc, #336]	@ (8104a80 <RCCEx_PLL2_Config+0x160>)
 8104930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104932:	f003 0303 	and.w	r3, r3, #3
 8104936:	2b03      	cmp	r3, #3
 8104938:	d101      	bne.n	810493e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810493a:	2301      	movs	r3, #1
 810493c:	e09b      	b.n	8104a76 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810493e:	4b50      	ldr	r3, [pc, #320]	@ (8104a80 <RCCEx_PLL2_Config+0x160>)
 8104940:	681b      	ldr	r3, [r3, #0]
 8104942:	4a4f      	ldr	r2, [pc, #316]	@ (8104a80 <RCCEx_PLL2_Config+0x160>)
 8104944:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8104948:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810494a:	f7fc ff9d 	bl	8101888 <HAL_GetTick>
 810494e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104950:	e008      	b.n	8104964 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8104952:	f7fc ff99 	bl	8101888 <HAL_GetTick>
 8104956:	4602      	mov	r2, r0
 8104958:	68bb      	ldr	r3, [r7, #8]
 810495a:	1ad3      	subs	r3, r2, r3
 810495c:	2b02      	cmp	r3, #2
 810495e:	d901      	bls.n	8104964 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104960:	2303      	movs	r3, #3
 8104962:	e088      	b.n	8104a76 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104964:	4b46      	ldr	r3, [pc, #280]	@ (8104a80 <RCCEx_PLL2_Config+0x160>)
 8104966:	681b      	ldr	r3, [r3, #0]
 8104968:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810496c:	2b00      	cmp	r3, #0
 810496e:	d1f0      	bne.n	8104952 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8104970:	4b43      	ldr	r3, [pc, #268]	@ (8104a80 <RCCEx_PLL2_Config+0x160>)
 8104972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104974:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8104978:	687b      	ldr	r3, [r7, #4]
 810497a:	681b      	ldr	r3, [r3, #0]
 810497c:	031b      	lsls	r3, r3, #12
 810497e:	4940      	ldr	r1, [pc, #256]	@ (8104a80 <RCCEx_PLL2_Config+0x160>)
 8104980:	4313      	orrs	r3, r2
 8104982:	628b      	str	r3, [r1, #40]	@ 0x28
 8104984:	687b      	ldr	r3, [r7, #4]
 8104986:	685b      	ldr	r3, [r3, #4]
 8104988:	3b01      	subs	r3, #1
 810498a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810498e:	687b      	ldr	r3, [r7, #4]
 8104990:	689b      	ldr	r3, [r3, #8]
 8104992:	3b01      	subs	r3, #1
 8104994:	025b      	lsls	r3, r3, #9
 8104996:	b29b      	uxth	r3, r3
 8104998:	431a      	orrs	r2, r3
 810499a:	687b      	ldr	r3, [r7, #4]
 810499c:	68db      	ldr	r3, [r3, #12]
 810499e:	3b01      	subs	r3, #1
 81049a0:	041b      	lsls	r3, r3, #16
 81049a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81049a6:	431a      	orrs	r2, r3
 81049a8:	687b      	ldr	r3, [r7, #4]
 81049aa:	691b      	ldr	r3, [r3, #16]
 81049ac:	3b01      	subs	r3, #1
 81049ae:	061b      	lsls	r3, r3, #24
 81049b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 81049b4:	4932      	ldr	r1, [pc, #200]	@ (8104a80 <RCCEx_PLL2_Config+0x160>)
 81049b6:	4313      	orrs	r3, r2
 81049b8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 81049ba:	4b31      	ldr	r3, [pc, #196]	@ (8104a80 <RCCEx_PLL2_Config+0x160>)
 81049bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81049be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 81049c2:	687b      	ldr	r3, [r7, #4]
 81049c4:	695b      	ldr	r3, [r3, #20]
 81049c6:	492e      	ldr	r1, [pc, #184]	@ (8104a80 <RCCEx_PLL2_Config+0x160>)
 81049c8:	4313      	orrs	r3, r2
 81049ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 81049cc:	4b2c      	ldr	r3, [pc, #176]	@ (8104a80 <RCCEx_PLL2_Config+0x160>)
 81049ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81049d0:	f023 0220 	bic.w	r2, r3, #32
 81049d4:	687b      	ldr	r3, [r7, #4]
 81049d6:	699b      	ldr	r3, [r3, #24]
 81049d8:	4929      	ldr	r1, [pc, #164]	@ (8104a80 <RCCEx_PLL2_Config+0x160>)
 81049da:	4313      	orrs	r3, r2
 81049dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81049de:	4b28      	ldr	r3, [pc, #160]	@ (8104a80 <RCCEx_PLL2_Config+0x160>)
 81049e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81049e2:	4a27      	ldr	r2, [pc, #156]	@ (8104a80 <RCCEx_PLL2_Config+0x160>)
 81049e4:	f023 0310 	bic.w	r3, r3, #16
 81049e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 81049ea:	4b25      	ldr	r3, [pc, #148]	@ (8104a80 <RCCEx_PLL2_Config+0x160>)
 81049ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81049ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81049f2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81049f6:	687a      	ldr	r2, [r7, #4]
 81049f8:	69d2      	ldr	r2, [r2, #28]
 81049fa:	00d2      	lsls	r2, r2, #3
 81049fc:	4920      	ldr	r1, [pc, #128]	@ (8104a80 <RCCEx_PLL2_Config+0x160>)
 81049fe:	4313      	orrs	r3, r2
 8104a00:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8104a02:	4b1f      	ldr	r3, [pc, #124]	@ (8104a80 <RCCEx_PLL2_Config+0x160>)
 8104a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104a06:	4a1e      	ldr	r2, [pc, #120]	@ (8104a80 <RCCEx_PLL2_Config+0x160>)
 8104a08:	f043 0310 	orr.w	r3, r3, #16
 8104a0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8104a0e:	683b      	ldr	r3, [r7, #0]
 8104a10:	2b00      	cmp	r3, #0
 8104a12:	d106      	bne.n	8104a22 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8104a14:	4b1a      	ldr	r3, [pc, #104]	@ (8104a80 <RCCEx_PLL2_Config+0x160>)
 8104a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104a18:	4a19      	ldr	r2, [pc, #100]	@ (8104a80 <RCCEx_PLL2_Config+0x160>)
 8104a1a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8104a1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8104a20:	e00f      	b.n	8104a42 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8104a22:	683b      	ldr	r3, [r7, #0]
 8104a24:	2b01      	cmp	r3, #1
 8104a26:	d106      	bne.n	8104a36 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8104a28:	4b15      	ldr	r3, [pc, #84]	@ (8104a80 <RCCEx_PLL2_Config+0x160>)
 8104a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104a2c:	4a14      	ldr	r2, [pc, #80]	@ (8104a80 <RCCEx_PLL2_Config+0x160>)
 8104a2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8104a32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8104a34:	e005      	b.n	8104a42 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8104a36:	4b12      	ldr	r3, [pc, #72]	@ (8104a80 <RCCEx_PLL2_Config+0x160>)
 8104a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104a3a:	4a11      	ldr	r2, [pc, #68]	@ (8104a80 <RCCEx_PLL2_Config+0x160>)
 8104a3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8104a40:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8104a42:	4b0f      	ldr	r3, [pc, #60]	@ (8104a80 <RCCEx_PLL2_Config+0x160>)
 8104a44:	681b      	ldr	r3, [r3, #0]
 8104a46:	4a0e      	ldr	r2, [pc, #56]	@ (8104a80 <RCCEx_PLL2_Config+0x160>)
 8104a48:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8104a4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104a4e:	f7fc ff1b 	bl	8101888 <HAL_GetTick>
 8104a52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104a54:	e008      	b.n	8104a68 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8104a56:	f7fc ff17 	bl	8101888 <HAL_GetTick>
 8104a5a:	4602      	mov	r2, r0
 8104a5c:	68bb      	ldr	r3, [r7, #8]
 8104a5e:	1ad3      	subs	r3, r2, r3
 8104a60:	2b02      	cmp	r3, #2
 8104a62:	d901      	bls.n	8104a68 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104a64:	2303      	movs	r3, #3
 8104a66:	e006      	b.n	8104a76 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104a68:	4b05      	ldr	r3, [pc, #20]	@ (8104a80 <RCCEx_PLL2_Config+0x160>)
 8104a6a:	681b      	ldr	r3, [r3, #0]
 8104a6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104a70:	2b00      	cmp	r3, #0
 8104a72:	d0f0      	beq.n	8104a56 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8104a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8104a76:	4618      	mov	r0, r3
 8104a78:	3710      	adds	r7, #16
 8104a7a:	46bd      	mov	sp, r7
 8104a7c:	bd80      	pop	{r7, pc}
 8104a7e:	bf00      	nop
 8104a80:	58024400 	.word	0x58024400

08104a84 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8104a84:	b580      	push	{r7, lr}
 8104a86:	b084      	sub	sp, #16
 8104a88:	af00      	add	r7, sp, #0
 8104a8a:	6078      	str	r0, [r7, #4]
 8104a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104a8e:	2300      	movs	r3, #0
 8104a90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104a92:	4b54      	ldr	r3, [pc, #336]	@ (8104be4 <RCCEx_PLL3_Config+0x160>)
 8104a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104a96:	f003 0303 	and.w	r3, r3, #3
 8104a9a:	2b03      	cmp	r3, #3
 8104a9c:	d101      	bne.n	8104aa2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8104a9e:	2301      	movs	r3, #1
 8104aa0:	e09b      	b.n	8104bda <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8104aa2:	4b50      	ldr	r3, [pc, #320]	@ (8104be4 <RCCEx_PLL3_Config+0x160>)
 8104aa4:	681b      	ldr	r3, [r3, #0]
 8104aa6:	4a4f      	ldr	r2, [pc, #316]	@ (8104be4 <RCCEx_PLL3_Config+0x160>)
 8104aa8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8104aac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104aae:	f7fc feeb 	bl	8101888 <HAL_GetTick>
 8104ab2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104ab4:	e008      	b.n	8104ac8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8104ab6:	f7fc fee7 	bl	8101888 <HAL_GetTick>
 8104aba:	4602      	mov	r2, r0
 8104abc:	68bb      	ldr	r3, [r7, #8]
 8104abe:	1ad3      	subs	r3, r2, r3
 8104ac0:	2b02      	cmp	r3, #2
 8104ac2:	d901      	bls.n	8104ac8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104ac4:	2303      	movs	r3, #3
 8104ac6:	e088      	b.n	8104bda <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104ac8:	4b46      	ldr	r3, [pc, #280]	@ (8104be4 <RCCEx_PLL3_Config+0x160>)
 8104aca:	681b      	ldr	r3, [r3, #0]
 8104acc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104ad0:	2b00      	cmp	r3, #0
 8104ad2:	d1f0      	bne.n	8104ab6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8104ad4:	4b43      	ldr	r3, [pc, #268]	@ (8104be4 <RCCEx_PLL3_Config+0x160>)
 8104ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104ad8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8104adc:	687b      	ldr	r3, [r7, #4]
 8104ade:	681b      	ldr	r3, [r3, #0]
 8104ae0:	051b      	lsls	r3, r3, #20
 8104ae2:	4940      	ldr	r1, [pc, #256]	@ (8104be4 <RCCEx_PLL3_Config+0x160>)
 8104ae4:	4313      	orrs	r3, r2
 8104ae6:	628b      	str	r3, [r1, #40]	@ 0x28
 8104ae8:	687b      	ldr	r3, [r7, #4]
 8104aea:	685b      	ldr	r3, [r3, #4]
 8104aec:	3b01      	subs	r3, #1
 8104aee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104af2:	687b      	ldr	r3, [r7, #4]
 8104af4:	689b      	ldr	r3, [r3, #8]
 8104af6:	3b01      	subs	r3, #1
 8104af8:	025b      	lsls	r3, r3, #9
 8104afa:	b29b      	uxth	r3, r3
 8104afc:	431a      	orrs	r2, r3
 8104afe:	687b      	ldr	r3, [r7, #4]
 8104b00:	68db      	ldr	r3, [r3, #12]
 8104b02:	3b01      	subs	r3, #1
 8104b04:	041b      	lsls	r3, r3, #16
 8104b06:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8104b0a:	431a      	orrs	r2, r3
 8104b0c:	687b      	ldr	r3, [r7, #4]
 8104b0e:	691b      	ldr	r3, [r3, #16]
 8104b10:	3b01      	subs	r3, #1
 8104b12:	061b      	lsls	r3, r3, #24
 8104b14:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8104b18:	4932      	ldr	r1, [pc, #200]	@ (8104be4 <RCCEx_PLL3_Config+0x160>)
 8104b1a:	4313      	orrs	r3, r2
 8104b1c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8104b1e:	4b31      	ldr	r3, [pc, #196]	@ (8104be4 <RCCEx_PLL3_Config+0x160>)
 8104b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104b22:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8104b26:	687b      	ldr	r3, [r7, #4]
 8104b28:	695b      	ldr	r3, [r3, #20]
 8104b2a:	492e      	ldr	r1, [pc, #184]	@ (8104be4 <RCCEx_PLL3_Config+0x160>)
 8104b2c:	4313      	orrs	r3, r2
 8104b2e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8104b30:	4b2c      	ldr	r3, [pc, #176]	@ (8104be4 <RCCEx_PLL3_Config+0x160>)
 8104b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104b34:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8104b38:	687b      	ldr	r3, [r7, #4]
 8104b3a:	699b      	ldr	r3, [r3, #24]
 8104b3c:	4929      	ldr	r1, [pc, #164]	@ (8104be4 <RCCEx_PLL3_Config+0x160>)
 8104b3e:	4313      	orrs	r3, r2
 8104b40:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8104b42:	4b28      	ldr	r3, [pc, #160]	@ (8104be4 <RCCEx_PLL3_Config+0x160>)
 8104b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104b46:	4a27      	ldr	r2, [pc, #156]	@ (8104be4 <RCCEx_PLL3_Config+0x160>)
 8104b48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8104b4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8104b4e:	4b25      	ldr	r3, [pc, #148]	@ (8104be4 <RCCEx_PLL3_Config+0x160>)
 8104b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8104b52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8104b56:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8104b5a:	687a      	ldr	r2, [r7, #4]
 8104b5c:	69d2      	ldr	r2, [r2, #28]
 8104b5e:	00d2      	lsls	r2, r2, #3
 8104b60:	4920      	ldr	r1, [pc, #128]	@ (8104be4 <RCCEx_PLL3_Config+0x160>)
 8104b62:	4313      	orrs	r3, r2
 8104b64:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8104b66:	4b1f      	ldr	r3, [pc, #124]	@ (8104be4 <RCCEx_PLL3_Config+0x160>)
 8104b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104b6a:	4a1e      	ldr	r2, [pc, #120]	@ (8104be4 <RCCEx_PLL3_Config+0x160>)
 8104b6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8104b70:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8104b72:	683b      	ldr	r3, [r7, #0]
 8104b74:	2b00      	cmp	r3, #0
 8104b76:	d106      	bne.n	8104b86 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8104b78:	4b1a      	ldr	r3, [pc, #104]	@ (8104be4 <RCCEx_PLL3_Config+0x160>)
 8104b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104b7c:	4a19      	ldr	r2, [pc, #100]	@ (8104be4 <RCCEx_PLL3_Config+0x160>)
 8104b7e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8104b82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8104b84:	e00f      	b.n	8104ba6 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8104b86:	683b      	ldr	r3, [r7, #0]
 8104b88:	2b01      	cmp	r3, #1
 8104b8a:	d106      	bne.n	8104b9a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8104b8c:	4b15      	ldr	r3, [pc, #84]	@ (8104be4 <RCCEx_PLL3_Config+0x160>)
 8104b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104b90:	4a14      	ldr	r2, [pc, #80]	@ (8104be4 <RCCEx_PLL3_Config+0x160>)
 8104b92:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8104b96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8104b98:	e005      	b.n	8104ba6 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8104b9a:	4b12      	ldr	r3, [pc, #72]	@ (8104be4 <RCCEx_PLL3_Config+0x160>)
 8104b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104b9e:	4a11      	ldr	r2, [pc, #68]	@ (8104be4 <RCCEx_PLL3_Config+0x160>)
 8104ba0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8104ba4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8104ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8104be4 <RCCEx_PLL3_Config+0x160>)
 8104ba8:	681b      	ldr	r3, [r3, #0]
 8104baa:	4a0e      	ldr	r2, [pc, #56]	@ (8104be4 <RCCEx_PLL3_Config+0x160>)
 8104bac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8104bb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104bb2:	f7fc fe69 	bl	8101888 <HAL_GetTick>
 8104bb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104bb8:	e008      	b.n	8104bcc <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8104bba:	f7fc fe65 	bl	8101888 <HAL_GetTick>
 8104bbe:	4602      	mov	r2, r0
 8104bc0:	68bb      	ldr	r3, [r7, #8]
 8104bc2:	1ad3      	subs	r3, r2, r3
 8104bc4:	2b02      	cmp	r3, #2
 8104bc6:	d901      	bls.n	8104bcc <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104bc8:	2303      	movs	r3, #3
 8104bca:	e006      	b.n	8104bda <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104bcc:	4b05      	ldr	r3, [pc, #20]	@ (8104be4 <RCCEx_PLL3_Config+0x160>)
 8104bce:	681b      	ldr	r3, [r3, #0]
 8104bd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104bd4:	2b00      	cmp	r3, #0
 8104bd6:	d0f0      	beq.n	8104bba <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8104bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8104bda:	4618      	mov	r0, r3
 8104bdc:	3710      	adds	r7, #16
 8104bde:	46bd      	mov	sp, r7
 8104be0:	bd80      	pop	{r7, pc}
 8104be2:	bf00      	nop
 8104be4:	58024400 	.word	0x58024400

08104be8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8104be8:	b580      	push	{r7, lr}
 8104bea:	b084      	sub	sp, #16
 8104bec:	af00      	add	r7, sp, #0
 8104bee:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8104bf0:	687b      	ldr	r3, [r7, #4]
 8104bf2:	2b00      	cmp	r3, #0
 8104bf4:	d101      	bne.n	8104bfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8104bf6:	2301      	movs	r3, #1
 8104bf8:	e10f      	b.n	8104e1a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8104bfa:	687b      	ldr	r3, [r7, #4]
 8104bfc:	2200      	movs	r2, #0
 8104bfe:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8104c00:	687b      	ldr	r3, [r7, #4]
 8104c02:	681b      	ldr	r3, [r3, #0]
 8104c04:	4a87      	ldr	r2, [pc, #540]	@ (8104e24 <HAL_SPI_Init+0x23c>)
 8104c06:	4293      	cmp	r3, r2
 8104c08:	d00f      	beq.n	8104c2a <HAL_SPI_Init+0x42>
 8104c0a:	687b      	ldr	r3, [r7, #4]
 8104c0c:	681b      	ldr	r3, [r3, #0]
 8104c0e:	4a86      	ldr	r2, [pc, #536]	@ (8104e28 <HAL_SPI_Init+0x240>)
 8104c10:	4293      	cmp	r3, r2
 8104c12:	d00a      	beq.n	8104c2a <HAL_SPI_Init+0x42>
 8104c14:	687b      	ldr	r3, [r7, #4]
 8104c16:	681b      	ldr	r3, [r3, #0]
 8104c18:	4a84      	ldr	r2, [pc, #528]	@ (8104e2c <HAL_SPI_Init+0x244>)
 8104c1a:	4293      	cmp	r3, r2
 8104c1c:	d005      	beq.n	8104c2a <HAL_SPI_Init+0x42>
 8104c1e:	687b      	ldr	r3, [r7, #4]
 8104c20:	68db      	ldr	r3, [r3, #12]
 8104c22:	2b0f      	cmp	r3, #15
 8104c24:	d901      	bls.n	8104c2a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8104c26:	2301      	movs	r3, #1
 8104c28:	e0f7      	b.n	8104e1a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8104c2a:	6878      	ldr	r0, [r7, #4]
 8104c2c:	f000 f900 	bl	8104e30 <SPI_GetPacketSize>
 8104c30:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8104c32:	687b      	ldr	r3, [r7, #4]
 8104c34:	681b      	ldr	r3, [r3, #0]
 8104c36:	4a7b      	ldr	r2, [pc, #492]	@ (8104e24 <HAL_SPI_Init+0x23c>)
 8104c38:	4293      	cmp	r3, r2
 8104c3a:	d00c      	beq.n	8104c56 <HAL_SPI_Init+0x6e>
 8104c3c:	687b      	ldr	r3, [r7, #4]
 8104c3e:	681b      	ldr	r3, [r3, #0]
 8104c40:	4a79      	ldr	r2, [pc, #484]	@ (8104e28 <HAL_SPI_Init+0x240>)
 8104c42:	4293      	cmp	r3, r2
 8104c44:	d007      	beq.n	8104c56 <HAL_SPI_Init+0x6e>
 8104c46:	687b      	ldr	r3, [r7, #4]
 8104c48:	681b      	ldr	r3, [r3, #0]
 8104c4a:	4a78      	ldr	r2, [pc, #480]	@ (8104e2c <HAL_SPI_Init+0x244>)
 8104c4c:	4293      	cmp	r3, r2
 8104c4e:	d002      	beq.n	8104c56 <HAL_SPI_Init+0x6e>
 8104c50:	68fb      	ldr	r3, [r7, #12]
 8104c52:	2b08      	cmp	r3, #8
 8104c54:	d811      	bhi.n	8104c7a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8104c56:	687b      	ldr	r3, [r7, #4]
 8104c58:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8104c5a:	4a72      	ldr	r2, [pc, #456]	@ (8104e24 <HAL_SPI_Init+0x23c>)
 8104c5c:	4293      	cmp	r3, r2
 8104c5e:	d009      	beq.n	8104c74 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8104c60:	687b      	ldr	r3, [r7, #4]
 8104c62:	681b      	ldr	r3, [r3, #0]
 8104c64:	4a70      	ldr	r2, [pc, #448]	@ (8104e28 <HAL_SPI_Init+0x240>)
 8104c66:	4293      	cmp	r3, r2
 8104c68:	d004      	beq.n	8104c74 <HAL_SPI_Init+0x8c>
 8104c6a:	687b      	ldr	r3, [r7, #4]
 8104c6c:	681b      	ldr	r3, [r3, #0]
 8104c6e:	4a6f      	ldr	r2, [pc, #444]	@ (8104e2c <HAL_SPI_Init+0x244>)
 8104c70:	4293      	cmp	r3, r2
 8104c72:	d104      	bne.n	8104c7e <HAL_SPI_Init+0x96>
 8104c74:	68fb      	ldr	r3, [r7, #12]
 8104c76:	2b10      	cmp	r3, #16
 8104c78:	d901      	bls.n	8104c7e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8104c7a:	2301      	movs	r3, #1
 8104c7c:	e0cd      	b.n	8104e1a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8104c7e:	687b      	ldr	r3, [r7, #4]
 8104c80:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8104c84:	b2db      	uxtb	r3, r3
 8104c86:	2b00      	cmp	r3, #0
 8104c88:	d106      	bne.n	8104c98 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8104c8a:	687b      	ldr	r3, [r7, #4]
 8104c8c:	2200      	movs	r2, #0
 8104c8e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8104c92:	6878      	ldr	r0, [r7, #4]
 8104c94:	f7fc fa6a 	bl	810116c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8104c98:	687b      	ldr	r3, [r7, #4]
 8104c9a:	2202      	movs	r2, #2
 8104c9c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8104ca0:	687b      	ldr	r3, [r7, #4]
 8104ca2:	681b      	ldr	r3, [r3, #0]
 8104ca4:	681a      	ldr	r2, [r3, #0]
 8104ca6:	687b      	ldr	r3, [r7, #4]
 8104ca8:	681b      	ldr	r3, [r3, #0]
 8104caa:	f022 0201 	bic.w	r2, r2, #1
 8104cae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8104cb0:	687b      	ldr	r3, [r7, #4]
 8104cb2:	681b      	ldr	r3, [r3, #0]
 8104cb4:	689b      	ldr	r3, [r3, #8]
 8104cb6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8104cba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8104cbc:	687b      	ldr	r3, [r7, #4]
 8104cbe:	699b      	ldr	r3, [r3, #24]
 8104cc0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8104cc4:	d119      	bne.n	8104cfa <HAL_SPI_Init+0x112>
 8104cc6:	687b      	ldr	r3, [r7, #4]
 8104cc8:	685b      	ldr	r3, [r3, #4]
 8104cca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8104cce:	d103      	bne.n	8104cd8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8104cd0:	687b      	ldr	r3, [r7, #4]
 8104cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8104cd4:	2b00      	cmp	r3, #0
 8104cd6:	d008      	beq.n	8104cea <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8104cd8:	687b      	ldr	r3, [r7, #4]
 8104cda:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8104cdc:	2b00      	cmp	r3, #0
 8104cde:	d10c      	bne.n	8104cfa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8104ce0:	687b      	ldr	r3, [r7, #4]
 8104ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8104ce4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104ce8:	d107      	bne.n	8104cfa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8104cea:	687b      	ldr	r3, [r7, #4]
 8104cec:	681b      	ldr	r3, [r3, #0]
 8104cee:	681a      	ldr	r2, [r3, #0]
 8104cf0:	687b      	ldr	r3, [r7, #4]
 8104cf2:	681b      	ldr	r3, [r3, #0]
 8104cf4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8104cf8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8104cfa:	687b      	ldr	r3, [r7, #4]
 8104cfc:	685b      	ldr	r3, [r3, #4]
 8104cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8104d02:	2b00      	cmp	r3, #0
 8104d04:	d00f      	beq.n	8104d26 <HAL_SPI_Init+0x13e>
 8104d06:	687b      	ldr	r3, [r7, #4]
 8104d08:	68db      	ldr	r3, [r3, #12]
 8104d0a:	2b06      	cmp	r3, #6
 8104d0c:	d90b      	bls.n	8104d26 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8104d0e:	687b      	ldr	r3, [r7, #4]
 8104d10:	681b      	ldr	r3, [r3, #0]
 8104d12:	681b      	ldr	r3, [r3, #0]
 8104d14:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8104d18:	687b      	ldr	r3, [r7, #4]
 8104d1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8104d1c:	687b      	ldr	r3, [r7, #4]
 8104d1e:	681b      	ldr	r3, [r3, #0]
 8104d20:	430a      	orrs	r2, r1
 8104d22:	601a      	str	r2, [r3, #0]
 8104d24:	e007      	b.n	8104d36 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8104d26:	687b      	ldr	r3, [r7, #4]
 8104d28:	681b      	ldr	r3, [r3, #0]
 8104d2a:	681a      	ldr	r2, [r3, #0]
 8104d2c:	687b      	ldr	r3, [r7, #4]
 8104d2e:	681b      	ldr	r3, [r3, #0]
 8104d30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8104d34:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8104d36:	687b      	ldr	r3, [r7, #4]
 8104d38:	69da      	ldr	r2, [r3, #28]
 8104d3a:	687b      	ldr	r3, [r7, #4]
 8104d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104d3e:	431a      	orrs	r2, r3
 8104d40:	68bb      	ldr	r3, [r7, #8]
 8104d42:	431a      	orrs	r2, r3
 8104d44:	687b      	ldr	r3, [r7, #4]
 8104d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104d48:	ea42 0103 	orr.w	r1, r2, r3
 8104d4c:	687b      	ldr	r3, [r7, #4]
 8104d4e:	68da      	ldr	r2, [r3, #12]
 8104d50:	687b      	ldr	r3, [r7, #4]
 8104d52:	681b      	ldr	r3, [r3, #0]
 8104d54:	430a      	orrs	r2, r1
 8104d56:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8104d58:	687b      	ldr	r3, [r7, #4]
 8104d5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8104d5c:	687b      	ldr	r3, [r7, #4]
 8104d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104d60:	431a      	orrs	r2, r3
 8104d62:	687b      	ldr	r3, [r7, #4]
 8104d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104d66:	431a      	orrs	r2, r3
 8104d68:	687b      	ldr	r3, [r7, #4]
 8104d6a:	699b      	ldr	r3, [r3, #24]
 8104d6c:	431a      	orrs	r2, r3
 8104d6e:	687b      	ldr	r3, [r7, #4]
 8104d70:	691b      	ldr	r3, [r3, #16]
 8104d72:	431a      	orrs	r2, r3
 8104d74:	687b      	ldr	r3, [r7, #4]
 8104d76:	695b      	ldr	r3, [r3, #20]
 8104d78:	431a      	orrs	r2, r3
 8104d7a:	687b      	ldr	r3, [r7, #4]
 8104d7c:	6a1b      	ldr	r3, [r3, #32]
 8104d7e:	431a      	orrs	r2, r3
 8104d80:	687b      	ldr	r3, [r7, #4]
 8104d82:	685b      	ldr	r3, [r3, #4]
 8104d84:	431a      	orrs	r2, r3
 8104d86:	687b      	ldr	r3, [r7, #4]
 8104d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104d8a:	431a      	orrs	r2, r3
 8104d8c:	687b      	ldr	r3, [r7, #4]
 8104d8e:	689b      	ldr	r3, [r3, #8]
 8104d90:	431a      	orrs	r2, r3
 8104d92:	687b      	ldr	r3, [r7, #4]
 8104d94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8104d96:	ea42 0103 	orr.w	r1, r2, r3
 8104d9a:	687b      	ldr	r3, [r7, #4]
 8104d9c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8104d9e:	687b      	ldr	r3, [r7, #4]
 8104da0:	681b      	ldr	r3, [r3, #0]
 8104da2:	430a      	orrs	r2, r1
 8104da4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8104da6:	687b      	ldr	r3, [r7, #4]
 8104da8:	685b      	ldr	r3, [r3, #4]
 8104daa:	2b00      	cmp	r3, #0
 8104dac:	d113      	bne.n	8104dd6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8104dae:	687b      	ldr	r3, [r7, #4]
 8104db0:	681b      	ldr	r3, [r3, #0]
 8104db2:	689b      	ldr	r3, [r3, #8]
 8104db4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8104db8:	687b      	ldr	r3, [r7, #4]
 8104dba:	681b      	ldr	r3, [r3, #0]
 8104dbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8104dc0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8104dc2:	687b      	ldr	r3, [r7, #4]
 8104dc4:	681b      	ldr	r3, [r3, #0]
 8104dc6:	689b      	ldr	r3, [r3, #8]
 8104dc8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8104dcc:	687b      	ldr	r3, [r7, #4]
 8104dce:	681b      	ldr	r3, [r3, #0]
 8104dd0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8104dd4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8104dd6:	687b      	ldr	r3, [r7, #4]
 8104dd8:	681b      	ldr	r3, [r3, #0]
 8104dda:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8104ddc:	687b      	ldr	r3, [r7, #4]
 8104dde:	681b      	ldr	r3, [r3, #0]
 8104de0:	f022 0201 	bic.w	r2, r2, #1
 8104de4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8104de6:	687b      	ldr	r3, [r7, #4]
 8104de8:	685b      	ldr	r3, [r3, #4]
 8104dea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8104dee:	2b00      	cmp	r3, #0
 8104df0:	d00a      	beq.n	8104e08 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8104df2:	687b      	ldr	r3, [r7, #4]
 8104df4:	681b      	ldr	r3, [r3, #0]
 8104df6:	68db      	ldr	r3, [r3, #12]
 8104df8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8104dfc:	687b      	ldr	r3, [r7, #4]
 8104dfe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8104e00:	687b      	ldr	r3, [r7, #4]
 8104e02:	681b      	ldr	r3, [r3, #0]
 8104e04:	430a      	orrs	r2, r1
 8104e06:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8104e08:	687b      	ldr	r3, [r7, #4]
 8104e0a:	2200      	movs	r2, #0
 8104e0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8104e10:	687b      	ldr	r3, [r7, #4]
 8104e12:	2201      	movs	r2, #1
 8104e14:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8104e18:	2300      	movs	r3, #0
}
 8104e1a:	4618      	mov	r0, r3
 8104e1c:	3710      	adds	r7, #16
 8104e1e:	46bd      	mov	sp, r7
 8104e20:	bd80      	pop	{r7, pc}
 8104e22:	bf00      	nop
 8104e24:	40013000 	.word	0x40013000
 8104e28:	40003800 	.word	0x40003800
 8104e2c:	40003c00 	.word	0x40003c00

08104e30 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8104e30:	b480      	push	{r7}
 8104e32:	b085      	sub	sp, #20
 8104e34:	af00      	add	r7, sp, #0
 8104e36:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8104e38:	687b      	ldr	r3, [r7, #4]
 8104e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104e3c:	095b      	lsrs	r3, r3, #5
 8104e3e:	3301      	adds	r3, #1
 8104e40:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8104e42:	687b      	ldr	r3, [r7, #4]
 8104e44:	68db      	ldr	r3, [r3, #12]
 8104e46:	3301      	adds	r3, #1
 8104e48:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8104e4a:	68bb      	ldr	r3, [r7, #8]
 8104e4c:	3307      	adds	r3, #7
 8104e4e:	08db      	lsrs	r3, r3, #3
 8104e50:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8104e52:	68bb      	ldr	r3, [r7, #8]
 8104e54:	68fa      	ldr	r2, [r7, #12]
 8104e56:	fb02 f303 	mul.w	r3, r2, r3
}
 8104e5a:	4618      	mov	r0, r3
 8104e5c:	3714      	adds	r7, #20
 8104e5e:	46bd      	mov	sp, r7
 8104e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e64:	4770      	bx	lr

08104e66 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8104e66:	b580      	push	{r7, lr}
 8104e68:	b082      	sub	sp, #8
 8104e6a:	af00      	add	r7, sp, #0
 8104e6c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8104e6e:	687b      	ldr	r3, [r7, #4]
 8104e70:	2b00      	cmp	r3, #0
 8104e72:	d101      	bne.n	8104e78 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8104e74:	2301      	movs	r3, #1
 8104e76:	e042      	b.n	8104efe <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8104e78:	687b      	ldr	r3, [r7, #4]
 8104e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8104e7e:	2b00      	cmp	r3, #0
 8104e80:	d106      	bne.n	8104e90 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8104e82:	687b      	ldr	r3, [r7, #4]
 8104e84:	2200      	movs	r2, #0
 8104e86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8104e8a:	6878      	ldr	r0, [r7, #4]
 8104e8c:	f000 f83b 	bl	8104f06 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8104e90:	687b      	ldr	r3, [r7, #4]
 8104e92:	2224      	movs	r2, #36	@ 0x24
 8104e94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8104e98:	687b      	ldr	r3, [r7, #4]
 8104e9a:	681b      	ldr	r3, [r3, #0]
 8104e9c:	681a      	ldr	r2, [r3, #0]
 8104e9e:	687b      	ldr	r3, [r7, #4]
 8104ea0:	681b      	ldr	r3, [r3, #0]
 8104ea2:	f022 0201 	bic.w	r2, r2, #1
 8104ea6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8104ea8:	687b      	ldr	r3, [r7, #4]
 8104eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104eac:	2b00      	cmp	r3, #0
 8104eae:	d002      	beq.n	8104eb6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8104eb0:	6878      	ldr	r0, [r7, #4]
 8104eb2:	f000 fe29 	bl	8105b08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8104eb6:	6878      	ldr	r0, [r7, #4]
 8104eb8:	f000 f8be 	bl	8105038 <UART_SetConfig>
 8104ebc:	4603      	mov	r3, r0
 8104ebe:	2b01      	cmp	r3, #1
 8104ec0:	d101      	bne.n	8104ec6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8104ec2:	2301      	movs	r3, #1
 8104ec4:	e01b      	b.n	8104efe <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8104ec6:	687b      	ldr	r3, [r7, #4]
 8104ec8:	681b      	ldr	r3, [r3, #0]
 8104eca:	685a      	ldr	r2, [r3, #4]
 8104ecc:	687b      	ldr	r3, [r7, #4]
 8104ece:	681b      	ldr	r3, [r3, #0]
 8104ed0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8104ed4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8104ed6:	687b      	ldr	r3, [r7, #4]
 8104ed8:	681b      	ldr	r3, [r3, #0]
 8104eda:	689a      	ldr	r2, [r3, #8]
 8104edc:	687b      	ldr	r3, [r7, #4]
 8104ede:	681b      	ldr	r3, [r3, #0]
 8104ee0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8104ee4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8104ee6:	687b      	ldr	r3, [r7, #4]
 8104ee8:	681b      	ldr	r3, [r3, #0]
 8104eea:	681a      	ldr	r2, [r3, #0]
 8104eec:	687b      	ldr	r3, [r7, #4]
 8104eee:	681b      	ldr	r3, [r3, #0]
 8104ef0:	f042 0201 	orr.w	r2, r2, #1
 8104ef4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8104ef6:	6878      	ldr	r0, [r7, #4]
 8104ef8:	f000 fea8 	bl	8105c4c <UART_CheckIdleState>
 8104efc:	4603      	mov	r3, r0
}
 8104efe:	4618      	mov	r0, r3
 8104f00:	3708      	adds	r7, #8
 8104f02:	46bd      	mov	sp, r7
 8104f04:	bd80      	pop	{r7, pc}

08104f06 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8104f06:	b480      	push	{r7}
 8104f08:	b083      	sub	sp, #12
 8104f0a:	af00      	add	r7, sp, #0
 8104f0c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8104f0e:	bf00      	nop
 8104f10:	370c      	adds	r7, #12
 8104f12:	46bd      	mov	sp, r7
 8104f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f18:	4770      	bx	lr

08104f1a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104f1a:	b580      	push	{r7, lr}
 8104f1c:	b08a      	sub	sp, #40	@ 0x28
 8104f1e:	af02      	add	r7, sp, #8
 8104f20:	60f8      	str	r0, [r7, #12]
 8104f22:	60b9      	str	r1, [r7, #8]
 8104f24:	603b      	str	r3, [r7, #0]
 8104f26:	4613      	mov	r3, r2
 8104f28:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8104f2a:	68fb      	ldr	r3, [r7, #12]
 8104f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8104f30:	2b20      	cmp	r3, #32
 8104f32:	d17b      	bne.n	810502c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8104f34:	68bb      	ldr	r3, [r7, #8]
 8104f36:	2b00      	cmp	r3, #0
 8104f38:	d002      	beq.n	8104f40 <HAL_UART_Transmit+0x26>
 8104f3a:	88fb      	ldrh	r3, [r7, #6]
 8104f3c:	2b00      	cmp	r3, #0
 8104f3e:	d101      	bne.n	8104f44 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8104f40:	2301      	movs	r3, #1
 8104f42:	e074      	b.n	810502e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8104f44:	68fb      	ldr	r3, [r7, #12]
 8104f46:	2200      	movs	r2, #0
 8104f48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8104f4c:	68fb      	ldr	r3, [r7, #12]
 8104f4e:	2221      	movs	r2, #33	@ 0x21
 8104f50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8104f54:	f7fc fc98 	bl	8101888 <HAL_GetTick>
 8104f58:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8104f5a:	68fb      	ldr	r3, [r7, #12]
 8104f5c:	88fa      	ldrh	r2, [r7, #6]
 8104f5e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8104f62:	68fb      	ldr	r3, [r7, #12]
 8104f64:	88fa      	ldrh	r2, [r7, #6]
 8104f66:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8104f6a:	68fb      	ldr	r3, [r7, #12]
 8104f6c:	689b      	ldr	r3, [r3, #8]
 8104f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8104f72:	d108      	bne.n	8104f86 <HAL_UART_Transmit+0x6c>
 8104f74:	68fb      	ldr	r3, [r7, #12]
 8104f76:	691b      	ldr	r3, [r3, #16]
 8104f78:	2b00      	cmp	r3, #0
 8104f7a:	d104      	bne.n	8104f86 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8104f7c:	2300      	movs	r3, #0
 8104f7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8104f80:	68bb      	ldr	r3, [r7, #8]
 8104f82:	61bb      	str	r3, [r7, #24]
 8104f84:	e003      	b.n	8104f8e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8104f86:	68bb      	ldr	r3, [r7, #8]
 8104f88:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8104f8a:	2300      	movs	r3, #0
 8104f8c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8104f8e:	e030      	b.n	8104ff2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8104f90:	683b      	ldr	r3, [r7, #0]
 8104f92:	9300      	str	r3, [sp, #0]
 8104f94:	697b      	ldr	r3, [r7, #20]
 8104f96:	2200      	movs	r2, #0
 8104f98:	2180      	movs	r1, #128	@ 0x80
 8104f9a:	68f8      	ldr	r0, [r7, #12]
 8104f9c:	f000 ff00 	bl	8105da0 <UART_WaitOnFlagUntilTimeout>
 8104fa0:	4603      	mov	r3, r0
 8104fa2:	2b00      	cmp	r3, #0
 8104fa4:	d005      	beq.n	8104fb2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8104fa6:	68fb      	ldr	r3, [r7, #12]
 8104fa8:	2220      	movs	r2, #32
 8104faa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8104fae:	2303      	movs	r3, #3
 8104fb0:	e03d      	b.n	810502e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8104fb2:	69fb      	ldr	r3, [r7, #28]
 8104fb4:	2b00      	cmp	r3, #0
 8104fb6:	d10b      	bne.n	8104fd0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8104fb8:	69bb      	ldr	r3, [r7, #24]
 8104fba:	881b      	ldrh	r3, [r3, #0]
 8104fbc:	461a      	mov	r2, r3
 8104fbe:	68fb      	ldr	r3, [r7, #12]
 8104fc0:	681b      	ldr	r3, [r3, #0]
 8104fc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8104fc6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8104fc8:	69bb      	ldr	r3, [r7, #24]
 8104fca:	3302      	adds	r3, #2
 8104fcc:	61bb      	str	r3, [r7, #24]
 8104fce:	e007      	b.n	8104fe0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8104fd0:	69fb      	ldr	r3, [r7, #28]
 8104fd2:	781a      	ldrb	r2, [r3, #0]
 8104fd4:	68fb      	ldr	r3, [r7, #12]
 8104fd6:	681b      	ldr	r3, [r3, #0]
 8104fd8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8104fda:	69fb      	ldr	r3, [r7, #28]
 8104fdc:	3301      	adds	r3, #1
 8104fde:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8104fe0:	68fb      	ldr	r3, [r7, #12]
 8104fe2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8104fe6:	b29b      	uxth	r3, r3
 8104fe8:	3b01      	subs	r3, #1
 8104fea:	b29a      	uxth	r2, r3
 8104fec:	68fb      	ldr	r3, [r7, #12]
 8104fee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8104ff2:	68fb      	ldr	r3, [r7, #12]
 8104ff4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8104ff8:	b29b      	uxth	r3, r3
 8104ffa:	2b00      	cmp	r3, #0
 8104ffc:	d1c8      	bne.n	8104f90 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8104ffe:	683b      	ldr	r3, [r7, #0]
 8105000:	9300      	str	r3, [sp, #0]
 8105002:	697b      	ldr	r3, [r7, #20]
 8105004:	2200      	movs	r2, #0
 8105006:	2140      	movs	r1, #64	@ 0x40
 8105008:	68f8      	ldr	r0, [r7, #12]
 810500a:	f000 fec9 	bl	8105da0 <UART_WaitOnFlagUntilTimeout>
 810500e:	4603      	mov	r3, r0
 8105010:	2b00      	cmp	r3, #0
 8105012:	d005      	beq.n	8105020 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8105014:	68fb      	ldr	r3, [r7, #12]
 8105016:	2220      	movs	r2, #32
 8105018:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 810501c:	2303      	movs	r3, #3
 810501e:	e006      	b.n	810502e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8105020:	68fb      	ldr	r3, [r7, #12]
 8105022:	2220      	movs	r2, #32
 8105024:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8105028:	2300      	movs	r3, #0
 810502a:	e000      	b.n	810502e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 810502c:	2302      	movs	r3, #2
  }
}
 810502e:	4618      	mov	r0, r3
 8105030:	3720      	adds	r7, #32
 8105032:	46bd      	mov	sp, r7
 8105034:	bd80      	pop	{r7, pc}
	...

08105038 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8105038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810503c:	b092      	sub	sp, #72	@ 0x48
 810503e:	af00      	add	r7, sp, #0
 8105040:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8105042:	2300      	movs	r3, #0
 8105044:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8105048:	697b      	ldr	r3, [r7, #20]
 810504a:	689a      	ldr	r2, [r3, #8]
 810504c:	697b      	ldr	r3, [r7, #20]
 810504e:	691b      	ldr	r3, [r3, #16]
 8105050:	431a      	orrs	r2, r3
 8105052:	697b      	ldr	r3, [r7, #20]
 8105054:	695b      	ldr	r3, [r3, #20]
 8105056:	431a      	orrs	r2, r3
 8105058:	697b      	ldr	r3, [r7, #20]
 810505a:	69db      	ldr	r3, [r3, #28]
 810505c:	4313      	orrs	r3, r2
 810505e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8105060:	697b      	ldr	r3, [r7, #20]
 8105062:	681b      	ldr	r3, [r3, #0]
 8105064:	681a      	ldr	r2, [r3, #0]
 8105066:	4bbd      	ldr	r3, [pc, #756]	@ (810535c <UART_SetConfig+0x324>)
 8105068:	4013      	ands	r3, r2
 810506a:	697a      	ldr	r2, [r7, #20]
 810506c:	6812      	ldr	r2, [r2, #0]
 810506e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8105070:	430b      	orrs	r3, r1
 8105072:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8105074:	697b      	ldr	r3, [r7, #20]
 8105076:	681b      	ldr	r3, [r3, #0]
 8105078:	685b      	ldr	r3, [r3, #4]
 810507a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810507e:	697b      	ldr	r3, [r7, #20]
 8105080:	68da      	ldr	r2, [r3, #12]
 8105082:	697b      	ldr	r3, [r7, #20]
 8105084:	681b      	ldr	r3, [r3, #0]
 8105086:	430a      	orrs	r2, r1
 8105088:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810508a:	697b      	ldr	r3, [r7, #20]
 810508c:	699b      	ldr	r3, [r3, #24]
 810508e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8105090:	697b      	ldr	r3, [r7, #20]
 8105092:	681b      	ldr	r3, [r3, #0]
 8105094:	4ab2      	ldr	r2, [pc, #712]	@ (8105360 <UART_SetConfig+0x328>)
 8105096:	4293      	cmp	r3, r2
 8105098:	d004      	beq.n	81050a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810509a:	697b      	ldr	r3, [r7, #20]
 810509c:	6a1b      	ldr	r3, [r3, #32]
 810509e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 81050a0:	4313      	orrs	r3, r2
 81050a2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 81050a4:	697b      	ldr	r3, [r7, #20]
 81050a6:	681b      	ldr	r3, [r3, #0]
 81050a8:	689b      	ldr	r3, [r3, #8]
 81050aa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 81050ae:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 81050b2:	697a      	ldr	r2, [r7, #20]
 81050b4:	6812      	ldr	r2, [r2, #0]
 81050b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 81050b8:	430b      	orrs	r3, r1
 81050ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 81050bc:	697b      	ldr	r3, [r7, #20]
 81050be:	681b      	ldr	r3, [r3, #0]
 81050c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81050c2:	f023 010f 	bic.w	r1, r3, #15
 81050c6:	697b      	ldr	r3, [r7, #20]
 81050c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81050ca:	697b      	ldr	r3, [r7, #20]
 81050cc:	681b      	ldr	r3, [r3, #0]
 81050ce:	430a      	orrs	r2, r1
 81050d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 81050d2:	697b      	ldr	r3, [r7, #20]
 81050d4:	681b      	ldr	r3, [r3, #0]
 81050d6:	4aa3      	ldr	r2, [pc, #652]	@ (8105364 <UART_SetConfig+0x32c>)
 81050d8:	4293      	cmp	r3, r2
 81050da:	d177      	bne.n	81051cc <UART_SetConfig+0x194>
 81050dc:	4ba2      	ldr	r3, [pc, #648]	@ (8105368 <UART_SetConfig+0x330>)
 81050de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81050e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81050e4:	2b28      	cmp	r3, #40	@ 0x28
 81050e6:	d86d      	bhi.n	81051c4 <UART_SetConfig+0x18c>
 81050e8:	a201      	add	r2, pc, #4	@ (adr r2, 81050f0 <UART_SetConfig+0xb8>)
 81050ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81050ee:	bf00      	nop
 81050f0:	08105195 	.word	0x08105195
 81050f4:	081051c5 	.word	0x081051c5
 81050f8:	081051c5 	.word	0x081051c5
 81050fc:	081051c5 	.word	0x081051c5
 8105100:	081051c5 	.word	0x081051c5
 8105104:	081051c5 	.word	0x081051c5
 8105108:	081051c5 	.word	0x081051c5
 810510c:	081051c5 	.word	0x081051c5
 8105110:	0810519d 	.word	0x0810519d
 8105114:	081051c5 	.word	0x081051c5
 8105118:	081051c5 	.word	0x081051c5
 810511c:	081051c5 	.word	0x081051c5
 8105120:	081051c5 	.word	0x081051c5
 8105124:	081051c5 	.word	0x081051c5
 8105128:	081051c5 	.word	0x081051c5
 810512c:	081051c5 	.word	0x081051c5
 8105130:	081051a5 	.word	0x081051a5
 8105134:	081051c5 	.word	0x081051c5
 8105138:	081051c5 	.word	0x081051c5
 810513c:	081051c5 	.word	0x081051c5
 8105140:	081051c5 	.word	0x081051c5
 8105144:	081051c5 	.word	0x081051c5
 8105148:	081051c5 	.word	0x081051c5
 810514c:	081051c5 	.word	0x081051c5
 8105150:	081051ad 	.word	0x081051ad
 8105154:	081051c5 	.word	0x081051c5
 8105158:	081051c5 	.word	0x081051c5
 810515c:	081051c5 	.word	0x081051c5
 8105160:	081051c5 	.word	0x081051c5
 8105164:	081051c5 	.word	0x081051c5
 8105168:	081051c5 	.word	0x081051c5
 810516c:	081051c5 	.word	0x081051c5
 8105170:	081051b5 	.word	0x081051b5
 8105174:	081051c5 	.word	0x081051c5
 8105178:	081051c5 	.word	0x081051c5
 810517c:	081051c5 	.word	0x081051c5
 8105180:	081051c5 	.word	0x081051c5
 8105184:	081051c5 	.word	0x081051c5
 8105188:	081051c5 	.word	0x081051c5
 810518c:	081051c5 	.word	0x081051c5
 8105190:	081051bd 	.word	0x081051bd
 8105194:	2301      	movs	r3, #1
 8105196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810519a:	e220      	b.n	81055de <UART_SetConfig+0x5a6>
 810519c:	2304      	movs	r3, #4
 810519e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81051a2:	e21c      	b.n	81055de <UART_SetConfig+0x5a6>
 81051a4:	2308      	movs	r3, #8
 81051a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81051aa:	e218      	b.n	81055de <UART_SetConfig+0x5a6>
 81051ac:	2310      	movs	r3, #16
 81051ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81051b2:	e214      	b.n	81055de <UART_SetConfig+0x5a6>
 81051b4:	2320      	movs	r3, #32
 81051b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81051ba:	e210      	b.n	81055de <UART_SetConfig+0x5a6>
 81051bc:	2340      	movs	r3, #64	@ 0x40
 81051be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81051c2:	e20c      	b.n	81055de <UART_SetConfig+0x5a6>
 81051c4:	2380      	movs	r3, #128	@ 0x80
 81051c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81051ca:	e208      	b.n	81055de <UART_SetConfig+0x5a6>
 81051cc:	697b      	ldr	r3, [r7, #20]
 81051ce:	681b      	ldr	r3, [r3, #0]
 81051d0:	4a66      	ldr	r2, [pc, #408]	@ (810536c <UART_SetConfig+0x334>)
 81051d2:	4293      	cmp	r3, r2
 81051d4:	d130      	bne.n	8105238 <UART_SetConfig+0x200>
 81051d6:	4b64      	ldr	r3, [pc, #400]	@ (8105368 <UART_SetConfig+0x330>)
 81051d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81051da:	f003 0307 	and.w	r3, r3, #7
 81051de:	2b05      	cmp	r3, #5
 81051e0:	d826      	bhi.n	8105230 <UART_SetConfig+0x1f8>
 81051e2:	a201      	add	r2, pc, #4	@ (adr r2, 81051e8 <UART_SetConfig+0x1b0>)
 81051e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81051e8:	08105201 	.word	0x08105201
 81051ec:	08105209 	.word	0x08105209
 81051f0:	08105211 	.word	0x08105211
 81051f4:	08105219 	.word	0x08105219
 81051f8:	08105221 	.word	0x08105221
 81051fc:	08105229 	.word	0x08105229
 8105200:	2300      	movs	r3, #0
 8105202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105206:	e1ea      	b.n	81055de <UART_SetConfig+0x5a6>
 8105208:	2304      	movs	r3, #4
 810520a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810520e:	e1e6      	b.n	81055de <UART_SetConfig+0x5a6>
 8105210:	2308      	movs	r3, #8
 8105212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105216:	e1e2      	b.n	81055de <UART_SetConfig+0x5a6>
 8105218:	2310      	movs	r3, #16
 810521a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810521e:	e1de      	b.n	81055de <UART_SetConfig+0x5a6>
 8105220:	2320      	movs	r3, #32
 8105222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105226:	e1da      	b.n	81055de <UART_SetConfig+0x5a6>
 8105228:	2340      	movs	r3, #64	@ 0x40
 810522a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810522e:	e1d6      	b.n	81055de <UART_SetConfig+0x5a6>
 8105230:	2380      	movs	r3, #128	@ 0x80
 8105232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105236:	e1d2      	b.n	81055de <UART_SetConfig+0x5a6>
 8105238:	697b      	ldr	r3, [r7, #20]
 810523a:	681b      	ldr	r3, [r3, #0]
 810523c:	4a4c      	ldr	r2, [pc, #304]	@ (8105370 <UART_SetConfig+0x338>)
 810523e:	4293      	cmp	r3, r2
 8105240:	d130      	bne.n	81052a4 <UART_SetConfig+0x26c>
 8105242:	4b49      	ldr	r3, [pc, #292]	@ (8105368 <UART_SetConfig+0x330>)
 8105244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105246:	f003 0307 	and.w	r3, r3, #7
 810524a:	2b05      	cmp	r3, #5
 810524c:	d826      	bhi.n	810529c <UART_SetConfig+0x264>
 810524e:	a201      	add	r2, pc, #4	@ (adr r2, 8105254 <UART_SetConfig+0x21c>)
 8105250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105254:	0810526d 	.word	0x0810526d
 8105258:	08105275 	.word	0x08105275
 810525c:	0810527d 	.word	0x0810527d
 8105260:	08105285 	.word	0x08105285
 8105264:	0810528d 	.word	0x0810528d
 8105268:	08105295 	.word	0x08105295
 810526c:	2300      	movs	r3, #0
 810526e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105272:	e1b4      	b.n	81055de <UART_SetConfig+0x5a6>
 8105274:	2304      	movs	r3, #4
 8105276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810527a:	e1b0      	b.n	81055de <UART_SetConfig+0x5a6>
 810527c:	2308      	movs	r3, #8
 810527e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105282:	e1ac      	b.n	81055de <UART_SetConfig+0x5a6>
 8105284:	2310      	movs	r3, #16
 8105286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810528a:	e1a8      	b.n	81055de <UART_SetConfig+0x5a6>
 810528c:	2320      	movs	r3, #32
 810528e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105292:	e1a4      	b.n	81055de <UART_SetConfig+0x5a6>
 8105294:	2340      	movs	r3, #64	@ 0x40
 8105296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810529a:	e1a0      	b.n	81055de <UART_SetConfig+0x5a6>
 810529c:	2380      	movs	r3, #128	@ 0x80
 810529e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81052a2:	e19c      	b.n	81055de <UART_SetConfig+0x5a6>
 81052a4:	697b      	ldr	r3, [r7, #20]
 81052a6:	681b      	ldr	r3, [r3, #0]
 81052a8:	4a32      	ldr	r2, [pc, #200]	@ (8105374 <UART_SetConfig+0x33c>)
 81052aa:	4293      	cmp	r3, r2
 81052ac:	d130      	bne.n	8105310 <UART_SetConfig+0x2d8>
 81052ae:	4b2e      	ldr	r3, [pc, #184]	@ (8105368 <UART_SetConfig+0x330>)
 81052b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81052b2:	f003 0307 	and.w	r3, r3, #7
 81052b6:	2b05      	cmp	r3, #5
 81052b8:	d826      	bhi.n	8105308 <UART_SetConfig+0x2d0>
 81052ba:	a201      	add	r2, pc, #4	@ (adr r2, 81052c0 <UART_SetConfig+0x288>)
 81052bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81052c0:	081052d9 	.word	0x081052d9
 81052c4:	081052e1 	.word	0x081052e1
 81052c8:	081052e9 	.word	0x081052e9
 81052cc:	081052f1 	.word	0x081052f1
 81052d0:	081052f9 	.word	0x081052f9
 81052d4:	08105301 	.word	0x08105301
 81052d8:	2300      	movs	r3, #0
 81052da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81052de:	e17e      	b.n	81055de <UART_SetConfig+0x5a6>
 81052e0:	2304      	movs	r3, #4
 81052e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81052e6:	e17a      	b.n	81055de <UART_SetConfig+0x5a6>
 81052e8:	2308      	movs	r3, #8
 81052ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81052ee:	e176      	b.n	81055de <UART_SetConfig+0x5a6>
 81052f0:	2310      	movs	r3, #16
 81052f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81052f6:	e172      	b.n	81055de <UART_SetConfig+0x5a6>
 81052f8:	2320      	movs	r3, #32
 81052fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81052fe:	e16e      	b.n	81055de <UART_SetConfig+0x5a6>
 8105300:	2340      	movs	r3, #64	@ 0x40
 8105302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105306:	e16a      	b.n	81055de <UART_SetConfig+0x5a6>
 8105308:	2380      	movs	r3, #128	@ 0x80
 810530a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810530e:	e166      	b.n	81055de <UART_SetConfig+0x5a6>
 8105310:	697b      	ldr	r3, [r7, #20]
 8105312:	681b      	ldr	r3, [r3, #0]
 8105314:	4a18      	ldr	r2, [pc, #96]	@ (8105378 <UART_SetConfig+0x340>)
 8105316:	4293      	cmp	r3, r2
 8105318:	d140      	bne.n	810539c <UART_SetConfig+0x364>
 810531a:	4b13      	ldr	r3, [pc, #76]	@ (8105368 <UART_SetConfig+0x330>)
 810531c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810531e:	f003 0307 	and.w	r3, r3, #7
 8105322:	2b05      	cmp	r3, #5
 8105324:	d836      	bhi.n	8105394 <UART_SetConfig+0x35c>
 8105326:	a201      	add	r2, pc, #4	@ (adr r2, 810532c <UART_SetConfig+0x2f4>)
 8105328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810532c:	08105345 	.word	0x08105345
 8105330:	0810534d 	.word	0x0810534d
 8105334:	08105355 	.word	0x08105355
 8105338:	0810537d 	.word	0x0810537d
 810533c:	08105385 	.word	0x08105385
 8105340:	0810538d 	.word	0x0810538d
 8105344:	2300      	movs	r3, #0
 8105346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810534a:	e148      	b.n	81055de <UART_SetConfig+0x5a6>
 810534c:	2304      	movs	r3, #4
 810534e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105352:	e144      	b.n	81055de <UART_SetConfig+0x5a6>
 8105354:	2308      	movs	r3, #8
 8105356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810535a:	e140      	b.n	81055de <UART_SetConfig+0x5a6>
 810535c:	cfff69f3 	.word	0xcfff69f3
 8105360:	58000c00 	.word	0x58000c00
 8105364:	40011000 	.word	0x40011000
 8105368:	58024400 	.word	0x58024400
 810536c:	40004400 	.word	0x40004400
 8105370:	40004800 	.word	0x40004800
 8105374:	40004c00 	.word	0x40004c00
 8105378:	40005000 	.word	0x40005000
 810537c:	2310      	movs	r3, #16
 810537e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105382:	e12c      	b.n	81055de <UART_SetConfig+0x5a6>
 8105384:	2320      	movs	r3, #32
 8105386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810538a:	e128      	b.n	81055de <UART_SetConfig+0x5a6>
 810538c:	2340      	movs	r3, #64	@ 0x40
 810538e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105392:	e124      	b.n	81055de <UART_SetConfig+0x5a6>
 8105394:	2380      	movs	r3, #128	@ 0x80
 8105396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810539a:	e120      	b.n	81055de <UART_SetConfig+0x5a6>
 810539c:	697b      	ldr	r3, [r7, #20]
 810539e:	681b      	ldr	r3, [r3, #0]
 81053a0:	4acb      	ldr	r2, [pc, #812]	@ (81056d0 <UART_SetConfig+0x698>)
 81053a2:	4293      	cmp	r3, r2
 81053a4:	d176      	bne.n	8105494 <UART_SetConfig+0x45c>
 81053a6:	4bcb      	ldr	r3, [pc, #812]	@ (81056d4 <UART_SetConfig+0x69c>)
 81053a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81053aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81053ae:	2b28      	cmp	r3, #40	@ 0x28
 81053b0:	d86c      	bhi.n	810548c <UART_SetConfig+0x454>
 81053b2:	a201      	add	r2, pc, #4	@ (adr r2, 81053b8 <UART_SetConfig+0x380>)
 81053b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81053b8:	0810545d 	.word	0x0810545d
 81053bc:	0810548d 	.word	0x0810548d
 81053c0:	0810548d 	.word	0x0810548d
 81053c4:	0810548d 	.word	0x0810548d
 81053c8:	0810548d 	.word	0x0810548d
 81053cc:	0810548d 	.word	0x0810548d
 81053d0:	0810548d 	.word	0x0810548d
 81053d4:	0810548d 	.word	0x0810548d
 81053d8:	08105465 	.word	0x08105465
 81053dc:	0810548d 	.word	0x0810548d
 81053e0:	0810548d 	.word	0x0810548d
 81053e4:	0810548d 	.word	0x0810548d
 81053e8:	0810548d 	.word	0x0810548d
 81053ec:	0810548d 	.word	0x0810548d
 81053f0:	0810548d 	.word	0x0810548d
 81053f4:	0810548d 	.word	0x0810548d
 81053f8:	0810546d 	.word	0x0810546d
 81053fc:	0810548d 	.word	0x0810548d
 8105400:	0810548d 	.word	0x0810548d
 8105404:	0810548d 	.word	0x0810548d
 8105408:	0810548d 	.word	0x0810548d
 810540c:	0810548d 	.word	0x0810548d
 8105410:	0810548d 	.word	0x0810548d
 8105414:	0810548d 	.word	0x0810548d
 8105418:	08105475 	.word	0x08105475
 810541c:	0810548d 	.word	0x0810548d
 8105420:	0810548d 	.word	0x0810548d
 8105424:	0810548d 	.word	0x0810548d
 8105428:	0810548d 	.word	0x0810548d
 810542c:	0810548d 	.word	0x0810548d
 8105430:	0810548d 	.word	0x0810548d
 8105434:	0810548d 	.word	0x0810548d
 8105438:	0810547d 	.word	0x0810547d
 810543c:	0810548d 	.word	0x0810548d
 8105440:	0810548d 	.word	0x0810548d
 8105444:	0810548d 	.word	0x0810548d
 8105448:	0810548d 	.word	0x0810548d
 810544c:	0810548d 	.word	0x0810548d
 8105450:	0810548d 	.word	0x0810548d
 8105454:	0810548d 	.word	0x0810548d
 8105458:	08105485 	.word	0x08105485
 810545c:	2301      	movs	r3, #1
 810545e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105462:	e0bc      	b.n	81055de <UART_SetConfig+0x5a6>
 8105464:	2304      	movs	r3, #4
 8105466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810546a:	e0b8      	b.n	81055de <UART_SetConfig+0x5a6>
 810546c:	2308      	movs	r3, #8
 810546e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105472:	e0b4      	b.n	81055de <UART_SetConfig+0x5a6>
 8105474:	2310      	movs	r3, #16
 8105476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810547a:	e0b0      	b.n	81055de <UART_SetConfig+0x5a6>
 810547c:	2320      	movs	r3, #32
 810547e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105482:	e0ac      	b.n	81055de <UART_SetConfig+0x5a6>
 8105484:	2340      	movs	r3, #64	@ 0x40
 8105486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810548a:	e0a8      	b.n	81055de <UART_SetConfig+0x5a6>
 810548c:	2380      	movs	r3, #128	@ 0x80
 810548e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105492:	e0a4      	b.n	81055de <UART_SetConfig+0x5a6>
 8105494:	697b      	ldr	r3, [r7, #20]
 8105496:	681b      	ldr	r3, [r3, #0]
 8105498:	4a8f      	ldr	r2, [pc, #572]	@ (81056d8 <UART_SetConfig+0x6a0>)
 810549a:	4293      	cmp	r3, r2
 810549c:	d130      	bne.n	8105500 <UART_SetConfig+0x4c8>
 810549e:	4b8d      	ldr	r3, [pc, #564]	@ (81056d4 <UART_SetConfig+0x69c>)
 81054a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81054a2:	f003 0307 	and.w	r3, r3, #7
 81054a6:	2b05      	cmp	r3, #5
 81054a8:	d826      	bhi.n	81054f8 <UART_SetConfig+0x4c0>
 81054aa:	a201      	add	r2, pc, #4	@ (adr r2, 81054b0 <UART_SetConfig+0x478>)
 81054ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81054b0:	081054c9 	.word	0x081054c9
 81054b4:	081054d1 	.word	0x081054d1
 81054b8:	081054d9 	.word	0x081054d9
 81054bc:	081054e1 	.word	0x081054e1
 81054c0:	081054e9 	.word	0x081054e9
 81054c4:	081054f1 	.word	0x081054f1
 81054c8:	2300      	movs	r3, #0
 81054ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81054ce:	e086      	b.n	81055de <UART_SetConfig+0x5a6>
 81054d0:	2304      	movs	r3, #4
 81054d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81054d6:	e082      	b.n	81055de <UART_SetConfig+0x5a6>
 81054d8:	2308      	movs	r3, #8
 81054da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81054de:	e07e      	b.n	81055de <UART_SetConfig+0x5a6>
 81054e0:	2310      	movs	r3, #16
 81054e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81054e6:	e07a      	b.n	81055de <UART_SetConfig+0x5a6>
 81054e8:	2320      	movs	r3, #32
 81054ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81054ee:	e076      	b.n	81055de <UART_SetConfig+0x5a6>
 81054f0:	2340      	movs	r3, #64	@ 0x40
 81054f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81054f6:	e072      	b.n	81055de <UART_SetConfig+0x5a6>
 81054f8:	2380      	movs	r3, #128	@ 0x80
 81054fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81054fe:	e06e      	b.n	81055de <UART_SetConfig+0x5a6>
 8105500:	697b      	ldr	r3, [r7, #20]
 8105502:	681b      	ldr	r3, [r3, #0]
 8105504:	4a75      	ldr	r2, [pc, #468]	@ (81056dc <UART_SetConfig+0x6a4>)
 8105506:	4293      	cmp	r3, r2
 8105508:	d130      	bne.n	810556c <UART_SetConfig+0x534>
 810550a:	4b72      	ldr	r3, [pc, #456]	@ (81056d4 <UART_SetConfig+0x69c>)
 810550c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810550e:	f003 0307 	and.w	r3, r3, #7
 8105512:	2b05      	cmp	r3, #5
 8105514:	d826      	bhi.n	8105564 <UART_SetConfig+0x52c>
 8105516:	a201      	add	r2, pc, #4	@ (adr r2, 810551c <UART_SetConfig+0x4e4>)
 8105518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810551c:	08105535 	.word	0x08105535
 8105520:	0810553d 	.word	0x0810553d
 8105524:	08105545 	.word	0x08105545
 8105528:	0810554d 	.word	0x0810554d
 810552c:	08105555 	.word	0x08105555
 8105530:	0810555d 	.word	0x0810555d
 8105534:	2300      	movs	r3, #0
 8105536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810553a:	e050      	b.n	81055de <UART_SetConfig+0x5a6>
 810553c:	2304      	movs	r3, #4
 810553e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105542:	e04c      	b.n	81055de <UART_SetConfig+0x5a6>
 8105544:	2308      	movs	r3, #8
 8105546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810554a:	e048      	b.n	81055de <UART_SetConfig+0x5a6>
 810554c:	2310      	movs	r3, #16
 810554e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105552:	e044      	b.n	81055de <UART_SetConfig+0x5a6>
 8105554:	2320      	movs	r3, #32
 8105556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810555a:	e040      	b.n	81055de <UART_SetConfig+0x5a6>
 810555c:	2340      	movs	r3, #64	@ 0x40
 810555e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105562:	e03c      	b.n	81055de <UART_SetConfig+0x5a6>
 8105564:	2380      	movs	r3, #128	@ 0x80
 8105566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810556a:	e038      	b.n	81055de <UART_SetConfig+0x5a6>
 810556c:	697b      	ldr	r3, [r7, #20]
 810556e:	681b      	ldr	r3, [r3, #0]
 8105570:	4a5b      	ldr	r2, [pc, #364]	@ (81056e0 <UART_SetConfig+0x6a8>)
 8105572:	4293      	cmp	r3, r2
 8105574:	d130      	bne.n	81055d8 <UART_SetConfig+0x5a0>
 8105576:	4b57      	ldr	r3, [pc, #348]	@ (81056d4 <UART_SetConfig+0x69c>)
 8105578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810557a:	f003 0307 	and.w	r3, r3, #7
 810557e:	2b05      	cmp	r3, #5
 8105580:	d826      	bhi.n	81055d0 <UART_SetConfig+0x598>
 8105582:	a201      	add	r2, pc, #4	@ (adr r2, 8105588 <UART_SetConfig+0x550>)
 8105584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105588:	081055a1 	.word	0x081055a1
 810558c:	081055a9 	.word	0x081055a9
 8105590:	081055b1 	.word	0x081055b1
 8105594:	081055b9 	.word	0x081055b9
 8105598:	081055c1 	.word	0x081055c1
 810559c:	081055c9 	.word	0x081055c9
 81055a0:	2302      	movs	r3, #2
 81055a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81055a6:	e01a      	b.n	81055de <UART_SetConfig+0x5a6>
 81055a8:	2304      	movs	r3, #4
 81055aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81055ae:	e016      	b.n	81055de <UART_SetConfig+0x5a6>
 81055b0:	2308      	movs	r3, #8
 81055b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81055b6:	e012      	b.n	81055de <UART_SetConfig+0x5a6>
 81055b8:	2310      	movs	r3, #16
 81055ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81055be:	e00e      	b.n	81055de <UART_SetConfig+0x5a6>
 81055c0:	2320      	movs	r3, #32
 81055c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81055c6:	e00a      	b.n	81055de <UART_SetConfig+0x5a6>
 81055c8:	2340      	movs	r3, #64	@ 0x40
 81055ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81055ce:	e006      	b.n	81055de <UART_SetConfig+0x5a6>
 81055d0:	2380      	movs	r3, #128	@ 0x80
 81055d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81055d6:	e002      	b.n	81055de <UART_SetConfig+0x5a6>
 81055d8:	2380      	movs	r3, #128	@ 0x80
 81055da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 81055de:	697b      	ldr	r3, [r7, #20]
 81055e0:	681b      	ldr	r3, [r3, #0]
 81055e2:	4a3f      	ldr	r2, [pc, #252]	@ (81056e0 <UART_SetConfig+0x6a8>)
 81055e4:	4293      	cmp	r3, r2
 81055e6:	f040 80f8 	bne.w	81057da <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 81055ea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 81055ee:	2b20      	cmp	r3, #32
 81055f0:	dc46      	bgt.n	8105680 <UART_SetConfig+0x648>
 81055f2:	2b02      	cmp	r3, #2
 81055f4:	f2c0 8082 	blt.w	81056fc <UART_SetConfig+0x6c4>
 81055f8:	3b02      	subs	r3, #2
 81055fa:	2b1e      	cmp	r3, #30
 81055fc:	d87e      	bhi.n	81056fc <UART_SetConfig+0x6c4>
 81055fe:	a201      	add	r2, pc, #4	@ (adr r2, 8105604 <UART_SetConfig+0x5cc>)
 8105600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105604:	08105687 	.word	0x08105687
 8105608:	081056fd 	.word	0x081056fd
 810560c:	0810568f 	.word	0x0810568f
 8105610:	081056fd 	.word	0x081056fd
 8105614:	081056fd 	.word	0x081056fd
 8105618:	081056fd 	.word	0x081056fd
 810561c:	0810569f 	.word	0x0810569f
 8105620:	081056fd 	.word	0x081056fd
 8105624:	081056fd 	.word	0x081056fd
 8105628:	081056fd 	.word	0x081056fd
 810562c:	081056fd 	.word	0x081056fd
 8105630:	081056fd 	.word	0x081056fd
 8105634:	081056fd 	.word	0x081056fd
 8105638:	081056fd 	.word	0x081056fd
 810563c:	081056af 	.word	0x081056af
 8105640:	081056fd 	.word	0x081056fd
 8105644:	081056fd 	.word	0x081056fd
 8105648:	081056fd 	.word	0x081056fd
 810564c:	081056fd 	.word	0x081056fd
 8105650:	081056fd 	.word	0x081056fd
 8105654:	081056fd 	.word	0x081056fd
 8105658:	081056fd 	.word	0x081056fd
 810565c:	081056fd 	.word	0x081056fd
 8105660:	081056fd 	.word	0x081056fd
 8105664:	081056fd 	.word	0x081056fd
 8105668:	081056fd 	.word	0x081056fd
 810566c:	081056fd 	.word	0x081056fd
 8105670:	081056fd 	.word	0x081056fd
 8105674:	081056fd 	.word	0x081056fd
 8105678:	081056fd 	.word	0x081056fd
 810567c:	081056ef 	.word	0x081056ef
 8105680:	2b40      	cmp	r3, #64	@ 0x40
 8105682:	d037      	beq.n	81056f4 <UART_SetConfig+0x6bc>
 8105684:	e03a      	b.n	81056fc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8105686:	f7fe fe8d 	bl	81043a4 <HAL_RCCEx_GetD3PCLK1Freq>
 810568a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810568c:	e03c      	b.n	8105708 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810568e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8105692:	4618      	mov	r0, r3
 8105694:	f7fe fe9c 	bl	81043d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810569a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810569c:	e034      	b.n	8105708 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810569e:	f107 0318 	add.w	r3, r7, #24
 81056a2:	4618      	mov	r0, r3
 81056a4:	f7fe ffe8 	bl	8104678 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81056a8:	69fb      	ldr	r3, [r7, #28]
 81056aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81056ac:	e02c      	b.n	8105708 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81056ae:	4b09      	ldr	r3, [pc, #36]	@ (81056d4 <UART_SetConfig+0x69c>)
 81056b0:	681b      	ldr	r3, [r3, #0]
 81056b2:	f003 0320 	and.w	r3, r3, #32
 81056b6:	2b00      	cmp	r3, #0
 81056b8:	d016      	beq.n	81056e8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81056ba:	4b06      	ldr	r3, [pc, #24]	@ (81056d4 <UART_SetConfig+0x69c>)
 81056bc:	681b      	ldr	r3, [r3, #0]
 81056be:	08db      	lsrs	r3, r3, #3
 81056c0:	f003 0303 	and.w	r3, r3, #3
 81056c4:	4a07      	ldr	r2, [pc, #28]	@ (81056e4 <UART_SetConfig+0x6ac>)
 81056c6:	fa22 f303 	lsr.w	r3, r2, r3
 81056ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81056cc:	e01c      	b.n	8105708 <UART_SetConfig+0x6d0>
 81056ce:	bf00      	nop
 81056d0:	40011400 	.word	0x40011400
 81056d4:	58024400 	.word	0x58024400
 81056d8:	40007800 	.word	0x40007800
 81056dc:	40007c00 	.word	0x40007c00
 81056e0:	58000c00 	.word	0x58000c00
 81056e4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 81056e8:	4b9d      	ldr	r3, [pc, #628]	@ (8105960 <UART_SetConfig+0x928>)
 81056ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81056ec:	e00c      	b.n	8105708 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81056ee:	4b9d      	ldr	r3, [pc, #628]	@ (8105964 <UART_SetConfig+0x92c>)
 81056f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81056f2:	e009      	b.n	8105708 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81056f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81056f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81056fa:	e005      	b.n	8105708 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 81056fc:	2300      	movs	r3, #0
 81056fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8105700:	2301      	movs	r3, #1
 8105702:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8105706:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8105708:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810570a:	2b00      	cmp	r3, #0
 810570c:	f000 81de 	beq.w	8105acc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8105710:	697b      	ldr	r3, [r7, #20]
 8105712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105714:	4a94      	ldr	r2, [pc, #592]	@ (8105968 <UART_SetConfig+0x930>)
 8105716:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810571a:	461a      	mov	r2, r3
 810571c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810571e:	fbb3 f3f2 	udiv	r3, r3, r2
 8105722:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8105724:	697b      	ldr	r3, [r7, #20]
 8105726:	685a      	ldr	r2, [r3, #4]
 8105728:	4613      	mov	r3, r2
 810572a:	005b      	lsls	r3, r3, #1
 810572c:	4413      	add	r3, r2
 810572e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8105730:	429a      	cmp	r2, r3
 8105732:	d305      	bcc.n	8105740 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8105734:	697b      	ldr	r3, [r7, #20]
 8105736:	685b      	ldr	r3, [r3, #4]
 8105738:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810573a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810573c:	429a      	cmp	r2, r3
 810573e:	d903      	bls.n	8105748 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8105740:	2301      	movs	r3, #1
 8105742:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8105746:	e1c1      	b.n	8105acc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8105748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810574a:	2200      	movs	r2, #0
 810574c:	60bb      	str	r3, [r7, #8]
 810574e:	60fa      	str	r2, [r7, #12]
 8105750:	697b      	ldr	r3, [r7, #20]
 8105752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105754:	4a84      	ldr	r2, [pc, #528]	@ (8105968 <UART_SetConfig+0x930>)
 8105756:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810575a:	b29b      	uxth	r3, r3
 810575c:	2200      	movs	r2, #0
 810575e:	603b      	str	r3, [r7, #0]
 8105760:	607a      	str	r2, [r7, #4]
 8105762:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105766:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810576a:	f7fb f93f 	bl	81009ec <__aeabi_uldivmod>
 810576e:	4602      	mov	r2, r0
 8105770:	460b      	mov	r3, r1
 8105772:	4610      	mov	r0, r2
 8105774:	4619      	mov	r1, r3
 8105776:	f04f 0200 	mov.w	r2, #0
 810577a:	f04f 0300 	mov.w	r3, #0
 810577e:	020b      	lsls	r3, r1, #8
 8105780:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8105784:	0202      	lsls	r2, r0, #8
 8105786:	6979      	ldr	r1, [r7, #20]
 8105788:	6849      	ldr	r1, [r1, #4]
 810578a:	0849      	lsrs	r1, r1, #1
 810578c:	2000      	movs	r0, #0
 810578e:	460c      	mov	r4, r1
 8105790:	4605      	mov	r5, r0
 8105792:	eb12 0804 	adds.w	r8, r2, r4
 8105796:	eb43 0905 	adc.w	r9, r3, r5
 810579a:	697b      	ldr	r3, [r7, #20]
 810579c:	685b      	ldr	r3, [r3, #4]
 810579e:	2200      	movs	r2, #0
 81057a0:	469a      	mov	sl, r3
 81057a2:	4693      	mov	fp, r2
 81057a4:	4652      	mov	r2, sl
 81057a6:	465b      	mov	r3, fp
 81057a8:	4640      	mov	r0, r8
 81057aa:	4649      	mov	r1, r9
 81057ac:	f7fb f91e 	bl	81009ec <__aeabi_uldivmod>
 81057b0:	4602      	mov	r2, r0
 81057b2:	460b      	mov	r3, r1
 81057b4:	4613      	mov	r3, r2
 81057b6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 81057b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81057ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81057be:	d308      	bcc.n	81057d2 <UART_SetConfig+0x79a>
 81057c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81057c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81057c6:	d204      	bcs.n	81057d2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 81057c8:	697b      	ldr	r3, [r7, #20]
 81057ca:	681b      	ldr	r3, [r3, #0]
 81057cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 81057ce:	60da      	str	r2, [r3, #12]
 81057d0:	e17c      	b.n	8105acc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 81057d2:	2301      	movs	r3, #1
 81057d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 81057d8:	e178      	b.n	8105acc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 81057da:	697b      	ldr	r3, [r7, #20]
 81057dc:	69db      	ldr	r3, [r3, #28]
 81057de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81057e2:	f040 80c5 	bne.w	8105970 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 81057e6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 81057ea:	2b20      	cmp	r3, #32
 81057ec:	dc48      	bgt.n	8105880 <UART_SetConfig+0x848>
 81057ee:	2b00      	cmp	r3, #0
 81057f0:	db7b      	blt.n	81058ea <UART_SetConfig+0x8b2>
 81057f2:	2b20      	cmp	r3, #32
 81057f4:	d879      	bhi.n	81058ea <UART_SetConfig+0x8b2>
 81057f6:	a201      	add	r2, pc, #4	@ (adr r2, 81057fc <UART_SetConfig+0x7c4>)
 81057f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81057fc:	08105887 	.word	0x08105887
 8105800:	0810588f 	.word	0x0810588f
 8105804:	081058eb 	.word	0x081058eb
 8105808:	081058eb 	.word	0x081058eb
 810580c:	08105897 	.word	0x08105897
 8105810:	081058eb 	.word	0x081058eb
 8105814:	081058eb 	.word	0x081058eb
 8105818:	081058eb 	.word	0x081058eb
 810581c:	081058a7 	.word	0x081058a7
 8105820:	081058eb 	.word	0x081058eb
 8105824:	081058eb 	.word	0x081058eb
 8105828:	081058eb 	.word	0x081058eb
 810582c:	081058eb 	.word	0x081058eb
 8105830:	081058eb 	.word	0x081058eb
 8105834:	081058eb 	.word	0x081058eb
 8105838:	081058eb 	.word	0x081058eb
 810583c:	081058b7 	.word	0x081058b7
 8105840:	081058eb 	.word	0x081058eb
 8105844:	081058eb 	.word	0x081058eb
 8105848:	081058eb 	.word	0x081058eb
 810584c:	081058eb 	.word	0x081058eb
 8105850:	081058eb 	.word	0x081058eb
 8105854:	081058eb 	.word	0x081058eb
 8105858:	081058eb 	.word	0x081058eb
 810585c:	081058eb 	.word	0x081058eb
 8105860:	081058eb 	.word	0x081058eb
 8105864:	081058eb 	.word	0x081058eb
 8105868:	081058eb 	.word	0x081058eb
 810586c:	081058eb 	.word	0x081058eb
 8105870:	081058eb 	.word	0x081058eb
 8105874:	081058eb 	.word	0x081058eb
 8105878:	081058eb 	.word	0x081058eb
 810587c:	081058dd 	.word	0x081058dd
 8105880:	2b40      	cmp	r3, #64	@ 0x40
 8105882:	d02e      	beq.n	81058e2 <UART_SetConfig+0x8aa>
 8105884:	e031      	b.n	81058ea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8105886:	f7fd fb57 	bl	8102f38 <HAL_RCC_GetPCLK1Freq>
 810588a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810588c:	e033      	b.n	81058f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810588e:	f7fd fb69 	bl	8102f64 <HAL_RCC_GetPCLK2Freq>
 8105892:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8105894:	e02f      	b.n	81058f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105896:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810589a:	4618      	mov	r0, r3
 810589c:	f7fe fd98 	bl	81043d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81058a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81058a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81058a4:	e027      	b.n	81058f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81058a6:	f107 0318 	add.w	r3, r7, #24
 81058aa:	4618      	mov	r0, r3
 81058ac:	f7fe fee4 	bl	8104678 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81058b0:	69fb      	ldr	r3, [r7, #28]
 81058b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81058b4:	e01f      	b.n	81058f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81058b6:	4b2d      	ldr	r3, [pc, #180]	@ (810596c <UART_SetConfig+0x934>)
 81058b8:	681b      	ldr	r3, [r3, #0]
 81058ba:	f003 0320 	and.w	r3, r3, #32
 81058be:	2b00      	cmp	r3, #0
 81058c0:	d009      	beq.n	81058d6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81058c2:	4b2a      	ldr	r3, [pc, #168]	@ (810596c <UART_SetConfig+0x934>)
 81058c4:	681b      	ldr	r3, [r3, #0]
 81058c6:	08db      	lsrs	r3, r3, #3
 81058c8:	f003 0303 	and.w	r3, r3, #3
 81058cc:	4a24      	ldr	r2, [pc, #144]	@ (8105960 <UART_SetConfig+0x928>)
 81058ce:	fa22 f303 	lsr.w	r3, r2, r3
 81058d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81058d4:	e00f      	b.n	81058f6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 81058d6:	4b22      	ldr	r3, [pc, #136]	@ (8105960 <UART_SetConfig+0x928>)
 81058d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81058da:	e00c      	b.n	81058f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81058dc:	4b21      	ldr	r3, [pc, #132]	@ (8105964 <UART_SetConfig+0x92c>)
 81058de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81058e0:	e009      	b.n	81058f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81058e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81058e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81058e8:	e005      	b.n	81058f6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 81058ea:	2300      	movs	r3, #0
 81058ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 81058ee:	2301      	movs	r3, #1
 81058f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 81058f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 81058f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81058f8:	2b00      	cmp	r3, #0
 81058fa:	f000 80e7 	beq.w	8105acc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81058fe:	697b      	ldr	r3, [r7, #20]
 8105900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105902:	4a19      	ldr	r2, [pc, #100]	@ (8105968 <UART_SetConfig+0x930>)
 8105904:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105908:	461a      	mov	r2, r3
 810590a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810590c:	fbb3 f3f2 	udiv	r3, r3, r2
 8105910:	005a      	lsls	r2, r3, #1
 8105912:	697b      	ldr	r3, [r7, #20]
 8105914:	685b      	ldr	r3, [r3, #4]
 8105916:	085b      	lsrs	r3, r3, #1
 8105918:	441a      	add	r2, r3
 810591a:	697b      	ldr	r3, [r7, #20]
 810591c:	685b      	ldr	r3, [r3, #4]
 810591e:	fbb2 f3f3 	udiv	r3, r2, r3
 8105922:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8105924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105926:	2b0f      	cmp	r3, #15
 8105928:	d916      	bls.n	8105958 <UART_SetConfig+0x920>
 810592a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810592c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8105930:	d212      	bcs.n	8105958 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8105932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105934:	b29b      	uxth	r3, r3
 8105936:	f023 030f 	bic.w	r3, r3, #15
 810593a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810593c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810593e:	085b      	lsrs	r3, r3, #1
 8105940:	b29b      	uxth	r3, r3
 8105942:	f003 0307 	and.w	r3, r3, #7
 8105946:	b29a      	uxth	r2, r3
 8105948:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 810594a:	4313      	orrs	r3, r2
 810594c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 810594e:	697b      	ldr	r3, [r7, #20]
 8105950:	681b      	ldr	r3, [r3, #0]
 8105952:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8105954:	60da      	str	r2, [r3, #12]
 8105956:	e0b9      	b.n	8105acc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8105958:	2301      	movs	r3, #1
 810595a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810595e:	e0b5      	b.n	8105acc <UART_SetConfig+0xa94>
 8105960:	03d09000 	.word	0x03d09000
 8105964:	003d0900 	.word	0x003d0900
 8105968:	081074b0 	.word	0x081074b0
 810596c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8105970:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8105974:	2b20      	cmp	r3, #32
 8105976:	dc49      	bgt.n	8105a0c <UART_SetConfig+0x9d4>
 8105978:	2b00      	cmp	r3, #0
 810597a:	db7c      	blt.n	8105a76 <UART_SetConfig+0xa3e>
 810597c:	2b20      	cmp	r3, #32
 810597e:	d87a      	bhi.n	8105a76 <UART_SetConfig+0xa3e>
 8105980:	a201      	add	r2, pc, #4	@ (adr r2, 8105988 <UART_SetConfig+0x950>)
 8105982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105986:	bf00      	nop
 8105988:	08105a13 	.word	0x08105a13
 810598c:	08105a1b 	.word	0x08105a1b
 8105990:	08105a77 	.word	0x08105a77
 8105994:	08105a77 	.word	0x08105a77
 8105998:	08105a23 	.word	0x08105a23
 810599c:	08105a77 	.word	0x08105a77
 81059a0:	08105a77 	.word	0x08105a77
 81059a4:	08105a77 	.word	0x08105a77
 81059a8:	08105a33 	.word	0x08105a33
 81059ac:	08105a77 	.word	0x08105a77
 81059b0:	08105a77 	.word	0x08105a77
 81059b4:	08105a77 	.word	0x08105a77
 81059b8:	08105a77 	.word	0x08105a77
 81059bc:	08105a77 	.word	0x08105a77
 81059c0:	08105a77 	.word	0x08105a77
 81059c4:	08105a77 	.word	0x08105a77
 81059c8:	08105a43 	.word	0x08105a43
 81059cc:	08105a77 	.word	0x08105a77
 81059d0:	08105a77 	.word	0x08105a77
 81059d4:	08105a77 	.word	0x08105a77
 81059d8:	08105a77 	.word	0x08105a77
 81059dc:	08105a77 	.word	0x08105a77
 81059e0:	08105a77 	.word	0x08105a77
 81059e4:	08105a77 	.word	0x08105a77
 81059e8:	08105a77 	.word	0x08105a77
 81059ec:	08105a77 	.word	0x08105a77
 81059f0:	08105a77 	.word	0x08105a77
 81059f4:	08105a77 	.word	0x08105a77
 81059f8:	08105a77 	.word	0x08105a77
 81059fc:	08105a77 	.word	0x08105a77
 8105a00:	08105a77 	.word	0x08105a77
 8105a04:	08105a77 	.word	0x08105a77
 8105a08:	08105a69 	.word	0x08105a69
 8105a0c:	2b40      	cmp	r3, #64	@ 0x40
 8105a0e:	d02e      	beq.n	8105a6e <UART_SetConfig+0xa36>
 8105a10:	e031      	b.n	8105a76 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8105a12:	f7fd fa91 	bl	8102f38 <HAL_RCC_GetPCLK1Freq>
 8105a16:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8105a18:	e033      	b.n	8105a82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8105a1a:	f7fd faa3 	bl	8102f64 <HAL_RCC_GetPCLK2Freq>
 8105a1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8105a20:	e02f      	b.n	8105a82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105a22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8105a26:	4618      	mov	r0, r3
 8105a28:	f7fe fcd2 	bl	81043d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105a30:	e027      	b.n	8105a82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105a32:	f107 0318 	add.w	r3, r7, #24
 8105a36:	4618      	mov	r0, r3
 8105a38:	f7fe fe1e 	bl	8104678 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105a3c:	69fb      	ldr	r3, [r7, #28]
 8105a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105a40:	e01f      	b.n	8105a82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105a42:	4b2d      	ldr	r3, [pc, #180]	@ (8105af8 <UART_SetConfig+0xac0>)
 8105a44:	681b      	ldr	r3, [r3, #0]
 8105a46:	f003 0320 	and.w	r3, r3, #32
 8105a4a:	2b00      	cmp	r3, #0
 8105a4c:	d009      	beq.n	8105a62 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105a4e:	4b2a      	ldr	r3, [pc, #168]	@ (8105af8 <UART_SetConfig+0xac0>)
 8105a50:	681b      	ldr	r3, [r3, #0]
 8105a52:	08db      	lsrs	r3, r3, #3
 8105a54:	f003 0303 	and.w	r3, r3, #3
 8105a58:	4a28      	ldr	r2, [pc, #160]	@ (8105afc <UART_SetConfig+0xac4>)
 8105a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8105a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8105a60:	e00f      	b.n	8105a82 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8105a62:	4b26      	ldr	r3, [pc, #152]	@ (8105afc <UART_SetConfig+0xac4>)
 8105a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105a66:	e00c      	b.n	8105a82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105a68:	4b25      	ldr	r3, [pc, #148]	@ (8105b00 <UART_SetConfig+0xac8>)
 8105a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105a6c:	e009      	b.n	8105a82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8105a6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8105a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105a74:	e005      	b.n	8105a82 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8105a76:	2300      	movs	r3, #0
 8105a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8105a7a:	2301      	movs	r3, #1
 8105a7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8105a80:	bf00      	nop
    }

    if (pclk != 0U)
 8105a82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105a84:	2b00      	cmp	r3, #0
 8105a86:	d021      	beq.n	8105acc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8105a88:	697b      	ldr	r3, [r7, #20]
 8105a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105a8c:	4a1d      	ldr	r2, [pc, #116]	@ (8105b04 <UART_SetConfig+0xacc>)
 8105a8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105a92:	461a      	mov	r2, r3
 8105a94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105a96:	fbb3 f2f2 	udiv	r2, r3, r2
 8105a9a:	697b      	ldr	r3, [r7, #20]
 8105a9c:	685b      	ldr	r3, [r3, #4]
 8105a9e:	085b      	lsrs	r3, r3, #1
 8105aa0:	441a      	add	r2, r3
 8105aa2:	697b      	ldr	r3, [r7, #20]
 8105aa4:	685b      	ldr	r3, [r3, #4]
 8105aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8105aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8105aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105aae:	2b0f      	cmp	r3, #15
 8105ab0:	d909      	bls.n	8105ac6 <UART_SetConfig+0xa8e>
 8105ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105ab4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8105ab8:	d205      	bcs.n	8105ac6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8105aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105abc:	b29a      	uxth	r2, r3
 8105abe:	697b      	ldr	r3, [r7, #20]
 8105ac0:	681b      	ldr	r3, [r3, #0]
 8105ac2:	60da      	str	r2, [r3, #12]
 8105ac4:	e002      	b.n	8105acc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8105ac6:	2301      	movs	r3, #1
 8105ac8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8105acc:	697b      	ldr	r3, [r7, #20]
 8105ace:	2201      	movs	r2, #1
 8105ad0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8105ad4:	697b      	ldr	r3, [r7, #20]
 8105ad6:	2201      	movs	r2, #1
 8105ad8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8105adc:	697b      	ldr	r3, [r7, #20]
 8105ade:	2200      	movs	r2, #0
 8105ae0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8105ae2:	697b      	ldr	r3, [r7, #20]
 8105ae4:	2200      	movs	r2, #0
 8105ae6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8105ae8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8105aec:	4618      	mov	r0, r3
 8105aee:	3748      	adds	r7, #72	@ 0x48
 8105af0:	46bd      	mov	sp, r7
 8105af2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8105af6:	bf00      	nop
 8105af8:	58024400 	.word	0x58024400
 8105afc:	03d09000 	.word	0x03d09000
 8105b00:	003d0900 	.word	0x003d0900
 8105b04:	081074b0 	.word	0x081074b0

08105b08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8105b08:	b480      	push	{r7}
 8105b0a:	b083      	sub	sp, #12
 8105b0c:	af00      	add	r7, sp, #0
 8105b0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8105b10:	687b      	ldr	r3, [r7, #4]
 8105b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105b14:	f003 0308 	and.w	r3, r3, #8
 8105b18:	2b00      	cmp	r3, #0
 8105b1a:	d00a      	beq.n	8105b32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8105b1c:	687b      	ldr	r3, [r7, #4]
 8105b1e:	681b      	ldr	r3, [r3, #0]
 8105b20:	685b      	ldr	r3, [r3, #4]
 8105b22:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8105b26:	687b      	ldr	r3, [r7, #4]
 8105b28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8105b2a:	687b      	ldr	r3, [r7, #4]
 8105b2c:	681b      	ldr	r3, [r3, #0]
 8105b2e:	430a      	orrs	r2, r1
 8105b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8105b32:	687b      	ldr	r3, [r7, #4]
 8105b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105b36:	f003 0301 	and.w	r3, r3, #1
 8105b3a:	2b00      	cmp	r3, #0
 8105b3c:	d00a      	beq.n	8105b54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8105b3e:	687b      	ldr	r3, [r7, #4]
 8105b40:	681b      	ldr	r3, [r3, #0]
 8105b42:	685b      	ldr	r3, [r3, #4]
 8105b44:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8105b48:	687b      	ldr	r3, [r7, #4]
 8105b4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8105b4c:	687b      	ldr	r3, [r7, #4]
 8105b4e:	681b      	ldr	r3, [r3, #0]
 8105b50:	430a      	orrs	r2, r1
 8105b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8105b54:	687b      	ldr	r3, [r7, #4]
 8105b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105b58:	f003 0302 	and.w	r3, r3, #2
 8105b5c:	2b00      	cmp	r3, #0
 8105b5e:	d00a      	beq.n	8105b76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8105b60:	687b      	ldr	r3, [r7, #4]
 8105b62:	681b      	ldr	r3, [r3, #0]
 8105b64:	685b      	ldr	r3, [r3, #4]
 8105b66:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8105b6a:	687b      	ldr	r3, [r7, #4]
 8105b6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8105b6e:	687b      	ldr	r3, [r7, #4]
 8105b70:	681b      	ldr	r3, [r3, #0]
 8105b72:	430a      	orrs	r2, r1
 8105b74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8105b76:	687b      	ldr	r3, [r7, #4]
 8105b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105b7a:	f003 0304 	and.w	r3, r3, #4
 8105b7e:	2b00      	cmp	r3, #0
 8105b80:	d00a      	beq.n	8105b98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8105b82:	687b      	ldr	r3, [r7, #4]
 8105b84:	681b      	ldr	r3, [r3, #0]
 8105b86:	685b      	ldr	r3, [r3, #4]
 8105b88:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8105b8c:	687b      	ldr	r3, [r7, #4]
 8105b8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8105b90:	687b      	ldr	r3, [r7, #4]
 8105b92:	681b      	ldr	r3, [r3, #0]
 8105b94:	430a      	orrs	r2, r1
 8105b96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8105b98:	687b      	ldr	r3, [r7, #4]
 8105b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105b9c:	f003 0310 	and.w	r3, r3, #16
 8105ba0:	2b00      	cmp	r3, #0
 8105ba2:	d00a      	beq.n	8105bba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8105ba4:	687b      	ldr	r3, [r7, #4]
 8105ba6:	681b      	ldr	r3, [r3, #0]
 8105ba8:	689b      	ldr	r3, [r3, #8]
 8105baa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8105bae:	687b      	ldr	r3, [r7, #4]
 8105bb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8105bb2:	687b      	ldr	r3, [r7, #4]
 8105bb4:	681b      	ldr	r3, [r3, #0]
 8105bb6:	430a      	orrs	r2, r1
 8105bb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8105bba:	687b      	ldr	r3, [r7, #4]
 8105bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105bbe:	f003 0320 	and.w	r3, r3, #32
 8105bc2:	2b00      	cmp	r3, #0
 8105bc4:	d00a      	beq.n	8105bdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8105bc6:	687b      	ldr	r3, [r7, #4]
 8105bc8:	681b      	ldr	r3, [r3, #0]
 8105bca:	689b      	ldr	r3, [r3, #8]
 8105bcc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8105bd0:	687b      	ldr	r3, [r7, #4]
 8105bd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8105bd4:	687b      	ldr	r3, [r7, #4]
 8105bd6:	681b      	ldr	r3, [r3, #0]
 8105bd8:	430a      	orrs	r2, r1
 8105bda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8105bdc:	687b      	ldr	r3, [r7, #4]
 8105bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8105be4:	2b00      	cmp	r3, #0
 8105be6:	d01a      	beq.n	8105c1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8105be8:	687b      	ldr	r3, [r7, #4]
 8105bea:	681b      	ldr	r3, [r3, #0]
 8105bec:	685b      	ldr	r3, [r3, #4]
 8105bee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8105bf2:	687b      	ldr	r3, [r7, #4]
 8105bf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8105bf6:	687b      	ldr	r3, [r7, #4]
 8105bf8:	681b      	ldr	r3, [r3, #0]
 8105bfa:	430a      	orrs	r2, r1
 8105bfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8105bfe:	687b      	ldr	r3, [r7, #4]
 8105c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105c02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8105c06:	d10a      	bne.n	8105c1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8105c08:	687b      	ldr	r3, [r7, #4]
 8105c0a:	681b      	ldr	r3, [r3, #0]
 8105c0c:	685b      	ldr	r3, [r3, #4]
 8105c0e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8105c12:	687b      	ldr	r3, [r7, #4]
 8105c14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8105c16:	687b      	ldr	r3, [r7, #4]
 8105c18:	681b      	ldr	r3, [r3, #0]
 8105c1a:	430a      	orrs	r2, r1
 8105c1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8105c1e:	687b      	ldr	r3, [r7, #4]
 8105c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8105c26:	2b00      	cmp	r3, #0
 8105c28:	d00a      	beq.n	8105c40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8105c2a:	687b      	ldr	r3, [r7, #4]
 8105c2c:	681b      	ldr	r3, [r3, #0]
 8105c2e:	685b      	ldr	r3, [r3, #4]
 8105c30:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8105c34:	687b      	ldr	r3, [r7, #4]
 8105c36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8105c38:	687b      	ldr	r3, [r7, #4]
 8105c3a:	681b      	ldr	r3, [r3, #0]
 8105c3c:	430a      	orrs	r2, r1
 8105c3e:	605a      	str	r2, [r3, #4]
  }
}
 8105c40:	bf00      	nop
 8105c42:	370c      	adds	r7, #12
 8105c44:	46bd      	mov	sp, r7
 8105c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c4a:	4770      	bx	lr

08105c4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8105c4c:	b580      	push	{r7, lr}
 8105c4e:	b098      	sub	sp, #96	@ 0x60
 8105c50:	af02      	add	r7, sp, #8
 8105c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8105c54:	687b      	ldr	r3, [r7, #4]
 8105c56:	2200      	movs	r2, #0
 8105c58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8105c5c:	f7fb fe14 	bl	8101888 <HAL_GetTick>
 8105c60:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8105c62:	687b      	ldr	r3, [r7, #4]
 8105c64:	681b      	ldr	r3, [r3, #0]
 8105c66:	681b      	ldr	r3, [r3, #0]
 8105c68:	f003 0308 	and.w	r3, r3, #8
 8105c6c:	2b08      	cmp	r3, #8
 8105c6e:	d12f      	bne.n	8105cd0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8105c70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8105c74:	9300      	str	r3, [sp, #0]
 8105c76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8105c78:	2200      	movs	r2, #0
 8105c7a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8105c7e:	6878      	ldr	r0, [r7, #4]
 8105c80:	f000 f88e 	bl	8105da0 <UART_WaitOnFlagUntilTimeout>
 8105c84:	4603      	mov	r3, r0
 8105c86:	2b00      	cmp	r3, #0
 8105c88:	d022      	beq.n	8105cd0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8105c8a:	687b      	ldr	r3, [r7, #4]
 8105c8c:	681b      	ldr	r3, [r3, #0]
 8105c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105c92:	e853 3f00 	ldrex	r3, [r3]
 8105c96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8105c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105c9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8105c9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8105ca0:	687b      	ldr	r3, [r7, #4]
 8105ca2:	681b      	ldr	r3, [r3, #0]
 8105ca4:	461a      	mov	r2, r3
 8105ca6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8105ca8:	647b      	str	r3, [r7, #68]	@ 0x44
 8105caa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105cac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8105cae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8105cb0:	e841 2300 	strex	r3, r2, [r1]
 8105cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8105cb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105cb8:	2b00      	cmp	r3, #0
 8105cba:	d1e6      	bne.n	8105c8a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8105cbc:	687b      	ldr	r3, [r7, #4]
 8105cbe:	2220      	movs	r2, #32
 8105cc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8105cc4:	687b      	ldr	r3, [r7, #4]
 8105cc6:	2200      	movs	r2, #0
 8105cc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8105ccc:	2303      	movs	r3, #3
 8105cce:	e063      	b.n	8105d98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8105cd0:	687b      	ldr	r3, [r7, #4]
 8105cd2:	681b      	ldr	r3, [r3, #0]
 8105cd4:	681b      	ldr	r3, [r3, #0]
 8105cd6:	f003 0304 	and.w	r3, r3, #4
 8105cda:	2b04      	cmp	r3, #4
 8105cdc:	d149      	bne.n	8105d72 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8105cde:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8105ce2:	9300      	str	r3, [sp, #0]
 8105ce4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8105ce6:	2200      	movs	r2, #0
 8105ce8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8105cec:	6878      	ldr	r0, [r7, #4]
 8105cee:	f000 f857 	bl	8105da0 <UART_WaitOnFlagUntilTimeout>
 8105cf2:	4603      	mov	r3, r0
 8105cf4:	2b00      	cmp	r3, #0
 8105cf6:	d03c      	beq.n	8105d72 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8105cf8:	687b      	ldr	r3, [r7, #4]
 8105cfa:	681b      	ldr	r3, [r3, #0]
 8105cfc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105d00:	e853 3f00 	ldrex	r3, [r3]
 8105d04:	623b      	str	r3, [r7, #32]
   return(result);
 8105d06:	6a3b      	ldr	r3, [r7, #32]
 8105d08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8105d0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8105d0e:	687b      	ldr	r3, [r7, #4]
 8105d10:	681b      	ldr	r3, [r3, #0]
 8105d12:	461a      	mov	r2, r3
 8105d14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8105d16:	633b      	str	r3, [r7, #48]	@ 0x30
 8105d18:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105d1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8105d1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8105d1e:	e841 2300 	strex	r3, r2, [r1]
 8105d22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8105d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105d26:	2b00      	cmp	r3, #0
 8105d28:	d1e6      	bne.n	8105cf8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8105d2a:	687b      	ldr	r3, [r7, #4]
 8105d2c:	681b      	ldr	r3, [r3, #0]
 8105d2e:	3308      	adds	r3, #8
 8105d30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105d32:	693b      	ldr	r3, [r7, #16]
 8105d34:	e853 3f00 	ldrex	r3, [r3]
 8105d38:	60fb      	str	r3, [r7, #12]
   return(result);
 8105d3a:	68fb      	ldr	r3, [r7, #12]
 8105d3c:	f023 0301 	bic.w	r3, r3, #1
 8105d40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8105d42:	687b      	ldr	r3, [r7, #4]
 8105d44:	681b      	ldr	r3, [r3, #0]
 8105d46:	3308      	adds	r3, #8
 8105d48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8105d4a:	61fa      	str	r2, [r7, #28]
 8105d4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105d4e:	69b9      	ldr	r1, [r7, #24]
 8105d50:	69fa      	ldr	r2, [r7, #28]
 8105d52:	e841 2300 	strex	r3, r2, [r1]
 8105d56:	617b      	str	r3, [r7, #20]
   return(result);
 8105d58:	697b      	ldr	r3, [r7, #20]
 8105d5a:	2b00      	cmp	r3, #0
 8105d5c:	d1e5      	bne.n	8105d2a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8105d5e:	687b      	ldr	r3, [r7, #4]
 8105d60:	2220      	movs	r2, #32
 8105d62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8105d66:	687b      	ldr	r3, [r7, #4]
 8105d68:	2200      	movs	r2, #0
 8105d6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8105d6e:	2303      	movs	r3, #3
 8105d70:	e012      	b.n	8105d98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8105d72:	687b      	ldr	r3, [r7, #4]
 8105d74:	2220      	movs	r2, #32
 8105d76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8105d7a:	687b      	ldr	r3, [r7, #4]
 8105d7c:	2220      	movs	r2, #32
 8105d7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8105d82:	687b      	ldr	r3, [r7, #4]
 8105d84:	2200      	movs	r2, #0
 8105d86:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8105d88:	687b      	ldr	r3, [r7, #4]
 8105d8a:	2200      	movs	r2, #0
 8105d8c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8105d8e:	687b      	ldr	r3, [r7, #4]
 8105d90:	2200      	movs	r2, #0
 8105d92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8105d96:	2300      	movs	r3, #0
}
 8105d98:	4618      	mov	r0, r3
 8105d9a:	3758      	adds	r7, #88	@ 0x58
 8105d9c:	46bd      	mov	sp, r7
 8105d9e:	bd80      	pop	{r7, pc}

08105da0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8105da0:	b580      	push	{r7, lr}
 8105da2:	b084      	sub	sp, #16
 8105da4:	af00      	add	r7, sp, #0
 8105da6:	60f8      	str	r0, [r7, #12]
 8105da8:	60b9      	str	r1, [r7, #8]
 8105daa:	603b      	str	r3, [r7, #0]
 8105dac:	4613      	mov	r3, r2
 8105dae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8105db0:	e04f      	b.n	8105e52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105db2:	69bb      	ldr	r3, [r7, #24]
 8105db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105db8:	d04b      	beq.n	8105e52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105dba:	f7fb fd65 	bl	8101888 <HAL_GetTick>
 8105dbe:	4602      	mov	r2, r0
 8105dc0:	683b      	ldr	r3, [r7, #0]
 8105dc2:	1ad3      	subs	r3, r2, r3
 8105dc4:	69ba      	ldr	r2, [r7, #24]
 8105dc6:	429a      	cmp	r2, r3
 8105dc8:	d302      	bcc.n	8105dd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8105dca:	69bb      	ldr	r3, [r7, #24]
 8105dcc:	2b00      	cmp	r3, #0
 8105dce:	d101      	bne.n	8105dd4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8105dd0:	2303      	movs	r3, #3
 8105dd2:	e04e      	b.n	8105e72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8105dd4:	68fb      	ldr	r3, [r7, #12]
 8105dd6:	681b      	ldr	r3, [r3, #0]
 8105dd8:	681b      	ldr	r3, [r3, #0]
 8105dda:	f003 0304 	and.w	r3, r3, #4
 8105dde:	2b00      	cmp	r3, #0
 8105de0:	d037      	beq.n	8105e52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8105de2:	68bb      	ldr	r3, [r7, #8]
 8105de4:	2b80      	cmp	r3, #128	@ 0x80
 8105de6:	d034      	beq.n	8105e52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8105de8:	68bb      	ldr	r3, [r7, #8]
 8105dea:	2b40      	cmp	r3, #64	@ 0x40
 8105dec:	d031      	beq.n	8105e52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8105dee:	68fb      	ldr	r3, [r7, #12]
 8105df0:	681b      	ldr	r3, [r3, #0]
 8105df2:	69db      	ldr	r3, [r3, #28]
 8105df4:	f003 0308 	and.w	r3, r3, #8
 8105df8:	2b08      	cmp	r3, #8
 8105dfa:	d110      	bne.n	8105e1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8105dfc:	68fb      	ldr	r3, [r7, #12]
 8105dfe:	681b      	ldr	r3, [r3, #0]
 8105e00:	2208      	movs	r2, #8
 8105e02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8105e04:	68f8      	ldr	r0, [r7, #12]
 8105e06:	f000 f838 	bl	8105e7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8105e0a:	68fb      	ldr	r3, [r7, #12]
 8105e0c:	2208      	movs	r2, #8
 8105e0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8105e12:	68fb      	ldr	r3, [r7, #12]
 8105e14:	2200      	movs	r2, #0
 8105e16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8105e1a:	2301      	movs	r3, #1
 8105e1c:	e029      	b.n	8105e72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8105e1e:	68fb      	ldr	r3, [r7, #12]
 8105e20:	681b      	ldr	r3, [r3, #0]
 8105e22:	69db      	ldr	r3, [r3, #28]
 8105e24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8105e28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8105e2c:	d111      	bne.n	8105e52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8105e2e:	68fb      	ldr	r3, [r7, #12]
 8105e30:	681b      	ldr	r3, [r3, #0]
 8105e32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8105e36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8105e38:	68f8      	ldr	r0, [r7, #12]
 8105e3a:	f000 f81e 	bl	8105e7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8105e3e:	68fb      	ldr	r3, [r7, #12]
 8105e40:	2220      	movs	r2, #32
 8105e42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8105e46:	68fb      	ldr	r3, [r7, #12]
 8105e48:	2200      	movs	r2, #0
 8105e4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8105e4e:	2303      	movs	r3, #3
 8105e50:	e00f      	b.n	8105e72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8105e52:	68fb      	ldr	r3, [r7, #12]
 8105e54:	681b      	ldr	r3, [r3, #0]
 8105e56:	69da      	ldr	r2, [r3, #28]
 8105e58:	68bb      	ldr	r3, [r7, #8]
 8105e5a:	4013      	ands	r3, r2
 8105e5c:	68ba      	ldr	r2, [r7, #8]
 8105e5e:	429a      	cmp	r2, r3
 8105e60:	bf0c      	ite	eq
 8105e62:	2301      	moveq	r3, #1
 8105e64:	2300      	movne	r3, #0
 8105e66:	b2db      	uxtb	r3, r3
 8105e68:	461a      	mov	r2, r3
 8105e6a:	79fb      	ldrb	r3, [r7, #7]
 8105e6c:	429a      	cmp	r2, r3
 8105e6e:	d0a0      	beq.n	8105db2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8105e70:	2300      	movs	r3, #0
}
 8105e72:	4618      	mov	r0, r3
 8105e74:	3710      	adds	r7, #16
 8105e76:	46bd      	mov	sp, r7
 8105e78:	bd80      	pop	{r7, pc}

08105e7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8105e7a:	b480      	push	{r7}
 8105e7c:	b095      	sub	sp, #84	@ 0x54
 8105e7e:	af00      	add	r7, sp, #0
 8105e80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8105e82:	687b      	ldr	r3, [r7, #4]
 8105e84:	681b      	ldr	r3, [r3, #0]
 8105e86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105e8a:	e853 3f00 	ldrex	r3, [r3]
 8105e8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8105e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8105e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8105e98:	687b      	ldr	r3, [r7, #4]
 8105e9a:	681b      	ldr	r3, [r3, #0]
 8105e9c:	461a      	mov	r2, r3
 8105e9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8105ea0:	643b      	str	r3, [r7, #64]	@ 0x40
 8105ea2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105ea4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8105ea6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8105ea8:	e841 2300 	strex	r3, r2, [r1]
 8105eac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8105eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105eb0:	2b00      	cmp	r3, #0
 8105eb2:	d1e6      	bne.n	8105e82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8105eb4:	687b      	ldr	r3, [r7, #4]
 8105eb6:	681b      	ldr	r3, [r3, #0]
 8105eb8:	3308      	adds	r3, #8
 8105eba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105ebc:	6a3b      	ldr	r3, [r7, #32]
 8105ebe:	e853 3f00 	ldrex	r3, [r3]
 8105ec2:	61fb      	str	r3, [r7, #28]
   return(result);
 8105ec4:	69fb      	ldr	r3, [r7, #28]
 8105ec6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8105eca:	f023 0301 	bic.w	r3, r3, #1
 8105ece:	64bb      	str	r3, [r7, #72]	@ 0x48
 8105ed0:	687b      	ldr	r3, [r7, #4]
 8105ed2:	681b      	ldr	r3, [r3, #0]
 8105ed4:	3308      	adds	r3, #8
 8105ed6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8105ed8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8105eda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105edc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8105ede:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8105ee0:	e841 2300 	strex	r3, r2, [r1]
 8105ee4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8105ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105ee8:	2b00      	cmp	r3, #0
 8105eea:	d1e3      	bne.n	8105eb4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8105eec:	687b      	ldr	r3, [r7, #4]
 8105eee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105ef0:	2b01      	cmp	r3, #1
 8105ef2:	d118      	bne.n	8105f26 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8105ef4:	687b      	ldr	r3, [r7, #4]
 8105ef6:	681b      	ldr	r3, [r3, #0]
 8105ef8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105efa:	68fb      	ldr	r3, [r7, #12]
 8105efc:	e853 3f00 	ldrex	r3, [r3]
 8105f00:	60bb      	str	r3, [r7, #8]
   return(result);
 8105f02:	68bb      	ldr	r3, [r7, #8]
 8105f04:	f023 0310 	bic.w	r3, r3, #16
 8105f08:	647b      	str	r3, [r7, #68]	@ 0x44
 8105f0a:	687b      	ldr	r3, [r7, #4]
 8105f0c:	681b      	ldr	r3, [r3, #0]
 8105f0e:	461a      	mov	r2, r3
 8105f10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8105f12:	61bb      	str	r3, [r7, #24]
 8105f14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105f16:	6979      	ldr	r1, [r7, #20]
 8105f18:	69ba      	ldr	r2, [r7, #24]
 8105f1a:	e841 2300 	strex	r3, r2, [r1]
 8105f1e:	613b      	str	r3, [r7, #16]
   return(result);
 8105f20:	693b      	ldr	r3, [r7, #16]
 8105f22:	2b00      	cmp	r3, #0
 8105f24:	d1e6      	bne.n	8105ef4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8105f26:	687b      	ldr	r3, [r7, #4]
 8105f28:	2220      	movs	r2, #32
 8105f2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8105f2e:	687b      	ldr	r3, [r7, #4]
 8105f30:	2200      	movs	r2, #0
 8105f32:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8105f34:	687b      	ldr	r3, [r7, #4]
 8105f36:	2200      	movs	r2, #0
 8105f38:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8105f3a:	bf00      	nop
 8105f3c:	3754      	adds	r7, #84	@ 0x54
 8105f3e:	46bd      	mov	sp, r7
 8105f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f44:	4770      	bx	lr

08105f46 <_ZN7IIS3DWBC1Ev>:
#include "iis3dwb.h"

// Include your platform-specific I2C/SPI library
// #include "platform_i2c.h" or #include "platform_spi.h"

IIS3DWB::IIS3DWB() {
 8105f46:	b480      	push	{r7}
 8105f48:	b083      	sub	sp, #12
 8105f4a:	af00      	add	r7, sp, #0
 8105f4c:	6078      	str	r0, [r7, #4]
    // Initialization code here
}
 8105f4e:	687b      	ldr	r3, [r7, #4]
 8105f50:	4618      	mov	r0, r3
 8105f52:	370c      	adds	r7, #12
 8105f54:	46bd      	mov	sp, r7
 8105f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f5a:	4770      	bx	lr

08105f5c <_ZN7IIS3DWB10initializeEv>:

bool IIS3DWB::initialize() {
 8105f5c:	b580      	push	{r7, lr}
 8105f5e:	b084      	sub	sp, #16
 8105f60:	af00      	add	r7, sp, #0
 8105f62:	6078      	str	r0, [r7, #4]
    uint8_t who_am_i = 0;
 8105f64:	2300      	movs	r3, #0
 8105f66:	73fb      	strb	r3, [r7, #15]
    if (!readRegister(WHO_AM_I_REG, who_am_i) || who_am_i != WHO_AM_I_VAL) {
 8105f68:	f107 030f 	add.w	r3, r7, #15
 8105f6c:	461a      	mov	r2, r3
 8105f6e:	210f      	movs	r1, #15
 8105f70:	6878      	ldr	r0, [r7, #4]
 8105f72:	f000 f875 	bl	8106060 <_ZN7IIS3DWB12readRegisterEhRh>
 8105f76:	4603      	mov	r3, r0
 8105f78:	f083 0301 	eor.w	r3, r3, #1
 8105f7c:	b2db      	uxtb	r3, r3
 8105f7e:	2b00      	cmp	r3, #0
 8105f80:	d102      	bne.n	8105f88 <_ZN7IIS3DWB10initializeEv+0x2c>
 8105f82:	7bfb      	ldrb	r3, [r7, #15]
 8105f84:	2b6b      	cmp	r3, #107	@ 0x6b
 8105f86:	d001      	beq.n	8105f8c <_ZN7IIS3DWB10initializeEv+0x30>
 8105f88:	2301      	movs	r3, #1
 8105f8a:	e000      	b.n	8105f8e <_ZN7IIS3DWB10initializeEv+0x32>
 8105f8c:	2300      	movs	r3, #0
 8105f8e:	2b00      	cmp	r3, #0
 8105f90:	d001      	beq.n	8105f96 <_ZN7IIS3DWB10initializeEv+0x3a>
        return false;
 8105f92:	2300      	movs	r3, #0
 8105f94:	e000      	b.n	8105f98 <_ZN7IIS3DWB10initializeEv+0x3c>
    }
    // Additional initialization code
    return true;
 8105f96:	2301      	movs	r3, #1
}
 8105f98:	4618      	mov	r0, r3
 8105f9a:	3710      	adds	r7, #16
 8105f9c:	46bd      	mov	sp, r7
 8105f9e:	bd80      	pop	{r7, pc}

08105fa0 <_ZN7IIS3DWB16readAccelerationERfS0_S0_>:

bool IIS3DWB::readAcceleration(float &x, float &y, float &z) {
 8105fa0:	b580      	push	{r7, lr}
 8105fa2:	b086      	sub	sp, #24
 8105fa4:	af00      	add	r7, sp, #0
 8105fa6:	60f8      	str	r0, [r7, #12]
 8105fa8:	60b9      	str	r1, [r7, #8]
 8105faa:	607a      	str	r2, [r7, #4]
 8105fac:	603b      	str	r3, [r7, #0]
    uint8_t buffer[6];
    if (!readRegisters(OUTX_L_XL, buffer, 6)) {
 8105fae:	f107 0210 	add.w	r2, r7, #16
 8105fb2:	2306      	movs	r3, #6
 8105fb4:	2128      	movs	r1, #40	@ 0x28
 8105fb6:	68f8      	ldr	r0, [r7, #12]
 8105fb8:	f000 f860 	bl	810607c <_ZN7IIS3DWB13readRegistersEhPht>
 8105fbc:	4603      	mov	r3, r0
 8105fbe:	f083 0301 	eor.w	r3, r3, #1
 8105fc2:	b2db      	uxtb	r3, r3
 8105fc4:	2b00      	cmp	r3, #0
 8105fc6:	d001      	beq.n	8105fcc <_ZN7IIS3DWB16readAccelerationERfS0_S0_+0x2c>
        return false;
 8105fc8:	2300      	movs	r3, #0
 8105fca:	e03f      	b.n	810604c <_ZN7IIS3DWB16readAccelerationERfS0_S0_+0xac>
    }
    // Convert the data to acceleration values (adjust the conversion as needed)
    x = (buffer[1] << 8 | buffer[0]) * 0.061;
 8105fcc:	7c7b      	ldrb	r3, [r7, #17]
 8105fce:	021b      	lsls	r3, r3, #8
 8105fd0:	7c3a      	ldrb	r2, [r7, #16]
 8105fd2:	4313      	orrs	r3, r2
 8105fd4:	4618      	mov	r0, r3
 8105fd6:	f7fa fc4f 	bl	8100878 <__aeabi_i2d>
 8105fda:	a31f      	add	r3, pc, #124	@ (adr r3, 8106058 <_ZN7IIS3DWB16readAccelerationERfS0_S0_+0xb8>)
 8105fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105fe0:	f7fa f9ce 	bl	8100380 <__aeabi_dmul>
 8105fe4:	4602      	mov	r2, r0
 8105fe6:	460b      	mov	r3, r1
 8105fe8:	4610      	mov	r0, r2
 8105fea:	4619      	mov	r1, r3
 8105fec:	f7fa fcae 	bl	810094c <__aeabi_d2f>
 8105ff0:	4602      	mov	r2, r0
 8105ff2:	68bb      	ldr	r3, [r7, #8]
 8105ff4:	601a      	str	r2, [r3, #0]
    y = (buffer[3] << 8 | buffer[2]) * 0.061;
 8105ff6:	7cfb      	ldrb	r3, [r7, #19]
 8105ff8:	021b      	lsls	r3, r3, #8
 8105ffa:	7cba      	ldrb	r2, [r7, #18]
 8105ffc:	4313      	orrs	r3, r2
 8105ffe:	4618      	mov	r0, r3
 8106000:	f7fa fc3a 	bl	8100878 <__aeabi_i2d>
 8106004:	a314      	add	r3, pc, #80	@ (adr r3, 8106058 <_ZN7IIS3DWB16readAccelerationERfS0_S0_+0xb8>)
 8106006:	e9d3 2300 	ldrd	r2, r3, [r3]
 810600a:	f7fa f9b9 	bl	8100380 <__aeabi_dmul>
 810600e:	4602      	mov	r2, r0
 8106010:	460b      	mov	r3, r1
 8106012:	4610      	mov	r0, r2
 8106014:	4619      	mov	r1, r3
 8106016:	f7fa fc99 	bl	810094c <__aeabi_d2f>
 810601a:	4602      	mov	r2, r0
 810601c:	687b      	ldr	r3, [r7, #4]
 810601e:	601a      	str	r2, [r3, #0]
    z = (buffer[5] << 8 | buffer[4]) * 0.061;
 8106020:	7d7b      	ldrb	r3, [r7, #21]
 8106022:	021b      	lsls	r3, r3, #8
 8106024:	7d3a      	ldrb	r2, [r7, #20]
 8106026:	4313      	orrs	r3, r2
 8106028:	4618      	mov	r0, r3
 810602a:	f7fa fc25 	bl	8100878 <__aeabi_i2d>
 810602e:	a30a      	add	r3, pc, #40	@ (adr r3, 8106058 <_ZN7IIS3DWB16readAccelerationERfS0_S0_+0xb8>)
 8106030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106034:	f7fa f9a4 	bl	8100380 <__aeabi_dmul>
 8106038:	4602      	mov	r2, r0
 810603a:	460b      	mov	r3, r1
 810603c:	4610      	mov	r0, r2
 810603e:	4619      	mov	r1, r3
 8106040:	f7fa fc84 	bl	810094c <__aeabi_d2f>
 8106044:	4602      	mov	r2, r0
 8106046:	683b      	ldr	r3, [r7, #0]
 8106048:	601a      	str	r2, [r3, #0]
    return true;
 810604a:	2301      	movs	r3, #1
}
 810604c:	4618      	mov	r0, r3
 810604e:	3718      	adds	r7, #24
 8106050:	46bd      	mov	sp, r7
 8106052:	bd80      	pop	{r7, pc}
 8106054:	f3af 8000 	nop.w
 8106058:	5a1cac08 	.word	0x5a1cac08
 810605c:	3faf3b64 	.word	0x3faf3b64

08106060 <_ZN7IIS3DWB12readRegisterEhRh>:
bool IIS3DWB::writeRegister(uint8_t reg, uint8_t value) {
    // Implement platform-specific I2C/SPI write
    return true;
}

bool IIS3DWB::readRegister(uint8_t reg, uint8_t &value) {
 8106060:	b480      	push	{r7}
 8106062:	b085      	sub	sp, #20
 8106064:	af00      	add	r7, sp, #0
 8106066:	60f8      	str	r0, [r7, #12]
 8106068:	460b      	mov	r3, r1
 810606a:	607a      	str	r2, [r7, #4]
 810606c:	72fb      	strb	r3, [r7, #11]
    // Implement platform-specific I2C/SPI read
    return true;
 810606e:	2301      	movs	r3, #1
}
 8106070:	4618      	mov	r0, r3
 8106072:	3714      	adds	r7, #20
 8106074:	46bd      	mov	sp, r7
 8106076:	f85d 7b04 	ldr.w	r7, [sp], #4
 810607a:	4770      	bx	lr

0810607c <_ZN7IIS3DWB13readRegistersEhPht>:

bool IIS3DWB::readRegisters(uint8_t reg, uint8_t *buffer, uint16_t length) {
 810607c:	b480      	push	{r7}
 810607e:	b085      	sub	sp, #20
 8106080:	af00      	add	r7, sp, #0
 8106082:	60f8      	str	r0, [r7, #12]
 8106084:	607a      	str	r2, [r7, #4]
 8106086:	461a      	mov	r2, r3
 8106088:	460b      	mov	r3, r1
 810608a:	72fb      	strb	r3, [r7, #11]
 810608c:	4613      	mov	r3, r2
 810608e:	813b      	strh	r3, [r7, #8]
    // Implement platform-specific I2C/SPI read multiple
    return true;
 8106090:	2301      	movs	r3, #1
}
 8106092:	4618      	mov	r0, r3
 8106094:	3714      	adds	r7, #20
 8106096:	46bd      	mov	sp, r7
 8106098:	f85d 7b04 	ldr.w	r7, [sp], #4
 810609c:	4770      	bx	lr

0810609e <_ZN7STTS22HC1Ev>:
#include "stts22h.h"
#include "stm32h7xx_hal.h" // Include your specific HAL header

extern I2C_HandleTypeDef hi2c2; // Declare your I2C handle

STTS22H::STTS22H() {
 810609e:	b480      	push	{r7}
 81060a0:	b083      	sub	sp, #12
 81060a2:	af00      	add	r7, sp, #0
 81060a4:	6078      	str	r0, [r7, #4]
    // Initialization code here
}
 81060a6:	687b      	ldr	r3, [r7, #4]
 81060a8:	4618      	mov	r0, r3
 81060aa:	370c      	adds	r7, #12
 81060ac:	46bd      	mov	sp, r7
 81060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81060b2:	4770      	bx	lr

081060b4 <_ZN7STTS22H10initializeEv>:

bool STTS22H::initialize() {
 81060b4:	b580      	push	{r7, lr}
 81060b6:	b084      	sub	sp, #16
 81060b8:	af00      	add	r7, sp, #0
 81060ba:	6078      	str	r0, [r7, #4]
    uint8_t who_am_i = 0;
 81060bc:	2300      	movs	r3, #0
 81060be:	73fb      	strb	r3, [r7, #15]
    if (!readRegister(WHO_AM_I_REG, who_am_i) || who_am_i != WHO_AM_I_VAL) {
 81060c0:	f107 030f 	add.w	r3, r7, #15
 81060c4:	461a      	mov	r2, r3
 81060c6:	2101      	movs	r1, #1
 81060c8:	6878      	ldr	r0, [r7, #4]
 81060ca:	f000 f84d 	bl	8106168 <_ZN7STTS22H12readRegisterEhRh>
 81060ce:	4603      	mov	r3, r0
 81060d0:	f083 0301 	eor.w	r3, r3, #1
 81060d4:	b2db      	uxtb	r3, r3
 81060d6:	2b00      	cmp	r3, #0
 81060d8:	d102      	bne.n	81060e0 <_ZN7STTS22H10initializeEv+0x2c>
 81060da:	7bfb      	ldrb	r3, [r7, #15]
 81060dc:	2ba0      	cmp	r3, #160	@ 0xa0
 81060de:	d001      	beq.n	81060e4 <_ZN7STTS22H10initializeEv+0x30>
 81060e0:	2301      	movs	r3, #1
 81060e2:	e000      	b.n	81060e6 <_ZN7STTS22H10initializeEv+0x32>
 81060e4:	2300      	movs	r3, #0
 81060e6:	2b00      	cmp	r3, #0
 81060e8:	d001      	beq.n	81060ee <_ZN7STTS22H10initializeEv+0x3a>
        return false;
 81060ea:	2300      	movs	r3, #0
 81060ec:	e000      	b.n	81060f0 <_ZN7STTS22H10initializeEv+0x3c>
    }
    // Additional initialization code
    return true;
 81060ee:	2301      	movs	r3, #1
}
 81060f0:	4618      	mov	r0, r3
 81060f2:	3710      	adds	r7, #16
 81060f4:	46bd      	mov	sp, r7
 81060f6:	bd80      	pop	{r7, pc}

081060f8 <_ZN7STTS22H15readTemperatureERf>:

bool STTS22H::readTemperature(float &temperature) {
 81060f8:	b580      	push	{r7, lr}
 81060fa:	b084      	sub	sp, #16
 81060fc:	af00      	add	r7, sp, #0
 81060fe:	6078      	str	r0, [r7, #4]
 8106100:	6039      	str	r1, [r7, #0]
    uint8_t buffer[2];
    if (!readRegisters(TEMP_L, buffer, 2)) {
 8106102:	f107 020c 	add.w	r2, r7, #12
 8106106:	2302      	movs	r3, #2
 8106108:	2102      	movs	r1, #2
 810610a:	6878      	ldr	r0, [r7, #4]
 810610c:	f000 f862 	bl	81061d4 <_ZN7STTS22H13readRegistersEhPht>
 8106110:	4603      	mov	r3, r0
 8106112:	f083 0301 	eor.w	r3, r3, #1
 8106116:	b2db      	uxtb	r3, r3
 8106118:	2b00      	cmp	r3, #0
 810611a:	d001      	beq.n	8106120 <_ZN7STTS22H15readTemperatureERf+0x28>
        return false;
 810611c:	2300      	movs	r3, #0
 810611e:	e01a      	b.n	8106156 <_ZN7STTS22H15readTemperatureERf+0x5e>
    }
    // Convert the data to temperature value (adjust the conversion as needed)
    int16_t tempRaw = (buffer[1] << 8) | buffer[0];
 8106120:	7b7b      	ldrb	r3, [r7, #13]
 8106122:	021b      	lsls	r3, r3, #8
 8106124:	b21a      	sxth	r2, r3
 8106126:	7b3b      	ldrb	r3, [r7, #12]
 8106128:	b21b      	sxth	r3, r3
 810612a:	4313      	orrs	r3, r2
 810612c:	81fb      	strh	r3, [r7, #14]
    temperature = tempRaw * 0.01; // Conversion factor for the STTS22H
 810612e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8106132:	4618      	mov	r0, r3
 8106134:	f7fa fba0 	bl	8100878 <__aeabi_i2d>
 8106138:	a309      	add	r3, pc, #36	@ (adr r3, 8106160 <_ZN7STTS22H15readTemperatureERf+0x68>)
 810613a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810613e:	f7fa f91f 	bl	8100380 <__aeabi_dmul>
 8106142:	4602      	mov	r2, r0
 8106144:	460b      	mov	r3, r1
 8106146:	4610      	mov	r0, r2
 8106148:	4619      	mov	r1, r3
 810614a:	f7fa fbff 	bl	810094c <__aeabi_d2f>
 810614e:	4602      	mov	r2, r0
 8106150:	683b      	ldr	r3, [r7, #0]
 8106152:	601a      	str	r2, [r3, #0]
    return true;
 8106154:	2301      	movs	r3, #1
}
 8106156:	4618      	mov	r0, r3
 8106158:	3710      	adds	r7, #16
 810615a:	46bd      	mov	sp, r7
 810615c:	bd80      	pop	{r7, pc}
 810615e:	bf00      	nop
 8106160:	47ae147b 	.word	0x47ae147b
 8106164:	3f847ae1 	.word	0x3f847ae1

08106168 <_ZN7STTS22H12readRegisterEhRh>:
        return false;
    }
    return true;
}

bool STTS22H::readRegister(uint8_t reg, uint8_t &value) {
 8106168:	b580      	push	{r7, lr}
 810616a:	b086      	sub	sp, #24
 810616c:	af02      	add	r7, sp, #8
 810616e:	60f8      	str	r0, [r7, #12]
 8106170:	460b      	mov	r3, r1
 8106172:	607a      	str	r2, [r7, #4]
 8106174:	72fb      	strb	r3, [r7, #11]
    if (HAL_I2C_Master_Transmit(&hi2c2, SENSOR_ADDRESS, &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 8106176:	f107 020b 	add.w	r2, r7, #11
 810617a:	f04f 33ff 	mov.w	r3, #4294967295
 810617e:	9300      	str	r3, [sp, #0]
 8106180:	2301      	movs	r3, #1
 8106182:	2194      	movs	r1, #148	@ 0x94
 8106184:	4812      	ldr	r0, [pc, #72]	@ (81061d0 <_ZN7STTS22H12readRegisterEhRh+0x68>)
 8106186:	f7fb ff65 	bl	8102054 <HAL_I2C_Master_Transmit>
 810618a:	4603      	mov	r3, r0
 810618c:	2b00      	cmp	r3, #0
 810618e:	bf14      	ite	ne
 8106190:	2301      	movne	r3, #1
 8106192:	2300      	moveq	r3, #0
 8106194:	b2db      	uxtb	r3, r3
 8106196:	2b00      	cmp	r3, #0
 8106198:	d001      	beq.n	810619e <_ZN7STTS22H12readRegisterEhRh+0x36>
        return false;
 810619a:	2300      	movs	r3, #0
 810619c:	e013      	b.n	81061c6 <_ZN7STTS22H12readRegisterEhRh+0x5e>
    }
    if (HAL_I2C_Master_Receive(&hi2c2, SENSOR_ADDRESS, &value, 1, HAL_MAX_DELAY) != HAL_OK) {
 810619e:	f04f 33ff 	mov.w	r3, #4294967295
 81061a2:	9300      	str	r3, [sp, #0]
 81061a4:	2301      	movs	r3, #1
 81061a6:	687a      	ldr	r2, [r7, #4]
 81061a8:	2194      	movs	r1, #148	@ 0x94
 81061aa:	4809      	ldr	r0, [pc, #36]	@ (81061d0 <_ZN7STTS22H12readRegisterEhRh+0x68>)
 81061ac:	f7fc f86a 	bl	8102284 <HAL_I2C_Master_Receive>
 81061b0:	4603      	mov	r3, r0
 81061b2:	2b00      	cmp	r3, #0
 81061b4:	bf14      	ite	ne
 81061b6:	2301      	movne	r3, #1
 81061b8:	2300      	moveq	r3, #0
 81061ba:	b2db      	uxtb	r3, r3
 81061bc:	2b00      	cmp	r3, #0
 81061be:	d001      	beq.n	81061c4 <_ZN7STTS22H12readRegisterEhRh+0x5c>
        return false;
 81061c0:	2300      	movs	r3, #0
 81061c2:	e000      	b.n	81061c6 <_ZN7STTS22H12readRegisterEhRh+0x5e>
    }
    return true;
 81061c4:	2301      	movs	r3, #1
}
 81061c6:	4618      	mov	r0, r3
 81061c8:	3710      	adds	r7, #16
 81061ca:	46bd      	mov	sp, r7
 81061cc:	bd80      	pop	{r7, pc}
 81061ce:	bf00      	nop
 81061d0:	10000098 	.word	0x10000098

081061d4 <_ZN7STTS22H13readRegistersEhPht>:

bool STTS22H::readRegisters(uint8_t reg, uint8_t *buffer, uint16_t length) {
 81061d4:	b580      	push	{r7, lr}
 81061d6:	b086      	sub	sp, #24
 81061d8:	af02      	add	r7, sp, #8
 81061da:	60f8      	str	r0, [r7, #12]
 81061dc:	607a      	str	r2, [r7, #4]
 81061de:	461a      	mov	r2, r3
 81061e0:	460b      	mov	r3, r1
 81061e2:	72fb      	strb	r3, [r7, #11]
 81061e4:	4613      	mov	r3, r2
 81061e6:	813b      	strh	r3, [r7, #8]
    if (HAL_I2C_Master_Transmit(&hi2c2, SENSOR_ADDRESS, &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 81061e8:	f107 020b 	add.w	r2, r7, #11
 81061ec:	f04f 33ff 	mov.w	r3, #4294967295
 81061f0:	9300      	str	r3, [sp, #0]
 81061f2:	2301      	movs	r3, #1
 81061f4:	2194      	movs	r1, #148	@ 0x94
 81061f6:	4812      	ldr	r0, [pc, #72]	@ (8106240 <_ZN7STTS22H13readRegistersEhPht+0x6c>)
 81061f8:	f7fb ff2c 	bl	8102054 <HAL_I2C_Master_Transmit>
 81061fc:	4603      	mov	r3, r0
 81061fe:	2b00      	cmp	r3, #0
 8106200:	bf14      	ite	ne
 8106202:	2301      	movne	r3, #1
 8106204:	2300      	moveq	r3, #0
 8106206:	b2db      	uxtb	r3, r3
 8106208:	2b00      	cmp	r3, #0
 810620a:	d001      	beq.n	8106210 <_ZN7STTS22H13readRegistersEhPht+0x3c>
        return false;
 810620c:	2300      	movs	r3, #0
 810620e:	e013      	b.n	8106238 <_ZN7STTS22H13readRegistersEhPht+0x64>
    }
    if (HAL_I2C_Master_Receive(&hi2c2, SENSOR_ADDRESS, buffer, length, HAL_MAX_DELAY) != HAL_OK) {
 8106210:	893b      	ldrh	r3, [r7, #8]
 8106212:	f04f 32ff 	mov.w	r2, #4294967295
 8106216:	9200      	str	r2, [sp, #0]
 8106218:	687a      	ldr	r2, [r7, #4]
 810621a:	2194      	movs	r1, #148	@ 0x94
 810621c:	4808      	ldr	r0, [pc, #32]	@ (8106240 <_ZN7STTS22H13readRegistersEhPht+0x6c>)
 810621e:	f7fc f831 	bl	8102284 <HAL_I2C_Master_Receive>
 8106222:	4603      	mov	r3, r0
 8106224:	2b00      	cmp	r3, #0
 8106226:	bf14      	ite	ne
 8106228:	2301      	movne	r3, #1
 810622a:	2300      	moveq	r3, #0
 810622c:	b2db      	uxtb	r3, r3
 810622e:	2b00      	cmp	r3, #0
 8106230:	d001      	beq.n	8106236 <_ZN7STTS22H13readRegistersEhPht+0x62>
        return false;
 8106232:	2300      	movs	r3, #0
 8106234:	e000      	b.n	8106238 <_ZN7STTS22H13readRegistersEhPht+0x64>
    }
    return true;
 8106236:	2301      	movs	r3, #1
}
 8106238:	4618      	mov	r0, r3
 810623a:	3710      	adds	r7, #16
 810623c:	46bd      	mov	sp, r7
 810623e:	bd80      	pop	{r7, pc}
 8106240:	10000098 	.word	0x10000098

08106244 <std>:
 8106244:	2300      	movs	r3, #0
 8106246:	b510      	push	{r4, lr}
 8106248:	4604      	mov	r4, r0
 810624a:	e9c0 3300 	strd	r3, r3, [r0]
 810624e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8106252:	6083      	str	r3, [r0, #8]
 8106254:	8181      	strh	r1, [r0, #12]
 8106256:	6643      	str	r3, [r0, #100]	@ 0x64
 8106258:	81c2      	strh	r2, [r0, #14]
 810625a:	6183      	str	r3, [r0, #24]
 810625c:	4619      	mov	r1, r3
 810625e:	2208      	movs	r2, #8
 8106260:	305c      	adds	r0, #92	@ 0x5c
 8106262:	f000 f926 	bl	81064b2 <memset>
 8106266:	4b0d      	ldr	r3, [pc, #52]	@ (810629c <std+0x58>)
 8106268:	6263      	str	r3, [r4, #36]	@ 0x24
 810626a:	4b0d      	ldr	r3, [pc, #52]	@ (81062a0 <std+0x5c>)
 810626c:	62a3      	str	r3, [r4, #40]	@ 0x28
 810626e:	4b0d      	ldr	r3, [pc, #52]	@ (81062a4 <std+0x60>)
 8106270:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8106272:	4b0d      	ldr	r3, [pc, #52]	@ (81062a8 <std+0x64>)
 8106274:	6323      	str	r3, [r4, #48]	@ 0x30
 8106276:	4b0d      	ldr	r3, [pc, #52]	@ (81062ac <std+0x68>)
 8106278:	6224      	str	r4, [r4, #32]
 810627a:	429c      	cmp	r4, r3
 810627c:	d006      	beq.n	810628c <std+0x48>
 810627e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8106282:	4294      	cmp	r4, r2
 8106284:	d002      	beq.n	810628c <std+0x48>
 8106286:	33d0      	adds	r3, #208	@ 0xd0
 8106288:	429c      	cmp	r4, r3
 810628a:	d105      	bne.n	8106298 <std+0x54>
 810628c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8106290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8106294:	f000 b986 	b.w	81065a4 <__retarget_lock_init_recursive>
 8106298:	bd10      	pop	{r4, pc}
 810629a:	bf00      	nop
 810629c:	0810642d 	.word	0x0810642d
 81062a0:	0810644f 	.word	0x0810644f
 81062a4:	08106487 	.word	0x08106487
 81062a8:	081064ab 	.word	0x081064ab
 81062ac:	10000274 	.word	0x10000274

081062b0 <stdio_exit_handler>:
 81062b0:	4a02      	ldr	r2, [pc, #8]	@ (81062bc <stdio_exit_handler+0xc>)
 81062b2:	4903      	ldr	r1, [pc, #12]	@ (81062c0 <stdio_exit_handler+0x10>)
 81062b4:	4803      	ldr	r0, [pc, #12]	@ (81062c4 <stdio_exit_handler+0x14>)
 81062b6:	f000 b869 	b.w	810638c <_fwalk_sglue>
 81062ba:	bf00      	nop
 81062bc:	10000020 	.word	0x10000020
 81062c0:	081070f5 	.word	0x081070f5
 81062c4:	10000030 	.word	0x10000030

081062c8 <cleanup_stdio>:
 81062c8:	6841      	ldr	r1, [r0, #4]
 81062ca:	4b0c      	ldr	r3, [pc, #48]	@ (81062fc <cleanup_stdio+0x34>)
 81062cc:	4299      	cmp	r1, r3
 81062ce:	b510      	push	{r4, lr}
 81062d0:	4604      	mov	r4, r0
 81062d2:	d001      	beq.n	81062d8 <cleanup_stdio+0x10>
 81062d4:	f000 ff0e 	bl	81070f4 <_fflush_r>
 81062d8:	68a1      	ldr	r1, [r4, #8]
 81062da:	4b09      	ldr	r3, [pc, #36]	@ (8106300 <cleanup_stdio+0x38>)
 81062dc:	4299      	cmp	r1, r3
 81062de:	d002      	beq.n	81062e6 <cleanup_stdio+0x1e>
 81062e0:	4620      	mov	r0, r4
 81062e2:	f000 ff07 	bl	81070f4 <_fflush_r>
 81062e6:	68e1      	ldr	r1, [r4, #12]
 81062e8:	4b06      	ldr	r3, [pc, #24]	@ (8106304 <cleanup_stdio+0x3c>)
 81062ea:	4299      	cmp	r1, r3
 81062ec:	d004      	beq.n	81062f8 <cleanup_stdio+0x30>
 81062ee:	4620      	mov	r0, r4
 81062f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81062f4:	f000 befe 	b.w	81070f4 <_fflush_r>
 81062f8:	bd10      	pop	{r4, pc}
 81062fa:	bf00      	nop
 81062fc:	10000274 	.word	0x10000274
 8106300:	100002dc 	.word	0x100002dc
 8106304:	10000344 	.word	0x10000344

08106308 <global_stdio_init.part.0>:
 8106308:	b510      	push	{r4, lr}
 810630a:	4b0b      	ldr	r3, [pc, #44]	@ (8106338 <global_stdio_init.part.0+0x30>)
 810630c:	4c0b      	ldr	r4, [pc, #44]	@ (810633c <global_stdio_init.part.0+0x34>)
 810630e:	4a0c      	ldr	r2, [pc, #48]	@ (8106340 <global_stdio_init.part.0+0x38>)
 8106310:	601a      	str	r2, [r3, #0]
 8106312:	4620      	mov	r0, r4
 8106314:	2200      	movs	r2, #0
 8106316:	2104      	movs	r1, #4
 8106318:	f7ff ff94 	bl	8106244 <std>
 810631c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8106320:	2201      	movs	r2, #1
 8106322:	2109      	movs	r1, #9
 8106324:	f7ff ff8e 	bl	8106244 <std>
 8106328:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 810632c:	2202      	movs	r2, #2
 810632e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8106332:	2112      	movs	r1, #18
 8106334:	f7ff bf86 	b.w	8106244 <std>
 8106338:	100003ac 	.word	0x100003ac
 810633c:	10000274 	.word	0x10000274
 8106340:	081062b1 	.word	0x081062b1

08106344 <__sfp_lock_acquire>:
 8106344:	4801      	ldr	r0, [pc, #4]	@ (810634c <__sfp_lock_acquire+0x8>)
 8106346:	f000 b92e 	b.w	81065a6 <__retarget_lock_acquire_recursive>
 810634a:	bf00      	nop
 810634c:	100003b5 	.word	0x100003b5

08106350 <__sfp_lock_release>:
 8106350:	4801      	ldr	r0, [pc, #4]	@ (8106358 <__sfp_lock_release+0x8>)
 8106352:	f000 b929 	b.w	81065a8 <__retarget_lock_release_recursive>
 8106356:	bf00      	nop
 8106358:	100003b5 	.word	0x100003b5

0810635c <__sinit>:
 810635c:	b510      	push	{r4, lr}
 810635e:	4604      	mov	r4, r0
 8106360:	f7ff fff0 	bl	8106344 <__sfp_lock_acquire>
 8106364:	6a23      	ldr	r3, [r4, #32]
 8106366:	b11b      	cbz	r3, 8106370 <__sinit+0x14>
 8106368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810636c:	f7ff bff0 	b.w	8106350 <__sfp_lock_release>
 8106370:	4b04      	ldr	r3, [pc, #16]	@ (8106384 <__sinit+0x28>)
 8106372:	6223      	str	r3, [r4, #32]
 8106374:	4b04      	ldr	r3, [pc, #16]	@ (8106388 <__sinit+0x2c>)
 8106376:	681b      	ldr	r3, [r3, #0]
 8106378:	2b00      	cmp	r3, #0
 810637a:	d1f5      	bne.n	8106368 <__sinit+0xc>
 810637c:	f7ff ffc4 	bl	8106308 <global_stdio_init.part.0>
 8106380:	e7f2      	b.n	8106368 <__sinit+0xc>
 8106382:	bf00      	nop
 8106384:	081062c9 	.word	0x081062c9
 8106388:	100003ac 	.word	0x100003ac

0810638c <_fwalk_sglue>:
 810638c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8106390:	4607      	mov	r7, r0
 8106392:	4688      	mov	r8, r1
 8106394:	4614      	mov	r4, r2
 8106396:	2600      	movs	r6, #0
 8106398:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810639c:	f1b9 0901 	subs.w	r9, r9, #1
 81063a0:	d505      	bpl.n	81063ae <_fwalk_sglue+0x22>
 81063a2:	6824      	ldr	r4, [r4, #0]
 81063a4:	2c00      	cmp	r4, #0
 81063a6:	d1f7      	bne.n	8106398 <_fwalk_sglue+0xc>
 81063a8:	4630      	mov	r0, r6
 81063aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81063ae:	89ab      	ldrh	r3, [r5, #12]
 81063b0:	2b01      	cmp	r3, #1
 81063b2:	d907      	bls.n	81063c4 <_fwalk_sglue+0x38>
 81063b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 81063b8:	3301      	adds	r3, #1
 81063ba:	d003      	beq.n	81063c4 <_fwalk_sglue+0x38>
 81063bc:	4629      	mov	r1, r5
 81063be:	4638      	mov	r0, r7
 81063c0:	47c0      	blx	r8
 81063c2:	4306      	orrs	r6, r0
 81063c4:	3568      	adds	r5, #104	@ 0x68
 81063c6:	e7e9      	b.n	810639c <_fwalk_sglue+0x10>

081063c8 <iprintf>:
 81063c8:	b40f      	push	{r0, r1, r2, r3}
 81063ca:	b507      	push	{r0, r1, r2, lr}
 81063cc:	4906      	ldr	r1, [pc, #24]	@ (81063e8 <iprintf+0x20>)
 81063ce:	ab04      	add	r3, sp, #16
 81063d0:	6808      	ldr	r0, [r1, #0]
 81063d2:	f853 2b04 	ldr.w	r2, [r3], #4
 81063d6:	6881      	ldr	r1, [r0, #8]
 81063d8:	9301      	str	r3, [sp, #4]
 81063da:	f000 fb61 	bl	8106aa0 <_vfiprintf_r>
 81063de:	b003      	add	sp, #12
 81063e0:	f85d eb04 	ldr.w	lr, [sp], #4
 81063e4:	b004      	add	sp, #16
 81063e6:	4770      	bx	lr
 81063e8:	1000002c 	.word	0x1000002c

081063ec <siprintf>:
 81063ec:	b40e      	push	{r1, r2, r3}
 81063ee:	b500      	push	{lr}
 81063f0:	b09c      	sub	sp, #112	@ 0x70
 81063f2:	ab1d      	add	r3, sp, #116	@ 0x74
 81063f4:	9002      	str	r0, [sp, #8]
 81063f6:	9006      	str	r0, [sp, #24]
 81063f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 81063fc:	4809      	ldr	r0, [pc, #36]	@ (8106424 <siprintf+0x38>)
 81063fe:	9107      	str	r1, [sp, #28]
 8106400:	9104      	str	r1, [sp, #16]
 8106402:	4909      	ldr	r1, [pc, #36]	@ (8106428 <siprintf+0x3c>)
 8106404:	f853 2b04 	ldr.w	r2, [r3], #4
 8106408:	9105      	str	r1, [sp, #20]
 810640a:	6800      	ldr	r0, [r0, #0]
 810640c:	9301      	str	r3, [sp, #4]
 810640e:	a902      	add	r1, sp, #8
 8106410:	f000 fa20 	bl	8106854 <_svfiprintf_r>
 8106414:	9b02      	ldr	r3, [sp, #8]
 8106416:	2200      	movs	r2, #0
 8106418:	701a      	strb	r2, [r3, #0]
 810641a:	b01c      	add	sp, #112	@ 0x70
 810641c:	f85d eb04 	ldr.w	lr, [sp], #4
 8106420:	b003      	add	sp, #12
 8106422:	4770      	bx	lr
 8106424:	1000002c 	.word	0x1000002c
 8106428:	ffff0208 	.word	0xffff0208

0810642c <__sread>:
 810642c:	b510      	push	{r4, lr}
 810642e:	460c      	mov	r4, r1
 8106430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8106434:	f000 f868 	bl	8106508 <_read_r>
 8106438:	2800      	cmp	r0, #0
 810643a:	bfab      	itete	ge
 810643c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 810643e:	89a3      	ldrhlt	r3, [r4, #12]
 8106440:	181b      	addge	r3, r3, r0
 8106442:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8106446:	bfac      	ite	ge
 8106448:	6563      	strge	r3, [r4, #84]	@ 0x54
 810644a:	81a3      	strhlt	r3, [r4, #12]
 810644c:	bd10      	pop	{r4, pc}

0810644e <__swrite>:
 810644e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8106452:	461f      	mov	r7, r3
 8106454:	898b      	ldrh	r3, [r1, #12]
 8106456:	05db      	lsls	r3, r3, #23
 8106458:	4605      	mov	r5, r0
 810645a:	460c      	mov	r4, r1
 810645c:	4616      	mov	r6, r2
 810645e:	d505      	bpl.n	810646c <__swrite+0x1e>
 8106460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8106464:	2302      	movs	r3, #2
 8106466:	2200      	movs	r2, #0
 8106468:	f000 f83c 	bl	81064e4 <_lseek_r>
 810646c:	89a3      	ldrh	r3, [r4, #12]
 810646e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8106472:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8106476:	81a3      	strh	r3, [r4, #12]
 8106478:	4632      	mov	r2, r6
 810647a:	463b      	mov	r3, r7
 810647c:	4628      	mov	r0, r5
 810647e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8106482:	f000 b853 	b.w	810652c <_write_r>

08106486 <__sseek>:
 8106486:	b510      	push	{r4, lr}
 8106488:	460c      	mov	r4, r1
 810648a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810648e:	f000 f829 	bl	81064e4 <_lseek_r>
 8106492:	1c43      	adds	r3, r0, #1
 8106494:	89a3      	ldrh	r3, [r4, #12]
 8106496:	bf15      	itete	ne
 8106498:	6560      	strne	r0, [r4, #84]	@ 0x54
 810649a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 810649e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 81064a2:	81a3      	strheq	r3, [r4, #12]
 81064a4:	bf18      	it	ne
 81064a6:	81a3      	strhne	r3, [r4, #12]
 81064a8:	bd10      	pop	{r4, pc}

081064aa <__sclose>:
 81064aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81064ae:	f000 b809 	b.w	81064c4 <_close_r>

081064b2 <memset>:
 81064b2:	4402      	add	r2, r0
 81064b4:	4603      	mov	r3, r0
 81064b6:	4293      	cmp	r3, r2
 81064b8:	d100      	bne.n	81064bc <memset+0xa>
 81064ba:	4770      	bx	lr
 81064bc:	f803 1b01 	strb.w	r1, [r3], #1
 81064c0:	e7f9      	b.n	81064b6 <memset+0x4>
	...

081064c4 <_close_r>:
 81064c4:	b538      	push	{r3, r4, r5, lr}
 81064c6:	4d06      	ldr	r5, [pc, #24]	@ (81064e0 <_close_r+0x1c>)
 81064c8:	2300      	movs	r3, #0
 81064ca:	4604      	mov	r4, r0
 81064cc:	4608      	mov	r0, r1
 81064ce:	602b      	str	r3, [r5, #0]
 81064d0:	f7fa ff42 	bl	8101358 <_close>
 81064d4:	1c43      	adds	r3, r0, #1
 81064d6:	d102      	bne.n	81064de <_close_r+0x1a>
 81064d8:	682b      	ldr	r3, [r5, #0]
 81064da:	b103      	cbz	r3, 81064de <_close_r+0x1a>
 81064dc:	6023      	str	r3, [r4, #0]
 81064de:	bd38      	pop	{r3, r4, r5, pc}
 81064e0:	100003b0 	.word	0x100003b0

081064e4 <_lseek_r>:
 81064e4:	b538      	push	{r3, r4, r5, lr}
 81064e6:	4d07      	ldr	r5, [pc, #28]	@ (8106504 <_lseek_r+0x20>)
 81064e8:	4604      	mov	r4, r0
 81064ea:	4608      	mov	r0, r1
 81064ec:	4611      	mov	r1, r2
 81064ee:	2200      	movs	r2, #0
 81064f0:	602a      	str	r2, [r5, #0]
 81064f2:	461a      	mov	r2, r3
 81064f4:	f7fa ff57 	bl	81013a6 <_lseek>
 81064f8:	1c43      	adds	r3, r0, #1
 81064fa:	d102      	bne.n	8106502 <_lseek_r+0x1e>
 81064fc:	682b      	ldr	r3, [r5, #0]
 81064fe:	b103      	cbz	r3, 8106502 <_lseek_r+0x1e>
 8106500:	6023      	str	r3, [r4, #0]
 8106502:	bd38      	pop	{r3, r4, r5, pc}
 8106504:	100003b0 	.word	0x100003b0

08106508 <_read_r>:
 8106508:	b538      	push	{r3, r4, r5, lr}
 810650a:	4d07      	ldr	r5, [pc, #28]	@ (8106528 <_read_r+0x20>)
 810650c:	4604      	mov	r4, r0
 810650e:	4608      	mov	r0, r1
 8106510:	4611      	mov	r1, r2
 8106512:	2200      	movs	r2, #0
 8106514:	602a      	str	r2, [r5, #0]
 8106516:	461a      	mov	r2, r3
 8106518:	f7fa fee5 	bl	81012e6 <_read>
 810651c:	1c43      	adds	r3, r0, #1
 810651e:	d102      	bne.n	8106526 <_read_r+0x1e>
 8106520:	682b      	ldr	r3, [r5, #0]
 8106522:	b103      	cbz	r3, 8106526 <_read_r+0x1e>
 8106524:	6023      	str	r3, [r4, #0]
 8106526:	bd38      	pop	{r3, r4, r5, pc}
 8106528:	100003b0 	.word	0x100003b0

0810652c <_write_r>:
 810652c:	b538      	push	{r3, r4, r5, lr}
 810652e:	4d07      	ldr	r5, [pc, #28]	@ (810654c <_write_r+0x20>)
 8106530:	4604      	mov	r4, r0
 8106532:	4608      	mov	r0, r1
 8106534:	4611      	mov	r1, r2
 8106536:	2200      	movs	r2, #0
 8106538:	602a      	str	r2, [r5, #0]
 810653a:	461a      	mov	r2, r3
 810653c:	f7fa fef0 	bl	8101320 <_write>
 8106540:	1c43      	adds	r3, r0, #1
 8106542:	d102      	bne.n	810654a <_write_r+0x1e>
 8106544:	682b      	ldr	r3, [r5, #0]
 8106546:	b103      	cbz	r3, 810654a <_write_r+0x1e>
 8106548:	6023      	str	r3, [r4, #0]
 810654a:	bd38      	pop	{r3, r4, r5, pc}
 810654c:	100003b0 	.word	0x100003b0

08106550 <__errno>:
 8106550:	4b01      	ldr	r3, [pc, #4]	@ (8106558 <__errno+0x8>)
 8106552:	6818      	ldr	r0, [r3, #0]
 8106554:	4770      	bx	lr
 8106556:	bf00      	nop
 8106558:	1000002c 	.word	0x1000002c

0810655c <__libc_init_array>:
 810655c:	b570      	push	{r4, r5, r6, lr}
 810655e:	4d0d      	ldr	r5, [pc, #52]	@ (8106594 <__libc_init_array+0x38>)
 8106560:	4c0d      	ldr	r4, [pc, #52]	@ (8106598 <__libc_init_array+0x3c>)
 8106562:	1b64      	subs	r4, r4, r5
 8106564:	10a4      	asrs	r4, r4, #2
 8106566:	2600      	movs	r6, #0
 8106568:	42a6      	cmp	r6, r4
 810656a:	d109      	bne.n	8106580 <__libc_init_array+0x24>
 810656c:	4d0b      	ldr	r5, [pc, #44]	@ (810659c <__libc_init_array+0x40>)
 810656e:	4c0c      	ldr	r4, [pc, #48]	@ (81065a0 <__libc_init_array+0x44>)
 8106570:	f000 ff6e 	bl	8107450 <_init>
 8106574:	1b64      	subs	r4, r4, r5
 8106576:	10a4      	asrs	r4, r4, #2
 8106578:	2600      	movs	r6, #0
 810657a:	42a6      	cmp	r6, r4
 810657c:	d105      	bne.n	810658a <__libc_init_array+0x2e>
 810657e:	bd70      	pop	{r4, r5, r6, pc}
 8106580:	f855 3b04 	ldr.w	r3, [r5], #4
 8106584:	4798      	blx	r3
 8106586:	3601      	adds	r6, #1
 8106588:	e7ee      	b.n	8106568 <__libc_init_array+0xc>
 810658a:	f855 3b04 	ldr.w	r3, [r5], #4
 810658e:	4798      	blx	r3
 8106590:	3601      	adds	r6, #1
 8106592:	e7f2      	b.n	810657a <__libc_init_array+0x1e>
 8106594:	08107504 	.word	0x08107504
 8106598:	08107504 	.word	0x08107504
 810659c:	08107504 	.word	0x08107504
 81065a0:	0810750c 	.word	0x0810750c

081065a4 <__retarget_lock_init_recursive>:
 81065a4:	4770      	bx	lr

081065a6 <__retarget_lock_acquire_recursive>:
 81065a6:	4770      	bx	lr

081065a8 <__retarget_lock_release_recursive>:
 81065a8:	4770      	bx	lr
	...

081065ac <_free_r>:
 81065ac:	b538      	push	{r3, r4, r5, lr}
 81065ae:	4605      	mov	r5, r0
 81065b0:	2900      	cmp	r1, #0
 81065b2:	d041      	beq.n	8106638 <_free_r+0x8c>
 81065b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81065b8:	1f0c      	subs	r4, r1, #4
 81065ba:	2b00      	cmp	r3, #0
 81065bc:	bfb8      	it	lt
 81065be:	18e4      	addlt	r4, r4, r3
 81065c0:	f000 f8e0 	bl	8106784 <__malloc_lock>
 81065c4:	4a1d      	ldr	r2, [pc, #116]	@ (810663c <_free_r+0x90>)
 81065c6:	6813      	ldr	r3, [r2, #0]
 81065c8:	b933      	cbnz	r3, 81065d8 <_free_r+0x2c>
 81065ca:	6063      	str	r3, [r4, #4]
 81065cc:	6014      	str	r4, [r2, #0]
 81065ce:	4628      	mov	r0, r5
 81065d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 81065d4:	f000 b8dc 	b.w	8106790 <__malloc_unlock>
 81065d8:	42a3      	cmp	r3, r4
 81065da:	d908      	bls.n	81065ee <_free_r+0x42>
 81065dc:	6820      	ldr	r0, [r4, #0]
 81065de:	1821      	adds	r1, r4, r0
 81065e0:	428b      	cmp	r3, r1
 81065e2:	bf01      	itttt	eq
 81065e4:	6819      	ldreq	r1, [r3, #0]
 81065e6:	685b      	ldreq	r3, [r3, #4]
 81065e8:	1809      	addeq	r1, r1, r0
 81065ea:	6021      	streq	r1, [r4, #0]
 81065ec:	e7ed      	b.n	81065ca <_free_r+0x1e>
 81065ee:	461a      	mov	r2, r3
 81065f0:	685b      	ldr	r3, [r3, #4]
 81065f2:	b10b      	cbz	r3, 81065f8 <_free_r+0x4c>
 81065f4:	42a3      	cmp	r3, r4
 81065f6:	d9fa      	bls.n	81065ee <_free_r+0x42>
 81065f8:	6811      	ldr	r1, [r2, #0]
 81065fa:	1850      	adds	r0, r2, r1
 81065fc:	42a0      	cmp	r0, r4
 81065fe:	d10b      	bne.n	8106618 <_free_r+0x6c>
 8106600:	6820      	ldr	r0, [r4, #0]
 8106602:	4401      	add	r1, r0
 8106604:	1850      	adds	r0, r2, r1
 8106606:	4283      	cmp	r3, r0
 8106608:	6011      	str	r1, [r2, #0]
 810660a:	d1e0      	bne.n	81065ce <_free_r+0x22>
 810660c:	6818      	ldr	r0, [r3, #0]
 810660e:	685b      	ldr	r3, [r3, #4]
 8106610:	6053      	str	r3, [r2, #4]
 8106612:	4408      	add	r0, r1
 8106614:	6010      	str	r0, [r2, #0]
 8106616:	e7da      	b.n	81065ce <_free_r+0x22>
 8106618:	d902      	bls.n	8106620 <_free_r+0x74>
 810661a:	230c      	movs	r3, #12
 810661c:	602b      	str	r3, [r5, #0]
 810661e:	e7d6      	b.n	81065ce <_free_r+0x22>
 8106620:	6820      	ldr	r0, [r4, #0]
 8106622:	1821      	adds	r1, r4, r0
 8106624:	428b      	cmp	r3, r1
 8106626:	bf04      	itt	eq
 8106628:	6819      	ldreq	r1, [r3, #0]
 810662a:	685b      	ldreq	r3, [r3, #4]
 810662c:	6063      	str	r3, [r4, #4]
 810662e:	bf04      	itt	eq
 8106630:	1809      	addeq	r1, r1, r0
 8106632:	6021      	streq	r1, [r4, #0]
 8106634:	6054      	str	r4, [r2, #4]
 8106636:	e7ca      	b.n	81065ce <_free_r+0x22>
 8106638:	bd38      	pop	{r3, r4, r5, pc}
 810663a:	bf00      	nop
 810663c:	100003bc 	.word	0x100003bc

08106640 <sbrk_aligned>:
 8106640:	b570      	push	{r4, r5, r6, lr}
 8106642:	4e0f      	ldr	r6, [pc, #60]	@ (8106680 <sbrk_aligned+0x40>)
 8106644:	460c      	mov	r4, r1
 8106646:	6831      	ldr	r1, [r6, #0]
 8106648:	4605      	mov	r5, r0
 810664a:	b911      	cbnz	r1, 8106652 <sbrk_aligned+0x12>
 810664c:	f000 fe28 	bl	81072a0 <_sbrk_r>
 8106650:	6030      	str	r0, [r6, #0]
 8106652:	4621      	mov	r1, r4
 8106654:	4628      	mov	r0, r5
 8106656:	f000 fe23 	bl	81072a0 <_sbrk_r>
 810665a:	1c43      	adds	r3, r0, #1
 810665c:	d103      	bne.n	8106666 <sbrk_aligned+0x26>
 810665e:	f04f 34ff 	mov.w	r4, #4294967295
 8106662:	4620      	mov	r0, r4
 8106664:	bd70      	pop	{r4, r5, r6, pc}
 8106666:	1cc4      	adds	r4, r0, #3
 8106668:	f024 0403 	bic.w	r4, r4, #3
 810666c:	42a0      	cmp	r0, r4
 810666e:	d0f8      	beq.n	8106662 <sbrk_aligned+0x22>
 8106670:	1a21      	subs	r1, r4, r0
 8106672:	4628      	mov	r0, r5
 8106674:	f000 fe14 	bl	81072a0 <_sbrk_r>
 8106678:	3001      	adds	r0, #1
 810667a:	d1f2      	bne.n	8106662 <sbrk_aligned+0x22>
 810667c:	e7ef      	b.n	810665e <sbrk_aligned+0x1e>
 810667e:	bf00      	nop
 8106680:	100003b8 	.word	0x100003b8

08106684 <_malloc_r>:
 8106684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8106688:	1ccd      	adds	r5, r1, #3
 810668a:	f025 0503 	bic.w	r5, r5, #3
 810668e:	3508      	adds	r5, #8
 8106690:	2d0c      	cmp	r5, #12
 8106692:	bf38      	it	cc
 8106694:	250c      	movcc	r5, #12
 8106696:	2d00      	cmp	r5, #0
 8106698:	4606      	mov	r6, r0
 810669a:	db01      	blt.n	81066a0 <_malloc_r+0x1c>
 810669c:	42a9      	cmp	r1, r5
 810669e:	d904      	bls.n	81066aa <_malloc_r+0x26>
 81066a0:	230c      	movs	r3, #12
 81066a2:	6033      	str	r3, [r6, #0]
 81066a4:	2000      	movs	r0, #0
 81066a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81066aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8106780 <_malloc_r+0xfc>
 81066ae:	f000 f869 	bl	8106784 <__malloc_lock>
 81066b2:	f8d8 3000 	ldr.w	r3, [r8]
 81066b6:	461c      	mov	r4, r3
 81066b8:	bb44      	cbnz	r4, 810670c <_malloc_r+0x88>
 81066ba:	4629      	mov	r1, r5
 81066bc:	4630      	mov	r0, r6
 81066be:	f7ff ffbf 	bl	8106640 <sbrk_aligned>
 81066c2:	1c43      	adds	r3, r0, #1
 81066c4:	4604      	mov	r4, r0
 81066c6:	d158      	bne.n	810677a <_malloc_r+0xf6>
 81066c8:	f8d8 4000 	ldr.w	r4, [r8]
 81066cc:	4627      	mov	r7, r4
 81066ce:	2f00      	cmp	r7, #0
 81066d0:	d143      	bne.n	810675a <_malloc_r+0xd6>
 81066d2:	2c00      	cmp	r4, #0
 81066d4:	d04b      	beq.n	810676e <_malloc_r+0xea>
 81066d6:	6823      	ldr	r3, [r4, #0]
 81066d8:	4639      	mov	r1, r7
 81066da:	4630      	mov	r0, r6
 81066dc:	eb04 0903 	add.w	r9, r4, r3
 81066e0:	f000 fdde 	bl	81072a0 <_sbrk_r>
 81066e4:	4581      	cmp	r9, r0
 81066e6:	d142      	bne.n	810676e <_malloc_r+0xea>
 81066e8:	6821      	ldr	r1, [r4, #0]
 81066ea:	1a6d      	subs	r5, r5, r1
 81066ec:	4629      	mov	r1, r5
 81066ee:	4630      	mov	r0, r6
 81066f0:	f7ff ffa6 	bl	8106640 <sbrk_aligned>
 81066f4:	3001      	adds	r0, #1
 81066f6:	d03a      	beq.n	810676e <_malloc_r+0xea>
 81066f8:	6823      	ldr	r3, [r4, #0]
 81066fa:	442b      	add	r3, r5
 81066fc:	6023      	str	r3, [r4, #0]
 81066fe:	f8d8 3000 	ldr.w	r3, [r8]
 8106702:	685a      	ldr	r2, [r3, #4]
 8106704:	bb62      	cbnz	r2, 8106760 <_malloc_r+0xdc>
 8106706:	f8c8 7000 	str.w	r7, [r8]
 810670a:	e00f      	b.n	810672c <_malloc_r+0xa8>
 810670c:	6822      	ldr	r2, [r4, #0]
 810670e:	1b52      	subs	r2, r2, r5
 8106710:	d420      	bmi.n	8106754 <_malloc_r+0xd0>
 8106712:	2a0b      	cmp	r2, #11
 8106714:	d917      	bls.n	8106746 <_malloc_r+0xc2>
 8106716:	1961      	adds	r1, r4, r5
 8106718:	42a3      	cmp	r3, r4
 810671a:	6025      	str	r5, [r4, #0]
 810671c:	bf18      	it	ne
 810671e:	6059      	strne	r1, [r3, #4]
 8106720:	6863      	ldr	r3, [r4, #4]
 8106722:	bf08      	it	eq
 8106724:	f8c8 1000 	streq.w	r1, [r8]
 8106728:	5162      	str	r2, [r4, r5]
 810672a:	604b      	str	r3, [r1, #4]
 810672c:	4630      	mov	r0, r6
 810672e:	f000 f82f 	bl	8106790 <__malloc_unlock>
 8106732:	f104 000b 	add.w	r0, r4, #11
 8106736:	1d23      	adds	r3, r4, #4
 8106738:	f020 0007 	bic.w	r0, r0, #7
 810673c:	1ac2      	subs	r2, r0, r3
 810673e:	bf1c      	itt	ne
 8106740:	1a1b      	subne	r3, r3, r0
 8106742:	50a3      	strne	r3, [r4, r2]
 8106744:	e7af      	b.n	81066a6 <_malloc_r+0x22>
 8106746:	6862      	ldr	r2, [r4, #4]
 8106748:	42a3      	cmp	r3, r4
 810674a:	bf0c      	ite	eq
 810674c:	f8c8 2000 	streq.w	r2, [r8]
 8106750:	605a      	strne	r2, [r3, #4]
 8106752:	e7eb      	b.n	810672c <_malloc_r+0xa8>
 8106754:	4623      	mov	r3, r4
 8106756:	6864      	ldr	r4, [r4, #4]
 8106758:	e7ae      	b.n	81066b8 <_malloc_r+0x34>
 810675a:	463c      	mov	r4, r7
 810675c:	687f      	ldr	r7, [r7, #4]
 810675e:	e7b6      	b.n	81066ce <_malloc_r+0x4a>
 8106760:	461a      	mov	r2, r3
 8106762:	685b      	ldr	r3, [r3, #4]
 8106764:	42a3      	cmp	r3, r4
 8106766:	d1fb      	bne.n	8106760 <_malloc_r+0xdc>
 8106768:	2300      	movs	r3, #0
 810676a:	6053      	str	r3, [r2, #4]
 810676c:	e7de      	b.n	810672c <_malloc_r+0xa8>
 810676e:	230c      	movs	r3, #12
 8106770:	6033      	str	r3, [r6, #0]
 8106772:	4630      	mov	r0, r6
 8106774:	f000 f80c 	bl	8106790 <__malloc_unlock>
 8106778:	e794      	b.n	81066a4 <_malloc_r+0x20>
 810677a:	6005      	str	r5, [r0, #0]
 810677c:	e7d6      	b.n	810672c <_malloc_r+0xa8>
 810677e:	bf00      	nop
 8106780:	100003bc 	.word	0x100003bc

08106784 <__malloc_lock>:
 8106784:	4801      	ldr	r0, [pc, #4]	@ (810678c <__malloc_lock+0x8>)
 8106786:	f7ff bf0e 	b.w	81065a6 <__retarget_lock_acquire_recursive>
 810678a:	bf00      	nop
 810678c:	100003b4 	.word	0x100003b4

08106790 <__malloc_unlock>:
 8106790:	4801      	ldr	r0, [pc, #4]	@ (8106798 <__malloc_unlock+0x8>)
 8106792:	f7ff bf09 	b.w	81065a8 <__retarget_lock_release_recursive>
 8106796:	bf00      	nop
 8106798:	100003b4 	.word	0x100003b4

0810679c <__ssputs_r>:
 810679c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81067a0:	688e      	ldr	r6, [r1, #8]
 81067a2:	461f      	mov	r7, r3
 81067a4:	42be      	cmp	r6, r7
 81067a6:	680b      	ldr	r3, [r1, #0]
 81067a8:	4682      	mov	sl, r0
 81067aa:	460c      	mov	r4, r1
 81067ac:	4690      	mov	r8, r2
 81067ae:	d82d      	bhi.n	810680c <__ssputs_r+0x70>
 81067b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 81067b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 81067b8:	d026      	beq.n	8106808 <__ssputs_r+0x6c>
 81067ba:	6965      	ldr	r5, [r4, #20]
 81067bc:	6909      	ldr	r1, [r1, #16]
 81067be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 81067c2:	eba3 0901 	sub.w	r9, r3, r1
 81067c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 81067ca:	1c7b      	adds	r3, r7, #1
 81067cc:	444b      	add	r3, r9
 81067ce:	106d      	asrs	r5, r5, #1
 81067d0:	429d      	cmp	r5, r3
 81067d2:	bf38      	it	cc
 81067d4:	461d      	movcc	r5, r3
 81067d6:	0553      	lsls	r3, r2, #21
 81067d8:	d527      	bpl.n	810682a <__ssputs_r+0x8e>
 81067da:	4629      	mov	r1, r5
 81067dc:	f7ff ff52 	bl	8106684 <_malloc_r>
 81067e0:	4606      	mov	r6, r0
 81067e2:	b360      	cbz	r0, 810683e <__ssputs_r+0xa2>
 81067e4:	6921      	ldr	r1, [r4, #16]
 81067e6:	464a      	mov	r2, r9
 81067e8:	f000 fd6a 	bl	81072c0 <memcpy>
 81067ec:	89a3      	ldrh	r3, [r4, #12]
 81067ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 81067f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81067f6:	81a3      	strh	r3, [r4, #12]
 81067f8:	6126      	str	r6, [r4, #16]
 81067fa:	6165      	str	r5, [r4, #20]
 81067fc:	444e      	add	r6, r9
 81067fe:	eba5 0509 	sub.w	r5, r5, r9
 8106802:	6026      	str	r6, [r4, #0]
 8106804:	60a5      	str	r5, [r4, #8]
 8106806:	463e      	mov	r6, r7
 8106808:	42be      	cmp	r6, r7
 810680a:	d900      	bls.n	810680e <__ssputs_r+0x72>
 810680c:	463e      	mov	r6, r7
 810680e:	6820      	ldr	r0, [r4, #0]
 8106810:	4632      	mov	r2, r6
 8106812:	4641      	mov	r1, r8
 8106814:	f000 fd2a 	bl	810726c <memmove>
 8106818:	68a3      	ldr	r3, [r4, #8]
 810681a:	1b9b      	subs	r3, r3, r6
 810681c:	60a3      	str	r3, [r4, #8]
 810681e:	6823      	ldr	r3, [r4, #0]
 8106820:	4433      	add	r3, r6
 8106822:	6023      	str	r3, [r4, #0]
 8106824:	2000      	movs	r0, #0
 8106826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810682a:	462a      	mov	r2, r5
 810682c:	f000 fd56 	bl	81072dc <_realloc_r>
 8106830:	4606      	mov	r6, r0
 8106832:	2800      	cmp	r0, #0
 8106834:	d1e0      	bne.n	81067f8 <__ssputs_r+0x5c>
 8106836:	6921      	ldr	r1, [r4, #16]
 8106838:	4650      	mov	r0, sl
 810683a:	f7ff feb7 	bl	81065ac <_free_r>
 810683e:	230c      	movs	r3, #12
 8106840:	f8ca 3000 	str.w	r3, [sl]
 8106844:	89a3      	ldrh	r3, [r4, #12]
 8106846:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810684a:	81a3      	strh	r3, [r4, #12]
 810684c:	f04f 30ff 	mov.w	r0, #4294967295
 8106850:	e7e9      	b.n	8106826 <__ssputs_r+0x8a>
	...

08106854 <_svfiprintf_r>:
 8106854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106858:	4698      	mov	r8, r3
 810685a:	898b      	ldrh	r3, [r1, #12]
 810685c:	061b      	lsls	r3, r3, #24
 810685e:	b09d      	sub	sp, #116	@ 0x74
 8106860:	4607      	mov	r7, r0
 8106862:	460d      	mov	r5, r1
 8106864:	4614      	mov	r4, r2
 8106866:	d510      	bpl.n	810688a <_svfiprintf_r+0x36>
 8106868:	690b      	ldr	r3, [r1, #16]
 810686a:	b973      	cbnz	r3, 810688a <_svfiprintf_r+0x36>
 810686c:	2140      	movs	r1, #64	@ 0x40
 810686e:	f7ff ff09 	bl	8106684 <_malloc_r>
 8106872:	6028      	str	r0, [r5, #0]
 8106874:	6128      	str	r0, [r5, #16]
 8106876:	b930      	cbnz	r0, 8106886 <_svfiprintf_r+0x32>
 8106878:	230c      	movs	r3, #12
 810687a:	603b      	str	r3, [r7, #0]
 810687c:	f04f 30ff 	mov.w	r0, #4294967295
 8106880:	b01d      	add	sp, #116	@ 0x74
 8106882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8106886:	2340      	movs	r3, #64	@ 0x40
 8106888:	616b      	str	r3, [r5, #20]
 810688a:	2300      	movs	r3, #0
 810688c:	9309      	str	r3, [sp, #36]	@ 0x24
 810688e:	2320      	movs	r3, #32
 8106890:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8106894:	f8cd 800c 	str.w	r8, [sp, #12]
 8106898:	2330      	movs	r3, #48	@ 0x30
 810689a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8106a38 <_svfiprintf_r+0x1e4>
 810689e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 81068a2:	f04f 0901 	mov.w	r9, #1
 81068a6:	4623      	mov	r3, r4
 81068a8:	469a      	mov	sl, r3
 81068aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 81068ae:	b10a      	cbz	r2, 81068b4 <_svfiprintf_r+0x60>
 81068b0:	2a25      	cmp	r2, #37	@ 0x25
 81068b2:	d1f9      	bne.n	81068a8 <_svfiprintf_r+0x54>
 81068b4:	ebba 0b04 	subs.w	fp, sl, r4
 81068b8:	d00b      	beq.n	81068d2 <_svfiprintf_r+0x7e>
 81068ba:	465b      	mov	r3, fp
 81068bc:	4622      	mov	r2, r4
 81068be:	4629      	mov	r1, r5
 81068c0:	4638      	mov	r0, r7
 81068c2:	f7ff ff6b 	bl	810679c <__ssputs_r>
 81068c6:	3001      	adds	r0, #1
 81068c8:	f000 80a7 	beq.w	8106a1a <_svfiprintf_r+0x1c6>
 81068cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 81068ce:	445a      	add	r2, fp
 81068d0:	9209      	str	r2, [sp, #36]	@ 0x24
 81068d2:	f89a 3000 	ldrb.w	r3, [sl]
 81068d6:	2b00      	cmp	r3, #0
 81068d8:	f000 809f 	beq.w	8106a1a <_svfiprintf_r+0x1c6>
 81068dc:	2300      	movs	r3, #0
 81068de:	f04f 32ff 	mov.w	r2, #4294967295
 81068e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 81068e6:	f10a 0a01 	add.w	sl, sl, #1
 81068ea:	9304      	str	r3, [sp, #16]
 81068ec:	9307      	str	r3, [sp, #28]
 81068ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 81068f2:	931a      	str	r3, [sp, #104]	@ 0x68
 81068f4:	4654      	mov	r4, sl
 81068f6:	2205      	movs	r2, #5
 81068f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 81068fc:	484e      	ldr	r0, [pc, #312]	@ (8106a38 <_svfiprintf_r+0x1e4>)
 81068fe:	f7f9 fcef 	bl	81002e0 <memchr>
 8106902:	9a04      	ldr	r2, [sp, #16]
 8106904:	b9d8      	cbnz	r0, 810693e <_svfiprintf_r+0xea>
 8106906:	06d0      	lsls	r0, r2, #27
 8106908:	bf44      	itt	mi
 810690a:	2320      	movmi	r3, #32
 810690c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8106910:	0711      	lsls	r1, r2, #28
 8106912:	bf44      	itt	mi
 8106914:	232b      	movmi	r3, #43	@ 0x2b
 8106916:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810691a:	f89a 3000 	ldrb.w	r3, [sl]
 810691e:	2b2a      	cmp	r3, #42	@ 0x2a
 8106920:	d015      	beq.n	810694e <_svfiprintf_r+0xfa>
 8106922:	9a07      	ldr	r2, [sp, #28]
 8106924:	4654      	mov	r4, sl
 8106926:	2000      	movs	r0, #0
 8106928:	f04f 0c0a 	mov.w	ip, #10
 810692c:	4621      	mov	r1, r4
 810692e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8106932:	3b30      	subs	r3, #48	@ 0x30
 8106934:	2b09      	cmp	r3, #9
 8106936:	d94b      	bls.n	81069d0 <_svfiprintf_r+0x17c>
 8106938:	b1b0      	cbz	r0, 8106968 <_svfiprintf_r+0x114>
 810693a:	9207      	str	r2, [sp, #28]
 810693c:	e014      	b.n	8106968 <_svfiprintf_r+0x114>
 810693e:	eba0 0308 	sub.w	r3, r0, r8
 8106942:	fa09 f303 	lsl.w	r3, r9, r3
 8106946:	4313      	orrs	r3, r2
 8106948:	9304      	str	r3, [sp, #16]
 810694a:	46a2      	mov	sl, r4
 810694c:	e7d2      	b.n	81068f4 <_svfiprintf_r+0xa0>
 810694e:	9b03      	ldr	r3, [sp, #12]
 8106950:	1d19      	adds	r1, r3, #4
 8106952:	681b      	ldr	r3, [r3, #0]
 8106954:	9103      	str	r1, [sp, #12]
 8106956:	2b00      	cmp	r3, #0
 8106958:	bfbb      	ittet	lt
 810695a:	425b      	neglt	r3, r3
 810695c:	f042 0202 	orrlt.w	r2, r2, #2
 8106960:	9307      	strge	r3, [sp, #28]
 8106962:	9307      	strlt	r3, [sp, #28]
 8106964:	bfb8      	it	lt
 8106966:	9204      	strlt	r2, [sp, #16]
 8106968:	7823      	ldrb	r3, [r4, #0]
 810696a:	2b2e      	cmp	r3, #46	@ 0x2e
 810696c:	d10a      	bne.n	8106984 <_svfiprintf_r+0x130>
 810696e:	7863      	ldrb	r3, [r4, #1]
 8106970:	2b2a      	cmp	r3, #42	@ 0x2a
 8106972:	d132      	bne.n	81069da <_svfiprintf_r+0x186>
 8106974:	9b03      	ldr	r3, [sp, #12]
 8106976:	1d1a      	adds	r2, r3, #4
 8106978:	681b      	ldr	r3, [r3, #0]
 810697a:	9203      	str	r2, [sp, #12]
 810697c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8106980:	3402      	adds	r4, #2
 8106982:	9305      	str	r3, [sp, #20]
 8106984:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8106a48 <_svfiprintf_r+0x1f4>
 8106988:	7821      	ldrb	r1, [r4, #0]
 810698a:	2203      	movs	r2, #3
 810698c:	4650      	mov	r0, sl
 810698e:	f7f9 fca7 	bl	81002e0 <memchr>
 8106992:	b138      	cbz	r0, 81069a4 <_svfiprintf_r+0x150>
 8106994:	9b04      	ldr	r3, [sp, #16]
 8106996:	eba0 000a 	sub.w	r0, r0, sl
 810699a:	2240      	movs	r2, #64	@ 0x40
 810699c:	4082      	lsls	r2, r0
 810699e:	4313      	orrs	r3, r2
 81069a0:	3401      	adds	r4, #1
 81069a2:	9304      	str	r3, [sp, #16]
 81069a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 81069a8:	4824      	ldr	r0, [pc, #144]	@ (8106a3c <_svfiprintf_r+0x1e8>)
 81069aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 81069ae:	2206      	movs	r2, #6
 81069b0:	f7f9 fc96 	bl	81002e0 <memchr>
 81069b4:	2800      	cmp	r0, #0
 81069b6:	d036      	beq.n	8106a26 <_svfiprintf_r+0x1d2>
 81069b8:	4b21      	ldr	r3, [pc, #132]	@ (8106a40 <_svfiprintf_r+0x1ec>)
 81069ba:	bb1b      	cbnz	r3, 8106a04 <_svfiprintf_r+0x1b0>
 81069bc:	9b03      	ldr	r3, [sp, #12]
 81069be:	3307      	adds	r3, #7
 81069c0:	f023 0307 	bic.w	r3, r3, #7
 81069c4:	3308      	adds	r3, #8
 81069c6:	9303      	str	r3, [sp, #12]
 81069c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81069ca:	4433      	add	r3, r6
 81069cc:	9309      	str	r3, [sp, #36]	@ 0x24
 81069ce:	e76a      	b.n	81068a6 <_svfiprintf_r+0x52>
 81069d0:	fb0c 3202 	mla	r2, ip, r2, r3
 81069d4:	460c      	mov	r4, r1
 81069d6:	2001      	movs	r0, #1
 81069d8:	e7a8      	b.n	810692c <_svfiprintf_r+0xd8>
 81069da:	2300      	movs	r3, #0
 81069dc:	3401      	adds	r4, #1
 81069de:	9305      	str	r3, [sp, #20]
 81069e0:	4619      	mov	r1, r3
 81069e2:	f04f 0c0a 	mov.w	ip, #10
 81069e6:	4620      	mov	r0, r4
 81069e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 81069ec:	3a30      	subs	r2, #48	@ 0x30
 81069ee:	2a09      	cmp	r2, #9
 81069f0:	d903      	bls.n	81069fa <_svfiprintf_r+0x1a6>
 81069f2:	2b00      	cmp	r3, #0
 81069f4:	d0c6      	beq.n	8106984 <_svfiprintf_r+0x130>
 81069f6:	9105      	str	r1, [sp, #20]
 81069f8:	e7c4      	b.n	8106984 <_svfiprintf_r+0x130>
 81069fa:	fb0c 2101 	mla	r1, ip, r1, r2
 81069fe:	4604      	mov	r4, r0
 8106a00:	2301      	movs	r3, #1
 8106a02:	e7f0      	b.n	81069e6 <_svfiprintf_r+0x192>
 8106a04:	ab03      	add	r3, sp, #12
 8106a06:	9300      	str	r3, [sp, #0]
 8106a08:	462a      	mov	r2, r5
 8106a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8106a44 <_svfiprintf_r+0x1f0>)
 8106a0c:	a904      	add	r1, sp, #16
 8106a0e:	4638      	mov	r0, r7
 8106a10:	f3af 8000 	nop.w
 8106a14:	1c42      	adds	r2, r0, #1
 8106a16:	4606      	mov	r6, r0
 8106a18:	d1d6      	bne.n	81069c8 <_svfiprintf_r+0x174>
 8106a1a:	89ab      	ldrh	r3, [r5, #12]
 8106a1c:	065b      	lsls	r3, r3, #25
 8106a1e:	f53f af2d 	bmi.w	810687c <_svfiprintf_r+0x28>
 8106a22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8106a24:	e72c      	b.n	8106880 <_svfiprintf_r+0x2c>
 8106a26:	ab03      	add	r3, sp, #12
 8106a28:	9300      	str	r3, [sp, #0]
 8106a2a:	462a      	mov	r2, r5
 8106a2c:	4b05      	ldr	r3, [pc, #20]	@ (8106a44 <_svfiprintf_r+0x1f0>)
 8106a2e:	a904      	add	r1, sp, #16
 8106a30:	4638      	mov	r0, r7
 8106a32:	f000 f9bb 	bl	8106dac <_printf_i>
 8106a36:	e7ed      	b.n	8106a14 <_svfiprintf_r+0x1c0>
 8106a38:	081074c8 	.word	0x081074c8
 8106a3c:	081074d2 	.word	0x081074d2
 8106a40:	00000000 	.word	0x00000000
 8106a44:	0810679d 	.word	0x0810679d
 8106a48:	081074ce 	.word	0x081074ce

08106a4c <__sfputc_r>:
 8106a4c:	6893      	ldr	r3, [r2, #8]
 8106a4e:	3b01      	subs	r3, #1
 8106a50:	2b00      	cmp	r3, #0
 8106a52:	b410      	push	{r4}
 8106a54:	6093      	str	r3, [r2, #8]
 8106a56:	da08      	bge.n	8106a6a <__sfputc_r+0x1e>
 8106a58:	6994      	ldr	r4, [r2, #24]
 8106a5a:	42a3      	cmp	r3, r4
 8106a5c:	db01      	blt.n	8106a62 <__sfputc_r+0x16>
 8106a5e:	290a      	cmp	r1, #10
 8106a60:	d103      	bne.n	8106a6a <__sfputc_r+0x1e>
 8106a62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8106a66:	f000 bb6d 	b.w	8107144 <__swbuf_r>
 8106a6a:	6813      	ldr	r3, [r2, #0]
 8106a6c:	1c58      	adds	r0, r3, #1
 8106a6e:	6010      	str	r0, [r2, #0]
 8106a70:	7019      	strb	r1, [r3, #0]
 8106a72:	4608      	mov	r0, r1
 8106a74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8106a78:	4770      	bx	lr

08106a7a <__sfputs_r>:
 8106a7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106a7c:	4606      	mov	r6, r0
 8106a7e:	460f      	mov	r7, r1
 8106a80:	4614      	mov	r4, r2
 8106a82:	18d5      	adds	r5, r2, r3
 8106a84:	42ac      	cmp	r4, r5
 8106a86:	d101      	bne.n	8106a8c <__sfputs_r+0x12>
 8106a88:	2000      	movs	r0, #0
 8106a8a:	e007      	b.n	8106a9c <__sfputs_r+0x22>
 8106a8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8106a90:	463a      	mov	r2, r7
 8106a92:	4630      	mov	r0, r6
 8106a94:	f7ff ffda 	bl	8106a4c <__sfputc_r>
 8106a98:	1c43      	adds	r3, r0, #1
 8106a9a:	d1f3      	bne.n	8106a84 <__sfputs_r+0xa>
 8106a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08106aa0 <_vfiprintf_r>:
 8106aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106aa4:	460d      	mov	r5, r1
 8106aa6:	b09d      	sub	sp, #116	@ 0x74
 8106aa8:	4614      	mov	r4, r2
 8106aaa:	4698      	mov	r8, r3
 8106aac:	4606      	mov	r6, r0
 8106aae:	b118      	cbz	r0, 8106ab8 <_vfiprintf_r+0x18>
 8106ab0:	6a03      	ldr	r3, [r0, #32]
 8106ab2:	b90b      	cbnz	r3, 8106ab8 <_vfiprintf_r+0x18>
 8106ab4:	f7ff fc52 	bl	810635c <__sinit>
 8106ab8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8106aba:	07d9      	lsls	r1, r3, #31
 8106abc:	d405      	bmi.n	8106aca <_vfiprintf_r+0x2a>
 8106abe:	89ab      	ldrh	r3, [r5, #12]
 8106ac0:	059a      	lsls	r2, r3, #22
 8106ac2:	d402      	bmi.n	8106aca <_vfiprintf_r+0x2a>
 8106ac4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8106ac6:	f7ff fd6e 	bl	81065a6 <__retarget_lock_acquire_recursive>
 8106aca:	89ab      	ldrh	r3, [r5, #12]
 8106acc:	071b      	lsls	r3, r3, #28
 8106ace:	d501      	bpl.n	8106ad4 <_vfiprintf_r+0x34>
 8106ad0:	692b      	ldr	r3, [r5, #16]
 8106ad2:	b99b      	cbnz	r3, 8106afc <_vfiprintf_r+0x5c>
 8106ad4:	4629      	mov	r1, r5
 8106ad6:	4630      	mov	r0, r6
 8106ad8:	f000 fb72 	bl	81071c0 <__swsetup_r>
 8106adc:	b170      	cbz	r0, 8106afc <_vfiprintf_r+0x5c>
 8106ade:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8106ae0:	07dc      	lsls	r4, r3, #31
 8106ae2:	d504      	bpl.n	8106aee <_vfiprintf_r+0x4e>
 8106ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8106ae8:	b01d      	add	sp, #116	@ 0x74
 8106aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8106aee:	89ab      	ldrh	r3, [r5, #12]
 8106af0:	0598      	lsls	r0, r3, #22
 8106af2:	d4f7      	bmi.n	8106ae4 <_vfiprintf_r+0x44>
 8106af4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8106af6:	f7ff fd57 	bl	81065a8 <__retarget_lock_release_recursive>
 8106afa:	e7f3      	b.n	8106ae4 <_vfiprintf_r+0x44>
 8106afc:	2300      	movs	r3, #0
 8106afe:	9309      	str	r3, [sp, #36]	@ 0x24
 8106b00:	2320      	movs	r3, #32
 8106b02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8106b06:	f8cd 800c 	str.w	r8, [sp, #12]
 8106b0a:	2330      	movs	r3, #48	@ 0x30
 8106b0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8106cbc <_vfiprintf_r+0x21c>
 8106b10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8106b14:	f04f 0901 	mov.w	r9, #1
 8106b18:	4623      	mov	r3, r4
 8106b1a:	469a      	mov	sl, r3
 8106b1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8106b20:	b10a      	cbz	r2, 8106b26 <_vfiprintf_r+0x86>
 8106b22:	2a25      	cmp	r2, #37	@ 0x25
 8106b24:	d1f9      	bne.n	8106b1a <_vfiprintf_r+0x7a>
 8106b26:	ebba 0b04 	subs.w	fp, sl, r4
 8106b2a:	d00b      	beq.n	8106b44 <_vfiprintf_r+0xa4>
 8106b2c:	465b      	mov	r3, fp
 8106b2e:	4622      	mov	r2, r4
 8106b30:	4629      	mov	r1, r5
 8106b32:	4630      	mov	r0, r6
 8106b34:	f7ff ffa1 	bl	8106a7a <__sfputs_r>
 8106b38:	3001      	adds	r0, #1
 8106b3a:	f000 80a7 	beq.w	8106c8c <_vfiprintf_r+0x1ec>
 8106b3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8106b40:	445a      	add	r2, fp
 8106b42:	9209      	str	r2, [sp, #36]	@ 0x24
 8106b44:	f89a 3000 	ldrb.w	r3, [sl]
 8106b48:	2b00      	cmp	r3, #0
 8106b4a:	f000 809f 	beq.w	8106c8c <_vfiprintf_r+0x1ec>
 8106b4e:	2300      	movs	r3, #0
 8106b50:	f04f 32ff 	mov.w	r2, #4294967295
 8106b54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8106b58:	f10a 0a01 	add.w	sl, sl, #1
 8106b5c:	9304      	str	r3, [sp, #16]
 8106b5e:	9307      	str	r3, [sp, #28]
 8106b60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8106b64:	931a      	str	r3, [sp, #104]	@ 0x68
 8106b66:	4654      	mov	r4, sl
 8106b68:	2205      	movs	r2, #5
 8106b6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8106b6e:	4853      	ldr	r0, [pc, #332]	@ (8106cbc <_vfiprintf_r+0x21c>)
 8106b70:	f7f9 fbb6 	bl	81002e0 <memchr>
 8106b74:	9a04      	ldr	r2, [sp, #16]
 8106b76:	b9d8      	cbnz	r0, 8106bb0 <_vfiprintf_r+0x110>
 8106b78:	06d1      	lsls	r1, r2, #27
 8106b7a:	bf44      	itt	mi
 8106b7c:	2320      	movmi	r3, #32
 8106b7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8106b82:	0713      	lsls	r3, r2, #28
 8106b84:	bf44      	itt	mi
 8106b86:	232b      	movmi	r3, #43	@ 0x2b
 8106b88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8106b8c:	f89a 3000 	ldrb.w	r3, [sl]
 8106b90:	2b2a      	cmp	r3, #42	@ 0x2a
 8106b92:	d015      	beq.n	8106bc0 <_vfiprintf_r+0x120>
 8106b94:	9a07      	ldr	r2, [sp, #28]
 8106b96:	4654      	mov	r4, sl
 8106b98:	2000      	movs	r0, #0
 8106b9a:	f04f 0c0a 	mov.w	ip, #10
 8106b9e:	4621      	mov	r1, r4
 8106ba0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8106ba4:	3b30      	subs	r3, #48	@ 0x30
 8106ba6:	2b09      	cmp	r3, #9
 8106ba8:	d94b      	bls.n	8106c42 <_vfiprintf_r+0x1a2>
 8106baa:	b1b0      	cbz	r0, 8106bda <_vfiprintf_r+0x13a>
 8106bac:	9207      	str	r2, [sp, #28]
 8106bae:	e014      	b.n	8106bda <_vfiprintf_r+0x13a>
 8106bb0:	eba0 0308 	sub.w	r3, r0, r8
 8106bb4:	fa09 f303 	lsl.w	r3, r9, r3
 8106bb8:	4313      	orrs	r3, r2
 8106bba:	9304      	str	r3, [sp, #16]
 8106bbc:	46a2      	mov	sl, r4
 8106bbe:	e7d2      	b.n	8106b66 <_vfiprintf_r+0xc6>
 8106bc0:	9b03      	ldr	r3, [sp, #12]
 8106bc2:	1d19      	adds	r1, r3, #4
 8106bc4:	681b      	ldr	r3, [r3, #0]
 8106bc6:	9103      	str	r1, [sp, #12]
 8106bc8:	2b00      	cmp	r3, #0
 8106bca:	bfbb      	ittet	lt
 8106bcc:	425b      	neglt	r3, r3
 8106bce:	f042 0202 	orrlt.w	r2, r2, #2
 8106bd2:	9307      	strge	r3, [sp, #28]
 8106bd4:	9307      	strlt	r3, [sp, #28]
 8106bd6:	bfb8      	it	lt
 8106bd8:	9204      	strlt	r2, [sp, #16]
 8106bda:	7823      	ldrb	r3, [r4, #0]
 8106bdc:	2b2e      	cmp	r3, #46	@ 0x2e
 8106bde:	d10a      	bne.n	8106bf6 <_vfiprintf_r+0x156>
 8106be0:	7863      	ldrb	r3, [r4, #1]
 8106be2:	2b2a      	cmp	r3, #42	@ 0x2a
 8106be4:	d132      	bne.n	8106c4c <_vfiprintf_r+0x1ac>
 8106be6:	9b03      	ldr	r3, [sp, #12]
 8106be8:	1d1a      	adds	r2, r3, #4
 8106bea:	681b      	ldr	r3, [r3, #0]
 8106bec:	9203      	str	r2, [sp, #12]
 8106bee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8106bf2:	3402      	adds	r4, #2
 8106bf4:	9305      	str	r3, [sp, #20]
 8106bf6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8106ccc <_vfiprintf_r+0x22c>
 8106bfa:	7821      	ldrb	r1, [r4, #0]
 8106bfc:	2203      	movs	r2, #3
 8106bfe:	4650      	mov	r0, sl
 8106c00:	f7f9 fb6e 	bl	81002e0 <memchr>
 8106c04:	b138      	cbz	r0, 8106c16 <_vfiprintf_r+0x176>
 8106c06:	9b04      	ldr	r3, [sp, #16]
 8106c08:	eba0 000a 	sub.w	r0, r0, sl
 8106c0c:	2240      	movs	r2, #64	@ 0x40
 8106c0e:	4082      	lsls	r2, r0
 8106c10:	4313      	orrs	r3, r2
 8106c12:	3401      	adds	r4, #1
 8106c14:	9304      	str	r3, [sp, #16]
 8106c16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8106c1a:	4829      	ldr	r0, [pc, #164]	@ (8106cc0 <_vfiprintf_r+0x220>)
 8106c1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8106c20:	2206      	movs	r2, #6
 8106c22:	f7f9 fb5d 	bl	81002e0 <memchr>
 8106c26:	2800      	cmp	r0, #0
 8106c28:	d03f      	beq.n	8106caa <_vfiprintf_r+0x20a>
 8106c2a:	4b26      	ldr	r3, [pc, #152]	@ (8106cc4 <_vfiprintf_r+0x224>)
 8106c2c:	bb1b      	cbnz	r3, 8106c76 <_vfiprintf_r+0x1d6>
 8106c2e:	9b03      	ldr	r3, [sp, #12]
 8106c30:	3307      	adds	r3, #7
 8106c32:	f023 0307 	bic.w	r3, r3, #7
 8106c36:	3308      	adds	r3, #8
 8106c38:	9303      	str	r3, [sp, #12]
 8106c3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8106c3c:	443b      	add	r3, r7
 8106c3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8106c40:	e76a      	b.n	8106b18 <_vfiprintf_r+0x78>
 8106c42:	fb0c 3202 	mla	r2, ip, r2, r3
 8106c46:	460c      	mov	r4, r1
 8106c48:	2001      	movs	r0, #1
 8106c4a:	e7a8      	b.n	8106b9e <_vfiprintf_r+0xfe>
 8106c4c:	2300      	movs	r3, #0
 8106c4e:	3401      	adds	r4, #1
 8106c50:	9305      	str	r3, [sp, #20]
 8106c52:	4619      	mov	r1, r3
 8106c54:	f04f 0c0a 	mov.w	ip, #10
 8106c58:	4620      	mov	r0, r4
 8106c5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8106c5e:	3a30      	subs	r2, #48	@ 0x30
 8106c60:	2a09      	cmp	r2, #9
 8106c62:	d903      	bls.n	8106c6c <_vfiprintf_r+0x1cc>
 8106c64:	2b00      	cmp	r3, #0
 8106c66:	d0c6      	beq.n	8106bf6 <_vfiprintf_r+0x156>
 8106c68:	9105      	str	r1, [sp, #20]
 8106c6a:	e7c4      	b.n	8106bf6 <_vfiprintf_r+0x156>
 8106c6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8106c70:	4604      	mov	r4, r0
 8106c72:	2301      	movs	r3, #1
 8106c74:	e7f0      	b.n	8106c58 <_vfiprintf_r+0x1b8>
 8106c76:	ab03      	add	r3, sp, #12
 8106c78:	9300      	str	r3, [sp, #0]
 8106c7a:	462a      	mov	r2, r5
 8106c7c:	4b12      	ldr	r3, [pc, #72]	@ (8106cc8 <_vfiprintf_r+0x228>)
 8106c7e:	a904      	add	r1, sp, #16
 8106c80:	4630      	mov	r0, r6
 8106c82:	f3af 8000 	nop.w
 8106c86:	4607      	mov	r7, r0
 8106c88:	1c78      	adds	r0, r7, #1
 8106c8a:	d1d6      	bne.n	8106c3a <_vfiprintf_r+0x19a>
 8106c8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8106c8e:	07d9      	lsls	r1, r3, #31
 8106c90:	d405      	bmi.n	8106c9e <_vfiprintf_r+0x1fe>
 8106c92:	89ab      	ldrh	r3, [r5, #12]
 8106c94:	059a      	lsls	r2, r3, #22
 8106c96:	d402      	bmi.n	8106c9e <_vfiprintf_r+0x1fe>
 8106c98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8106c9a:	f7ff fc85 	bl	81065a8 <__retarget_lock_release_recursive>
 8106c9e:	89ab      	ldrh	r3, [r5, #12]
 8106ca0:	065b      	lsls	r3, r3, #25
 8106ca2:	f53f af1f 	bmi.w	8106ae4 <_vfiprintf_r+0x44>
 8106ca6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8106ca8:	e71e      	b.n	8106ae8 <_vfiprintf_r+0x48>
 8106caa:	ab03      	add	r3, sp, #12
 8106cac:	9300      	str	r3, [sp, #0]
 8106cae:	462a      	mov	r2, r5
 8106cb0:	4b05      	ldr	r3, [pc, #20]	@ (8106cc8 <_vfiprintf_r+0x228>)
 8106cb2:	a904      	add	r1, sp, #16
 8106cb4:	4630      	mov	r0, r6
 8106cb6:	f000 f879 	bl	8106dac <_printf_i>
 8106cba:	e7e4      	b.n	8106c86 <_vfiprintf_r+0x1e6>
 8106cbc:	081074c8 	.word	0x081074c8
 8106cc0:	081074d2 	.word	0x081074d2
 8106cc4:	00000000 	.word	0x00000000
 8106cc8:	08106a7b 	.word	0x08106a7b
 8106ccc:	081074ce 	.word	0x081074ce

08106cd0 <_printf_common>:
 8106cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8106cd4:	4616      	mov	r6, r2
 8106cd6:	4698      	mov	r8, r3
 8106cd8:	688a      	ldr	r2, [r1, #8]
 8106cda:	690b      	ldr	r3, [r1, #16]
 8106cdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8106ce0:	4293      	cmp	r3, r2
 8106ce2:	bfb8      	it	lt
 8106ce4:	4613      	movlt	r3, r2
 8106ce6:	6033      	str	r3, [r6, #0]
 8106ce8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8106cec:	4607      	mov	r7, r0
 8106cee:	460c      	mov	r4, r1
 8106cf0:	b10a      	cbz	r2, 8106cf6 <_printf_common+0x26>
 8106cf2:	3301      	adds	r3, #1
 8106cf4:	6033      	str	r3, [r6, #0]
 8106cf6:	6823      	ldr	r3, [r4, #0]
 8106cf8:	0699      	lsls	r1, r3, #26
 8106cfa:	bf42      	ittt	mi
 8106cfc:	6833      	ldrmi	r3, [r6, #0]
 8106cfe:	3302      	addmi	r3, #2
 8106d00:	6033      	strmi	r3, [r6, #0]
 8106d02:	6825      	ldr	r5, [r4, #0]
 8106d04:	f015 0506 	ands.w	r5, r5, #6
 8106d08:	d106      	bne.n	8106d18 <_printf_common+0x48>
 8106d0a:	f104 0a19 	add.w	sl, r4, #25
 8106d0e:	68e3      	ldr	r3, [r4, #12]
 8106d10:	6832      	ldr	r2, [r6, #0]
 8106d12:	1a9b      	subs	r3, r3, r2
 8106d14:	42ab      	cmp	r3, r5
 8106d16:	dc26      	bgt.n	8106d66 <_printf_common+0x96>
 8106d18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8106d1c:	6822      	ldr	r2, [r4, #0]
 8106d1e:	3b00      	subs	r3, #0
 8106d20:	bf18      	it	ne
 8106d22:	2301      	movne	r3, #1
 8106d24:	0692      	lsls	r2, r2, #26
 8106d26:	d42b      	bmi.n	8106d80 <_printf_common+0xb0>
 8106d28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8106d2c:	4641      	mov	r1, r8
 8106d2e:	4638      	mov	r0, r7
 8106d30:	47c8      	blx	r9
 8106d32:	3001      	adds	r0, #1
 8106d34:	d01e      	beq.n	8106d74 <_printf_common+0xa4>
 8106d36:	6823      	ldr	r3, [r4, #0]
 8106d38:	6922      	ldr	r2, [r4, #16]
 8106d3a:	f003 0306 	and.w	r3, r3, #6
 8106d3e:	2b04      	cmp	r3, #4
 8106d40:	bf02      	ittt	eq
 8106d42:	68e5      	ldreq	r5, [r4, #12]
 8106d44:	6833      	ldreq	r3, [r6, #0]
 8106d46:	1aed      	subeq	r5, r5, r3
 8106d48:	68a3      	ldr	r3, [r4, #8]
 8106d4a:	bf0c      	ite	eq
 8106d4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8106d50:	2500      	movne	r5, #0
 8106d52:	4293      	cmp	r3, r2
 8106d54:	bfc4      	itt	gt
 8106d56:	1a9b      	subgt	r3, r3, r2
 8106d58:	18ed      	addgt	r5, r5, r3
 8106d5a:	2600      	movs	r6, #0
 8106d5c:	341a      	adds	r4, #26
 8106d5e:	42b5      	cmp	r5, r6
 8106d60:	d11a      	bne.n	8106d98 <_printf_common+0xc8>
 8106d62:	2000      	movs	r0, #0
 8106d64:	e008      	b.n	8106d78 <_printf_common+0xa8>
 8106d66:	2301      	movs	r3, #1
 8106d68:	4652      	mov	r2, sl
 8106d6a:	4641      	mov	r1, r8
 8106d6c:	4638      	mov	r0, r7
 8106d6e:	47c8      	blx	r9
 8106d70:	3001      	adds	r0, #1
 8106d72:	d103      	bne.n	8106d7c <_printf_common+0xac>
 8106d74:	f04f 30ff 	mov.w	r0, #4294967295
 8106d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8106d7c:	3501      	adds	r5, #1
 8106d7e:	e7c6      	b.n	8106d0e <_printf_common+0x3e>
 8106d80:	18e1      	adds	r1, r4, r3
 8106d82:	1c5a      	adds	r2, r3, #1
 8106d84:	2030      	movs	r0, #48	@ 0x30
 8106d86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8106d8a:	4422      	add	r2, r4
 8106d8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8106d90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8106d94:	3302      	adds	r3, #2
 8106d96:	e7c7      	b.n	8106d28 <_printf_common+0x58>
 8106d98:	2301      	movs	r3, #1
 8106d9a:	4622      	mov	r2, r4
 8106d9c:	4641      	mov	r1, r8
 8106d9e:	4638      	mov	r0, r7
 8106da0:	47c8      	blx	r9
 8106da2:	3001      	adds	r0, #1
 8106da4:	d0e6      	beq.n	8106d74 <_printf_common+0xa4>
 8106da6:	3601      	adds	r6, #1
 8106da8:	e7d9      	b.n	8106d5e <_printf_common+0x8e>
	...

08106dac <_printf_i>:
 8106dac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8106db0:	7e0f      	ldrb	r7, [r1, #24]
 8106db2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8106db4:	2f78      	cmp	r7, #120	@ 0x78
 8106db6:	4691      	mov	r9, r2
 8106db8:	4680      	mov	r8, r0
 8106dba:	460c      	mov	r4, r1
 8106dbc:	469a      	mov	sl, r3
 8106dbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8106dc2:	d807      	bhi.n	8106dd4 <_printf_i+0x28>
 8106dc4:	2f62      	cmp	r7, #98	@ 0x62
 8106dc6:	d80a      	bhi.n	8106dde <_printf_i+0x32>
 8106dc8:	2f00      	cmp	r7, #0
 8106dca:	f000 80d2 	beq.w	8106f72 <_printf_i+0x1c6>
 8106dce:	2f58      	cmp	r7, #88	@ 0x58
 8106dd0:	f000 80b9 	beq.w	8106f46 <_printf_i+0x19a>
 8106dd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8106dd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8106ddc:	e03a      	b.n	8106e54 <_printf_i+0xa8>
 8106dde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8106de2:	2b15      	cmp	r3, #21
 8106de4:	d8f6      	bhi.n	8106dd4 <_printf_i+0x28>
 8106de6:	a101      	add	r1, pc, #4	@ (adr r1, 8106dec <_printf_i+0x40>)
 8106de8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8106dec:	08106e45 	.word	0x08106e45
 8106df0:	08106e59 	.word	0x08106e59
 8106df4:	08106dd5 	.word	0x08106dd5
 8106df8:	08106dd5 	.word	0x08106dd5
 8106dfc:	08106dd5 	.word	0x08106dd5
 8106e00:	08106dd5 	.word	0x08106dd5
 8106e04:	08106e59 	.word	0x08106e59
 8106e08:	08106dd5 	.word	0x08106dd5
 8106e0c:	08106dd5 	.word	0x08106dd5
 8106e10:	08106dd5 	.word	0x08106dd5
 8106e14:	08106dd5 	.word	0x08106dd5
 8106e18:	08106f59 	.word	0x08106f59
 8106e1c:	08106e83 	.word	0x08106e83
 8106e20:	08106f13 	.word	0x08106f13
 8106e24:	08106dd5 	.word	0x08106dd5
 8106e28:	08106dd5 	.word	0x08106dd5
 8106e2c:	08106f7b 	.word	0x08106f7b
 8106e30:	08106dd5 	.word	0x08106dd5
 8106e34:	08106e83 	.word	0x08106e83
 8106e38:	08106dd5 	.word	0x08106dd5
 8106e3c:	08106dd5 	.word	0x08106dd5
 8106e40:	08106f1b 	.word	0x08106f1b
 8106e44:	6833      	ldr	r3, [r6, #0]
 8106e46:	1d1a      	adds	r2, r3, #4
 8106e48:	681b      	ldr	r3, [r3, #0]
 8106e4a:	6032      	str	r2, [r6, #0]
 8106e4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8106e50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8106e54:	2301      	movs	r3, #1
 8106e56:	e09d      	b.n	8106f94 <_printf_i+0x1e8>
 8106e58:	6833      	ldr	r3, [r6, #0]
 8106e5a:	6820      	ldr	r0, [r4, #0]
 8106e5c:	1d19      	adds	r1, r3, #4
 8106e5e:	6031      	str	r1, [r6, #0]
 8106e60:	0606      	lsls	r6, r0, #24
 8106e62:	d501      	bpl.n	8106e68 <_printf_i+0xbc>
 8106e64:	681d      	ldr	r5, [r3, #0]
 8106e66:	e003      	b.n	8106e70 <_printf_i+0xc4>
 8106e68:	0645      	lsls	r5, r0, #25
 8106e6a:	d5fb      	bpl.n	8106e64 <_printf_i+0xb8>
 8106e6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8106e70:	2d00      	cmp	r5, #0
 8106e72:	da03      	bge.n	8106e7c <_printf_i+0xd0>
 8106e74:	232d      	movs	r3, #45	@ 0x2d
 8106e76:	426d      	negs	r5, r5
 8106e78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8106e7c:	4859      	ldr	r0, [pc, #356]	@ (8106fe4 <_printf_i+0x238>)
 8106e7e:	230a      	movs	r3, #10
 8106e80:	e011      	b.n	8106ea6 <_printf_i+0xfa>
 8106e82:	6821      	ldr	r1, [r4, #0]
 8106e84:	6833      	ldr	r3, [r6, #0]
 8106e86:	0608      	lsls	r0, r1, #24
 8106e88:	f853 5b04 	ldr.w	r5, [r3], #4
 8106e8c:	d402      	bmi.n	8106e94 <_printf_i+0xe8>
 8106e8e:	0649      	lsls	r1, r1, #25
 8106e90:	bf48      	it	mi
 8106e92:	b2ad      	uxthmi	r5, r5
 8106e94:	2f6f      	cmp	r7, #111	@ 0x6f
 8106e96:	4853      	ldr	r0, [pc, #332]	@ (8106fe4 <_printf_i+0x238>)
 8106e98:	6033      	str	r3, [r6, #0]
 8106e9a:	bf14      	ite	ne
 8106e9c:	230a      	movne	r3, #10
 8106e9e:	2308      	moveq	r3, #8
 8106ea0:	2100      	movs	r1, #0
 8106ea2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8106ea6:	6866      	ldr	r6, [r4, #4]
 8106ea8:	60a6      	str	r6, [r4, #8]
 8106eaa:	2e00      	cmp	r6, #0
 8106eac:	bfa2      	ittt	ge
 8106eae:	6821      	ldrge	r1, [r4, #0]
 8106eb0:	f021 0104 	bicge.w	r1, r1, #4
 8106eb4:	6021      	strge	r1, [r4, #0]
 8106eb6:	b90d      	cbnz	r5, 8106ebc <_printf_i+0x110>
 8106eb8:	2e00      	cmp	r6, #0
 8106eba:	d04b      	beq.n	8106f54 <_printf_i+0x1a8>
 8106ebc:	4616      	mov	r6, r2
 8106ebe:	fbb5 f1f3 	udiv	r1, r5, r3
 8106ec2:	fb03 5711 	mls	r7, r3, r1, r5
 8106ec6:	5dc7      	ldrb	r7, [r0, r7]
 8106ec8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8106ecc:	462f      	mov	r7, r5
 8106ece:	42bb      	cmp	r3, r7
 8106ed0:	460d      	mov	r5, r1
 8106ed2:	d9f4      	bls.n	8106ebe <_printf_i+0x112>
 8106ed4:	2b08      	cmp	r3, #8
 8106ed6:	d10b      	bne.n	8106ef0 <_printf_i+0x144>
 8106ed8:	6823      	ldr	r3, [r4, #0]
 8106eda:	07df      	lsls	r7, r3, #31
 8106edc:	d508      	bpl.n	8106ef0 <_printf_i+0x144>
 8106ede:	6923      	ldr	r3, [r4, #16]
 8106ee0:	6861      	ldr	r1, [r4, #4]
 8106ee2:	4299      	cmp	r1, r3
 8106ee4:	bfde      	ittt	le
 8106ee6:	2330      	movle	r3, #48	@ 0x30
 8106ee8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8106eec:	f106 36ff 	addle.w	r6, r6, #4294967295
 8106ef0:	1b92      	subs	r2, r2, r6
 8106ef2:	6122      	str	r2, [r4, #16]
 8106ef4:	f8cd a000 	str.w	sl, [sp]
 8106ef8:	464b      	mov	r3, r9
 8106efa:	aa03      	add	r2, sp, #12
 8106efc:	4621      	mov	r1, r4
 8106efe:	4640      	mov	r0, r8
 8106f00:	f7ff fee6 	bl	8106cd0 <_printf_common>
 8106f04:	3001      	adds	r0, #1
 8106f06:	d14a      	bne.n	8106f9e <_printf_i+0x1f2>
 8106f08:	f04f 30ff 	mov.w	r0, #4294967295
 8106f0c:	b004      	add	sp, #16
 8106f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8106f12:	6823      	ldr	r3, [r4, #0]
 8106f14:	f043 0320 	orr.w	r3, r3, #32
 8106f18:	6023      	str	r3, [r4, #0]
 8106f1a:	4833      	ldr	r0, [pc, #204]	@ (8106fe8 <_printf_i+0x23c>)
 8106f1c:	2778      	movs	r7, #120	@ 0x78
 8106f1e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8106f22:	6823      	ldr	r3, [r4, #0]
 8106f24:	6831      	ldr	r1, [r6, #0]
 8106f26:	061f      	lsls	r7, r3, #24
 8106f28:	f851 5b04 	ldr.w	r5, [r1], #4
 8106f2c:	d402      	bmi.n	8106f34 <_printf_i+0x188>
 8106f2e:	065f      	lsls	r7, r3, #25
 8106f30:	bf48      	it	mi
 8106f32:	b2ad      	uxthmi	r5, r5
 8106f34:	6031      	str	r1, [r6, #0]
 8106f36:	07d9      	lsls	r1, r3, #31
 8106f38:	bf44      	itt	mi
 8106f3a:	f043 0320 	orrmi.w	r3, r3, #32
 8106f3e:	6023      	strmi	r3, [r4, #0]
 8106f40:	b11d      	cbz	r5, 8106f4a <_printf_i+0x19e>
 8106f42:	2310      	movs	r3, #16
 8106f44:	e7ac      	b.n	8106ea0 <_printf_i+0xf4>
 8106f46:	4827      	ldr	r0, [pc, #156]	@ (8106fe4 <_printf_i+0x238>)
 8106f48:	e7e9      	b.n	8106f1e <_printf_i+0x172>
 8106f4a:	6823      	ldr	r3, [r4, #0]
 8106f4c:	f023 0320 	bic.w	r3, r3, #32
 8106f50:	6023      	str	r3, [r4, #0]
 8106f52:	e7f6      	b.n	8106f42 <_printf_i+0x196>
 8106f54:	4616      	mov	r6, r2
 8106f56:	e7bd      	b.n	8106ed4 <_printf_i+0x128>
 8106f58:	6833      	ldr	r3, [r6, #0]
 8106f5a:	6825      	ldr	r5, [r4, #0]
 8106f5c:	6961      	ldr	r1, [r4, #20]
 8106f5e:	1d18      	adds	r0, r3, #4
 8106f60:	6030      	str	r0, [r6, #0]
 8106f62:	062e      	lsls	r6, r5, #24
 8106f64:	681b      	ldr	r3, [r3, #0]
 8106f66:	d501      	bpl.n	8106f6c <_printf_i+0x1c0>
 8106f68:	6019      	str	r1, [r3, #0]
 8106f6a:	e002      	b.n	8106f72 <_printf_i+0x1c6>
 8106f6c:	0668      	lsls	r0, r5, #25
 8106f6e:	d5fb      	bpl.n	8106f68 <_printf_i+0x1bc>
 8106f70:	8019      	strh	r1, [r3, #0]
 8106f72:	2300      	movs	r3, #0
 8106f74:	6123      	str	r3, [r4, #16]
 8106f76:	4616      	mov	r6, r2
 8106f78:	e7bc      	b.n	8106ef4 <_printf_i+0x148>
 8106f7a:	6833      	ldr	r3, [r6, #0]
 8106f7c:	1d1a      	adds	r2, r3, #4
 8106f7e:	6032      	str	r2, [r6, #0]
 8106f80:	681e      	ldr	r6, [r3, #0]
 8106f82:	6862      	ldr	r2, [r4, #4]
 8106f84:	2100      	movs	r1, #0
 8106f86:	4630      	mov	r0, r6
 8106f88:	f7f9 f9aa 	bl	81002e0 <memchr>
 8106f8c:	b108      	cbz	r0, 8106f92 <_printf_i+0x1e6>
 8106f8e:	1b80      	subs	r0, r0, r6
 8106f90:	6060      	str	r0, [r4, #4]
 8106f92:	6863      	ldr	r3, [r4, #4]
 8106f94:	6123      	str	r3, [r4, #16]
 8106f96:	2300      	movs	r3, #0
 8106f98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8106f9c:	e7aa      	b.n	8106ef4 <_printf_i+0x148>
 8106f9e:	6923      	ldr	r3, [r4, #16]
 8106fa0:	4632      	mov	r2, r6
 8106fa2:	4649      	mov	r1, r9
 8106fa4:	4640      	mov	r0, r8
 8106fa6:	47d0      	blx	sl
 8106fa8:	3001      	adds	r0, #1
 8106faa:	d0ad      	beq.n	8106f08 <_printf_i+0x15c>
 8106fac:	6823      	ldr	r3, [r4, #0]
 8106fae:	079b      	lsls	r3, r3, #30
 8106fb0:	d413      	bmi.n	8106fda <_printf_i+0x22e>
 8106fb2:	68e0      	ldr	r0, [r4, #12]
 8106fb4:	9b03      	ldr	r3, [sp, #12]
 8106fb6:	4298      	cmp	r0, r3
 8106fb8:	bfb8      	it	lt
 8106fba:	4618      	movlt	r0, r3
 8106fbc:	e7a6      	b.n	8106f0c <_printf_i+0x160>
 8106fbe:	2301      	movs	r3, #1
 8106fc0:	4632      	mov	r2, r6
 8106fc2:	4649      	mov	r1, r9
 8106fc4:	4640      	mov	r0, r8
 8106fc6:	47d0      	blx	sl
 8106fc8:	3001      	adds	r0, #1
 8106fca:	d09d      	beq.n	8106f08 <_printf_i+0x15c>
 8106fcc:	3501      	adds	r5, #1
 8106fce:	68e3      	ldr	r3, [r4, #12]
 8106fd0:	9903      	ldr	r1, [sp, #12]
 8106fd2:	1a5b      	subs	r3, r3, r1
 8106fd4:	42ab      	cmp	r3, r5
 8106fd6:	dcf2      	bgt.n	8106fbe <_printf_i+0x212>
 8106fd8:	e7eb      	b.n	8106fb2 <_printf_i+0x206>
 8106fda:	2500      	movs	r5, #0
 8106fdc:	f104 0619 	add.w	r6, r4, #25
 8106fe0:	e7f5      	b.n	8106fce <_printf_i+0x222>
 8106fe2:	bf00      	nop
 8106fe4:	081074d9 	.word	0x081074d9
 8106fe8:	081074ea 	.word	0x081074ea

08106fec <__sflush_r>:
 8106fec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8106ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8106ff4:	0716      	lsls	r6, r2, #28
 8106ff6:	4605      	mov	r5, r0
 8106ff8:	460c      	mov	r4, r1
 8106ffa:	d454      	bmi.n	81070a6 <__sflush_r+0xba>
 8106ffc:	684b      	ldr	r3, [r1, #4]
 8106ffe:	2b00      	cmp	r3, #0
 8107000:	dc02      	bgt.n	8107008 <__sflush_r+0x1c>
 8107002:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8107004:	2b00      	cmp	r3, #0
 8107006:	dd48      	ble.n	810709a <__sflush_r+0xae>
 8107008:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810700a:	2e00      	cmp	r6, #0
 810700c:	d045      	beq.n	810709a <__sflush_r+0xae>
 810700e:	2300      	movs	r3, #0
 8107010:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8107014:	682f      	ldr	r7, [r5, #0]
 8107016:	6a21      	ldr	r1, [r4, #32]
 8107018:	602b      	str	r3, [r5, #0]
 810701a:	d030      	beq.n	810707e <__sflush_r+0x92>
 810701c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 810701e:	89a3      	ldrh	r3, [r4, #12]
 8107020:	0759      	lsls	r1, r3, #29
 8107022:	d505      	bpl.n	8107030 <__sflush_r+0x44>
 8107024:	6863      	ldr	r3, [r4, #4]
 8107026:	1ad2      	subs	r2, r2, r3
 8107028:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 810702a:	b10b      	cbz	r3, 8107030 <__sflush_r+0x44>
 810702c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 810702e:	1ad2      	subs	r2, r2, r3
 8107030:	2300      	movs	r3, #0
 8107032:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8107034:	6a21      	ldr	r1, [r4, #32]
 8107036:	4628      	mov	r0, r5
 8107038:	47b0      	blx	r6
 810703a:	1c43      	adds	r3, r0, #1
 810703c:	89a3      	ldrh	r3, [r4, #12]
 810703e:	d106      	bne.n	810704e <__sflush_r+0x62>
 8107040:	6829      	ldr	r1, [r5, #0]
 8107042:	291d      	cmp	r1, #29
 8107044:	d82b      	bhi.n	810709e <__sflush_r+0xb2>
 8107046:	4a2a      	ldr	r2, [pc, #168]	@ (81070f0 <__sflush_r+0x104>)
 8107048:	410a      	asrs	r2, r1
 810704a:	07d6      	lsls	r6, r2, #31
 810704c:	d427      	bmi.n	810709e <__sflush_r+0xb2>
 810704e:	2200      	movs	r2, #0
 8107050:	6062      	str	r2, [r4, #4]
 8107052:	04d9      	lsls	r1, r3, #19
 8107054:	6922      	ldr	r2, [r4, #16]
 8107056:	6022      	str	r2, [r4, #0]
 8107058:	d504      	bpl.n	8107064 <__sflush_r+0x78>
 810705a:	1c42      	adds	r2, r0, #1
 810705c:	d101      	bne.n	8107062 <__sflush_r+0x76>
 810705e:	682b      	ldr	r3, [r5, #0]
 8107060:	b903      	cbnz	r3, 8107064 <__sflush_r+0x78>
 8107062:	6560      	str	r0, [r4, #84]	@ 0x54
 8107064:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8107066:	602f      	str	r7, [r5, #0]
 8107068:	b1b9      	cbz	r1, 810709a <__sflush_r+0xae>
 810706a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810706e:	4299      	cmp	r1, r3
 8107070:	d002      	beq.n	8107078 <__sflush_r+0x8c>
 8107072:	4628      	mov	r0, r5
 8107074:	f7ff fa9a 	bl	81065ac <_free_r>
 8107078:	2300      	movs	r3, #0
 810707a:	6363      	str	r3, [r4, #52]	@ 0x34
 810707c:	e00d      	b.n	810709a <__sflush_r+0xae>
 810707e:	2301      	movs	r3, #1
 8107080:	4628      	mov	r0, r5
 8107082:	47b0      	blx	r6
 8107084:	4602      	mov	r2, r0
 8107086:	1c50      	adds	r0, r2, #1
 8107088:	d1c9      	bne.n	810701e <__sflush_r+0x32>
 810708a:	682b      	ldr	r3, [r5, #0]
 810708c:	2b00      	cmp	r3, #0
 810708e:	d0c6      	beq.n	810701e <__sflush_r+0x32>
 8107090:	2b1d      	cmp	r3, #29
 8107092:	d001      	beq.n	8107098 <__sflush_r+0xac>
 8107094:	2b16      	cmp	r3, #22
 8107096:	d11e      	bne.n	81070d6 <__sflush_r+0xea>
 8107098:	602f      	str	r7, [r5, #0]
 810709a:	2000      	movs	r0, #0
 810709c:	e022      	b.n	81070e4 <__sflush_r+0xf8>
 810709e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81070a2:	b21b      	sxth	r3, r3
 81070a4:	e01b      	b.n	81070de <__sflush_r+0xf2>
 81070a6:	690f      	ldr	r7, [r1, #16]
 81070a8:	2f00      	cmp	r7, #0
 81070aa:	d0f6      	beq.n	810709a <__sflush_r+0xae>
 81070ac:	0793      	lsls	r3, r2, #30
 81070ae:	680e      	ldr	r6, [r1, #0]
 81070b0:	bf08      	it	eq
 81070b2:	694b      	ldreq	r3, [r1, #20]
 81070b4:	600f      	str	r7, [r1, #0]
 81070b6:	bf18      	it	ne
 81070b8:	2300      	movne	r3, #0
 81070ba:	eba6 0807 	sub.w	r8, r6, r7
 81070be:	608b      	str	r3, [r1, #8]
 81070c0:	f1b8 0f00 	cmp.w	r8, #0
 81070c4:	dde9      	ble.n	810709a <__sflush_r+0xae>
 81070c6:	6a21      	ldr	r1, [r4, #32]
 81070c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 81070ca:	4643      	mov	r3, r8
 81070cc:	463a      	mov	r2, r7
 81070ce:	4628      	mov	r0, r5
 81070d0:	47b0      	blx	r6
 81070d2:	2800      	cmp	r0, #0
 81070d4:	dc08      	bgt.n	81070e8 <__sflush_r+0xfc>
 81070d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81070da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81070de:	81a3      	strh	r3, [r4, #12]
 81070e0:	f04f 30ff 	mov.w	r0, #4294967295
 81070e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81070e8:	4407      	add	r7, r0
 81070ea:	eba8 0800 	sub.w	r8, r8, r0
 81070ee:	e7e7      	b.n	81070c0 <__sflush_r+0xd4>
 81070f0:	dfbffffe 	.word	0xdfbffffe

081070f4 <_fflush_r>:
 81070f4:	b538      	push	{r3, r4, r5, lr}
 81070f6:	690b      	ldr	r3, [r1, #16]
 81070f8:	4605      	mov	r5, r0
 81070fa:	460c      	mov	r4, r1
 81070fc:	b913      	cbnz	r3, 8107104 <_fflush_r+0x10>
 81070fe:	2500      	movs	r5, #0
 8107100:	4628      	mov	r0, r5
 8107102:	bd38      	pop	{r3, r4, r5, pc}
 8107104:	b118      	cbz	r0, 810710e <_fflush_r+0x1a>
 8107106:	6a03      	ldr	r3, [r0, #32]
 8107108:	b90b      	cbnz	r3, 810710e <_fflush_r+0x1a>
 810710a:	f7ff f927 	bl	810635c <__sinit>
 810710e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8107112:	2b00      	cmp	r3, #0
 8107114:	d0f3      	beq.n	81070fe <_fflush_r+0xa>
 8107116:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8107118:	07d0      	lsls	r0, r2, #31
 810711a:	d404      	bmi.n	8107126 <_fflush_r+0x32>
 810711c:	0599      	lsls	r1, r3, #22
 810711e:	d402      	bmi.n	8107126 <_fflush_r+0x32>
 8107120:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8107122:	f7ff fa40 	bl	81065a6 <__retarget_lock_acquire_recursive>
 8107126:	4628      	mov	r0, r5
 8107128:	4621      	mov	r1, r4
 810712a:	f7ff ff5f 	bl	8106fec <__sflush_r>
 810712e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8107130:	07da      	lsls	r2, r3, #31
 8107132:	4605      	mov	r5, r0
 8107134:	d4e4      	bmi.n	8107100 <_fflush_r+0xc>
 8107136:	89a3      	ldrh	r3, [r4, #12]
 8107138:	059b      	lsls	r3, r3, #22
 810713a:	d4e1      	bmi.n	8107100 <_fflush_r+0xc>
 810713c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810713e:	f7ff fa33 	bl	81065a8 <__retarget_lock_release_recursive>
 8107142:	e7dd      	b.n	8107100 <_fflush_r+0xc>

08107144 <__swbuf_r>:
 8107144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107146:	460e      	mov	r6, r1
 8107148:	4614      	mov	r4, r2
 810714a:	4605      	mov	r5, r0
 810714c:	b118      	cbz	r0, 8107156 <__swbuf_r+0x12>
 810714e:	6a03      	ldr	r3, [r0, #32]
 8107150:	b90b      	cbnz	r3, 8107156 <__swbuf_r+0x12>
 8107152:	f7ff f903 	bl	810635c <__sinit>
 8107156:	69a3      	ldr	r3, [r4, #24]
 8107158:	60a3      	str	r3, [r4, #8]
 810715a:	89a3      	ldrh	r3, [r4, #12]
 810715c:	071a      	lsls	r2, r3, #28
 810715e:	d501      	bpl.n	8107164 <__swbuf_r+0x20>
 8107160:	6923      	ldr	r3, [r4, #16]
 8107162:	b943      	cbnz	r3, 8107176 <__swbuf_r+0x32>
 8107164:	4621      	mov	r1, r4
 8107166:	4628      	mov	r0, r5
 8107168:	f000 f82a 	bl	81071c0 <__swsetup_r>
 810716c:	b118      	cbz	r0, 8107176 <__swbuf_r+0x32>
 810716e:	f04f 37ff 	mov.w	r7, #4294967295
 8107172:	4638      	mov	r0, r7
 8107174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8107176:	6823      	ldr	r3, [r4, #0]
 8107178:	6922      	ldr	r2, [r4, #16]
 810717a:	1a98      	subs	r0, r3, r2
 810717c:	6963      	ldr	r3, [r4, #20]
 810717e:	b2f6      	uxtb	r6, r6
 8107180:	4283      	cmp	r3, r0
 8107182:	4637      	mov	r7, r6
 8107184:	dc05      	bgt.n	8107192 <__swbuf_r+0x4e>
 8107186:	4621      	mov	r1, r4
 8107188:	4628      	mov	r0, r5
 810718a:	f7ff ffb3 	bl	81070f4 <_fflush_r>
 810718e:	2800      	cmp	r0, #0
 8107190:	d1ed      	bne.n	810716e <__swbuf_r+0x2a>
 8107192:	68a3      	ldr	r3, [r4, #8]
 8107194:	3b01      	subs	r3, #1
 8107196:	60a3      	str	r3, [r4, #8]
 8107198:	6823      	ldr	r3, [r4, #0]
 810719a:	1c5a      	adds	r2, r3, #1
 810719c:	6022      	str	r2, [r4, #0]
 810719e:	701e      	strb	r6, [r3, #0]
 81071a0:	6962      	ldr	r2, [r4, #20]
 81071a2:	1c43      	adds	r3, r0, #1
 81071a4:	429a      	cmp	r2, r3
 81071a6:	d004      	beq.n	81071b2 <__swbuf_r+0x6e>
 81071a8:	89a3      	ldrh	r3, [r4, #12]
 81071aa:	07db      	lsls	r3, r3, #31
 81071ac:	d5e1      	bpl.n	8107172 <__swbuf_r+0x2e>
 81071ae:	2e0a      	cmp	r6, #10
 81071b0:	d1df      	bne.n	8107172 <__swbuf_r+0x2e>
 81071b2:	4621      	mov	r1, r4
 81071b4:	4628      	mov	r0, r5
 81071b6:	f7ff ff9d 	bl	81070f4 <_fflush_r>
 81071ba:	2800      	cmp	r0, #0
 81071bc:	d0d9      	beq.n	8107172 <__swbuf_r+0x2e>
 81071be:	e7d6      	b.n	810716e <__swbuf_r+0x2a>

081071c0 <__swsetup_r>:
 81071c0:	b538      	push	{r3, r4, r5, lr}
 81071c2:	4b29      	ldr	r3, [pc, #164]	@ (8107268 <__swsetup_r+0xa8>)
 81071c4:	4605      	mov	r5, r0
 81071c6:	6818      	ldr	r0, [r3, #0]
 81071c8:	460c      	mov	r4, r1
 81071ca:	b118      	cbz	r0, 81071d4 <__swsetup_r+0x14>
 81071cc:	6a03      	ldr	r3, [r0, #32]
 81071ce:	b90b      	cbnz	r3, 81071d4 <__swsetup_r+0x14>
 81071d0:	f7ff f8c4 	bl	810635c <__sinit>
 81071d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81071d8:	0719      	lsls	r1, r3, #28
 81071da:	d422      	bmi.n	8107222 <__swsetup_r+0x62>
 81071dc:	06da      	lsls	r2, r3, #27
 81071de:	d407      	bmi.n	81071f0 <__swsetup_r+0x30>
 81071e0:	2209      	movs	r2, #9
 81071e2:	602a      	str	r2, [r5, #0]
 81071e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81071e8:	81a3      	strh	r3, [r4, #12]
 81071ea:	f04f 30ff 	mov.w	r0, #4294967295
 81071ee:	e033      	b.n	8107258 <__swsetup_r+0x98>
 81071f0:	0758      	lsls	r0, r3, #29
 81071f2:	d512      	bpl.n	810721a <__swsetup_r+0x5a>
 81071f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 81071f6:	b141      	cbz	r1, 810720a <__swsetup_r+0x4a>
 81071f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 81071fc:	4299      	cmp	r1, r3
 81071fe:	d002      	beq.n	8107206 <__swsetup_r+0x46>
 8107200:	4628      	mov	r0, r5
 8107202:	f7ff f9d3 	bl	81065ac <_free_r>
 8107206:	2300      	movs	r3, #0
 8107208:	6363      	str	r3, [r4, #52]	@ 0x34
 810720a:	89a3      	ldrh	r3, [r4, #12]
 810720c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8107210:	81a3      	strh	r3, [r4, #12]
 8107212:	2300      	movs	r3, #0
 8107214:	6063      	str	r3, [r4, #4]
 8107216:	6923      	ldr	r3, [r4, #16]
 8107218:	6023      	str	r3, [r4, #0]
 810721a:	89a3      	ldrh	r3, [r4, #12]
 810721c:	f043 0308 	orr.w	r3, r3, #8
 8107220:	81a3      	strh	r3, [r4, #12]
 8107222:	6923      	ldr	r3, [r4, #16]
 8107224:	b94b      	cbnz	r3, 810723a <__swsetup_r+0x7a>
 8107226:	89a3      	ldrh	r3, [r4, #12]
 8107228:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 810722c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8107230:	d003      	beq.n	810723a <__swsetup_r+0x7a>
 8107232:	4621      	mov	r1, r4
 8107234:	4628      	mov	r0, r5
 8107236:	f000 f8a5 	bl	8107384 <__smakebuf_r>
 810723a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810723e:	f013 0201 	ands.w	r2, r3, #1
 8107242:	d00a      	beq.n	810725a <__swsetup_r+0x9a>
 8107244:	2200      	movs	r2, #0
 8107246:	60a2      	str	r2, [r4, #8]
 8107248:	6962      	ldr	r2, [r4, #20]
 810724a:	4252      	negs	r2, r2
 810724c:	61a2      	str	r2, [r4, #24]
 810724e:	6922      	ldr	r2, [r4, #16]
 8107250:	b942      	cbnz	r2, 8107264 <__swsetup_r+0xa4>
 8107252:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8107256:	d1c5      	bne.n	81071e4 <__swsetup_r+0x24>
 8107258:	bd38      	pop	{r3, r4, r5, pc}
 810725a:	0799      	lsls	r1, r3, #30
 810725c:	bf58      	it	pl
 810725e:	6962      	ldrpl	r2, [r4, #20]
 8107260:	60a2      	str	r2, [r4, #8]
 8107262:	e7f4      	b.n	810724e <__swsetup_r+0x8e>
 8107264:	2000      	movs	r0, #0
 8107266:	e7f7      	b.n	8107258 <__swsetup_r+0x98>
 8107268:	1000002c 	.word	0x1000002c

0810726c <memmove>:
 810726c:	4288      	cmp	r0, r1
 810726e:	b510      	push	{r4, lr}
 8107270:	eb01 0402 	add.w	r4, r1, r2
 8107274:	d902      	bls.n	810727c <memmove+0x10>
 8107276:	4284      	cmp	r4, r0
 8107278:	4623      	mov	r3, r4
 810727a:	d807      	bhi.n	810728c <memmove+0x20>
 810727c:	1e43      	subs	r3, r0, #1
 810727e:	42a1      	cmp	r1, r4
 8107280:	d008      	beq.n	8107294 <memmove+0x28>
 8107282:	f811 2b01 	ldrb.w	r2, [r1], #1
 8107286:	f803 2f01 	strb.w	r2, [r3, #1]!
 810728a:	e7f8      	b.n	810727e <memmove+0x12>
 810728c:	4402      	add	r2, r0
 810728e:	4601      	mov	r1, r0
 8107290:	428a      	cmp	r2, r1
 8107292:	d100      	bne.n	8107296 <memmove+0x2a>
 8107294:	bd10      	pop	{r4, pc}
 8107296:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810729a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810729e:	e7f7      	b.n	8107290 <memmove+0x24>

081072a0 <_sbrk_r>:
 81072a0:	b538      	push	{r3, r4, r5, lr}
 81072a2:	4d06      	ldr	r5, [pc, #24]	@ (81072bc <_sbrk_r+0x1c>)
 81072a4:	2300      	movs	r3, #0
 81072a6:	4604      	mov	r4, r0
 81072a8:	4608      	mov	r0, r1
 81072aa:	602b      	str	r3, [r5, #0]
 81072ac:	f7fa f888 	bl	81013c0 <_sbrk>
 81072b0:	1c43      	adds	r3, r0, #1
 81072b2:	d102      	bne.n	81072ba <_sbrk_r+0x1a>
 81072b4:	682b      	ldr	r3, [r5, #0]
 81072b6:	b103      	cbz	r3, 81072ba <_sbrk_r+0x1a>
 81072b8:	6023      	str	r3, [r4, #0]
 81072ba:	bd38      	pop	{r3, r4, r5, pc}
 81072bc:	100003b0 	.word	0x100003b0

081072c0 <memcpy>:
 81072c0:	440a      	add	r2, r1
 81072c2:	4291      	cmp	r1, r2
 81072c4:	f100 33ff 	add.w	r3, r0, #4294967295
 81072c8:	d100      	bne.n	81072cc <memcpy+0xc>
 81072ca:	4770      	bx	lr
 81072cc:	b510      	push	{r4, lr}
 81072ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 81072d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 81072d6:	4291      	cmp	r1, r2
 81072d8:	d1f9      	bne.n	81072ce <memcpy+0xe>
 81072da:	bd10      	pop	{r4, pc}

081072dc <_realloc_r>:
 81072dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81072e0:	4680      	mov	r8, r0
 81072e2:	4615      	mov	r5, r2
 81072e4:	460c      	mov	r4, r1
 81072e6:	b921      	cbnz	r1, 81072f2 <_realloc_r+0x16>
 81072e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 81072ec:	4611      	mov	r1, r2
 81072ee:	f7ff b9c9 	b.w	8106684 <_malloc_r>
 81072f2:	b92a      	cbnz	r2, 8107300 <_realloc_r+0x24>
 81072f4:	f7ff f95a 	bl	81065ac <_free_r>
 81072f8:	2400      	movs	r4, #0
 81072fa:	4620      	mov	r0, r4
 81072fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8107300:	f000 f89e 	bl	8107440 <_malloc_usable_size_r>
 8107304:	4285      	cmp	r5, r0
 8107306:	4606      	mov	r6, r0
 8107308:	d802      	bhi.n	8107310 <_realloc_r+0x34>
 810730a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 810730e:	d8f4      	bhi.n	81072fa <_realloc_r+0x1e>
 8107310:	4629      	mov	r1, r5
 8107312:	4640      	mov	r0, r8
 8107314:	f7ff f9b6 	bl	8106684 <_malloc_r>
 8107318:	4607      	mov	r7, r0
 810731a:	2800      	cmp	r0, #0
 810731c:	d0ec      	beq.n	81072f8 <_realloc_r+0x1c>
 810731e:	42b5      	cmp	r5, r6
 8107320:	462a      	mov	r2, r5
 8107322:	4621      	mov	r1, r4
 8107324:	bf28      	it	cs
 8107326:	4632      	movcs	r2, r6
 8107328:	f7ff ffca 	bl	81072c0 <memcpy>
 810732c:	4621      	mov	r1, r4
 810732e:	4640      	mov	r0, r8
 8107330:	f7ff f93c 	bl	81065ac <_free_r>
 8107334:	463c      	mov	r4, r7
 8107336:	e7e0      	b.n	81072fa <_realloc_r+0x1e>

08107338 <__swhatbuf_r>:
 8107338:	b570      	push	{r4, r5, r6, lr}
 810733a:	460c      	mov	r4, r1
 810733c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107340:	2900      	cmp	r1, #0
 8107342:	b096      	sub	sp, #88	@ 0x58
 8107344:	4615      	mov	r5, r2
 8107346:	461e      	mov	r6, r3
 8107348:	da0d      	bge.n	8107366 <__swhatbuf_r+0x2e>
 810734a:	89a3      	ldrh	r3, [r4, #12]
 810734c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8107350:	f04f 0100 	mov.w	r1, #0
 8107354:	bf14      	ite	ne
 8107356:	2340      	movne	r3, #64	@ 0x40
 8107358:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 810735c:	2000      	movs	r0, #0
 810735e:	6031      	str	r1, [r6, #0]
 8107360:	602b      	str	r3, [r5, #0]
 8107362:	b016      	add	sp, #88	@ 0x58
 8107364:	bd70      	pop	{r4, r5, r6, pc}
 8107366:	466a      	mov	r2, sp
 8107368:	f000 f848 	bl	81073fc <_fstat_r>
 810736c:	2800      	cmp	r0, #0
 810736e:	dbec      	blt.n	810734a <__swhatbuf_r+0x12>
 8107370:	9901      	ldr	r1, [sp, #4]
 8107372:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8107376:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 810737a:	4259      	negs	r1, r3
 810737c:	4159      	adcs	r1, r3
 810737e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8107382:	e7eb      	b.n	810735c <__swhatbuf_r+0x24>

08107384 <__smakebuf_r>:
 8107384:	898b      	ldrh	r3, [r1, #12]
 8107386:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8107388:	079d      	lsls	r5, r3, #30
 810738a:	4606      	mov	r6, r0
 810738c:	460c      	mov	r4, r1
 810738e:	d507      	bpl.n	81073a0 <__smakebuf_r+0x1c>
 8107390:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8107394:	6023      	str	r3, [r4, #0]
 8107396:	6123      	str	r3, [r4, #16]
 8107398:	2301      	movs	r3, #1
 810739a:	6163      	str	r3, [r4, #20]
 810739c:	b003      	add	sp, #12
 810739e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81073a0:	ab01      	add	r3, sp, #4
 81073a2:	466a      	mov	r2, sp
 81073a4:	f7ff ffc8 	bl	8107338 <__swhatbuf_r>
 81073a8:	9f00      	ldr	r7, [sp, #0]
 81073aa:	4605      	mov	r5, r0
 81073ac:	4639      	mov	r1, r7
 81073ae:	4630      	mov	r0, r6
 81073b0:	f7ff f968 	bl	8106684 <_malloc_r>
 81073b4:	b948      	cbnz	r0, 81073ca <__smakebuf_r+0x46>
 81073b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81073ba:	059a      	lsls	r2, r3, #22
 81073bc:	d4ee      	bmi.n	810739c <__smakebuf_r+0x18>
 81073be:	f023 0303 	bic.w	r3, r3, #3
 81073c2:	f043 0302 	orr.w	r3, r3, #2
 81073c6:	81a3      	strh	r3, [r4, #12]
 81073c8:	e7e2      	b.n	8107390 <__smakebuf_r+0xc>
 81073ca:	89a3      	ldrh	r3, [r4, #12]
 81073cc:	6020      	str	r0, [r4, #0]
 81073ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81073d2:	81a3      	strh	r3, [r4, #12]
 81073d4:	9b01      	ldr	r3, [sp, #4]
 81073d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 81073da:	b15b      	cbz	r3, 81073f4 <__smakebuf_r+0x70>
 81073dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 81073e0:	4630      	mov	r0, r6
 81073e2:	f000 f81d 	bl	8107420 <_isatty_r>
 81073e6:	b128      	cbz	r0, 81073f4 <__smakebuf_r+0x70>
 81073e8:	89a3      	ldrh	r3, [r4, #12]
 81073ea:	f023 0303 	bic.w	r3, r3, #3
 81073ee:	f043 0301 	orr.w	r3, r3, #1
 81073f2:	81a3      	strh	r3, [r4, #12]
 81073f4:	89a3      	ldrh	r3, [r4, #12]
 81073f6:	431d      	orrs	r5, r3
 81073f8:	81a5      	strh	r5, [r4, #12]
 81073fa:	e7cf      	b.n	810739c <__smakebuf_r+0x18>

081073fc <_fstat_r>:
 81073fc:	b538      	push	{r3, r4, r5, lr}
 81073fe:	4d07      	ldr	r5, [pc, #28]	@ (810741c <_fstat_r+0x20>)
 8107400:	2300      	movs	r3, #0
 8107402:	4604      	mov	r4, r0
 8107404:	4608      	mov	r0, r1
 8107406:	4611      	mov	r1, r2
 8107408:	602b      	str	r3, [r5, #0]
 810740a:	f7f9 ffb1 	bl	8101370 <_fstat>
 810740e:	1c43      	adds	r3, r0, #1
 8107410:	d102      	bne.n	8107418 <_fstat_r+0x1c>
 8107412:	682b      	ldr	r3, [r5, #0]
 8107414:	b103      	cbz	r3, 8107418 <_fstat_r+0x1c>
 8107416:	6023      	str	r3, [r4, #0]
 8107418:	bd38      	pop	{r3, r4, r5, pc}
 810741a:	bf00      	nop
 810741c:	100003b0 	.word	0x100003b0

08107420 <_isatty_r>:
 8107420:	b538      	push	{r3, r4, r5, lr}
 8107422:	4d06      	ldr	r5, [pc, #24]	@ (810743c <_isatty_r+0x1c>)
 8107424:	2300      	movs	r3, #0
 8107426:	4604      	mov	r4, r0
 8107428:	4608      	mov	r0, r1
 810742a:	602b      	str	r3, [r5, #0]
 810742c:	f7f9 ffb0 	bl	8101390 <_isatty>
 8107430:	1c43      	adds	r3, r0, #1
 8107432:	d102      	bne.n	810743a <_isatty_r+0x1a>
 8107434:	682b      	ldr	r3, [r5, #0]
 8107436:	b103      	cbz	r3, 810743a <_isatty_r+0x1a>
 8107438:	6023      	str	r3, [r4, #0]
 810743a:	bd38      	pop	{r3, r4, r5, pc}
 810743c:	100003b0 	.word	0x100003b0

08107440 <_malloc_usable_size_r>:
 8107440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8107444:	1f18      	subs	r0, r3, #4
 8107446:	2b00      	cmp	r3, #0
 8107448:	bfbc      	itt	lt
 810744a:	580b      	ldrlt	r3, [r1, r0]
 810744c:	18c0      	addlt	r0, r0, r3
 810744e:	4770      	bx	lr

08107450 <_init>:
 8107450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107452:	bf00      	nop
 8107454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8107456:	bc08      	pop	{r3}
 8107458:	469e      	mov	lr, r3
 810745a:	4770      	bx	lr

0810745c <_fini>:
 810745c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810745e:	bf00      	nop
 8107460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8107462:	bc08      	pop	{r3}
 8107464:	469e      	mov	lr, r3
 8107466:	4770      	bx	lr
