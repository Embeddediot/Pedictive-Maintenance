
Blinky_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f10  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080051b0  080051b0  000061b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800524c  0800524c  00007088  2**0
                  CONTENTS
  4 .ARM          00000008  0800524c  0800524c  0000624c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005254  08005254  00007088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005254  08005254  00006254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005258  08005258  00006258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  24000000  0800525c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  24000088  080052e4  00007088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240002e8  080052e4  000072e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00007088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010462  00000000  00000000  000070b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000220e  00000000  00000000  00017518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  00019728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000938  00000000  00000000  0001a348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a571  00000000  00000000  0001ac80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ef3  00000000  00000000  000551f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017d35d  00000000  00000000  000660e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e3441  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a2c  00000000  00000000  001e3484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000bf  00000000  00000000  001e6eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08005198 	.word	0x08005198

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	08005198 	.word	0x08005198

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000674:	4b3d      	ldr	r3, [pc, #244]	@ (800076c <SystemInit+0xfc>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800067a:	4a3c      	ldr	r2, [pc, #240]	@ (800076c <SystemInit+0xfc>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000684:	4b39      	ldr	r3, [pc, #228]	@ (800076c <SystemInit+0xfc>)
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	4a38      	ldr	r2, [pc, #224]	@ (800076c <SystemInit+0xfc>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000690:	4b37      	ldr	r3, [pc, #220]	@ (8000770 <SystemInit+0x100>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f003 030f 	and.w	r3, r3, #15
 8000698:	2b06      	cmp	r3, #6
 800069a:	d807      	bhi.n	80006ac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800069c:	4b34      	ldr	r3, [pc, #208]	@ (8000770 <SystemInit+0x100>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f023 030f 	bic.w	r3, r3, #15
 80006a4:	4a32      	ldr	r2, [pc, #200]	@ (8000770 <SystemInit+0x100>)
 80006a6:	f043 0307 	orr.w	r3, r3, #7
 80006aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006ac:	4b31      	ldr	r3, [pc, #196]	@ (8000774 <SystemInit+0x104>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a30      	ldr	r2, [pc, #192]	@ (8000774 <SystemInit+0x104>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <SystemInit+0x104>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006be:	4b2d      	ldr	r3, [pc, #180]	@ (8000774 <SystemInit+0x104>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	492c      	ldr	r1, [pc, #176]	@ (8000774 <SystemInit+0x104>)
 80006c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <SystemInit+0x108>)
 80006c6:	4013      	ands	r3, r2
 80006c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ca:	4b29      	ldr	r3, [pc, #164]	@ (8000770 <SystemInit+0x100>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d007      	beq.n	80006e6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <SystemInit+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f023 030f 	bic.w	r3, r3, #15
 80006de:	4a24      	ldr	r2, [pc, #144]	@ (8000770 <SystemInit+0x100>)
 80006e0:	f043 0307 	orr.w	r3, r3, #7
 80006e4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006e6:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <SystemInit+0x104>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006ec:	4b21      	ldr	r3, [pc, #132]	@ (8000774 <SystemInit+0x104>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006f2:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <SystemInit+0x104>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <SystemInit+0x104>)
 80006fa:	4a20      	ldr	r2, [pc, #128]	@ (800077c <SystemInit+0x10c>)
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <SystemInit+0x104>)
 8000700:	4a1f      	ldr	r2, [pc, #124]	@ (8000780 <SystemInit+0x110>)
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000704:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <SystemInit+0x104>)
 8000706:	4a1f      	ldr	r2, [pc, #124]	@ (8000784 <SystemInit+0x114>)
 8000708:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <SystemInit+0x104>)
 8000712:	4a1c      	ldr	r2, [pc, #112]	@ (8000784 <SystemInit+0x114>)
 8000714:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <SystemInit+0x104>)
 800071e:	4a19      	ldr	r2, [pc, #100]	@ (8000784 <SystemInit+0x114>)
 8000720:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <SystemInit+0x104>)
 8000724:	2200      	movs	r2, #0
 8000726:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <SystemInit+0x104>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a11      	ldr	r2, [pc, #68]	@ (8000774 <SystemInit+0x104>)
 800072e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000732:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <SystemInit+0x104>)
 8000736:	2200      	movs	r2, #0
 8000738:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <SystemInit+0x118>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073e:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <SystemInit+0x118>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000744:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <SystemInit+0x11c>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <SystemInit+0x120>)
 800074c:	4013      	ands	r3, r2
 800074e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000752:	d202      	bcs.n	800075a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <SystemInit+0x124>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <SystemInit+0x128>)
 800075c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000760:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00
 8000770:	52002000 	.word	0x52002000
 8000774:	58024400 	.word	0x58024400
 8000778:	eaf6ed7f 	.word	0xeaf6ed7f
 800077c:	02020200 	.word	0x02020200
 8000780:	01ff0000 	.word	0x01ff0000
 8000784:	01010280 	.word	0x01010280
 8000788:	580000c0 	.word	0x580000c0
 800078c:	5c001000 	.word	0x5c001000
 8000790:	ffff0000 	.word	0xffff0000
 8000794:	51008108 	.word	0x51008108
 8000798:	52004000 	.word	0x52004000

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007a6:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007a8:	bf00      	nop
 80007aa:	4b3a      	ldr	r3, [pc, #232]	@ (8000894 <main+0xf8>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d004      	beq.n	80007c0 <main+0x24>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	1e5a      	subs	r2, r3, #1
 80007ba:	607a      	str	r2, [r7, #4]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	dcf4      	bgt.n	80007aa <main+0xe>
  if ( timeout < 0 )
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	da01      	bge.n	80007ca <main+0x2e>
  {
  Error_Handler();
 80007c6:	f000 f8d9 	bl	800097c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ca:	f000 fc09 	bl	8000fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ce:	f000 f86b 	bl	80008a8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007d2:	4b30      	ldr	r3, [pc, #192]	@ (8000894 <main+0xf8>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d8:	4a2e      	ldr	r2, [pc, #184]	@ (8000894 <main+0xf8>)
 80007da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000894 <main+0xf8>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80007f0:	2000      	movs	r0, #0
 80007f2:	f001 f82f 	bl	8001854 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80007f6:	2100      	movs	r1, #0
 80007f8:	2000      	movs	r0, #0
 80007fa:	f001 f845 	bl	8001888 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80007fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000802:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000804:	bf00      	nop
 8000806:	4b23      	ldr	r3, [pc, #140]	@ (8000894 <main+0xf8>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800080e:	2b00      	cmp	r3, #0
 8000810:	d104      	bne.n	800081c <main+0x80>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	1e5a      	subs	r2, r3, #1
 8000816:	607a      	str	r2, [r7, #4]
 8000818:	2b00      	cmp	r3, #0
 800081a:	dcf4      	bgt.n	8000806 <main+0x6a>
if ( timeout < 0 )
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2b00      	cmp	r3, #0
 8000820:	da01      	bge.n	8000826 <main+0x8a>
{
Error_Handler();
 8000822:	f000 f8ab 	bl	800097c <Error_Handler>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000826:	2000      	movs	r0, #0
 8000828:	f000 f9cc 	bl	8000bc4 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 800082c:	2001      	movs	r0, #1
 800082e:	f000 f9c9 	bl	8000bc4 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000832:	2101      	movs	r1, #1
 8000834:	2000      	movs	r0, #0
 8000836:	f000 fa65 	bl	8000d04 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800083a:	4b17      	ldr	r3, [pc, #92]	@ (8000898 <main+0xfc>)
 800083c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000840:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000842:	4b15      	ldr	r3, [pc, #84]	@ (8000898 <main+0xfc>)
 8000844:	2200      	movs	r2, #0
 8000846:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000848:	4b13      	ldr	r3, [pc, #76]	@ (8000898 <main+0xfc>)
 800084a:	2200      	movs	r2, #0
 800084c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800084e:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <main+0xfc>)
 8000850:	2200      	movs	r2, #0
 8000852:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000854:	4b10      	ldr	r3, [pc, #64]	@ (8000898 <main+0xfc>)
 8000856:	2200      	movs	r2, #0
 8000858:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800085a:	490f      	ldr	r1, [pc, #60]	@ (8000898 <main+0xfc>)
 800085c:	2000      	movs	r0, #0
 800085e:	f000 fae1 	bl	8000e24 <BSP_COM_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <main+0xd0>
  {
    Error_Handler();
 8000868:	f000 f888 	bl	800097c <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  sprintf(dataOut, "\r\n LED2 OFF\r\n Press Key button to put it ON\r\n ");
 800086c:	490b      	ldr	r1, [pc, #44]	@ (800089c <main+0x100>)
 800086e:	480c      	ldr	r0, [pc, #48]	@ (80008a0 <main+0x104>)
 8000870:	f003 fc60 	bl	8004134 <siprintf>
  printf("%s", dataOut);
 8000874:	490a      	ldr	r1, [pc, #40]	@ (80008a0 <main+0x104>)
 8000876:	480b      	ldr	r0, [pc, #44]	@ (80008a4 <main+0x108>)
 8000878:	f003 fc4a 	bl	8004110 <iprintf>
  while (1)
  {

    /* USER CODE END WHILE */
	BSP_LED_Toggle(LED_GREEN);
 800087c:	2000      	movs	r0, #0
 800087e:	f000 fa17 	bl	8000cb0 <BSP_LED_Toggle>
	BSP_LED_Toggle(LED_YELLOW);
 8000882:	2001      	movs	r0, #1
 8000884:	f000 fa14 	bl	8000cb0 <BSP_LED_Toggle>
	HAL_Delay(500);
 8000888:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800088c:	f000 fc3a 	bl	8001104 <HAL_Delay>
	BSP_LED_Toggle(LED_GREEN);
 8000890:	bf00      	nop
 8000892:	e7f3      	b.n	800087c <main+0xe0>
 8000894:	58024400 	.word	0x58024400
 8000898:	240000a4 	.word	0x240000a4
 800089c:	080051b0 	.word	0x080051b0
 80008a0:	240000b4 	.word	0x240000b4
 80008a4:	080051e0 	.word	0x080051e0

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b09c      	sub	sp, #112	@ 0x70
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b2:	224c      	movs	r2, #76	@ 0x4c
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f003 fc9f 	bl	80041fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	2220      	movs	r2, #32
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f003 fc99 	bl	80041fa <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008c8:	2004      	movs	r0, #4
 80008ca:	f000 fff1 	bl	80018b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008ce:	2300      	movs	r3, #0
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	4b28      	ldr	r3, [pc, #160]	@ (8000974 <SystemClock_Config+0xcc>)
 80008d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008d6:	4a27      	ldr	r2, [pc, #156]	@ (8000974 <SystemClock_Config+0xcc>)
 80008d8:	f023 0301 	bic.w	r3, r3, #1
 80008dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008de:	4b25      	ldr	r3, [pc, #148]	@ (8000974 <SystemClock_Config+0xcc>)
 80008e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	4b23      	ldr	r3, [pc, #140]	@ (8000978 <SystemClock_Config+0xd0>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008f0:	4a21      	ldr	r2, [pc, #132]	@ (8000978 <SystemClock_Config+0xd0>)
 80008f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f6:	6193      	str	r3, [r2, #24]
 80008f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000978 <SystemClock_Config+0xd0>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000904:	bf00      	nop
 8000906:	4b1c      	ldr	r3, [pc, #112]	@ (8000978 <SystemClock_Config+0xd0>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800090e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000912:	d1f8      	bne.n	8000906 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000914:	2302      	movs	r3, #2
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000918:	2301      	movs	r3, #1
 800091a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800091c:	2340      	movs	r3, #64	@ 0x40
 800091e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000920:	2300      	movs	r3, #0
 8000922:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000924:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000928:	4618      	mov	r0, r3
 800092a:	f001 f81b 	bl	8001964 <HAL_RCC_OscConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000934:	f000 f822 	bl	800097c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000938:	233f      	movs	r3, #63	@ 0x3f
 800093a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	2101      	movs	r1, #1
 800095c:	4618      	mov	r0, r3
 800095e:	f001 fc5b 	bl	8002218 <HAL_RCC_ClockConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000968:	f000 f808 	bl	800097c <Error_Handler>
  }
}
 800096c:	bf00      	nop
 800096e:	3770      	adds	r7, #112	@ 0x70
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	58000400 	.word	0x58000400
 8000978:	58024800 	.word	0x58024800

0800097c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
}
 8000982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <Error_Handler+0x8>

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <HAL_MspInit+0x30>)
 8000990:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000994:	4a08      	ldr	r2, [pc, #32]	@ (80009b8 <HAL_MspInit+0x30>)
 8000996:	f043 0302 	orr.w	r3, r3, #2
 800099a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800099e:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <HAL_MspInit+0x30>)
 80009a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009a4:	f003 0302 	and.w	r3, r3, #2
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	58024400 	.word	0x58024400

080009bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <NMI_Handler+0x4>

080009c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <HardFault_Handler+0x4>

080009cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <MemManage_Handler+0x4>

080009d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <BusFault_Handler+0x4>

080009dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <UsageFault_Handler+0x4>

080009e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a12:	f000 fb57 	bl	80010c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f000 f9e2 	bl	8000de8 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	e00a      	b.n	8000a50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a3a:	f3af 8000 	nop.w
 8000a3e:	4601      	mov	r1, r0
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	60ba      	str	r2, [r7, #8]
 8000a46:	b2ca      	uxtb	r2, r1
 8000a48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	697a      	ldr	r2, [r7, #20]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	dbf0      	blt.n	8000a3a <_read+0x12>
  }

  return len;
 8000a58:	687b      	ldr	r3, [r7, #4]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3718      	adds	r7, #24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b086      	sub	sp, #24
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	60f8      	str	r0, [r7, #12]
 8000a6a:	60b9      	str	r1, [r7, #8]
 8000a6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	e009      	b.n	8000a88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	1c5a      	adds	r2, r3, #1
 8000a78:	60ba      	str	r2, [r7, #8]
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f000 fa33 	bl	8000ee8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	3301      	adds	r3, #1
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	dbf1      	blt.n	8000a74 <_write+0x12>
  }
  return len;
 8000a90:	687b      	ldr	r3, [r7, #4]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <_close>:

int _close(int file)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	b083      	sub	sp, #12
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	b083      	sub	sp, #12
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
 8000aba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ac2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <_isatty>:

int _isatty(int file)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
	...

08000b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b0c:	4a14      	ldr	r2, [pc, #80]	@ (8000b60 <_sbrk+0x5c>)
 8000b0e:	4b15      	ldr	r3, [pc, #84]	@ (8000b64 <_sbrk+0x60>)
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b18:	4b13      	ldr	r3, [pc, #76]	@ (8000b68 <_sbrk+0x64>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d102      	bne.n	8000b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b20:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <_sbrk+0x64>)
 8000b22:	4a12      	ldr	r2, [pc, #72]	@ (8000b6c <_sbrk+0x68>)
 8000b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b26:	4b10      	ldr	r3, [pc, #64]	@ (8000b68 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d207      	bcs.n	8000b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b34:	f003 fbb0 	bl	8004298 <__errno>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b42:	e009      	b.n	8000b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b44:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4a:	4b07      	ldr	r3, [pc, #28]	@ (8000b68 <_sbrk+0x64>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	4a05      	ldr	r2, [pc, #20]	@ (8000b68 <_sbrk+0x64>)
 8000b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b56:	68fb      	ldr	r3, [r7, #12]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3718      	adds	r7, #24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	24080000 	.word	0x24080000
 8000b64:	00000400 	.word	0x00000400
 8000b68:	240000f4 	.word	0x240000f4
 8000b6c:	240002e8 	.word	0x240002e8

08000b70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ba8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b74:	f7ff fd7c 	bl	8000670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b78:	480c      	ldr	r0, [pc, #48]	@ (8000bac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b7a:	490d      	ldr	r1, [pc, #52]	@ (8000bb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b80:	e002      	b.n	8000b88 <LoopCopyDataInit>

08000b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b86:	3304      	adds	r3, #4

08000b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b8c:	d3f9      	bcc.n	8000b82 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b90:	4c0a      	ldr	r4, [pc, #40]	@ (8000bbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b94:	e001      	b.n	8000b9a <LoopFillZerobss>

08000b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b98:	3204      	adds	r2, #4

08000b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b9c:	d3fb      	bcc.n	8000b96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b9e:	f003 fb81 	bl	80042a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ba2:	f7ff fdfb 	bl	800079c <main>
  bx  lr
 8000ba6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ba8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000bac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000bb0:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8000bb4:	0800525c 	.word	0x0800525c
  ldr r2, =_sbss
 8000bb8:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8000bbc:	240002e8 	.word	0x240002e8

08000bc0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc0:	e7fe      	b.n	8000bc0 <ADC3_IRQHandler>
	...

08000bc4 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08c      	sub	sp, #48	@ 0x30
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d009      	beq.n	8000bec <BSP_LED_Init+0x28>
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d006      	beq.n	8000bec <BSP_LED_Init+0x28>
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d003      	beq.n	8000bec <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000be4:	f06f 0301 	mvn.w	r3, #1
 8000be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000bea:	e055      	b.n	8000c98 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d10f      	bne.n	8000c12 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000bf2:	4b2c      	ldr	r3, [pc, #176]	@ (8000ca4 <BSP_LED_Init+0xe0>)
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf8:	4a2a      	ldr	r2, [pc, #168]	@ (8000ca4 <BSP_LED_Init+0xe0>)
 8000bfa:	f043 0302 	orr.w	r3, r3, #2
 8000bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c02:	4b28      	ldr	r3, [pc, #160]	@ (8000ca4 <BSP_LED_Init+0xe0>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c08:	f003 0302 	and.w	r3, r3, #2
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	e021      	b.n	8000c56 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d10f      	bne.n	8000c38 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000c18:	4b22      	ldr	r3, [pc, #136]	@ (8000ca4 <BSP_LED_Init+0xe0>)
 8000c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c1e:	4a21      	ldr	r2, [pc, #132]	@ (8000ca4 <BSP_LED_Init+0xe0>)
 8000c20:	f043 0310 	orr.w	r3, r3, #16
 8000c24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c28:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca4 <BSP_LED_Init+0xe0>)
 8000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c2e:	f003 0310 	and.w	r3, r3, #16
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	e00e      	b.n	8000c56 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000c38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca4 <BSP_LED_Init+0xe0>)
 8000c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c3e:	4a19      	ldr	r2, [pc, #100]	@ (8000ca4 <BSP_LED_Init+0xe0>)
 8000c40:	f043 0302 	orr.w	r3, r3, #2
 8000c44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c48:	4b16      	ldr	r3, [pc, #88]	@ (8000ca4 <BSP_LED_Init+0xe0>)
 8000c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	4a13      	ldr	r2, [pc, #76]	@ (8000ca8 <BSP_LED_Init+0xe4>)
 8000c5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c5e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	4a0f      	ldr	r2, [pc, #60]	@ (8000cac <BSP_LED_Init+0xe8>)
 8000c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c74:	f107 0218 	add.w	r2, r7, #24
 8000c78:	4611      	mov	r1, r2
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 fc06 	bl	800148c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	4a0a      	ldr	r2, [pc, #40]	@ (8000cac <BSP_LED_Init+0xe8>)
 8000c84:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	4a07      	ldr	r2, [pc, #28]	@ (8000ca8 <BSP_LED_Init+0xe4>)
 8000c8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c90:	2200      	movs	r2, #0
 8000c92:	4619      	mov	r1, r3
 8000c94:	f000 fdaa 	bl	80017ec <HAL_GPIO_WritePin>
  }

  return ret;
 8000c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3730      	adds	r7, #48	@ 0x30
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	58024400 	.word	0x58024400
 8000ca8:	080051f4 	.word	0x080051f4
 8000cac:	2400000c 	.word	0x2400000c

08000cb0 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d009      	beq.n	8000cd8 <BSP_LED_Toggle+0x28>
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d006      	beq.n	8000cd8 <BSP_LED_Toggle+0x28>
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d003      	beq.n	8000cd8 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000cd0:	f06f 0301 	mvn.w	r3, #1
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	e00b      	b.n	8000cf0 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	4a08      	ldr	r2, [pc, #32]	@ (8000cfc <BSP_LED_Toggle+0x4c>)
 8000cdc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	4907      	ldr	r1, [pc, #28]	@ (8000d00 <BSP_LED_Toggle+0x50>)
 8000ce4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4610      	mov	r0, r2
 8000cec:	f000 fd97 	bl	800181e <HAL_GPIO_TogglePin>
  }

  return ret;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	2400000c 	.word	0x2400000c
 8000d00:	080051f4 	.word	0x080051f4

08000d04 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	460a      	mov	r2, r1
 8000d0e:	71fb      	strb	r3, [r7, #7]
 8000d10:	4613      	mov	r3, r2
 8000d12:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000d14:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd0 <BSP_PB_Init+0xcc>)
 8000d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d1a:	4a2d      	ldr	r2, [pc, #180]	@ (8000dd0 <BSP_PB_Init+0xcc>)
 8000d1c:	f043 0304 	orr.w	r3, r3, #4
 8000d20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d24:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd0 <BSP_PB_Init+0xcc>)
 8000d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000d32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d36:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000d40:	79bb      	ldrb	r3, [r7, #6]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d10c      	bne.n	8000d60 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	4a21      	ldr	r2, [pc, #132]	@ (8000dd4 <BSP_PB_Init+0xd0>)
 8000d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d52:	f107 020c 	add.w	r2, r7, #12
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f000 fb97 	bl	800148c <HAL_GPIO_Init>
 8000d5e:	e031      	b.n	8000dc4 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000d60:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d64:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	4a1a      	ldr	r2, [pc, #104]	@ (8000dd4 <BSP_PB_Init+0xd0>)
 8000d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6e:	f107 020c 	add.w	r2, r7, #12
 8000d72:	4611      	mov	r1, r2
 8000d74:	4618      	mov	r0, r3
 8000d76:	f000 fb89 	bl	800148c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	00db      	lsls	r3, r3, #3
 8000d7e:	4a16      	ldr	r2, [pc, #88]	@ (8000dd8 <BSP_PB_Init+0xd4>)
 8000d80:	441a      	add	r2, r3
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	4915      	ldr	r1, [pc, #84]	@ (8000ddc <BSP_PB_Init+0xd8>)
 8000d86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4610      	mov	r0, r2
 8000d8e:	f000 fb2c 	bl	80013ea <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	00db      	lsls	r3, r3, #3
 8000d96:	4a10      	ldr	r2, [pc, #64]	@ (8000dd8 <BSP_PB_Init+0xd4>)
 8000d98:	1898      	adds	r0, r3, r2
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	4a10      	ldr	r2, [pc, #64]	@ (8000de0 <BSP_PB_Init+0xdc>)
 8000d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da2:	461a      	mov	r2, r3
 8000da4:	2100      	movs	r1, #0
 8000da6:	f000 fb01 	bl	80013ac <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000daa:	2028      	movs	r0, #40	@ 0x28
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	4a0d      	ldr	r2, [pc, #52]	@ (8000de4 <BSP_PB_Init+0xe0>)
 8000db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db4:	2200      	movs	r2, #0
 8000db6:	4619      	mov	r1, r3
 8000db8:	f000 faaf 	bl	800131a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000dbc:	2328      	movs	r3, #40	@ 0x28
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 fac5 	bl	800134e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3720      	adds	r7, #32
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	58024400 	.word	0x58024400
 8000dd4:	24000018 	.word	0x24000018
 8000dd8:	240000f8 	.word	0x240000f8
 8000ddc:	080051fc 	.word	0x080051fc
 8000de0:	2400001c 	.word	0x2400001c
 8000de4:	24000020 	.word	0x24000020

08000de8 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	4a04      	ldr	r2, [pc, #16]	@ (8000e08 <BSP_PB_IRQHandler+0x20>)
 8000df8:	4413      	add	r3, r2
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 fb0a 	bl	8001414 <HAL_EXTI_IRQHandler>
}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	240000f8 	.word	0x240000f8

08000e0c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	6039      	str	r1, [r7, #0]
 8000e2e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000e3a:	f06f 0301 	mvn.w	r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	e018      	b.n	8000e74 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	2294      	movs	r2, #148	@ 0x94
 8000e46:	fb02 f303 	mul.w	r3, r2, r3
 8000e4a:	4a0d      	ldr	r2, [pc, #52]	@ (8000e80 <BSP_COM_Init+0x5c>)
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 f86e 	bl	8000f30 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	2294      	movs	r2, #148	@ 0x94
 8000e58:	fb02 f303 	mul.w	r3, r2, r3
 8000e5c:	4a08      	ldr	r2, [pc, #32]	@ (8000e80 <BSP_COM_Init+0x5c>)
 8000e5e:	4413      	add	r3, r2
 8000e60:	6839      	ldr	r1, [r7, #0]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f80e 	bl	8000e84 <MX_USART3_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d002      	beq.n	8000e74 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000e6e:	f06f 0303 	mvn.w	r3, #3
 8000e72:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000e74:	68fb      	ldr	r3, [r7, #12]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	24000100 	.word	0x24000100

08000e84 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000e8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <MX_USART3_Init+0x60>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	220c      	movs	r2, #12
 8000ea2:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	895b      	ldrh	r3, [r3, #10]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685a      	ldr	r2, [r3, #4]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	891b      	ldrh	r3, [r3, #8]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	899b      	ldrh	r3, [r3, #12]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000ed0:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f001 ffea 	bl	8002eac <HAL_UART_Init>
 8000ed8:	4603      	mov	r3, r0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	24000008 	.word	0x24000008

08000ee8 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8000ef0:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <__io_putchar+0x30>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	2394      	movs	r3, #148	@ 0x94
 8000ef8:	fb02 f303 	mul.w	r3, r2, r3
 8000efc:	4a07      	ldr	r2, [pc, #28]	@ (8000f1c <__io_putchar+0x34>)
 8000efe:	1898      	adds	r0, r3, r2
 8000f00:	1d39      	adds	r1, r7, #4
 8000f02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f06:	2201      	movs	r2, #1
 8000f08:	f002 f82a 	bl	8002f60 <HAL_UART_Transmit>
  return ch;
 8000f0c:	687b      	ldr	r3, [r7, #4]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	24000194 	.word	0x24000194
 8000f1c:	24000100 	.word	0x24000100

08000f20 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000f24:	2000      	movs	r0, #0
 8000f26:	f7ff ff71 	bl	8000e0c <BSP_PB_Callback>
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	@ 0x28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000f38:	4b27      	ldr	r3, [pc, #156]	@ (8000fd8 <COM1_MspInit+0xa8>)
 8000f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f3e:	4a26      	ldr	r2, [pc, #152]	@ (8000fd8 <COM1_MspInit+0xa8>)
 8000f40:	f043 0308 	orr.w	r3, r3, #8
 8000f44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f48:	4b23      	ldr	r3, [pc, #140]	@ (8000fd8 <COM1_MspInit+0xa8>)
 8000f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f4e:	f003 0308 	and.w	r3, r3, #8
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000f56:	4b20      	ldr	r3, [pc, #128]	@ (8000fd8 <COM1_MspInit+0xa8>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5c:	4a1e      	ldr	r2, [pc, #120]	@ (8000fd8 <COM1_MspInit+0xa8>)
 8000f5e:	f043 0308 	orr.w	r3, r3, #8
 8000f62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f66:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd8 <COM1_MspInit+0xa8>)
 8000f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6c:	f003 0308 	and.w	r3, r3, #8
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000f74:	4b18      	ldr	r3, [pc, #96]	@ (8000fd8 <COM1_MspInit+0xa8>)
 8000f76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f7a:	4a17      	ldr	r2, [pc, #92]	@ (8000fd8 <COM1_MspInit+0xa8>)
 8000f7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f80:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f84:	4b14      	ldr	r3, [pc, #80]	@ (8000fd8 <COM1_MspInit+0xa8>)
 8000f86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8000f92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f96:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000fa4:	2307      	movs	r3, #7
 8000fa6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	4619      	mov	r1, r3
 8000fae:	480b      	ldr	r0, [pc, #44]	@ (8000fdc <COM1_MspInit+0xac>)
 8000fb0:	f000 fa6c 	bl	800148c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8000fb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fb8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000fbe:	2307      	movs	r3, #7
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4804      	ldr	r0, [pc, #16]	@ (8000fdc <COM1_MspInit+0xac>)
 8000fca:	f000 fa5f 	bl	800148c <HAL_GPIO_Init>
}
 8000fce:	bf00      	nop
 8000fd0:	3728      	adds	r7, #40	@ 0x28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	58024400 	.word	0x58024400
 8000fdc:	58020c00 	.word	0x58020c00

08000fe0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe6:	2003      	movs	r0, #3
 8000fe8:	f000 f98c 	bl	8001304 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fec:	f001 faca 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <HAL_Init+0x68>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	0a1b      	lsrs	r3, r3, #8
 8000ff8:	f003 030f 	and.w	r3, r3, #15
 8000ffc:	4913      	ldr	r1, [pc, #76]	@ (800104c <HAL_Init+0x6c>)
 8000ffe:	5ccb      	ldrb	r3, [r1, r3]
 8001000:	f003 031f 	and.w	r3, r3, #31
 8001004:	fa22 f303 	lsr.w	r3, r2, r3
 8001008:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800100a:	4b0f      	ldr	r3, [pc, #60]	@ (8001048 <HAL_Init+0x68>)
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	4a0e      	ldr	r2, [pc, #56]	@ (800104c <HAL_Init+0x6c>)
 8001014:	5cd3      	ldrb	r3, [r2, r3]
 8001016:	f003 031f 	and.w	r3, r3, #31
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	fa22 f303 	lsr.w	r3, r2, r3
 8001020:	4a0b      	ldr	r2, [pc, #44]	@ (8001050 <HAL_Init+0x70>)
 8001022:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001024:	4a0b      	ldr	r2, [pc, #44]	@ (8001054 <HAL_Init+0x74>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800102a:	2000      	movs	r0, #0
 800102c:	f000 f814 	bl	8001058 <HAL_InitTick>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e002      	b.n	8001040 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800103a:	f7ff fca5 	bl	8000988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	58024400 	.word	0x58024400
 800104c:	080051e4 	.word	0x080051e4
 8001050:	24000004 	.word	0x24000004
 8001054:	24000000 	.word	0x24000000

08001058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001060:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <HAL_InitTick+0x60>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d101      	bne.n	800106c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e021      	b.n	80010b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800106c:	4b13      	ldr	r3, [pc, #76]	@ (80010bc <HAL_InitTick+0x64>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <HAL_InitTick+0x60>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	4619      	mov	r1, r3
 8001076:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800107a:	fbb3 f3f1 	udiv	r3, r3, r1
 800107e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f971 	bl	800136a <HAL_SYSTICK_Config>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e00e      	b.n	80010b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b0f      	cmp	r3, #15
 8001096:	d80a      	bhi.n	80010ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001098:	2200      	movs	r2, #0
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	f04f 30ff 	mov.w	r0, #4294967295
 80010a0:	f000 f93b 	bl	800131a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a4:	4a06      	ldr	r2, [pc, #24]	@ (80010c0 <HAL_InitTick+0x68>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
 80010ac:	e000      	b.n	80010b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	24000028 	.word	0x24000028
 80010bc:	24000000 	.word	0x24000000
 80010c0:	24000024 	.word	0x24000024

080010c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010c8:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <HAL_IncTick+0x20>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <HAL_IncTick+0x24>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4413      	add	r3, r2
 80010d4:	4a04      	ldr	r2, [pc, #16]	@ (80010e8 <HAL_IncTick+0x24>)
 80010d6:	6013      	str	r3, [r2, #0]
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	24000028 	.word	0x24000028
 80010e8:	24000198 	.word	0x24000198

080010ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return uwTick;
 80010f0:	4b03      	ldr	r3, [pc, #12]	@ (8001100 <HAL_GetTick+0x14>)
 80010f2:	681b      	ldr	r3, [r3, #0]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	24000198 	.word	0x24000198

08001104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800110c:	f7ff ffee 	bl	80010ec <HAL_GetTick>
 8001110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800111c:	d005      	beq.n	800112a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800111e:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <HAL_Delay+0x44>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4413      	add	r3, r2
 8001128:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800112a:	bf00      	nop
 800112c:	f7ff ffde 	bl	80010ec <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	429a      	cmp	r2, r3
 800113a:	d8f7      	bhi.n	800112c <HAL_Delay+0x28>
  {
  }
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	24000028 	.word	0x24000028

0800114c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001150:	4b03      	ldr	r3, [pc, #12]	@ (8001160 <HAL_GetREVID+0x14>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	0c1b      	lsrs	r3, r3, #16
}
 8001156:	4618      	mov	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	5c001000 	.word	0x5c001000

08001164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001174:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001180:	4013      	ands	r3, r2
 8001182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800118c:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 800118e:	4313      	orrs	r3, r2
 8001190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001192:	4a04      	ldr	r2, [pc, #16]	@ (80011a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	60d3      	str	r3, [r2, #12]
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00
 80011a8:	05fa0000 	.word	0x05fa0000

080011ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b0:	4b04      	ldr	r3, [pc, #16]	@ (80011c4 <__NVIC_GetPriorityGrouping+0x18>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	f003 0307 	and.w	r3, r3, #7
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	db0b      	blt.n	80011f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011da:	88fb      	ldrh	r3, [r7, #6]
 80011dc:	f003 021f 	and.w	r2, r3, #31
 80011e0:	4907      	ldr	r1, [pc, #28]	@ (8001200 <__NVIC_EnableIRQ+0x38>)
 80011e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e6:	095b      	lsrs	r3, r3, #5
 80011e8:	2001      	movs	r0, #1
 80011ea:	fa00 f202 	lsl.w	r2, r0, r2
 80011ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000e100 	.word	0xe000e100

08001204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001210:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001214:	2b00      	cmp	r3, #0
 8001216:	db0a      	blt.n	800122e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	490c      	ldr	r1, [pc, #48]	@ (8001250 <__NVIC_SetPriority+0x4c>)
 800121e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001222:	0112      	lsls	r2, r2, #4
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	440b      	add	r3, r1
 8001228:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800122c:	e00a      	b.n	8001244 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	b2da      	uxtb	r2, r3
 8001232:	4908      	ldr	r1, [pc, #32]	@ (8001254 <__NVIC_SetPriority+0x50>)
 8001234:	88fb      	ldrh	r3, [r7, #6]
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	3b04      	subs	r3, #4
 800123c:	0112      	lsls	r2, r2, #4
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	440b      	add	r3, r1
 8001242:	761a      	strb	r2, [r3, #24]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000e100 	.word	0xe000e100
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001258:	b480      	push	{r7}
 800125a:	b089      	sub	sp, #36	@ 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f1c3 0307 	rsb	r3, r3, #7
 8001272:	2b04      	cmp	r3, #4
 8001274:	bf28      	it	cs
 8001276:	2304      	movcs	r3, #4
 8001278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3304      	adds	r3, #4
 800127e:	2b06      	cmp	r3, #6
 8001280:	d902      	bls.n	8001288 <NVIC_EncodePriority+0x30>
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3b03      	subs	r3, #3
 8001286:	e000      	b.n	800128a <NVIC_EncodePriority+0x32>
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	f04f 32ff 	mov.w	r2, #4294967295
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43da      	mvns	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	401a      	ands	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a0:	f04f 31ff 	mov.w	r1, #4294967295
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	43d9      	mvns	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	4313      	orrs	r3, r2
         );
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3724      	adds	r7, #36	@ 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012d0:	d301      	bcc.n	80012d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d2:	2301      	movs	r3, #1
 80012d4:	e00f      	b.n	80012f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001300 <SysTick_Config+0x40>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3b01      	subs	r3, #1
 80012dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012de:	210f      	movs	r1, #15
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295
 80012e4:	f7ff ff8e 	bl	8001204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e8:	4b05      	ldr	r3, [pc, #20]	@ (8001300 <SysTick_Config+0x40>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ee:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <SysTick_Config+0x40>)
 80012f0:	2207      	movs	r2, #7
 80012f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	e000e010 	.word	0xe000e010

08001304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ff29 	bl	8001164 <__NVIC_SetPriorityGrouping>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	60b9      	str	r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
 8001326:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001328:	f7ff ff40 	bl	80011ac <__NVIC_GetPriorityGrouping>
 800132c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	68b9      	ldr	r1, [r7, #8]
 8001332:	6978      	ldr	r0, [r7, #20]
 8001334:	f7ff ff90 	bl	8001258 <NVIC_EncodePriority>
 8001338:	4602      	mov	r2, r0
 800133a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff5f 	bl	8001204 <__NVIC_SetPriority>
}
 8001346:	bf00      	nop
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	4603      	mov	r3, r0
 8001356:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001358:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff33 	bl	80011c8 <__NVIC_EnableIRQ>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ffa4 	bl	80012c0 <SysTick_Config>
 8001378:	4603      	mov	r3, r0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001388:	4b07      	ldr	r3, [pc, #28]	@ (80013a8 <HAL_GetCurrentCPUID+0x24>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	091b      	lsrs	r3, r3, #4
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	2b07      	cmp	r3, #7
 8001394:	d101      	bne.n	800139a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8001396:	2303      	movs	r3, #3
 8001398:	e000      	b.n	800139c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 800139a:	2301      	movs	r3, #1
  }
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80013ac:	b480      	push	{r7}
 80013ae:	b087      	sub	sp, #28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	460b      	mov	r3, r1
 80013b6:	607a      	str	r2, [r7, #4]
 80013b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e00a      	b.n	80013de <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80013c8:	7afb      	ldrb	r3, [r7, #11]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d103      	bne.n	80013d6 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	605a      	str	r2, [r3, #4]
      break;
 80013d4:	e002      	b.n	80013dc <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	75fb      	strb	r3, [r7, #23]
      break;
 80013da:	bf00      	nop
  }

  return status;
 80013dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	371c      	adds	r7, #28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e003      	b.n	8001406 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001404:	2300      	movs	r3, #0
  }
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	0c1b      	lsrs	r3, r3, #16
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 031f 	and.w	r3, r3, #31
 8001430:	2201      	movs	r2, #1
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8001438:	f7ff ffa4 	bl	8001384 <HAL_GetCurrentCPUID>
 800143c:	4603      	mov	r3, r0
 800143e:	2b03      	cmp	r3, #3
 8001440:	d105      	bne.n	800144e <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	011a      	lsls	r2, r3, #4
 8001446:	4b0f      	ldr	r3, [pc, #60]	@ (8001484 <HAL_EXTI_IRQHandler+0x70>)
 8001448:	4413      	add	r3, r2
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	e004      	b.n	8001458 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	011a      	lsls	r2, r3, #4
 8001452:	4b0d      	ldr	r3, [pc, #52]	@ (8001488 <HAL_EXTI_IRQHandler+0x74>)
 8001454:	4413      	add	r3, r2
 8001456:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	4013      	ands	r3, r2
 8001460:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d009      	beq.n	800147c <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d002      	beq.n	800147c <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	4798      	blx	r3
    }
  }
}
 800147c:	bf00      	nop
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	58000088 	.word	0x58000088
 8001488:	580000c8 	.word	0x580000c8

0800148c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800148c:	b480      	push	{r7}
 800148e:	b089      	sub	sp, #36	@ 0x24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800149a:	4b89      	ldr	r3, [pc, #548]	@ (80016c0 <HAL_GPIO_Init+0x234>)
 800149c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800149e:	e194      	b.n	80017ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	2101      	movs	r1, #1
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 8186 	beq.w	80017c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0303 	and.w	r3, r3, #3
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d005      	beq.n	80014d0 <HAL_GPIO_Init+0x44>
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d130      	bne.n	8001532 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	2203      	movs	r2, #3
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001506:	2201      	movs	r2, #1
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	091b      	lsrs	r3, r3, #4
 800151c:	f003 0201 	and.w	r2, r3, #1
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	2b03      	cmp	r3, #3
 800153c:	d017      	beq.n	800156e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	2203      	movs	r2, #3
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d123      	bne.n	80015c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	08da      	lsrs	r2, r3, #3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3208      	adds	r2, #8
 8001582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001586:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	220f      	movs	r2, #15
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4013      	ands	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	691a      	ldr	r2, [r3, #16]
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	08da      	lsrs	r2, r3, #3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3208      	adds	r2, #8
 80015bc:	69b9      	ldr	r1, [r7, #24]
 80015be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	2203      	movs	r2, #3
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4013      	ands	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 0203 	and.w	r2, r3, #3
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 80e0 	beq.w	80017c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001604:	4b2f      	ldr	r3, [pc, #188]	@ (80016c4 <HAL_GPIO_Init+0x238>)
 8001606:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800160a:	4a2e      	ldr	r2, [pc, #184]	@ (80016c4 <HAL_GPIO_Init+0x238>)
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001614:	4b2b      	ldr	r3, [pc, #172]	@ (80016c4 <HAL_GPIO_Init+0x238>)
 8001616:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001622:	4a29      	ldr	r2, [pc, #164]	@ (80016c8 <HAL_GPIO_Init+0x23c>)
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	089b      	lsrs	r3, r3, #2
 8001628:	3302      	adds	r3, #2
 800162a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	220f      	movs	r2, #15
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4013      	ands	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a20      	ldr	r2, [pc, #128]	@ (80016cc <HAL_GPIO_Init+0x240>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d052      	beq.n	80016f4 <HAL_GPIO_Init+0x268>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a1f      	ldr	r2, [pc, #124]	@ (80016d0 <HAL_GPIO_Init+0x244>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d031      	beq.n	80016ba <HAL_GPIO_Init+0x22e>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a1e      	ldr	r2, [pc, #120]	@ (80016d4 <HAL_GPIO_Init+0x248>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d02b      	beq.n	80016b6 <HAL_GPIO_Init+0x22a>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a1d      	ldr	r2, [pc, #116]	@ (80016d8 <HAL_GPIO_Init+0x24c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d025      	beq.n	80016b2 <HAL_GPIO_Init+0x226>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a1c      	ldr	r2, [pc, #112]	@ (80016dc <HAL_GPIO_Init+0x250>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d01f      	beq.n	80016ae <HAL_GPIO_Init+0x222>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a1b      	ldr	r2, [pc, #108]	@ (80016e0 <HAL_GPIO_Init+0x254>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d019      	beq.n	80016aa <HAL_GPIO_Init+0x21e>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a1a      	ldr	r2, [pc, #104]	@ (80016e4 <HAL_GPIO_Init+0x258>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d013      	beq.n	80016a6 <HAL_GPIO_Init+0x21a>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a19      	ldr	r2, [pc, #100]	@ (80016e8 <HAL_GPIO_Init+0x25c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d00d      	beq.n	80016a2 <HAL_GPIO_Init+0x216>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a18      	ldr	r2, [pc, #96]	@ (80016ec <HAL_GPIO_Init+0x260>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d007      	beq.n	800169e <HAL_GPIO_Init+0x212>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a17      	ldr	r2, [pc, #92]	@ (80016f0 <HAL_GPIO_Init+0x264>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d101      	bne.n	800169a <HAL_GPIO_Init+0x20e>
 8001696:	2309      	movs	r3, #9
 8001698:	e02d      	b.n	80016f6 <HAL_GPIO_Init+0x26a>
 800169a:	230a      	movs	r3, #10
 800169c:	e02b      	b.n	80016f6 <HAL_GPIO_Init+0x26a>
 800169e:	2308      	movs	r3, #8
 80016a0:	e029      	b.n	80016f6 <HAL_GPIO_Init+0x26a>
 80016a2:	2307      	movs	r3, #7
 80016a4:	e027      	b.n	80016f6 <HAL_GPIO_Init+0x26a>
 80016a6:	2306      	movs	r3, #6
 80016a8:	e025      	b.n	80016f6 <HAL_GPIO_Init+0x26a>
 80016aa:	2305      	movs	r3, #5
 80016ac:	e023      	b.n	80016f6 <HAL_GPIO_Init+0x26a>
 80016ae:	2304      	movs	r3, #4
 80016b0:	e021      	b.n	80016f6 <HAL_GPIO_Init+0x26a>
 80016b2:	2303      	movs	r3, #3
 80016b4:	e01f      	b.n	80016f6 <HAL_GPIO_Init+0x26a>
 80016b6:	2302      	movs	r3, #2
 80016b8:	e01d      	b.n	80016f6 <HAL_GPIO_Init+0x26a>
 80016ba:	2301      	movs	r3, #1
 80016bc:	e01b      	b.n	80016f6 <HAL_GPIO_Init+0x26a>
 80016be:	bf00      	nop
 80016c0:	58000080 	.word	0x58000080
 80016c4:	58024400 	.word	0x58024400
 80016c8:	58000400 	.word	0x58000400
 80016cc:	58020000 	.word	0x58020000
 80016d0:	58020400 	.word	0x58020400
 80016d4:	58020800 	.word	0x58020800
 80016d8:	58020c00 	.word	0x58020c00
 80016dc:	58021000 	.word	0x58021000
 80016e0:	58021400 	.word	0x58021400
 80016e4:	58021800 	.word	0x58021800
 80016e8:	58021c00 	.word	0x58021c00
 80016ec:	58022000 	.word	0x58022000
 80016f0:	58022400 	.word	0x58022400
 80016f4:	2300      	movs	r3, #0
 80016f6:	69fa      	ldr	r2, [r7, #28]
 80016f8:	f002 0203 	and.w	r2, r2, #3
 80016fc:	0092      	lsls	r2, r2, #2
 80016fe:	4093      	lsls	r3, r2
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001706:	4938      	ldr	r1, [pc, #224]	@ (80017e8 <HAL_GPIO_Init+0x35c>)
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	089b      	lsrs	r3, r3, #2
 800170c:	3302      	adds	r3, #2
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001714:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	43db      	mvns	r3, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4013      	ands	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800173a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001742:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001768:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	43db      	mvns	r3, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4013      	ands	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	3301      	adds	r3, #1
 80017c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	fa22 f303 	lsr.w	r3, r2, r3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f47f ae63 	bne.w	80014a0 <HAL_GPIO_Init+0x14>
  }
}
 80017da:	bf00      	nop
 80017dc:	bf00      	nop
 80017de:	3724      	adds	r7, #36	@ 0x24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	58000400 	.word	0x58000400

080017ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	807b      	strh	r3, [r7, #2]
 80017f8:	4613      	mov	r3, r2
 80017fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017fc:	787b      	ldrb	r3, [r7, #1]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001802:	887a      	ldrh	r2, [r7, #2]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001808:	e003      	b.n	8001812 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800180a:	887b      	ldrh	r3, [r7, #2]
 800180c:	041a      	lsls	r2, r3, #16
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	619a      	str	r2, [r3, #24]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800181e:	b480      	push	{r7}
 8001820:	b085      	sub	sp, #20
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	460b      	mov	r3, r1
 8001828:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001830:	887a      	ldrh	r2, [r7, #2]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	4013      	ands	r3, r2
 8001836:	041a      	lsls	r2, r3, #16
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	43d9      	mvns	r1, r3
 800183c:	887b      	ldrh	r3, [r7, #2]
 800183e:	400b      	ands	r3, r1
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	619a      	str	r2, [r3, #24]
}
 8001846:	bf00      	nop
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
	...

08001854 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800185c:	4a08      	ldr	r2, [pc, #32]	@ (8001880 <HAL_HSEM_FastTake+0x2c>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3320      	adds	r3, #32
 8001862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001866:	4a07      	ldr	r2, [pc, #28]	@ (8001884 <HAL_HSEM_FastTake+0x30>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d101      	bne.n	8001870 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800186c:	2300      	movs	r3, #0
 800186e:	e000      	b.n	8001872 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	58026400 	.word	0x58026400
 8001884:	80000300 	.word	0x80000300

08001888 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001892:	4906      	ldr	r1, [pc, #24]	@ (80018ac <HAL_HSEM_Release+0x24>)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	58026400 	.word	0x58026400

080018b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80018b8:	4b29      	ldr	r3, [pc, #164]	@ (8001960 <HAL_PWREx_ConfigSupply+0xb0>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	2b06      	cmp	r3, #6
 80018c2:	d00a      	beq.n	80018da <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80018c4:	4b26      	ldr	r3, [pc, #152]	@ (8001960 <HAL_PWREx_ConfigSupply+0xb0>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d001      	beq.n	80018d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e040      	b.n	8001958 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	e03e      	b.n	8001958 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80018da:	4b21      	ldr	r3, [pc, #132]	@ (8001960 <HAL_PWREx_ConfigSupply+0xb0>)
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80018e2:	491f      	ldr	r1, [pc, #124]	@ (8001960 <HAL_PWREx_ConfigSupply+0xb0>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80018ea:	f7ff fbff 	bl	80010ec <HAL_GetTick>
 80018ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80018f0:	e009      	b.n	8001906 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80018f2:	f7ff fbfb 	bl	80010ec <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001900:	d901      	bls.n	8001906 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e028      	b.n	8001958 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001906:	4b16      	ldr	r3, [pc, #88]	@ (8001960 <HAL_PWREx_ConfigSupply+0xb0>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800190e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001912:	d1ee      	bne.n	80018f2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b1e      	cmp	r3, #30
 8001918:	d008      	beq.n	800192c <HAL_PWREx_ConfigSupply+0x7c>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b2e      	cmp	r3, #46	@ 0x2e
 800191e:	d005      	beq.n	800192c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b1d      	cmp	r3, #29
 8001924:	d002      	beq.n	800192c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b2d      	cmp	r3, #45	@ 0x2d
 800192a:	d114      	bne.n	8001956 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800192c:	f7ff fbde 	bl	80010ec <HAL_GetTick>
 8001930:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001932:	e009      	b.n	8001948 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001934:	f7ff fbda 	bl	80010ec <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001942:	d901      	bls.n	8001948 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e007      	b.n	8001958 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001948:	4b05      	ldr	r3, [pc, #20]	@ (8001960 <HAL_PWREx_ConfigSupply+0xb0>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001954:	d1ee      	bne.n	8001934 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	58024800 	.word	0x58024800

08001964 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08c      	sub	sp, #48	@ 0x30
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d102      	bne.n	8001978 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	f000 bc48 	b.w	8002208 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 8088 	beq.w	8001a96 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001986:	4b99      	ldr	r3, [pc, #612]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800198e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001990:	4b96      	ldr	r3, [pc, #600]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001994:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001998:	2b10      	cmp	r3, #16
 800199a:	d007      	beq.n	80019ac <HAL_RCC_OscConfig+0x48>
 800199c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800199e:	2b18      	cmp	r3, #24
 80019a0:	d111      	bne.n	80019c6 <HAL_RCC_OscConfig+0x62>
 80019a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d10c      	bne.n	80019c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ac:	4b8f      	ldr	r3, [pc, #572]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d06d      	beq.n	8001a94 <HAL_RCC_OscConfig+0x130>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d169      	bne.n	8001a94 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	f000 bc21 	b.w	8002208 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019ce:	d106      	bne.n	80019de <HAL_RCC_OscConfig+0x7a>
 80019d0:	4b86      	ldr	r3, [pc, #536]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a85      	ldr	r2, [pc, #532]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 80019d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	e02e      	b.n	8001a3c <HAL_RCC_OscConfig+0xd8>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10c      	bne.n	8001a00 <HAL_RCC_OscConfig+0x9c>
 80019e6:	4b81      	ldr	r3, [pc, #516]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a80      	ldr	r2, [pc, #512]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 80019ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	4b7e      	ldr	r3, [pc, #504]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a7d      	ldr	r2, [pc, #500]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 80019f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	e01d      	b.n	8001a3c <HAL_RCC_OscConfig+0xd8>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a08:	d10c      	bne.n	8001a24 <HAL_RCC_OscConfig+0xc0>
 8001a0a:	4b78      	ldr	r3, [pc, #480]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a77      	ldr	r2, [pc, #476]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001a10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	4b75      	ldr	r3, [pc, #468]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a74      	ldr	r2, [pc, #464]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001a1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	e00b      	b.n	8001a3c <HAL_RCC_OscConfig+0xd8>
 8001a24:	4b71      	ldr	r3, [pc, #452]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a70      	ldr	r2, [pc, #448]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001a2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	4b6e      	ldr	r3, [pc, #440]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a6d      	ldr	r2, [pc, #436]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001a36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d013      	beq.n	8001a6c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a44:	f7ff fb52 	bl	80010ec <HAL_GetTick>
 8001a48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a4c:	f7ff fb4e 	bl	80010ec <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b64      	cmp	r3, #100	@ 0x64
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e3d4      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a5e:	4b63      	ldr	r3, [pc, #396]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0xe8>
 8001a6a:	e014      	b.n	8001a96 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6c:	f7ff fb3e 	bl	80010ec <HAL_GetTick>
 8001a70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a74:	f7ff fb3a 	bl	80010ec <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b64      	cmp	r3, #100	@ 0x64
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e3c0      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a86:	4b59      	ldr	r3, [pc, #356]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0x110>
 8001a92:	e000      	b.n	8001a96 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 80ca 	beq.w	8001c38 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aa4:	4b51      	ldr	r3, [pc, #324]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001aac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001aae:	4b4f      	ldr	r3, [pc, #316]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001ab4:	6a3b      	ldr	r3, [r7, #32]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d007      	beq.n	8001aca <HAL_RCC_OscConfig+0x166>
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	2b18      	cmp	r3, #24
 8001abe:	d156      	bne.n	8001b6e <HAL_RCC_OscConfig+0x20a>
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d151      	bne.n	8001b6e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aca:	4b48      	ldr	r3, [pc, #288]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d005      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x17e>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e392      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ae2:	4b42      	ldr	r3, [pc, #264]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 0219 	bic.w	r2, r3, #25
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	493f      	ldr	r1, [pc, #252]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af4:	f7ff fafa 	bl	80010ec <HAL_GetTick>
 8001af8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001afc:	f7ff faf6 	bl	80010ec <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e37c      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b0e:	4b37      	ldr	r3, [pc, #220]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1a:	f7ff fb17 	bl	800114c <HAL_GetREVID>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d817      	bhi.n	8001b58 <HAL_RCC_OscConfig+0x1f4>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	2b40      	cmp	r3, #64	@ 0x40
 8001b2e:	d108      	bne.n	8001b42 <HAL_RCC_OscConfig+0x1de>
 8001b30:	4b2e      	ldr	r3, [pc, #184]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001b38:	4a2c      	ldr	r2, [pc, #176]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001b3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b3e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b40:	e07a      	b.n	8001c38 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b42:	4b2a      	ldr	r3, [pc, #168]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	031b      	lsls	r3, r3, #12
 8001b50:	4926      	ldr	r1, [pc, #152]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b56:	e06f      	b.n	8001c38 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b58:	4b24      	ldr	r3, [pc, #144]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	061b      	lsls	r3, r3, #24
 8001b66:	4921      	ldr	r1, [pc, #132]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b6c:	e064      	b.n	8001c38 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d047      	beq.n	8001c06 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b76:	4b1d      	ldr	r3, [pc, #116]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f023 0219 	bic.w	r2, r3, #25
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	491a      	ldr	r1, [pc, #104]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b88:	f7ff fab0 	bl	80010ec <HAL_GetTick>
 8001b8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b90:	f7ff faac 	bl	80010ec <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e332      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ba2:	4b12      	ldr	r3, [pc, #72]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0f0      	beq.n	8001b90 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bae:	f7ff facd 	bl	800114c <HAL_GetREVID>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d819      	bhi.n	8001bf0 <HAL_RCC_OscConfig+0x28c>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	2b40      	cmp	r3, #64	@ 0x40
 8001bc2:	d108      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x272>
 8001bc4:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001bcc:	4a07      	ldr	r2, [pc, #28]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001bce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bd2:	6053      	str	r3, [r2, #4]
 8001bd4:	e030      	b.n	8001c38 <HAL_RCC_OscConfig+0x2d4>
 8001bd6:	4b05      	ldr	r3, [pc, #20]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	031b      	lsls	r3, r3, #12
 8001be4:	4901      	ldr	r1, [pc, #4]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	604b      	str	r3, [r1, #4]
 8001bea:	e025      	b.n	8001c38 <HAL_RCC_OscConfig+0x2d4>
 8001bec:	58024400 	.word	0x58024400
 8001bf0:	4b9a      	ldr	r3, [pc, #616]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	061b      	lsls	r3, r3, #24
 8001bfe:	4997      	ldr	r1, [pc, #604]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	604b      	str	r3, [r1, #4]
 8001c04:	e018      	b.n	8001c38 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c06:	4b95      	ldr	r3, [pc, #596]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a94      	ldr	r2, [pc, #592]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001c0c:	f023 0301 	bic.w	r3, r3, #1
 8001c10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c12:	f7ff fa6b 	bl	80010ec <HAL_GetTick>
 8001c16:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c1a:	f7ff fa67 	bl	80010ec <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e2ed      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c2c:	4b8b      	ldr	r3, [pc, #556]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1f0      	bne.n	8001c1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0310 	and.w	r3, r3, #16
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 80a9 	beq.w	8001d98 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c46:	4b85      	ldr	r3, [pc, #532]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c4e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c50:	4b82      	ldr	r3, [pc, #520]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c54:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d007      	beq.n	8001c6c <HAL_RCC_OscConfig+0x308>
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	2b18      	cmp	r3, #24
 8001c60:	d13a      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x374>
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d135      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c6c:	4b7b      	ldr	r3, [pc, #492]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_OscConfig+0x320>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	2b80      	cmp	r3, #128	@ 0x80
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e2c1      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c84:	f7ff fa62 	bl	800114c <HAL_GetREVID>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d817      	bhi.n	8001cc2 <HAL_RCC_OscConfig+0x35e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	2b20      	cmp	r3, #32
 8001c98:	d108      	bne.n	8001cac <HAL_RCC_OscConfig+0x348>
 8001c9a:	4b70      	ldr	r3, [pc, #448]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001ca2:	4a6e      	ldr	r2, [pc, #440]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001ca4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001ca8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001caa:	e075      	b.n	8001d98 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cac:	4b6b      	ldr	r3, [pc, #428]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	069b      	lsls	r3, r3, #26
 8001cba:	4968      	ldr	r1, [pc, #416]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cc0:	e06a      	b.n	8001d98 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cc2:	4b66      	ldr	r3, [pc, #408]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	061b      	lsls	r3, r3, #24
 8001cd0:	4962      	ldr	r1, [pc, #392]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cd6:	e05f      	b.n	8001d98 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d042      	beq.n	8001d66 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001ce0:	4b5e      	ldr	r3, [pc, #376]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a5d      	ldr	r2, [pc, #372]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001ce6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cec:	f7ff f9fe 	bl	80010ec <HAL_GetTick>
 8001cf0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001cf4:	f7ff f9fa 	bl	80010ec <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e280      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d06:	4b55      	ldr	r3, [pc, #340]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d12:	f7ff fa1b 	bl	800114c <HAL_GetREVID>
 8001d16:	4603      	mov	r3, r0
 8001d18:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d817      	bhi.n	8001d50 <HAL_RCC_OscConfig+0x3ec>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	2b20      	cmp	r3, #32
 8001d26:	d108      	bne.n	8001d3a <HAL_RCC_OscConfig+0x3d6>
 8001d28:	4b4c      	ldr	r3, [pc, #304]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001d30:	4a4a      	ldr	r2, [pc, #296]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001d32:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d36:	6053      	str	r3, [r2, #4]
 8001d38:	e02e      	b.n	8001d98 <HAL_RCC_OscConfig+0x434>
 8001d3a:	4b48      	ldr	r3, [pc, #288]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	069b      	lsls	r3, r3, #26
 8001d48:	4944      	ldr	r1, [pc, #272]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	604b      	str	r3, [r1, #4]
 8001d4e:	e023      	b.n	8001d98 <HAL_RCC_OscConfig+0x434>
 8001d50:	4b42      	ldr	r3, [pc, #264]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	061b      	lsls	r3, r3, #24
 8001d5e:	493f      	ldr	r1, [pc, #252]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	60cb      	str	r3, [r1, #12]
 8001d64:	e018      	b.n	8001d98 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001d66:	4b3d      	ldr	r3, [pc, #244]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a3c      	ldr	r2, [pc, #240]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001d6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d72:	f7ff f9bb 	bl	80010ec <HAL_GetTick>
 8001d76:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001d7a:	f7ff f9b7 	bl	80010ec <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e23d      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d8c:	4b33      	ldr	r3, [pc, #204]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f0      	bne.n	8001d7a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0308 	and.w	r3, r3, #8
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d036      	beq.n	8001e12 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d019      	beq.n	8001de0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dac:	4b2b      	ldr	r3, [pc, #172]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001dae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001db0:	4a2a      	ldr	r2, [pc, #168]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db8:	f7ff f998 	bl	80010ec <HAL_GetTick>
 8001dbc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc0:	f7ff f994 	bl	80010ec <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e21a      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001dd2:	4b22      	ldr	r3, [pc, #136]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001dd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x45c>
 8001dde:	e018      	b.n	8001e12 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de0:	4b1e      	ldr	r3, [pc, #120]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001de2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001de4:	4a1d      	ldr	r2, [pc, #116]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001de6:	f023 0301 	bic.w	r3, r3, #1
 8001dea:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dec:	f7ff f97e 	bl	80010ec <HAL_GetTick>
 8001df0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df4:	f7ff f97a 	bl	80010ec <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e200      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e06:	4b15      	ldr	r3, [pc, #84]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001e08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f0      	bne.n	8001df4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0320 	and.w	r3, r3, #32
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d039      	beq.n	8001e92 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d01c      	beq.n	8001e60 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e26:	4b0d      	ldr	r3, [pc, #52]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a0c      	ldr	r2, [pc, #48]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001e2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e30:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e32:	f7ff f95b 	bl	80010ec <HAL_GetTick>
 8001e36:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e3a:	f7ff f957 	bl	80010ec <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e1dd      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e4c:	4b03      	ldr	r3, [pc, #12]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f0      	beq.n	8001e3a <HAL_RCC_OscConfig+0x4d6>
 8001e58:	e01b      	b.n	8001e92 <HAL_RCC_OscConfig+0x52e>
 8001e5a:	bf00      	nop
 8001e5c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e60:	4b9b      	ldr	r3, [pc, #620]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a9a      	ldr	r2, [pc, #616]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001e66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001e6a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e6c:	f7ff f93e 	bl	80010ec <HAL_GetTick>
 8001e70:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e74:	f7ff f93a 	bl	80010ec <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e1c0      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e86:	4b92      	ldr	r3, [pc, #584]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f0      	bne.n	8001e74 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0304 	and.w	r3, r3, #4
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 8081 	beq.w	8001fa2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ea0:	4b8c      	ldr	r3, [pc, #560]	@ (80020d4 <HAL_RCC_OscConfig+0x770>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a8b      	ldr	r2, [pc, #556]	@ (80020d4 <HAL_RCC_OscConfig+0x770>)
 8001ea6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eaa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001eac:	f7ff f91e 	bl	80010ec <HAL_GetTick>
 8001eb0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb4:	f7ff f91a 	bl	80010ec <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b64      	cmp	r3, #100	@ 0x64
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e1a0      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ec6:	4b83      	ldr	r3, [pc, #524]	@ (80020d4 <HAL_RCC_OscConfig+0x770>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0f0      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d106      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x584>
 8001eda:	4b7d      	ldr	r3, [pc, #500]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ede:	4a7c      	ldr	r2, [pc, #496]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ee6:	e02d      	b.n	8001f44 <HAL_RCC_OscConfig+0x5e0>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10c      	bne.n	8001f0a <HAL_RCC_OscConfig+0x5a6>
 8001ef0:	4b77      	ldr	r3, [pc, #476]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef4:	4a76      	ldr	r2, [pc, #472]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001ef6:	f023 0301 	bic.w	r3, r3, #1
 8001efa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001efc:	4b74      	ldr	r3, [pc, #464]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f00:	4a73      	ldr	r2, [pc, #460]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001f02:	f023 0304 	bic.w	r3, r3, #4
 8001f06:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f08:	e01c      	b.n	8001f44 <HAL_RCC_OscConfig+0x5e0>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b05      	cmp	r3, #5
 8001f10:	d10c      	bne.n	8001f2c <HAL_RCC_OscConfig+0x5c8>
 8001f12:	4b6f      	ldr	r3, [pc, #444]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f16:	4a6e      	ldr	r2, [pc, #440]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001f18:	f043 0304 	orr.w	r3, r3, #4
 8001f1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f1e:	4b6c      	ldr	r3, [pc, #432]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f22:	4a6b      	ldr	r2, [pc, #428]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f2a:	e00b      	b.n	8001f44 <HAL_RCC_OscConfig+0x5e0>
 8001f2c:	4b68      	ldr	r3, [pc, #416]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f30:	4a67      	ldr	r2, [pc, #412]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001f32:	f023 0301 	bic.w	r3, r3, #1
 8001f36:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f38:	4b65      	ldr	r3, [pc, #404]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f3c:	4a64      	ldr	r2, [pc, #400]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001f3e:	f023 0304 	bic.w	r3, r3, #4
 8001f42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d015      	beq.n	8001f78 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4c:	f7ff f8ce 	bl	80010ec <HAL_GetTick>
 8001f50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f52:	e00a      	b.n	8001f6a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f54:	f7ff f8ca 	bl	80010ec <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e14e      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f6a:	4b59      	ldr	r3, [pc, #356]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0ee      	beq.n	8001f54 <HAL_RCC_OscConfig+0x5f0>
 8001f76:	e014      	b.n	8001fa2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f78:	f7ff f8b8 	bl	80010ec <HAL_GetTick>
 8001f7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f7e:	e00a      	b.n	8001f96 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f80:	f7ff f8b4 	bl	80010ec <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e138      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f96:	4b4e      	ldr	r3, [pc, #312]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1ee      	bne.n	8001f80 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 812d 	beq.w	8002206 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001fac:	4b48      	ldr	r3, [pc, #288]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001fb4:	2b18      	cmp	r3, #24
 8001fb6:	f000 80bd 	beq.w	8002134 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	f040 809e 	bne.w	8002100 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc4:	4b42      	ldr	r3, [pc, #264]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a41      	ldr	r2, [pc, #260]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001fca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd0:	f7ff f88c 	bl	80010ec <HAL_GetTick>
 8001fd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd8:	f7ff f888 	bl	80010ec <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e10e      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fea:	4b39      	ldr	r3, [pc, #228]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ff6:	4b36      	ldr	r3, [pc, #216]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001ff8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ffa:	4b37      	ldr	r3, [pc, #220]	@ (80020d8 <HAL_RCC_OscConfig+0x774>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002006:	0112      	lsls	r2, r2, #4
 8002008:	430a      	orrs	r2, r1
 800200a:	4931      	ldr	r1, [pc, #196]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 800200c:	4313      	orrs	r3, r2
 800200e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002014:	3b01      	subs	r3, #1
 8002016:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800201e:	3b01      	subs	r3, #1
 8002020:	025b      	lsls	r3, r3, #9
 8002022:	b29b      	uxth	r3, r3
 8002024:	431a      	orrs	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800202a:	3b01      	subs	r3, #1
 800202c:	041b      	lsls	r3, r3, #16
 800202e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002038:	3b01      	subs	r3, #1
 800203a:	061b      	lsls	r3, r3, #24
 800203c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002040:	4923      	ldr	r1, [pc, #140]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8002042:	4313      	orrs	r3, r2
 8002044:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002046:	4b22      	ldr	r3, [pc, #136]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8002048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800204a:	4a21      	ldr	r2, [pc, #132]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 800204c:	f023 0301 	bic.w	r3, r3, #1
 8002050:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002052:	4b1f      	ldr	r3, [pc, #124]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8002054:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002056:	4b21      	ldr	r3, [pc, #132]	@ (80020dc <HAL_RCC_OscConfig+0x778>)
 8002058:	4013      	ands	r3, r2
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800205e:	00d2      	lsls	r2, r2, #3
 8002060:	491b      	ldr	r1, [pc, #108]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8002062:	4313      	orrs	r3, r2
 8002064:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002066:	4b1a      	ldr	r3, [pc, #104]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8002068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800206a:	f023 020c 	bic.w	r2, r3, #12
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002072:	4917      	ldr	r1, [pc, #92]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8002074:	4313      	orrs	r3, r2
 8002076:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002078:	4b15      	ldr	r3, [pc, #84]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 800207a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800207c:	f023 0202 	bic.w	r2, r3, #2
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002084:	4912      	ldr	r1, [pc, #72]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8002086:	4313      	orrs	r3, r2
 8002088:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800208a:	4b11      	ldr	r3, [pc, #68]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 800208c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208e:	4a10      	ldr	r2, [pc, #64]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8002090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002094:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002096:	4b0e      	ldr	r3, [pc, #56]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8002098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209a:	4a0d      	ldr	r2, [pc, #52]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 800209c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80020a2:	4b0b      	ldr	r3, [pc, #44]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 80020a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a6:	4a0a      	ldr	r2, [pc, #40]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 80020a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80020ae:	4b08      	ldr	r3, [pc, #32]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 80020b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b2:	4a07      	ldr	r2, [pc, #28]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020ba:	4b05      	ldr	r3, [pc, #20]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a04      	ldr	r2, [pc, #16]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 80020c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c6:	f7ff f811 	bl	80010ec <HAL_GetTick>
 80020ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020cc:	e011      	b.n	80020f2 <HAL_RCC_OscConfig+0x78e>
 80020ce:	bf00      	nop
 80020d0:	58024400 	.word	0x58024400
 80020d4:	58024800 	.word	0x58024800
 80020d8:	fffffc0c 	.word	0xfffffc0c
 80020dc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e0:	f7ff f804 	bl	80010ec <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e08a      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020f2:	4b47      	ldr	r3, [pc, #284]	@ (8002210 <HAL_RCC_OscConfig+0x8ac>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f0      	beq.n	80020e0 <HAL_RCC_OscConfig+0x77c>
 80020fe:	e082      	b.n	8002206 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002100:	4b43      	ldr	r3, [pc, #268]	@ (8002210 <HAL_RCC_OscConfig+0x8ac>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a42      	ldr	r2, [pc, #264]	@ (8002210 <HAL_RCC_OscConfig+0x8ac>)
 8002106:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800210a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210c:	f7fe ffee 	bl	80010ec <HAL_GetTick>
 8002110:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002114:	f7fe ffea 	bl	80010ec <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e070      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002126:	4b3a      	ldr	r3, [pc, #232]	@ (8002210 <HAL_RCC_OscConfig+0x8ac>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x7b0>
 8002132:	e068      	b.n	8002206 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002134:	4b36      	ldr	r3, [pc, #216]	@ (8002210 <HAL_RCC_OscConfig+0x8ac>)
 8002136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002138:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800213a:	4b35      	ldr	r3, [pc, #212]	@ (8002210 <HAL_RCC_OscConfig+0x8ac>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002144:	2b01      	cmp	r3, #1
 8002146:	d031      	beq.n	80021ac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	f003 0203 	and.w	r2, r3, #3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002152:	429a      	cmp	r2, r3
 8002154:	d12a      	bne.n	80021ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	091b      	lsrs	r3, r3, #4
 800215a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002162:	429a      	cmp	r2, r3
 8002164:	d122      	bne.n	80021ac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002170:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002172:	429a      	cmp	r2, r3
 8002174:	d11a      	bne.n	80021ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	0a5b      	lsrs	r3, r3, #9
 800217a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002182:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002184:	429a      	cmp	r2, r3
 8002186:	d111      	bne.n	80021ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	0c1b      	lsrs	r3, r3, #16
 800218c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002194:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002196:	429a      	cmp	r2, r3
 8002198:	d108      	bne.n	80021ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	0e1b      	lsrs	r3, r3, #24
 800219e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e02b      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80021b0:	4b17      	ldr	r3, [pc, #92]	@ (8002210 <HAL_RCC_OscConfig+0x8ac>)
 80021b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021b4:	08db      	lsrs	r3, r3, #3
 80021b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80021ba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d01f      	beq.n	8002206 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80021c6:	4b12      	ldr	r3, [pc, #72]	@ (8002210 <HAL_RCC_OscConfig+0x8ac>)
 80021c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ca:	4a11      	ldr	r2, [pc, #68]	@ (8002210 <HAL_RCC_OscConfig+0x8ac>)
 80021cc:	f023 0301 	bic.w	r3, r3, #1
 80021d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021d2:	f7fe ff8b 	bl	80010ec <HAL_GetTick>
 80021d6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80021d8:	bf00      	nop
 80021da:	f7fe ff87 	bl	80010ec <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d0f9      	beq.n	80021da <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80021e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002210 <HAL_RCC_OscConfig+0x8ac>)
 80021e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002214 <HAL_RCC_OscConfig+0x8b0>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80021f2:	00d2      	lsls	r2, r2, #3
 80021f4:	4906      	ldr	r1, [pc, #24]	@ (8002210 <HAL_RCC_OscConfig+0x8ac>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80021fa:	4b05      	ldr	r3, [pc, #20]	@ (8002210 <HAL_RCC_OscConfig+0x8ac>)
 80021fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fe:	4a04      	ldr	r2, [pc, #16]	@ (8002210 <HAL_RCC_OscConfig+0x8ac>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3730      	adds	r7, #48	@ 0x30
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	58024400 	.word	0x58024400
 8002214:	ffff0007 	.word	0xffff0007

08002218 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e19c      	b.n	8002566 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800222c:	4b8a      	ldr	r3, [pc, #552]	@ (8002458 <HAL_RCC_ClockConfig+0x240>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d910      	bls.n	800225c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	4b87      	ldr	r3, [pc, #540]	@ (8002458 <HAL_RCC_ClockConfig+0x240>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 020f 	bic.w	r2, r3, #15
 8002242:	4985      	ldr	r1, [pc, #532]	@ (8002458 <HAL_RCC_ClockConfig+0x240>)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	4313      	orrs	r3, r2
 8002248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800224a:	4b83      	ldr	r3, [pc, #524]	@ (8002458 <HAL_RCC_ClockConfig+0x240>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d001      	beq.n	800225c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e184      	b.n	8002566 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	d010      	beq.n	800228a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	4b7b      	ldr	r3, [pc, #492]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002274:	429a      	cmp	r2, r3
 8002276:	d908      	bls.n	800228a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002278:	4b78      	ldr	r3, [pc, #480]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	4975      	ldr	r1, [pc, #468]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 8002286:	4313      	orrs	r3, r2
 8002288:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	2b00      	cmp	r3, #0
 8002294:	d010      	beq.n	80022b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695a      	ldr	r2, [r3, #20]
 800229a:	4b70      	ldr	r3, [pc, #448]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d908      	bls.n	80022b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022a6:	4b6d      	ldr	r3, [pc, #436]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	496a      	ldr	r1, [pc, #424]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0310 	and.w	r3, r3, #16
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d010      	beq.n	80022e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	699a      	ldr	r2, [r3, #24]
 80022c8:	4b64      	ldr	r3, [pc, #400]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d908      	bls.n	80022e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80022d4:	4b61      	ldr	r3, [pc, #388]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	495e      	ldr	r1, [pc, #376]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0320 	and.w	r3, r3, #32
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d010      	beq.n	8002314 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69da      	ldr	r2, [r3, #28]
 80022f6:	4b59      	ldr	r3, [pc, #356]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022fe:	429a      	cmp	r2, r3
 8002300:	d908      	bls.n	8002314 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002302:	4b56      	ldr	r3, [pc, #344]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	4953      	ldr	r1, [pc, #332]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 8002310:	4313      	orrs	r3, r2
 8002312:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d010      	beq.n	8002342 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	4b4d      	ldr	r3, [pc, #308]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	f003 030f 	and.w	r3, r3, #15
 800232c:	429a      	cmp	r2, r3
 800232e:	d908      	bls.n	8002342 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002330:	4b4a      	ldr	r3, [pc, #296]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	f023 020f 	bic.w	r2, r3, #15
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	4947      	ldr	r1, [pc, #284]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 800233e:	4313      	orrs	r3, r2
 8002340:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d055      	beq.n	80023fa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800234e:	4b43      	ldr	r3, [pc, #268]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	4940      	ldr	r1, [pc, #256]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 800235c:	4313      	orrs	r3, r2
 800235e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b02      	cmp	r3, #2
 8002366:	d107      	bne.n	8002378 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002368:	4b3c      	ldr	r3, [pc, #240]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d121      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0f6      	b.n	8002566 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b03      	cmp	r3, #3
 800237e:	d107      	bne.n	8002390 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002380:	4b36      	ldr	r3, [pc, #216]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d115      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0ea      	b.n	8002566 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d107      	bne.n	80023a8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002398:	4b30      	ldr	r3, [pc, #192]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d109      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0de      	b.n	8002566 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023a8:	4b2c      	ldr	r3, [pc, #176]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0d6      	b.n	8002566 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023b8:	4b28      	ldr	r3, [pc, #160]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	f023 0207 	bic.w	r2, r3, #7
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	4925      	ldr	r1, [pc, #148]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023ca:	f7fe fe8f 	bl	80010ec <HAL_GetTick>
 80023ce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d0:	e00a      	b.n	80023e8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d2:	f7fe fe8b 	bl	80010ec <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e0be      	b.n	8002566 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e8:	4b1c      	ldr	r3, [pc, #112]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d1eb      	bne.n	80023d2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d010      	beq.n	8002428 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	4b14      	ldr	r3, [pc, #80]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	429a      	cmp	r2, r3
 8002414:	d208      	bcs.n	8002428 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002416:	4b11      	ldr	r3, [pc, #68]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	f023 020f 	bic.w	r2, r3, #15
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	490e      	ldr	r1, [pc, #56]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 8002424:	4313      	orrs	r3, r2
 8002426:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002428:	4b0b      	ldr	r3, [pc, #44]	@ (8002458 <HAL_RCC_ClockConfig+0x240>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 030f 	and.w	r3, r3, #15
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	d214      	bcs.n	8002460 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002436:	4b08      	ldr	r3, [pc, #32]	@ (8002458 <HAL_RCC_ClockConfig+0x240>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 020f 	bic.w	r2, r3, #15
 800243e:	4906      	ldr	r1, [pc, #24]	@ (8002458 <HAL_RCC_ClockConfig+0x240>)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	4313      	orrs	r3, r2
 8002444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002446:	4b04      	ldr	r3, [pc, #16]	@ (8002458 <HAL_RCC_ClockConfig+0x240>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	429a      	cmp	r2, r3
 8002452:	d005      	beq.n	8002460 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e086      	b.n	8002566 <HAL_RCC_ClockConfig+0x34e>
 8002458:	52002000 	.word	0x52002000
 800245c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d010      	beq.n	800248e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	4b3f      	ldr	r3, [pc, #252]	@ (8002570 <HAL_RCC_ClockConfig+0x358>)
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002478:	429a      	cmp	r2, r3
 800247a:	d208      	bcs.n	800248e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800247c:	4b3c      	ldr	r3, [pc, #240]	@ (8002570 <HAL_RCC_ClockConfig+0x358>)
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	4939      	ldr	r1, [pc, #228]	@ (8002570 <HAL_RCC_ClockConfig+0x358>)
 800248a:	4313      	orrs	r3, r2
 800248c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d010      	beq.n	80024bc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695a      	ldr	r2, [r3, #20]
 800249e:	4b34      	ldr	r3, [pc, #208]	@ (8002570 <HAL_RCC_ClockConfig+0x358>)
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d208      	bcs.n	80024bc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80024aa:	4b31      	ldr	r3, [pc, #196]	@ (8002570 <HAL_RCC_ClockConfig+0x358>)
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	492e      	ldr	r1, [pc, #184]	@ (8002570 <HAL_RCC_ClockConfig+0x358>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0310 	and.w	r3, r3, #16
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d010      	beq.n	80024ea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	699a      	ldr	r2, [r3, #24]
 80024cc:	4b28      	ldr	r3, [pc, #160]	@ (8002570 <HAL_RCC_ClockConfig+0x358>)
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d208      	bcs.n	80024ea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80024d8:	4b25      	ldr	r3, [pc, #148]	@ (8002570 <HAL_RCC_ClockConfig+0x358>)
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	4922      	ldr	r1, [pc, #136]	@ (8002570 <HAL_RCC_ClockConfig+0x358>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0320 	and.w	r3, r3, #32
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d010      	beq.n	8002518 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69da      	ldr	r2, [r3, #28]
 80024fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002570 <HAL_RCC_ClockConfig+0x358>)
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002502:	429a      	cmp	r2, r3
 8002504:	d208      	bcs.n	8002518 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002506:	4b1a      	ldr	r3, [pc, #104]	@ (8002570 <HAL_RCC_ClockConfig+0x358>)
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	4917      	ldr	r1, [pc, #92]	@ (8002570 <HAL_RCC_ClockConfig+0x358>)
 8002514:	4313      	orrs	r3, r2
 8002516:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002518:	f000 f834 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 800251c:	4602      	mov	r2, r0
 800251e:	4b14      	ldr	r3, [pc, #80]	@ (8002570 <HAL_RCC_ClockConfig+0x358>)
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	0a1b      	lsrs	r3, r3, #8
 8002524:	f003 030f 	and.w	r3, r3, #15
 8002528:	4912      	ldr	r1, [pc, #72]	@ (8002574 <HAL_RCC_ClockConfig+0x35c>)
 800252a:	5ccb      	ldrb	r3, [r1, r3]
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	fa22 f303 	lsr.w	r3, r2, r3
 8002534:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002536:	4b0e      	ldr	r3, [pc, #56]	@ (8002570 <HAL_RCC_ClockConfig+0x358>)
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	4a0d      	ldr	r2, [pc, #52]	@ (8002574 <HAL_RCC_ClockConfig+0x35c>)
 8002540:	5cd3      	ldrb	r3, [r2, r3]
 8002542:	f003 031f 	and.w	r3, r3, #31
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	fa22 f303 	lsr.w	r3, r2, r3
 800254c:	4a0a      	ldr	r2, [pc, #40]	@ (8002578 <HAL_RCC_ClockConfig+0x360>)
 800254e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002550:	4a0a      	ldr	r2, [pc, #40]	@ (800257c <HAL_RCC_ClockConfig+0x364>)
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002556:	4b0a      	ldr	r3, [pc, #40]	@ (8002580 <HAL_RCC_ClockConfig+0x368>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7fe fd7c 	bl	8001058 <HAL_InitTick>
 8002560:	4603      	mov	r3, r0
 8002562:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002564:	7bfb      	ldrb	r3, [r7, #15]
}
 8002566:	4618      	mov	r0, r3
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	58024400 	.word	0x58024400
 8002574:	080051e4 	.word	0x080051e4
 8002578:	24000004 	.word	0x24000004
 800257c:	24000000 	.word	0x24000000
 8002580:	24000024 	.word	0x24000024

08002584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002584:	b480      	push	{r7}
 8002586:	b089      	sub	sp, #36	@ 0x24
 8002588:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800258a:	4bb3      	ldr	r3, [pc, #716]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002592:	2b18      	cmp	r3, #24
 8002594:	f200 8155 	bhi.w	8002842 <HAL_RCC_GetSysClockFreq+0x2be>
 8002598:	a201      	add	r2, pc, #4	@ (adr r2, 80025a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800259a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800259e:	bf00      	nop
 80025a0:	08002605 	.word	0x08002605
 80025a4:	08002843 	.word	0x08002843
 80025a8:	08002843 	.word	0x08002843
 80025ac:	08002843 	.word	0x08002843
 80025b0:	08002843 	.word	0x08002843
 80025b4:	08002843 	.word	0x08002843
 80025b8:	08002843 	.word	0x08002843
 80025bc:	08002843 	.word	0x08002843
 80025c0:	0800262b 	.word	0x0800262b
 80025c4:	08002843 	.word	0x08002843
 80025c8:	08002843 	.word	0x08002843
 80025cc:	08002843 	.word	0x08002843
 80025d0:	08002843 	.word	0x08002843
 80025d4:	08002843 	.word	0x08002843
 80025d8:	08002843 	.word	0x08002843
 80025dc:	08002843 	.word	0x08002843
 80025e0:	08002631 	.word	0x08002631
 80025e4:	08002843 	.word	0x08002843
 80025e8:	08002843 	.word	0x08002843
 80025ec:	08002843 	.word	0x08002843
 80025f0:	08002843 	.word	0x08002843
 80025f4:	08002843 	.word	0x08002843
 80025f8:	08002843 	.word	0x08002843
 80025fc:	08002843 	.word	0x08002843
 8002600:	08002637 	.word	0x08002637
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002604:	4b94      	ldr	r3, [pc, #592]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0320 	and.w	r3, r3, #32
 800260c:	2b00      	cmp	r3, #0
 800260e:	d009      	beq.n	8002624 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002610:	4b91      	ldr	r3, [pc, #580]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	08db      	lsrs	r3, r3, #3
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	4a90      	ldr	r2, [pc, #576]	@ (800285c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800261c:	fa22 f303 	lsr.w	r3, r2, r3
 8002620:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002622:	e111      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002624:	4b8d      	ldr	r3, [pc, #564]	@ (800285c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002626:	61bb      	str	r3, [r7, #24]
      break;
 8002628:	e10e      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800262a:	4b8d      	ldr	r3, [pc, #564]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800262c:	61bb      	str	r3, [r7, #24]
      break;
 800262e:	e10b      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002630:	4b8c      	ldr	r3, [pc, #560]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002632:	61bb      	str	r3, [r7, #24]
      break;
 8002634:	e108      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002636:	4b88      	ldr	r3, [pc, #544]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002640:	4b85      	ldr	r3, [pc, #532]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002644:	091b      	lsrs	r3, r3, #4
 8002646:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800264a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800264c:	4b82      	ldr	r3, [pc, #520]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800264e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002656:	4b80      	ldr	r3, [pc, #512]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800265a:	08db      	lsrs	r3, r3, #3
 800265c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	fb02 f303 	mul.w	r3, r2, r3
 8002666:	ee07 3a90 	vmov	s15, r3
 800266a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800266e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 80e1 	beq.w	800283c <HAL_RCC_GetSysClockFreq+0x2b8>
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2b02      	cmp	r3, #2
 800267e:	f000 8083 	beq.w	8002788 <HAL_RCC_GetSysClockFreq+0x204>
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2b02      	cmp	r3, #2
 8002686:	f200 80a1 	bhi.w	80027cc <HAL_RCC_GetSysClockFreq+0x248>
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_RCC_GetSysClockFreq+0x114>
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d056      	beq.n	8002744 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002696:	e099      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002698:	4b6f      	ldr	r3, [pc, #444]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0320 	and.w	r3, r3, #32
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d02d      	beq.n	8002700 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80026a4:	4b6c      	ldr	r3, [pc, #432]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	08db      	lsrs	r3, r3, #3
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	4a6b      	ldr	r2, [pc, #428]	@ (800285c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026b0:	fa22 f303 	lsr.w	r3, r2, r3
 80026b4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	ee07 3a90 	vmov	s15, r3
 80026bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	ee07 3a90 	vmov	s15, r3
 80026c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026ce:	4b62      	ldr	r3, [pc, #392]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026d6:	ee07 3a90 	vmov	s15, r3
 80026da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026de:	ed97 6a02 	vldr	s12, [r7, #8]
 80026e2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002868 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026fa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80026fe:	e087      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	ee07 3a90 	vmov	s15, r3
 8002706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800270a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800286c <HAL_RCC_GetSysClockFreq+0x2e8>
 800270e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002712:	4b51      	ldr	r3, [pc, #324]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800271a:	ee07 3a90 	vmov	s15, r3
 800271e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002722:	ed97 6a02 	vldr	s12, [r7, #8]
 8002726:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002868 <HAL_RCC_GetSysClockFreq+0x2e4>
 800272a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800272e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002732:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800273a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800273e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002742:	e065      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	ee07 3a90 	vmov	s15, r3
 800274a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800274e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002870 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002756:	4b40      	ldr	r3, [pc, #256]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800275e:	ee07 3a90 	vmov	s15, r3
 8002762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002766:	ed97 6a02 	vldr	s12, [r7, #8]
 800276a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002868 <HAL_RCC_GetSysClockFreq+0x2e4>
 800276e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002776:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800277a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800277e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002782:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002786:	e043      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	ee07 3a90 	vmov	s15, r3
 800278e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002792:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002874 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800279a:	4b2f      	ldr	r3, [pc, #188]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027a2:	ee07 3a90 	vmov	s15, r3
 80027a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80027ae:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002868 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027ca:	e021      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	ee07 3a90 	vmov	s15, r3
 80027d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027d6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002870 <HAL_RCC_GetSysClockFreq+0x2ec>
 80027da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027de:	4b1e      	ldr	r3, [pc, #120]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027e6:	ee07 3a90 	vmov	s15, r3
 80027ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80027f2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002868 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800280a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800280e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002810:	4b11      	ldr	r3, [pc, #68]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002814:	0a5b      	lsrs	r3, r3, #9
 8002816:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800281a:	3301      	adds	r3, #1
 800281c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	ee07 3a90 	vmov	s15, r3
 8002824:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002828:	edd7 6a07 	vldr	s13, [r7, #28]
 800282c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002830:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002834:	ee17 3a90 	vmov	r3, s15
 8002838:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800283a:	e005      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	61bb      	str	r3, [r7, #24]
      break;
 8002840:	e002      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002842:	4b07      	ldr	r3, [pc, #28]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002844:	61bb      	str	r3, [r7, #24]
      break;
 8002846:	bf00      	nop
  }

  return sysclockfreq;
 8002848:	69bb      	ldr	r3, [r7, #24]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3724      	adds	r7, #36	@ 0x24
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	58024400 	.word	0x58024400
 800285c:	03d09000 	.word	0x03d09000
 8002860:	003d0900 	.word	0x003d0900
 8002864:	017d7840 	.word	0x017d7840
 8002868:	46000000 	.word	0x46000000
 800286c:	4c742400 	.word	0x4c742400
 8002870:	4a742400 	.word	0x4a742400
 8002874:	4bbebc20 	.word	0x4bbebc20

08002878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800287e:	f7ff fe81 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 8002882:	4602      	mov	r2, r0
 8002884:	4b10      	ldr	r3, [pc, #64]	@ (80028c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	0a1b      	lsrs	r3, r3, #8
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	490f      	ldr	r1, [pc, #60]	@ (80028cc <HAL_RCC_GetHCLKFreq+0x54>)
 8002890:	5ccb      	ldrb	r3, [r1, r3]
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	fa22 f303 	lsr.w	r3, r2, r3
 800289a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800289c:	4b0a      	ldr	r3, [pc, #40]	@ (80028c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	f003 030f 	and.w	r3, r3, #15
 80028a4:	4a09      	ldr	r2, [pc, #36]	@ (80028cc <HAL_RCC_GetHCLKFreq+0x54>)
 80028a6:	5cd3      	ldrb	r3, [r2, r3]
 80028a8:	f003 031f 	and.w	r3, r3, #31
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	fa22 f303 	lsr.w	r3, r2, r3
 80028b2:	4a07      	ldr	r2, [pc, #28]	@ (80028d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80028b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028b6:	4a07      	ldr	r2, [pc, #28]	@ (80028d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80028bc:	4b04      	ldr	r3, [pc, #16]	@ (80028d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80028be:	681b      	ldr	r3, [r3, #0]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	58024400 	.word	0x58024400
 80028cc:	080051e4 	.word	0x080051e4
 80028d0:	24000004 	.word	0x24000004
 80028d4:	24000000 	.word	0x24000000

080028d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80028dc:	f7ff ffcc 	bl	8002878 <HAL_RCC_GetHCLKFreq>
 80028e0:	4602      	mov	r2, r0
 80028e2:	4b06      	ldr	r3, [pc, #24]	@ (80028fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	091b      	lsrs	r3, r3, #4
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	4904      	ldr	r1, [pc, #16]	@ (8002900 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028ee:	5ccb      	ldrb	r3, [r1, r3]
 80028f0:	f003 031f 	and.w	r3, r3, #31
 80028f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	58024400 	.word	0x58024400
 8002900:	080051e4 	.word	0x080051e4

08002904 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002908:	f7ff ffb6 	bl	8002878 <HAL_RCC_GetHCLKFreq>
 800290c:	4602      	mov	r2, r0
 800290e:	4b06      	ldr	r3, [pc, #24]	@ (8002928 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	0a1b      	lsrs	r3, r3, #8
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	4904      	ldr	r1, [pc, #16]	@ (800292c <HAL_RCC_GetPCLK2Freq+0x28>)
 800291a:	5ccb      	ldrb	r3, [r1, r3]
 800291c:	f003 031f 	and.w	r3, r3, #31
 8002920:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002924:	4618      	mov	r0, r3
 8002926:	bd80      	pop	{r7, pc}
 8002928:	58024400 	.word	0x58024400
 800292c:	080051e4 	.word	0x080051e4

08002930 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002934:	f7ff ffa0 	bl	8002878 <HAL_RCC_GetHCLKFreq>
 8002938:	4602      	mov	r2, r0
 800293a:	4b06      	ldr	r3, [pc, #24]	@ (8002954 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	091b      	lsrs	r3, r3, #4
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	4904      	ldr	r1, [pc, #16]	@ (8002958 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002946:	5ccb      	ldrb	r3, [r1, r3]
 8002948:	f003 031f 	and.w	r3, r3, #31
 800294c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8002950:	4618      	mov	r0, r3
 8002952:	bd80      	pop	{r7, pc}
 8002954:	58024400 	.word	0x58024400
 8002958:	080051e4 	.word	0x080051e4

0800295c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800295c:	b480      	push	{r7}
 800295e:	b089      	sub	sp, #36	@ 0x24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002964:	4ba1      	ldr	r3, [pc, #644]	@ (8002bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800296e:	4b9f      	ldr	r3, [pc, #636]	@ (8002bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002972:	0b1b      	lsrs	r3, r3, #12
 8002974:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002978:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800297a:	4b9c      	ldr	r3, [pc, #624]	@ (8002bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800297c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297e:	091b      	lsrs	r3, r3, #4
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8002986:	4b99      	ldr	r3, [pc, #612]	@ (8002bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800298a:	08db      	lsrs	r3, r3, #3
 800298c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	fb02 f303 	mul.w	r3, r2, r3
 8002996:	ee07 3a90 	vmov	s15, r3
 800299a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800299e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 8111 	beq.w	8002bcc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	f000 8083 	beq.w	8002ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	f200 80a1 	bhi.w	8002afc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d056      	beq.n	8002a74 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80029c6:	e099      	b.n	8002afc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029c8:	4b88      	ldr	r3, [pc, #544]	@ (8002bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0320 	and.w	r3, r3, #32
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d02d      	beq.n	8002a30 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80029d4:	4b85      	ldr	r3, [pc, #532]	@ (8002bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	08db      	lsrs	r3, r3, #3
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	4a84      	ldr	r2, [pc, #528]	@ (8002bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80029e0:	fa22 f303 	lsr.w	r3, r2, r3
 80029e4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	ee07 3a90 	vmov	s15, r3
 80029ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	ee07 3a90 	vmov	s15, r3
 80029f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029fe:	4b7b      	ldr	r3, [pc, #492]	@ (8002bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a06:	ee07 3a90 	vmov	s15, r3
 8002a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002a12:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002a2e:	e087      	b.n	8002b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	ee07 3a90 	vmov	s15, r3
 8002a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a3a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8002a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a42:	4b6a      	ldr	r3, [pc, #424]	@ (8002bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a4a:	ee07 3a90 	vmov	s15, r3
 8002a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8002a56:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a72:	e065      	b.n	8002b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	ee07 3a90 	vmov	s15, r3
 8002a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a7e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002bfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a86:	4b59      	ldr	r3, [pc, #356]	@ (8002bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a8e:	ee07 3a90 	vmov	s15, r3
 8002a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a96:	ed97 6a03 	vldr	s12, [r7, #12]
 8002a9a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002aa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ab2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ab6:	e043      	b.n	8002b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	ee07 3a90 	vmov	s15, r3
 8002abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ac2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002c00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8002ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002aca:	4b48      	ldr	r3, [pc, #288]	@ (8002bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ad2:	ee07 3a90 	vmov	s15, r3
 8002ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ada:	ed97 6a03 	vldr	s12, [r7, #12]
 8002ade:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002aea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002af6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002afa:	e021      	b.n	8002b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	ee07 3a90 	vmov	s15, r3
 8002b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b06:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002bfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b0e:	4b37      	ldr	r3, [pc, #220]	@ (8002bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b16:	ee07 3a90 	vmov	s15, r3
 8002b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002b22:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b3e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8002b40:	4b2a      	ldr	r3, [pc, #168]	@ (8002bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b44:	0a5b      	lsrs	r3, r3, #9
 8002b46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b4a:	ee07 3a90 	vmov	s15, r3
 8002b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002b5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b66:	ee17 2a90 	vmov	r2, s15
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8002b6e:	4b1f      	ldr	r3, [pc, #124]	@ (8002bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b72:	0c1b      	lsrs	r3, r3, #16
 8002b74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b78:	ee07 3a90 	vmov	s15, r3
 8002b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002b88:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b94:	ee17 2a90 	vmov	r2, s15
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8002b9c:	4b13      	ldr	r3, [pc, #76]	@ (8002bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba0:	0e1b      	lsrs	r3, r3, #24
 8002ba2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ba6:	ee07 3a90 	vmov	s15, r3
 8002baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002bb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002bb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8002bba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bc2:	ee17 2a90 	vmov	r2, s15
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8002bca:	e008      	b.n	8002bde <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	609a      	str	r2, [r3, #8]
}
 8002bde:	bf00      	nop
 8002be0:	3724      	adds	r7, #36	@ 0x24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	58024400 	.word	0x58024400
 8002bf0:	03d09000 	.word	0x03d09000
 8002bf4:	46000000 	.word	0x46000000
 8002bf8:	4c742400 	.word	0x4c742400
 8002bfc:	4a742400 	.word	0x4a742400
 8002c00:	4bbebc20 	.word	0x4bbebc20

08002c04 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b089      	sub	sp, #36	@ 0x24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c0c:	4ba1      	ldr	r3, [pc, #644]	@ (8002e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c10:	f003 0303 	and.w	r3, r3, #3
 8002c14:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8002c16:	4b9f      	ldr	r3, [pc, #636]	@ (8002e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1a:	0d1b      	lsrs	r3, r3, #20
 8002c1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c20:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002c22:	4b9c      	ldr	r3, [pc, #624]	@ (8002e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c26:	0a1b      	lsrs	r3, r3, #8
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8002c2e:	4b99      	ldr	r3, [pc, #612]	@ (8002e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c32:	08db      	lsrs	r3, r3, #3
 8002c34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	fb02 f303 	mul.w	r3, r2, r3
 8002c3e:	ee07 3a90 	vmov	s15, r3
 8002c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 8111 	beq.w	8002e74 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	f000 8083 	beq.w	8002d60 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	f200 80a1 	bhi.w	8002da4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d056      	beq.n	8002d1c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8002c6e:	e099      	b.n	8002da4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c70:	4b88      	ldr	r3, [pc, #544]	@ (8002e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0320 	and.w	r3, r3, #32
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d02d      	beq.n	8002cd8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002c7c:	4b85      	ldr	r3, [pc, #532]	@ (8002e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	08db      	lsrs	r3, r3, #3
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	4a84      	ldr	r2, [pc, #528]	@ (8002e98 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8002c88:	fa22 f303 	lsr.w	r3, r2, r3
 8002c8c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	ee07 3a90 	vmov	s15, r3
 8002c94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	ee07 3a90 	vmov	s15, r3
 8002c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ca6:	4b7b      	ldr	r3, [pc, #492]	@ (8002e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cae:	ee07 3a90 	vmov	s15, r3
 8002cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8002cba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cd2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002cd6:	e087      	b.n	8002de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	ee07 3a90 	vmov	s15, r3
 8002cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ce2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8002ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cea:	4b6a      	ldr	r3, [pc, #424]	@ (8002e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cf2:	ee07 3a90 	vmov	s15, r3
 8002cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8002cfe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d1a:	e065      	b.n	8002de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	ee07 3a90 	vmov	s15, r3
 8002d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d26:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d2e:	4b59      	ldr	r3, [pc, #356]	@ (8002e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d36:	ee07 3a90 	vmov	s15, r3
 8002d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002d42:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d5e:	e043      	b.n	8002de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	ee07 3a90 	vmov	s15, r3
 8002d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d6a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8002d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d72:	4b48      	ldr	r3, [pc, #288]	@ (8002e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d7a:	ee07 3a90 	vmov	s15, r3
 8002d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d82:	ed97 6a03 	vldr	s12, [r7, #12]
 8002d86:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002da2:	e021      	b.n	8002de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	ee07 3a90 	vmov	s15, r3
 8002daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002db6:	4b37      	ldr	r3, [pc, #220]	@ (8002e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dbe:	ee07 3a90 	vmov	s15, r3
 8002dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8002dca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002de6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8002de8:	4b2a      	ldr	r3, [pc, #168]	@ (8002e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dec:	0a5b      	lsrs	r3, r3, #9
 8002dee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002df2:	ee07 3a90 	vmov	s15, r3
 8002df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dfa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002dfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002e02:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e0e:	ee17 2a90 	vmov	r2, s15
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8002e16:	4b1f      	ldr	r3, [pc, #124]	@ (8002e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1a:	0c1b      	lsrs	r3, r3, #16
 8002e1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e20:	ee07 3a90 	vmov	s15, r3
 8002e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002e30:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e3c:	ee17 2a90 	vmov	r2, s15
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8002e44:	4b13      	ldr	r3, [pc, #76]	@ (8002e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e48:	0e1b      	lsrs	r3, r3, #24
 8002e4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e4e:	ee07 3a90 	vmov	s15, r3
 8002e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002e5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e6a:	ee17 2a90 	vmov	r2, s15
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8002e72:	e008      	b.n	8002e86 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	609a      	str	r2, [r3, #8]
}
 8002e86:	bf00      	nop
 8002e88:	3724      	adds	r7, #36	@ 0x24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	58024400 	.word	0x58024400
 8002e98:	03d09000 	.word	0x03d09000
 8002e9c:	46000000 	.word	0x46000000
 8002ea0:	4c742400 	.word	0x4c742400
 8002ea4:	4a742400 	.word	0x4a742400
 8002ea8:	4bbebc20 	.word	0x4bbebc20

08002eac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e042      	b.n	8002f44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d106      	bne.n	8002ed6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f83b 	bl	8002f4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2224      	movs	r2, #36	@ 0x24
 8002eda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0201 	bic.w	r2, r2, #1
 8002eec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 fe28 	bl	8003b4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f8bd 	bl	800307c <UART_SetConfig>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e01b      	b.n	8002f44 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0201 	orr.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 fea7 	bl	8003c90 <UART_CheckIdleState>
 8002f42:	4603      	mov	r3, r0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08a      	sub	sp, #40	@ 0x28
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f76:	2b20      	cmp	r3, #32
 8002f78:	d17b      	bne.n	8003072 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d002      	beq.n	8002f86 <HAL_UART_Transmit+0x26>
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e074      	b.n	8003074 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2221      	movs	r2, #33	@ 0x21
 8002f96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f9a:	f7fe f8a7 	bl	80010ec <HAL_GetTick>
 8002f9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	88fa      	ldrh	r2, [r7, #6]
 8002fa4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	88fa      	ldrh	r2, [r7, #6]
 8002fac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fb8:	d108      	bne.n	8002fcc <HAL_UART_Transmit+0x6c>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d104      	bne.n	8002fcc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	e003      	b.n	8002fd4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fd4:	e030      	b.n	8003038 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2180      	movs	r1, #128	@ 0x80
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 feff 	bl	8003de4 <UART_WaitOnFlagUntilTimeout>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e03d      	b.n	8003074 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10b      	bne.n	8003016 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800300c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	3302      	adds	r3, #2
 8003012:	61bb      	str	r3, [r7, #24]
 8003014:	e007      	b.n	8003026 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	781a      	ldrb	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	3301      	adds	r3, #1
 8003024:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800302c:	b29b      	uxth	r3, r3
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800303e:	b29b      	uxth	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1c8      	bne.n	8002fd6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	2200      	movs	r2, #0
 800304c:	2140      	movs	r1, #64	@ 0x40
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 fec8 	bl	8003de4 <UART_WaitOnFlagUntilTimeout>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d005      	beq.n	8003066 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2220      	movs	r2, #32
 800305e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e006      	b.n	8003074 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2220      	movs	r2, #32
 800306a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	e000      	b.n	8003074 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003072:	2302      	movs	r3, #2
  }
}
 8003074:	4618      	mov	r0, r3
 8003076:	3720      	adds	r7, #32
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800307c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003080:	b092      	sub	sp, #72	@ 0x48
 8003082:	af00      	add	r7, sp, #0
 8003084:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	431a      	orrs	r2, r3
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	431a      	orrs	r2, r3
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	4bbe      	ldr	r3, [pc, #760]	@ (80033a4 <UART_SetConfig+0x328>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	6812      	ldr	r2, [r2, #0]
 80030b2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80030b4:	430b      	orrs	r3, r1
 80030b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4ab3      	ldr	r2, [pc, #716]	@ (80033a8 <UART_SetConfig+0x32c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d004      	beq.n	80030e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030e4:	4313      	orrs	r3, r2
 80030e6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	4baf      	ldr	r3, [pc, #700]	@ (80033ac <UART_SetConfig+0x330>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	6812      	ldr	r2, [r2, #0]
 80030f6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80030f8:	430b      	orrs	r3, r1
 80030fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003102:	f023 010f 	bic.w	r1, r3, #15
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4aa6      	ldr	r2, [pc, #664]	@ (80033b0 <UART_SetConfig+0x334>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d177      	bne.n	800320c <UART_SetConfig+0x190>
 800311c:	4ba5      	ldr	r3, [pc, #660]	@ (80033b4 <UART_SetConfig+0x338>)
 800311e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003120:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003124:	2b28      	cmp	r3, #40	@ 0x28
 8003126:	d86d      	bhi.n	8003204 <UART_SetConfig+0x188>
 8003128:	a201      	add	r2, pc, #4	@ (adr r2, 8003130 <UART_SetConfig+0xb4>)
 800312a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312e:	bf00      	nop
 8003130:	080031d5 	.word	0x080031d5
 8003134:	08003205 	.word	0x08003205
 8003138:	08003205 	.word	0x08003205
 800313c:	08003205 	.word	0x08003205
 8003140:	08003205 	.word	0x08003205
 8003144:	08003205 	.word	0x08003205
 8003148:	08003205 	.word	0x08003205
 800314c:	08003205 	.word	0x08003205
 8003150:	080031dd 	.word	0x080031dd
 8003154:	08003205 	.word	0x08003205
 8003158:	08003205 	.word	0x08003205
 800315c:	08003205 	.word	0x08003205
 8003160:	08003205 	.word	0x08003205
 8003164:	08003205 	.word	0x08003205
 8003168:	08003205 	.word	0x08003205
 800316c:	08003205 	.word	0x08003205
 8003170:	080031e5 	.word	0x080031e5
 8003174:	08003205 	.word	0x08003205
 8003178:	08003205 	.word	0x08003205
 800317c:	08003205 	.word	0x08003205
 8003180:	08003205 	.word	0x08003205
 8003184:	08003205 	.word	0x08003205
 8003188:	08003205 	.word	0x08003205
 800318c:	08003205 	.word	0x08003205
 8003190:	080031ed 	.word	0x080031ed
 8003194:	08003205 	.word	0x08003205
 8003198:	08003205 	.word	0x08003205
 800319c:	08003205 	.word	0x08003205
 80031a0:	08003205 	.word	0x08003205
 80031a4:	08003205 	.word	0x08003205
 80031a8:	08003205 	.word	0x08003205
 80031ac:	08003205 	.word	0x08003205
 80031b0:	080031f5 	.word	0x080031f5
 80031b4:	08003205 	.word	0x08003205
 80031b8:	08003205 	.word	0x08003205
 80031bc:	08003205 	.word	0x08003205
 80031c0:	08003205 	.word	0x08003205
 80031c4:	08003205 	.word	0x08003205
 80031c8:	08003205 	.word	0x08003205
 80031cc:	08003205 	.word	0x08003205
 80031d0:	080031fd 	.word	0x080031fd
 80031d4:	2301      	movs	r3, #1
 80031d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031da:	e222      	b.n	8003622 <UART_SetConfig+0x5a6>
 80031dc:	2304      	movs	r3, #4
 80031de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031e2:	e21e      	b.n	8003622 <UART_SetConfig+0x5a6>
 80031e4:	2308      	movs	r3, #8
 80031e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031ea:	e21a      	b.n	8003622 <UART_SetConfig+0x5a6>
 80031ec:	2310      	movs	r3, #16
 80031ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031f2:	e216      	b.n	8003622 <UART_SetConfig+0x5a6>
 80031f4:	2320      	movs	r3, #32
 80031f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031fa:	e212      	b.n	8003622 <UART_SetConfig+0x5a6>
 80031fc:	2340      	movs	r3, #64	@ 0x40
 80031fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003202:	e20e      	b.n	8003622 <UART_SetConfig+0x5a6>
 8003204:	2380      	movs	r3, #128	@ 0x80
 8003206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800320a:	e20a      	b.n	8003622 <UART_SetConfig+0x5a6>
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a69      	ldr	r2, [pc, #420]	@ (80033b8 <UART_SetConfig+0x33c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d130      	bne.n	8003278 <UART_SetConfig+0x1fc>
 8003216:	4b67      	ldr	r3, [pc, #412]	@ (80033b4 <UART_SetConfig+0x338>)
 8003218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	2b05      	cmp	r3, #5
 8003220:	d826      	bhi.n	8003270 <UART_SetConfig+0x1f4>
 8003222:	a201      	add	r2, pc, #4	@ (adr r2, 8003228 <UART_SetConfig+0x1ac>)
 8003224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003228:	08003241 	.word	0x08003241
 800322c:	08003249 	.word	0x08003249
 8003230:	08003251 	.word	0x08003251
 8003234:	08003259 	.word	0x08003259
 8003238:	08003261 	.word	0x08003261
 800323c:	08003269 	.word	0x08003269
 8003240:	2300      	movs	r3, #0
 8003242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003246:	e1ec      	b.n	8003622 <UART_SetConfig+0x5a6>
 8003248:	2304      	movs	r3, #4
 800324a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800324e:	e1e8      	b.n	8003622 <UART_SetConfig+0x5a6>
 8003250:	2308      	movs	r3, #8
 8003252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003256:	e1e4      	b.n	8003622 <UART_SetConfig+0x5a6>
 8003258:	2310      	movs	r3, #16
 800325a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800325e:	e1e0      	b.n	8003622 <UART_SetConfig+0x5a6>
 8003260:	2320      	movs	r3, #32
 8003262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003266:	e1dc      	b.n	8003622 <UART_SetConfig+0x5a6>
 8003268:	2340      	movs	r3, #64	@ 0x40
 800326a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800326e:	e1d8      	b.n	8003622 <UART_SetConfig+0x5a6>
 8003270:	2380      	movs	r3, #128	@ 0x80
 8003272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003276:	e1d4      	b.n	8003622 <UART_SetConfig+0x5a6>
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a4f      	ldr	r2, [pc, #316]	@ (80033bc <UART_SetConfig+0x340>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d130      	bne.n	80032e4 <UART_SetConfig+0x268>
 8003282:	4b4c      	ldr	r3, [pc, #304]	@ (80033b4 <UART_SetConfig+0x338>)
 8003284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	2b05      	cmp	r3, #5
 800328c:	d826      	bhi.n	80032dc <UART_SetConfig+0x260>
 800328e:	a201      	add	r2, pc, #4	@ (adr r2, 8003294 <UART_SetConfig+0x218>)
 8003290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003294:	080032ad 	.word	0x080032ad
 8003298:	080032b5 	.word	0x080032b5
 800329c:	080032bd 	.word	0x080032bd
 80032a0:	080032c5 	.word	0x080032c5
 80032a4:	080032cd 	.word	0x080032cd
 80032a8:	080032d5 	.word	0x080032d5
 80032ac:	2300      	movs	r3, #0
 80032ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032b2:	e1b6      	b.n	8003622 <UART_SetConfig+0x5a6>
 80032b4:	2304      	movs	r3, #4
 80032b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032ba:	e1b2      	b.n	8003622 <UART_SetConfig+0x5a6>
 80032bc:	2308      	movs	r3, #8
 80032be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032c2:	e1ae      	b.n	8003622 <UART_SetConfig+0x5a6>
 80032c4:	2310      	movs	r3, #16
 80032c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032ca:	e1aa      	b.n	8003622 <UART_SetConfig+0x5a6>
 80032cc:	2320      	movs	r3, #32
 80032ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032d2:	e1a6      	b.n	8003622 <UART_SetConfig+0x5a6>
 80032d4:	2340      	movs	r3, #64	@ 0x40
 80032d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032da:	e1a2      	b.n	8003622 <UART_SetConfig+0x5a6>
 80032dc:	2380      	movs	r3, #128	@ 0x80
 80032de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032e2:	e19e      	b.n	8003622 <UART_SetConfig+0x5a6>
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a35      	ldr	r2, [pc, #212]	@ (80033c0 <UART_SetConfig+0x344>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d130      	bne.n	8003350 <UART_SetConfig+0x2d4>
 80032ee:	4b31      	ldr	r3, [pc, #196]	@ (80033b4 <UART_SetConfig+0x338>)
 80032f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	2b05      	cmp	r3, #5
 80032f8:	d826      	bhi.n	8003348 <UART_SetConfig+0x2cc>
 80032fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003300 <UART_SetConfig+0x284>)
 80032fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003300:	08003319 	.word	0x08003319
 8003304:	08003321 	.word	0x08003321
 8003308:	08003329 	.word	0x08003329
 800330c:	08003331 	.word	0x08003331
 8003310:	08003339 	.word	0x08003339
 8003314:	08003341 	.word	0x08003341
 8003318:	2300      	movs	r3, #0
 800331a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800331e:	e180      	b.n	8003622 <UART_SetConfig+0x5a6>
 8003320:	2304      	movs	r3, #4
 8003322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003326:	e17c      	b.n	8003622 <UART_SetConfig+0x5a6>
 8003328:	2308      	movs	r3, #8
 800332a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800332e:	e178      	b.n	8003622 <UART_SetConfig+0x5a6>
 8003330:	2310      	movs	r3, #16
 8003332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003336:	e174      	b.n	8003622 <UART_SetConfig+0x5a6>
 8003338:	2320      	movs	r3, #32
 800333a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800333e:	e170      	b.n	8003622 <UART_SetConfig+0x5a6>
 8003340:	2340      	movs	r3, #64	@ 0x40
 8003342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003346:	e16c      	b.n	8003622 <UART_SetConfig+0x5a6>
 8003348:	2380      	movs	r3, #128	@ 0x80
 800334a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800334e:	e168      	b.n	8003622 <UART_SetConfig+0x5a6>
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a1b      	ldr	r2, [pc, #108]	@ (80033c4 <UART_SetConfig+0x348>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d142      	bne.n	80033e0 <UART_SetConfig+0x364>
 800335a:	4b16      	ldr	r3, [pc, #88]	@ (80033b4 <UART_SetConfig+0x338>)
 800335c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	2b05      	cmp	r3, #5
 8003364:	d838      	bhi.n	80033d8 <UART_SetConfig+0x35c>
 8003366:	a201      	add	r2, pc, #4	@ (adr r2, 800336c <UART_SetConfig+0x2f0>)
 8003368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336c:	08003385 	.word	0x08003385
 8003370:	0800338d 	.word	0x0800338d
 8003374:	08003395 	.word	0x08003395
 8003378:	0800339d 	.word	0x0800339d
 800337c:	080033c9 	.word	0x080033c9
 8003380:	080033d1 	.word	0x080033d1
 8003384:	2300      	movs	r3, #0
 8003386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800338a:	e14a      	b.n	8003622 <UART_SetConfig+0x5a6>
 800338c:	2304      	movs	r3, #4
 800338e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003392:	e146      	b.n	8003622 <UART_SetConfig+0x5a6>
 8003394:	2308      	movs	r3, #8
 8003396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800339a:	e142      	b.n	8003622 <UART_SetConfig+0x5a6>
 800339c:	2310      	movs	r3, #16
 800339e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033a2:	e13e      	b.n	8003622 <UART_SetConfig+0x5a6>
 80033a4:	cfff69f3 	.word	0xcfff69f3
 80033a8:	58000c00 	.word	0x58000c00
 80033ac:	11fff4ff 	.word	0x11fff4ff
 80033b0:	40011000 	.word	0x40011000
 80033b4:	58024400 	.word	0x58024400
 80033b8:	40004400 	.word	0x40004400
 80033bc:	40004800 	.word	0x40004800
 80033c0:	40004c00 	.word	0x40004c00
 80033c4:	40005000 	.word	0x40005000
 80033c8:	2320      	movs	r3, #32
 80033ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033ce:	e128      	b.n	8003622 <UART_SetConfig+0x5a6>
 80033d0:	2340      	movs	r3, #64	@ 0x40
 80033d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033d6:	e124      	b.n	8003622 <UART_SetConfig+0x5a6>
 80033d8:	2380      	movs	r3, #128	@ 0x80
 80033da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033de:	e120      	b.n	8003622 <UART_SetConfig+0x5a6>
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4acb      	ldr	r2, [pc, #812]	@ (8003714 <UART_SetConfig+0x698>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d176      	bne.n	80034d8 <UART_SetConfig+0x45c>
 80033ea:	4bcb      	ldr	r3, [pc, #812]	@ (8003718 <UART_SetConfig+0x69c>)
 80033ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033f2:	2b28      	cmp	r3, #40	@ 0x28
 80033f4:	d86c      	bhi.n	80034d0 <UART_SetConfig+0x454>
 80033f6:	a201      	add	r2, pc, #4	@ (adr r2, 80033fc <UART_SetConfig+0x380>)
 80033f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fc:	080034a1 	.word	0x080034a1
 8003400:	080034d1 	.word	0x080034d1
 8003404:	080034d1 	.word	0x080034d1
 8003408:	080034d1 	.word	0x080034d1
 800340c:	080034d1 	.word	0x080034d1
 8003410:	080034d1 	.word	0x080034d1
 8003414:	080034d1 	.word	0x080034d1
 8003418:	080034d1 	.word	0x080034d1
 800341c:	080034a9 	.word	0x080034a9
 8003420:	080034d1 	.word	0x080034d1
 8003424:	080034d1 	.word	0x080034d1
 8003428:	080034d1 	.word	0x080034d1
 800342c:	080034d1 	.word	0x080034d1
 8003430:	080034d1 	.word	0x080034d1
 8003434:	080034d1 	.word	0x080034d1
 8003438:	080034d1 	.word	0x080034d1
 800343c:	080034b1 	.word	0x080034b1
 8003440:	080034d1 	.word	0x080034d1
 8003444:	080034d1 	.word	0x080034d1
 8003448:	080034d1 	.word	0x080034d1
 800344c:	080034d1 	.word	0x080034d1
 8003450:	080034d1 	.word	0x080034d1
 8003454:	080034d1 	.word	0x080034d1
 8003458:	080034d1 	.word	0x080034d1
 800345c:	080034b9 	.word	0x080034b9
 8003460:	080034d1 	.word	0x080034d1
 8003464:	080034d1 	.word	0x080034d1
 8003468:	080034d1 	.word	0x080034d1
 800346c:	080034d1 	.word	0x080034d1
 8003470:	080034d1 	.word	0x080034d1
 8003474:	080034d1 	.word	0x080034d1
 8003478:	080034d1 	.word	0x080034d1
 800347c:	080034c1 	.word	0x080034c1
 8003480:	080034d1 	.word	0x080034d1
 8003484:	080034d1 	.word	0x080034d1
 8003488:	080034d1 	.word	0x080034d1
 800348c:	080034d1 	.word	0x080034d1
 8003490:	080034d1 	.word	0x080034d1
 8003494:	080034d1 	.word	0x080034d1
 8003498:	080034d1 	.word	0x080034d1
 800349c:	080034c9 	.word	0x080034c9
 80034a0:	2301      	movs	r3, #1
 80034a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034a6:	e0bc      	b.n	8003622 <UART_SetConfig+0x5a6>
 80034a8:	2304      	movs	r3, #4
 80034aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034ae:	e0b8      	b.n	8003622 <UART_SetConfig+0x5a6>
 80034b0:	2308      	movs	r3, #8
 80034b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034b6:	e0b4      	b.n	8003622 <UART_SetConfig+0x5a6>
 80034b8:	2310      	movs	r3, #16
 80034ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034be:	e0b0      	b.n	8003622 <UART_SetConfig+0x5a6>
 80034c0:	2320      	movs	r3, #32
 80034c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034c6:	e0ac      	b.n	8003622 <UART_SetConfig+0x5a6>
 80034c8:	2340      	movs	r3, #64	@ 0x40
 80034ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034ce:	e0a8      	b.n	8003622 <UART_SetConfig+0x5a6>
 80034d0:	2380      	movs	r3, #128	@ 0x80
 80034d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034d6:	e0a4      	b.n	8003622 <UART_SetConfig+0x5a6>
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a8f      	ldr	r2, [pc, #572]	@ (800371c <UART_SetConfig+0x6a0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d130      	bne.n	8003544 <UART_SetConfig+0x4c8>
 80034e2:	4b8d      	ldr	r3, [pc, #564]	@ (8003718 <UART_SetConfig+0x69c>)
 80034e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	2b05      	cmp	r3, #5
 80034ec:	d826      	bhi.n	800353c <UART_SetConfig+0x4c0>
 80034ee:	a201      	add	r2, pc, #4	@ (adr r2, 80034f4 <UART_SetConfig+0x478>)
 80034f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f4:	0800350d 	.word	0x0800350d
 80034f8:	08003515 	.word	0x08003515
 80034fc:	0800351d 	.word	0x0800351d
 8003500:	08003525 	.word	0x08003525
 8003504:	0800352d 	.word	0x0800352d
 8003508:	08003535 	.word	0x08003535
 800350c:	2300      	movs	r3, #0
 800350e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003512:	e086      	b.n	8003622 <UART_SetConfig+0x5a6>
 8003514:	2304      	movs	r3, #4
 8003516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800351a:	e082      	b.n	8003622 <UART_SetConfig+0x5a6>
 800351c:	2308      	movs	r3, #8
 800351e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003522:	e07e      	b.n	8003622 <UART_SetConfig+0x5a6>
 8003524:	2310      	movs	r3, #16
 8003526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800352a:	e07a      	b.n	8003622 <UART_SetConfig+0x5a6>
 800352c:	2320      	movs	r3, #32
 800352e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003532:	e076      	b.n	8003622 <UART_SetConfig+0x5a6>
 8003534:	2340      	movs	r3, #64	@ 0x40
 8003536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800353a:	e072      	b.n	8003622 <UART_SetConfig+0x5a6>
 800353c:	2380      	movs	r3, #128	@ 0x80
 800353e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003542:	e06e      	b.n	8003622 <UART_SetConfig+0x5a6>
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a75      	ldr	r2, [pc, #468]	@ (8003720 <UART_SetConfig+0x6a4>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d130      	bne.n	80035b0 <UART_SetConfig+0x534>
 800354e:	4b72      	ldr	r3, [pc, #456]	@ (8003718 <UART_SetConfig+0x69c>)
 8003550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	2b05      	cmp	r3, #5
 8003558:	d826      	bhi.n	80035a8 <UART_SetConfig+0x52c>
 800355a:	a201      	add	r2, pc, #4	@ (adr r2, 8003560 <UART_SetConfig+0x4e4>)
 800355c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003560:	08003579 	.word	0x08003579
 8003564:	08003581 	.word	0x08003581
 8003568:	08003589 	.word	0x08003589
 800356c:	08003591 	.word	0x08003591
 8003570:	08003599 	.word	0x08003599
 8003574:	080035a1 	.word	0x080035a1
 8003578:	2300      	movs	r3, #0
 800357a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800357e:	e050      	b.n	8003622 <UART_SetConfig+0x5a6>
 8003580:	2304      	movs	r3, #4
 8003582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003586:	e04c      	b.n	8003622 <UART_SetConfig+0x5a6>
 8003588:	2308      	movs	r3, #8
 800358a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800358e:	e048      	b.n	8003622 <UART_SetConfig+0x5a6>
 8003590:	2310      	movs	r3, #16
 8003592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003596:	e044      	b.n	8003622 <UART_SetConfig+0x5a6>
 8003598:	2320      	movs	r3, #32
 800359a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800359e:	e040      	b.n	8003622 <UART_SetConfig+0x5a6>
 80035a0:	2340      	movs	r3, #64	@ 0x40
 80035a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035a6:	e03c      	b.n	8003622 <UART_SetConfig+0x5a6>
 80035a8:	2380      	movs	r3, #128	@ 0x80
 80035aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035ae:	e038      	b.n	8003622 <UART_SetConfig+0x5a6>
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a5b      	ldr	r2, [pc, #364]	@ (8003724 <UART_SetConfig+0x6a8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d130      	bne.n	800361c <UART_SetConfig+0x5a0>
 80035ba:	4b57      	ldr	r3, [pc, #348]	@ (8003718 <UART_SetConfig+0x69c>)
 80035bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	2b05      	cmp	r3, #5
 80035c4:	d826      	bhi.n	8003614 <UART_SetConfig+0x598>
 80035c6:	a201      	add	r2, pc, #4	@ (adr r2, 80035cc <UART_SetConfig+0x550>)
 80035c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035cc:	080035e5 	.word	0x080035e5
 80035d0:	080035ed 	.word	0x080035ed
 80035d4:	080035f5 	.word	0x080035f5
 80035d8:	080035fd 	.word	0x080035fd
 80035dc:	08003605 	.word	0x08003605
 80035e0:	0800360d 	.word	0x0800360d
 80035e4:	2302      	movs	r3, #2
 80035e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035ea:	e01a      	b.n	8003622 <UART_SetConfig+0x5a6>
 80035ec:	2304      	movs	r3, #4
 80035ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035f2:	e016      	b.n	8003622 <UART_SetConfig+0x5a6>
 80035f4:	2308      	movs	r3, #8
 80035f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035fa:	e012      	b.n	8003622 <UART_SetConfig+0x5a6>
 80035fc:	2310      	movs	r3, #16
 80035fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003602:	e00e      	b.n	8003622 <UART_SetConfig+0x5a6>
 8003604:	2320      	movs	r3, #32
 8003606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800360a:	e00a      	b.n	8003622 <UART_SetConfig+0x5a6>
 800360c:	2340      	movs	r3, #64	@ 0x40
 800360e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003612:	e006      	b.n	8003622 <UART_SetConfig+0x5a6>
 8003614:	2380      	movs	r3, #128	@ 0x80
 8003616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800361a:	e002      	b.n	8003622 <UART_SetConfig+0x5a6>
 800361c:	2380      	movs	r3, #128	@ 0x80
 800361e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a3f      	ldr	r2, [pc, #252]	@ (8003724 <UART_SetConfig+0x6a8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	f040 80f8 	bne.w	800381e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800362e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003632:	2b20      	cmp	r3, #32
 8003634:	dc46      	bgt.n	80036c4 <UART_SetConfig+0x648>
 8003636:	2b02      	cmp	r3, #2
 8003638:	f2c0 8082 	blt.w	8003740 <UART_SetConfig+0x6c4>
 800363c:	3b02      	subs	r3, #2
 800363e:	2b1e      	cmp	r3, #30
 8003640:	d87e      	bhi.n	8003740 <UART_SetConfig+0x6c4>
 8003642:	a201      	add	r2, pc, #4	@ (adr r2, 8003648 <UART_SetConfig+0x5cc>)
 8003644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003648:	080036cb 	.word	0x080036cb
 800364c:	08003741 	.word	0x08003741
 8003650:	080036d3 	.word	0x080036d3
 8003654:	08003741 	.word	0x08003741
 8003658:	08003741 	.word	0x08003741
 800365c:	08003741 	.word	0x08003741
 8003660:	080036e3 	.word	0x080036e3
 8003664:	08003741 	.word	0x08003741
 8003668:	08003741 	.word	0x08003741
 800366c:	08003741 	.word	0x08003741
 8003670:	08003741 	.word	0x08003741
 8003674:	08003741 	.word	0x08003741
 8003678:	08003741 	.word	0x08003741
 800367c:	08003741 	.word	0x08003741
 8003680:	080036f3 	.word	0x080036f3
 8003684:	08003741 	.word	0x08003741
 8003688:	08003741 	.word	0x08003741
 800368c:	08003741 	.word	0x08003741
 8003690:	08003741 	.word	0x08003741
 8003694:	08003741 	.word	0x08003741
 8003698:	08003741 	.word	0x08003741
 800369c:	08003741 	.word	0x08003741
 80036a0:	08003741 	.word	0x08003741
 80036a4:	08003741 	.word	0x08003741
 80036a8:	08003741 	.word	0x08003741
 80036ac:	08003741 	.word	0x08003741
 80036b0:	08003741 	.word	0x08003741
 80036b4:	08003741 	.word	0x08003741
 80036b8:	08003741 	.word	0x08003741
 80036bc:	08003741 	.word	0x08003741
 80036c0:	08003733 	.word	0x08003733
 80036c4:	2b40      	cmp	r3, #64	@ 0x40
 80036c6:	d037      	beq.n	8003738 <UART_SetConfig+0x6bc>
 80036c8:	e03a      	b.n	8003740 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80036ca:	f7ff f931 	bl	8002930 <HAL_RCCEx_GetD3PCLK1Freq>
 80036ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80036d0:	e03c      	b.n	800374c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80036d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff f940 	bl	800295c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80036dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80036e0:	e034      	b.n	800374c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80036e2:	f107 0318 	add.w	r3, r7, #24
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff fa8c 	bl	8002c04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80036f0:	e02c      	b.n	800374c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036f2:	4b09      	ldr	r3, [pc, #36]	@ (8003718 <UART_SetConfig+0x69c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0320 	and.w	r3, r3, #32
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d016      	beq.n	800372c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80036fe:	4b06      	ldr	r3, [pc, #24]	@ (8003718 <UART_SetConfig+0x69c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	08db      	lsrs	r3, r3, #3
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	4a07      	ldr	r2, [pc, #28]	@ (8003728 <UART_SetConfig+0x6ac>)
 800370a:	fa22 f303 	lsr.w	r3, r2, r3
 800370e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003710:	e01c      	b.n	800374c <UART_SetConfig+0x6d0>
 8003712:	bf00      	nop
 8003714:	40011400 	.word	0x40011400
 8003718:	58024400 	.word	0x58024400
 800371c:	40007800 	.word	0x40007800
 8003720:	40007c00 	.word	0x40007c00
 8003724:	58000c00 	.word	0x58000c00
 8003728:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800372c:	4b9d      	ldr	r3, [pc, #628]	@ (80039a4 <UART_SetConfig+0x928>)
 800372e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003730:	e00c      	b.n	800374c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003732:	4b9d      	ldr	r3, [pc, #628]	@ (80039a8 <UART_SetConfig+0x92c>)
 8003734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003736:	e009      	b.n	800374c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003738:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800373c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800373e:	e005      	b.n	800374c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800374a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800374c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 81de 	beq.w	8003b10 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003758:	4a94      	ldr	r2, [pc, #592]	@ (80039ac <UART_SetConfig+0x930>)
 800375a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800375e:	461a      	mov	r2, r3
 8003760:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003762:	fbb3 f3f2 	udiv	r3, r3, r2
 8003766:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	4413      	add	r3, r2
 8003772:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003774:	429a      	cmp	r2, r3
 8003776:	d305      	bcc.n	8003784 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800377e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003780:	429a      	cmp	r2, r3
 8003782:	d903      	bls.n	800378c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800378a:	e1c1      	b.n	8003b10 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800378c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800378e:	2200      	movs	r2, #0
 8003790:	60bb      	str	r3, [r7, #8]
 8003792:	60fa      	str	r2, [r7, #12]
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003798:	4a84      	ldr	r2, [pc, #528]	@ (80039ac <UART_SetConfig+0x930>)
 800379a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800379e:	b29b      	uxth	r3, r3
 80037a0:	2200      	movs	r2, #0
 80037a2:	603b      	str	r3, [r7, #0]
 80037a4:	607a      	str	r2, [r7, #4]
 80037a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037ae:	f7fc fde7 	bl	8000380 <__aeabi_uldivmod>
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	4610      	mov	r0, r2
 80037b8:	4619      	mov	r1, r3
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	f04f 0300 	mov.w	r3, #0
 80037c2:	020b      	lsls	r3, r1, #8
 80037c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80037c8:	0202      	lsls	r2, r0, #8
 80037ca:	6979      	ldr	r1, [r7, #20]
 80037cc:	6849      	ldr	r1, [r1, #4]
 80037ce:	0849      	lsrs	r1, r1, #1
 80037d0:	2000      	movs	r0, #0
 80037d2:	460c      	mov	r4, r1
 80037d4:	4605      	mov	r5, r0
 80037d6:	eb12 0804 	adds.w	r8, r2, r4
 80037da:	eb43 0905 	adc.w	r9, r3, r5
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	469a      	mov	sl, r3
 80037e6:	4693      	mov	fp, r2
 80037e8:	4652      	mov	r2, sl
 80037ea:	465b      	mov	r3, fp
 80037ec:	4640      	mov	r0, r8
 80037ee:	4649      	mov	r1, r9
 80037f0:	f7fc fdc6 	bl	8000380 <__aeabi_uldivmod>
 80037f4:	4602      	mov	r2, r0
 80037f6:	460b      	mov	r3, r1
 80037f8:	4613      	mov	r3, r2
 80037fa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80037fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003802:	d308      	bcc.n	8003816 <UART_SetConfig+0x79a>
 8003804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003806:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800380a:	d204      	bcs.n	8003816 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003812:	60da      	str	r2, [r3, #12]
 8003814:	e17c      	b.n	8003b10 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800381c:	e178      	b.n	8003b10 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003826:	f040 80c5 	bne.w	80039b4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800382a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800382e:	2b20      	cmp	r3, #32
 8003830:	dc48      	bgt.n	80038c4 <UART_SetConfig+0x848>
 8003832:	2b00      	cmp	r3, #0
 8003834:	db7b      	blt.n	800392e <UART_SetConfig+0x8b2>
 8003836:	2b20      	cmp	r3, #32
 8003838:	d879      	bhi.n	800392e <UART_SetConfig+0x8b2>
 800383a:	a201      	add	r2, pc, #4	@ (adr r2, 8003840 <UART_SetConfig+0x7c4>)
 800383c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003840:	080038cb 	.word	0x080038cb
 8003844:	080038d3 	.word	0x080038d3
 8003848:	0800392f 	.word	0x0800392f
 800384c:	0800392f 	.word	0x0800392f
 8003850:	080038db 	.word	0x080038db
 8003854:	0800392f 	.word	0x0800392f
 8003858:	0800392f 	.word	0x0800392f
 800385c:	0800392f 	.word	0x0800392f
 8003860:	080038eb 	.word	0x080038eb
 8003864:	0800392f 	.word	0x0800392f
 8003868:	0800392f 	.word	0x0800392f
 800386c:	0800392f 	.word	0x0800392f
 8003870:	0800392f 	.word	0x0800392f
 8003874:	0800392f 	.word	0x0800392f
 8003878:	0800392f 	.word	0x0800392f
 800387c:	0800392f 	.word	0x0800392f
 8003880:	080038fb 	.word	0x080038fb
 8003884:	0800392f 	.word	0x0800392f
 8003888:	0800392f 	.word	0x0800392f
 800388c:	0800392f 	.word	0x0800392f
 8003890:	0800392f 	.word	0x0800392f
 8003894:	0800392f 	.word	0x0800392f
 8003898:	0800392f 	.word	0x0800392f
 800389c:	0800392f 	.word	0x0800392f
 80038a0:	0800392f 	.word	0x0800392f
 80038a4:	0800392f 	.word	0x0800392f
 80038a8:	0800392f 	.word	0x0800392f
 80038ac:	0800392f 	.word	0x0800392f
 80038b0:	0800392f 	.word	0x0800392f
 80038b4:	0800392f 	.word	0x0800392f
 80038b8:	0800392f 	.word	0x0800392f
 80038bc:	0800392f 	.word	0x0800392f
 80038c0:	08003921 	.word	0x08003921
 80038c4:	2b40      	cmp	r3, #64	@ 0x40
 80038c6:	d02e      	beq.n	8003926 <UART_SetConfig+0x8aa>
 80038c8:	e031      	b.n	800392e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038ca:	f7ff f805 	bl	80028d8 <HAL_RCC_GetPCLK1Freq>
 80038ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80038d0:	e033      	b.n	800393a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038d2:	f7ff f817 	bl	8002904 <HAL_RCC_GetPCLK2Freq>
 80038d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80038d8:	e02f      	b.n	800393a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80038da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff f83c 	bl	800295c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80038e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80038e8:	e027      	b.n	800393a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80038ea:	f107 0318 	add.w	r3, r7, #24
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff f988 	bl	8002c04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80038f8:	e01f      	b.n	800393a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038fa:	4b2d      	ldr	r3, [pc, #180]	@ (80039b0 <UART_SetConfig+0x934>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0320 	and.w	r3, r3, #32
 8003902:	2b00      	cmp	r3, #0
 8003904:	d009      	beq.n	800391a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003906:	4b2a      	ldr	r3, [pc, #168]	@ (80039b0 <UART_SetConfig+0x934>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	08db      	lsrs	r3, r3, #3
 800390c:	f003 0303 	and.w	r3, r3, #3
 8003910:	4a24      	ldr	r2, [pc, #144]	@ (80039a4 <UART_SetConfig+0x928>)
 8003912:	fa22 f303 	lsr.w	r3, r2, r3
 8003916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003918:	e00f      	b.n	800393a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800391a:	4b22      	ldr	r3, [pc, #136]	@ (80039a4 <UART_SetConfig+0x928>)
 800391c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800391e:	e00c      	b.n	800393a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003920:	4b21      	ldr	r3, [pc, #132]	@ (80039a8 <UART_SetConfig+0x92c>)
 8003922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003924:	e009      	b.n	800393a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003926:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800392a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800392c:	e005      	b.n	800393a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800392e:	2300      	movs	r3, #0
 8003930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8003938:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800393a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 80e7 	beq.w	8003b10 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003946:	4a19      	ldr	r2, [pc, #100]	@ (80039ac <UART_SetConfig+0x930>)
 8003948:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800394c:	461a      	mov	r2, r3
 800394e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003950:	fbb3 f3f2 	udiv	r3, r3, r2
 8003954:	005a      	lsls	r2, r3, #1
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	085b      	lsrs	r3, r3, #1
 800395c:	441a      	add	r2, r3
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	fbb2 f3f3 	udiv	r3, r2, r3
 8003966:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800396a:	2b0f      	cmp	r3, #15
 800396c:	d916      	bls.n	800399c <UART_SetConfig+0x920>
 800396e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003974:	d212      	bcs.n	800399c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003978:	b29b      	uxth	r3, r3
 800397a:	f023 030f 	bic.w	r3, r3, #15
 800397e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003982:	085b      	lsrs	r3, r3, #1
 8003984:	b29b      	uxth	r3, r3
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	b29a      	uxth	r2, r3
 800398c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800398e:	4313      	orrs	r3, r2
 8003990:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8003998:	60da      	str	r2, [r3, #12]
 800399a:	e0b9      	b.n	8003b10 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80039a2:	e0b5      	b.n	8003b10 <UART_SetConfig+0xa94>
 80039a4:	03d09000 	.word	0x03d09000
 80039a8:	003d0900 	.word	0x003d0900
 80039ac:	08005200 	.word	0x08005200
 80039b0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80039b4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80039b8:	2b20      	cmp	r3, #32
 80039ba:	dc49      	bgt.n	8003a50 <UART_SetConfig+0x9d4>
 80039bc:	2b00      	cmp	r3, #0
 80039be:	db7c      	blt.n	8003aba <UART_SetConfig+0xa3e>
 80039c0:	2b20      	cmp	r3, #32
 80039c2:	d87a      	bhi.n	8003aba <UART_SetConfig+0xa3e>
 80039c4:	a201      	add	r2, pc, #4	@ (adr r2, 80039cc <UART_SetConfig+0x950>)
 80039c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ca:	bf00      	nop
 80039cc:	08003a57 	.word	0x08003a57
 80039d0:	08003a5f 	.word	0x08003a5f
 80039d4:	08003abb 	.word	0x08003abb
 80039d8:	08003abb 	.word	0x08003abb
 80039dc:	08003a67 	.word	0x08003a67
 80039e0:	08003abb 	.word	0x08003abb
 80039e4:	08003abb 	.word	0x08003abb
 80039e8:	08003abb 	.word	0x08003abb
 80039ec:	08003a77 	.word	0x08003a77
 80039f0:	08003abb 	.word	0x08003abb
 80039f4:	08003abb 	.word	0x08003abb
 80039f8:	08003abb 	.word	0x08003abb
 80039fc:	08003abb 	.word	0x08003abb
 8003a00:	08003abb 	.word	0x08003abb
 8003a04:	08003abb 	.word	0x08003abb
 8003a08:	08003abb 	.word	0x08003abb
 8003a0c:	08003a87 	.word	0x08003a87
 8003a10:	08003abb 	.word	0x08003abb
 8003a14:	08003abb 	.word	0x08003abb
 8003a18:	08003abb 	.word	0x08003abb
 8003a1c:	08003abb 	.word	0x08003abb
 8003a20:	08003abb 	.word	0x08003abb
 8003a24:	08003abb 	.word	0x08003abb
 8003a28:	08003abb 	.word	0x08003abb
 8003a2c:	08003abb 	.word	0x08003abb
 8003a30:	08003abb 	.word	0x08003abb
 8003a34:	08003abb 	.word	0x08003abb
 8003a38:	08003abb 	.word	0x08003abb
 8003a3c:	08003abb 	.word	0x08003abb
 8003a40:	08003abb 	.word	0x08003abb
 8003a44:	08003abb 	.word	0x08003abb
 8003a48:	08003abb 	.word	0x08003abb
 8003a4c:	08003aad 	.word	0x08003aad
 8003a50:	2b40      	cmp	r3, #64	@ 0x40
 8003a52:	d02e      	beq.n	8003ab2 <UART_SetConfig+0xa36>
 8003a54:	e031      	b.n	8003aba <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a56:	f7fe ff3f 	bl	80028d8 <HAL_RCC_GetPCLK1Freq>
 8003a5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003a5c:	e033      	b.n	8003ac6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a5e:	f7fe ff51 	bl	8002904 <HAL_RCC_GetPCLK2Freq>
 8003a62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003a64:	e02f      	b.n	8003ac6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003a66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fe ff76 	bl	800295c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003a74:	e027      	b.n	8003ac6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003a76:	f107 0318 	add.w	r3, r7, #24
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff f8c2 	bl	8002c04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003a84:	e01f      	b.n	8003ac6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a86:	4b2d      	ldr	r3, [pc, #180]	@ (8003b3c <UART_SetConfig+0xac0>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0320 	and.w	r3, r3, #32
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d009      	beq.n	8003aa6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003a92:	4b2a      	ldr	r3, [pc, #168]	@ (8003b3c <UART_SetConfig+0xac0>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	08db      	lsrs	r3, r3, #3
 8003a98:	f003 0303 	and.w	r3, r3, #3
 8003a9c:	4a28      	ldr	r2, [pc, #160]	@ (8003b40 <UART_SetConfig+0xac4>)
 8003a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003aa4:	e00f      	b.n	8003ac6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8003aa6:	4b26      	ldr	r3, [pc, #152]	@ (8003b40 <UART_SetConfig+0xac4>)
 8003aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003aaa:	e00c      	b.n	8003ac6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003aac:	4b25      	ldr	r3, [pc, #148]	@ (8003b44 <UART_SetConfig+0xac8>)
 8003aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003ab0:	e009      	b.n	8003ac6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ab2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003ab8:	e005      	b.n	8003ac6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8003ac4:	bf00      	nop
    }

    if (pclk != 0U)
 8003ac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d021      	beq.n	8003b10 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8003b48 <UART_SetConfig+0xacc>)
 8003ad2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ada:	fbb3 f2f2 	udiv	r2, r3, r2
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	085b      	lsrs	r3, r3, #1
 8003ae4:	441a      	add	r2, r3
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aee:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af2:	2b0f      	cmp	r3, #15
 8003af4:	d909      	bls.n	8003b0a <UART_SetConfig+0xa8e>
 8003af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003afc:	d205      	bcs.n	8003b0a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	60da      	str	r2, [r3, #12]
 8003b08:	e002      	b.n	8003b10 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	2200      	movs	r2, #0
 8003b24:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003b2c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3748      	adds	r7, #72	@ 0x48
 8003b34:	46bd      	mov	sp, r7
 8003b36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b3a:	bf00      	nop
 8003b3c:	58024400 	.word	0x58024400
 8003b40:	03d09000 	.word	0x03d09000
 8003b44:	003d0900 	.word	0x003d0900
 8003b48:	08005200 	.word	0x08005200

08003b4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00a      	beq.n	8003b76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00a      	beq.n	8003bba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be0:	f003 0310 	and.w	r3, r3, #16
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00a      	beq.n	8003bfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c02:	f003 0320 	and.w	r3, r3, #32
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d01a      	beq.n	8003c62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c4a:	d10a      	bne.n	8003c62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	605a      	str	r2, [r3, #4]
  }
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b098      	sub	sp, #96	@ 0x60
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ca0:	f7fd fa24 	bl	80010ec <HAL_GetTick>
 8003ca4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d12f      	bne.n	8003d14 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cb4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f88e 	bl	8003de4 <UART_WaitOnFlagUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d022      	beq.n	8003d14 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd6:	e853 3f00 	ldrex	r3, [r3]
 8003cda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ce2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cec:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003cf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cf4:	e841 2300 	strex	r3, r2, [r1]
 8003cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1e6      	bne.n	8003cce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e063      	b.n	8003ddc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0304 	and.w	r3, r3, #4
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d149      	bne.n	8003db6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d22:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f857 	bl	8003de4 <UART_WaitOnFlagUntilTimeout>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d03c      	beq.n	8003db6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d44:	e853 3f00 	ldrex	r3, [r3]
 8003d48:	623b      	str	r3, [r7, #32]
   return(result);
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d62:	e841 2300 	strex	r3, r2, [r1]
 8003d66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1e6      	bne.n	8003d3c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3308      	adds	r3, #8
 8003d74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	e853 3f00 	ldrex	r3, [r3]
 8003d7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f023 0301 	bic.w	r3, r3, #1
 8003d84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3308      	adds	r3, #8
 8003d8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d8e:	61fa      	str	r2, [r7, #28]
 8003d90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d92:	69b9      	ldr	r1, [r7, #24]
 8003d94:	69fa      	ldr	r2, [r7, #28]
 8003d96:	e841 2300 	strex	r3, r2, [r1]
 8003d9a:	617b      	str	r3, [r7, #20]
   return(result);
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1e5      	bne.n	8003d6e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e012      	b.n	8003ddc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2220      	movs	r2, #32
 8003dba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3758      	adds	r7, #88	@ 0x58
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	603b      	str	r3, [r7, #0]
 8003df0:	4613      	mov	r3, r2
 8003df2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003df4:	e04f      	b.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfc:	d04b      	beq.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dfe:	f7fd f975 	bl	80010ec <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d302      	bcc.n	8003e14 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e04e      	b.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0304 	and.w	r3, r3, #4
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d037      	beq.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2b80      	cmp	r3, #128	@ 0x80
 8003e2a:	d034      	beq.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	2b40      	cmp	r3, #64	@ 0x40
 8003e30:	d031      	beq.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d110      	bne.n	8003e62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2208      	movs	r2, #8
 8003e46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 f839 	bl	8003ec0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2208      	movs	r2, #8
 8003e52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e029      	b.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e70:	d111      	bne.n	8003e96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 f81f 	bl	8003ec0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2220      	movs	r2, #32
 8003e86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e00f      	b.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	69da      	ldr	r2, [r3, #28]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	bf0c      	ite	eq
 8003ea6:	2301      	moveq	r3, #1
 8003ea8:	2300      	movne	r3, #0
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	461a      	mov	r2, r3
 8003eae:	79fb      	ldrb	r3, [r7, #7]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d0a0      	beq.n	8003df6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b095      	sub	sp, #84	@ 0x54
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ed0:	e853 3f00 	ldrex	r3, [r3]
 8003ed4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003edc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ee6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ee8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003eec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003eee:	e841 2300 	strex	r3, r2, [r1]
 8003ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1e6      	bne.n	8003ec8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3308      	adds	r3, #8
 8003f00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	e853 3f00 	ldrex	r3, [r3]
 8003f08:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f0a:	69fa      	ldr	r2, [r7, #28]
 8003f0c:	4b1e      	ldr	r3, [pc, #120]	@ (8003f88 <UART_EndRxTransfer+0xc8>)
 8003f0e:	4013      	ands	r3, r2
 8003f10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3308      	adds	r3, #8
 8003f18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e5      	bne.n	8003efa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d118      	bne.n	8003f68 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	e853 3f00 	ldrex	r3, [r3]
 8003f42:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f023 0310 	bic.w	r3, r3, #16
 8003f4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	461a      	mov	r2, r3
 8003f52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f54:	61bb      	str	r3, [r7, #24]
 8003f56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f58:	6979      	ldr	r1, [r7, #20]
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	e841 2300 	strex	r3, r2, [r1]
 8003f60:	613b      	str	r3, [r7, #16]
   return(result);
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1e6      	bne.n	8003f36 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003f7c:	bf00      	nop
 8003f7e:	3754      	adds	r7, #84	@ 0x54
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	effffffe 	.word	0xeffffffe

08003f8c <std>:
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	b510      	push	{r4, lr}
 8003f90:	4604      	mov	r4, r0
 8003f92:	e9c0 3300 	strd	r3, r3, [r0]
 8003f96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f9a:	6083      	str	r3, [r0, #8]
 8003f9c:	8181      	strh	r1, [r0, #12]
 8003f9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003fa0:	81c2      	strh	r2, [r0, #14]
 8003fa2:	6183      	str	r3, [r0, #24]
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	2208      	movs	r2, #8
 8003fa8:	305c      	adds	r0, #92	@ 0x5c
 8003faa:	f000 f926 	bl	80041fa <memset>
 8003fae:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe4 <std+0x58>)
 8003fb0:	6263      	str	r3, [r4, #36]	@ 0x24
 8003fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe8 <std+0x5c>)
 8003fb4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003fec <std+0x60>)
 8003fb8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003fba:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff0 <std+0x64>)
 8003fbc:	6323      	str	r3, [r4, #48]	@ 0x30
 8003fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff4 <std+0x68>)
 8003fc0:	6224      	str	r4, [r4, #32]
 8003fc2:	429c      	cmp	r4, r3
 8003fc4:	d006      	beq.n	8003fd4 <std+0x48>
 8003fc6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003fca:	4294      	cmp	r4, r2
 8003fcc:	d002      	beq.n	8003fd4 <std+0x48>
 8003fce:	33d0      	adds	r3, #208	@ 0xd0
 8003fd0:	429c      	cmp	r4, r3
 8003fd2:	d105      	bne.n	8003fe0 <std+0x54>
 8003fd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fdc:	f000 b986 	b.w	80042ec <__retarget_lock_init_recursive>
 8003fe0:	bd10      	pop	{r4, pc}
 8003fe2:	bf00      	nop
 8003fe4:	08004175 	.word	0x08004175
 8003fe8:	08004197 	.word	0x08004197
 8003fec:	080041cf 	.word	0x080041cf
 8003ff0:	080041f3 	.word	0x080041f3
 8003ff4:	2400019c 	.word	0x2400019c

08003ff8 <stdio_exit_handler>:
 8003ff8:	4a02      	ldr	r2, [pc, #8]	@ (8004004 <stdio_exit_handler+0xc>)
 8003ffa:	4903      	ldr	r1, [pc, #12]	@ (8004008 <stdio_exit_handler+0x10>)
 8003ffc:	4803      	ldr	r0, [pc, #12]	@ (800400c <stdio_exit_handler+0x14>)
 8003ffe:	f000 b869 	b.w	80040d4 <_fwalk_sglue>
 8004002:	bf00      	nop
 8004004:	2400002c 	.word	0x2400002c
 8004008:	08004e3d 	.word	0x08004e3d
 800400c:	2400003c 	.word	0x2400003c

08004010 <cleanup_stdio>:
 8004010:	6841      	ldr	r1, [r0, #4]
 8004012:	4b0c      	ldr	r3, [pc, #48]	@ (8004044 <cleanup_stdio+0x34>)
 8004014:	4299      	cmp	r1, r3
 8004016:	b510      	push	{r4, lr}
 8004018:	4604      	mov	r4, r0
 800401a:	d001      	beq.n	8004020 <cleanup_stdio+0x10>
 800401c:	f000 ff0e 	bl	8004e3c <_fflush_r>
 8004020:	68a1      	ldr	r1, [r4, #8]
 8004022:	4b09      	ldr	r3, [pc, #36]	@ (8004048 <cleanup_stdio+0x38>)
 8004024:	4299      	cmp	r1, r3
 8004026:	d002      	beq.n	800402e <cleanup_stdio+0x1e>
 8004028:	4620      	mov	r0, r4
 800402a:	f000 ff07 	bl	8004e3c <_fflush_r>
 800402e:	68e1      	ldr	r1, [r4, #12]
 8004030:	4b06      	ldr	r3, [pc, #24]	@ (800404c <cleanup_stdio+0x3c>)
 8004032:	4299      	cmp	r1, r3
 8004034:	d004      	beq.n	8004040 <cleanup_stdio+0x30>
 8004036:	4620      	mov	r0, r4
 8004038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800403c:	f000 befe 	b.w	8004e3c <_fflush_r>
 8004040:	bd10      	pop	{r4, pc}
 8004042:	bf00      	nop
 8004044:	2400019c 	.word	0x2400019c
 8004048:	24000204 	.word	0x24000204
 800404c:	2400026c 	.word	0x2400026c

08004050 <global_stdio_init.part.0>:
 8004050:	b510      	push	{r4, lr}
 8004052:	4b0b      	ldr	r3, [pc, #44]	@ (8004080 <global_stdio_init.part.0+0x30>)
 8004054:	4c0b      	ldr	r4, [pc, #44]	@ (8004084 <global_stdio_init.part.0+0x34>)
 8004056:	4a0c      	ldr	r2, [pc, #48]	@ (8004088 <global_stdio_init.part.0+0x38>)
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	4620      	mov	r0, r4
 800405c:	2200      	movs	r2, #0
 800405e:	2104      	movs	r1, #4
 8004060:	f7ff ff94 	bl	8003f8c <std>
 8004064:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004068:	2201      	movs	r2, #1
 800406a:	2109      	movs	r1, #9
 800406c:	f7ff ff8e 	bl	8003f8c <std>
 8004070:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004074:	2202      	movs	r2, #2
 8004076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800407a:	2112      	movs	r1, #18
 800407c:	f7ff bf86 	b.w	8003f8c <std>
 8004080:	240002d4 	.word	0x240002d4
 8004084:	2400019c 	.word	0x2400019c
 8004088:	08003ff9 	.word	0x08003ff9

0800408c <__sfp_lock_acquire>:
 800408c:	4801      	ldr	r0, [pc, #4]	@ (8004094 <__sfp_lock_acquire+0x8>)
 800408e:	f000 b92e 	b.w	80042ee <__retarget_lock_acquire_recursive>
 8004092:	bf00      	nop
 8004094:	240002dd 	.word	0x240002dd

08004098 <__sfp_lock_release>:
 8004098:	4801      	ldr	r0, [pc, #4]	@ (80040a0 <__sfp_lock_release+0x8>)
 800409a:	f000 b929 	b.w	80042f0 <__retarget_lock_release_recursive>
 800409e:	bf00      	nop
 80040a0:	240002dd 	.word	0x240002dd

080040a4 <__sinit>:
 80040a4:	b510      	push	{r4, lr}
 80040a6:	4604      	mov	r4, r0
 80040a8:	f7ff fff0 	bl	800408c <__sfp_lock_acquire>
 80040ac:	6a23      	ldr	r3, [r4, #32]
 80040ae:	b11b      	cbz	r3, 80040b8 <__sinit+0x14>
 80040b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040b4:	f7ff bff0 	b.w	8004098 <__sfp_lock_release>
 80040b8:	4b04      	ldr	r3, [pc, #16]	@ (80040cc <__sinit+0x28>)
 80040ba:	6223      	str	r3, [r4, #32]
 80040bc:	4b04      	ldr	r3, [pc, #16]	@ (80040d0 <__sinit+0x2c>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1f5      	bne.n	80040b0 <__sinit+0xc>
 80040c4:	f7ff ffc4 	bl	8004050 <global_stdio_init.part.0>
 80040c8:	e7f2      	b.n	80040b0 <__sinit+0xc>
 80040ca:	bf00      	nop
 80040cc:	08004011 	.word	0x08004011
 80040d0:	240002d4 	.word	0x240002d4

080040d4 <_fwalk_sglue>:
 80040d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040d8:	4607      	mov	r7, r0
 80040da:	4688      	mov	r8, r1
 80040dc:	4614      	mov	r4, r2
 80040de:	2600      	movs	r6, #0
 80040e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80040e4:	f1b9 0901 	subs.w	r9, r9, #1
 80040e8:	d505      	bpl.n	80040f6 <_fwalk_sglue+0x22>
 80040ea:	6824      	ldr	r4, [r4, #0]
 80040ec:	2c00      	cmp	r4, #0
 80040ee:	d1f7      	bne.n	80040e0 <_fwalk_sglue+0xc>
 80040f0:	4630      	mov	r0, r6
 80040f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040f6:	89ab      	ldrh	r3, [r5, #12]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d907      	bls.n	800410c <_fwalk_sglue+0x38>
 80040fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004100:	3301      	adds	r3, #1
 8004102:	d003      	beq.n	800410c <_fwalk_sglue+0x38>
 8004104:	4629      	mov	r1, r5
 8004106:	4638      	mov	r0, r7
 8004108:	47c0      	blx	r8
 800410a:	4306      	orrs	r6, r0
 800410c:	3568      	adds	r5, #104	@ 0x68
 800410e:	e7e9      	b.n	80040e4 <_fwalk_sglue+0x10>

08004110 <iprintf>:
 8004110:	b40f      	push	{r0, r1, r2, r3}
 8004112:	b507      	push	{r0, r1, r2, lr}
 8004114:	4906      	ldr	r1, [pc, #24]	@ (8004130 <iprintf+0x20>)
 8004116:	ab04      	add	r3, sp, #16
 8004118:	6808      	ldr	r0, [r1, #0]
 800411a:	f853 2b04 	ldr.w	r2, [r3], #4
 800411e:	6881      	ldr	r1, [r0, #8]
 8004120:	9301      	str	r3, [sp, #4]
 8004122:	f000 fb61 	bl	80047e8 <_vfiprintf_r>
 8004126:	b003      	add	sp, #12
 8004128:	f85d eb04 	ldr.w	lr, [sp], #4
 800412c:	b004      	add	sp, #16
 800412e:	4770      	bx	lr
 8004130:	24000038 	.word	0x24000038

08004134 <siprintf>:
 8004134:	b40e      	push	{r1, r2, r3}
 8004136:	b500      	push	{lr}
 8004138:	b09c      	sub	sp, #112	@ 0x70
 800413a:	ab1d      	add	r3, sp, #116	@ 0x74
 800413c:	9002      	str	r0, [sp, #8]
 800413e:	9006      	str	r0, [sp, #24]
 8004140:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004144:	4809      	ldr	r0, [pc, #36]	@ (800416c <siprintf+0x38>)
 8004146:	9107      	str	r1, [sp, #28]
 8004148:	9104      	str	r1, [sp, #16]
 800414a:	4909      	ldr	r1, [pc, #36]	@ (8004170 <siprintf+0x3c>)
 800414c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004150:	9105      	str	r1, [sp, #20]
 8004152:	6800      	ldr	r0, [r0, #0]
 8004154:	9301      	str	r3, [sp, #4]
 8004156:	a902      	add	r1, sp, #8
 8004158:	f000 fa20 	bl	800459c <_svfiprintf_r>
 800415c:	9b02      	ldr	r3, [sp, #8]
 800415e:	2200      	movs	r2, #0
 8004160:	701a      	strb	r2, [r3, #0]
 8004162:	b01c      	add	sp, #112	@ 0x70
 8004164:	f85d eb04 	ldr.w	lr, [sp], #4
 8004168:	b003      	add	sp, #12
 800416a:	4770      	bx	lr
 800416c:	24000038 	.word	0x24000038
 8004170:	ffff0208 	.word	0xffff0208

08004174 <__sread>:
 8004174:	b510      	push	{r4, lr}
 8004176:	460c      	mov	r4, r1
 8004178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800417c:	f000 f868 	bl	8004250 <_read_r>
 8004180:	2800      	cmp	r0, #0
 8004182:	bfab      	itete	ge
 8004184:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004186:	89a3      	ldrhlt	r3, [r4, #12]
 8004188:	181b      	addge	r3, r3, r0
 800418a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800418e:	bfac      	ite	ge
 8004190:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004192:	81a3      	strhlt	r3, [r4, #12]
 8004194:	bd10      	pop	{r4, pc}

08004196 <__swrite>:
 8004196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800419a:	461f      	mov	r7, r3
 800419c:	898b      	ldrh	r3, [r1, #12]
 800419e:	05db      	lsls	r3, r3, #23
 80041a0:	4605      	mov	r5, r0
 80041a2:	460c      	mov	r4, r1
 80041a4:	4616      	mov	r6, r2
 80041a6:	d505      	bpl.n	80041b4 <__swrite+0x1e>
 80041a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041ac:	2302      	movs	r3, #2
 80041ae:	2200      	movs	r2, #0
 80041b0:	f000 f83c 	bl	800422c <_lseek_r>
 80041b4:	89a3      	ldrh	r3, [r4, #12]
 80041b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041be:	81a3      	strh	r3, [r4, #12]
 80041c0:	4632      	mov	r2, r6
 80041c2:	463b      	mov	r3, r7
 80041c4:	4628      	mov	r0, r5
 80041c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041ca:	f000 b853 	b.w	8004274 <_write_r>

080041ce <__sseek>:
 80041ce:	b510      	push	{r4, lr}
 80041d0:	460c      	mov	r4, r1
 80041d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041d6:	f000 f829 	bl	800422c <_lseek_r>
 80041da:	1c43      	adds	r3, r0, #1
 80041dc:	89a3      	ldrh	r3, [r4, #12]
 80041de:	bf15      	itete	ne
 80041e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80041e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80041e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80041ea:	81a3      	strheq	r3, [r4, #12]
 80041ec:	bf18      	it	ne
 80041ee:	81a3      	strhne	r3, [r4, #12]
 80041f0:	bd10      	pop	{r4, pc}

080041f2 <__sclose>:
 80041f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041f6:	f000 b809 	b.w	800420c <_close_r>

080041fa <memset>:
 80041fa:	4402      	add	r2, r0
 80041fc:	4603      	mov	r3, r0
 80041fe:	4293      	cmp	r3, r2
 8004200:	d100      	bne.n	8004204 <memset+0xa>
 8004202:	4770      	bx	lr
 8004204:	f803 1b01 	strb.w	r1, [r3], #1
 8004208:	e7f9      	b.n	80041fe <memset+0x4>
	...

0800420c <_close_r>:
 800420c:	b538      	push	{r3, r4, r5, lr}
 800420e:	4d06      	ldr	r5, [pc, #24]	@ (8004228 <_close_r+0x1c>)
 8004210:	2300      	movs	r3, #0
 8004212:	4604      	mov	r4, r0
 8004214:	4608      	mov	r0, r1
 8004216:	602b      	str	r3, [r5, #0]
 8004218:	f7fc fc3f 	bl	8000a9a <_close>
 800421c:	1c43      	adds	r3, r0, #1
 800421e:	d102      	bne.n	8004226 <_close_r+0x1a>
 8004220:	682b      	ldr	r3, [r5, #0]
 8004222:	b103      	cbz	r3, 8004226 <_close_r+0x1a>
 8004224:	6023      	str	r3, [r4, #0]
 8004226:	bd38      	pop	{r3, r4, r5, pc}
 8004228:	240002d8 	.word	0x240002d8

0800422c <_lseek_r>:
 800422c:	b538      	push	{r3, r4, r5, lr}
 800422e:	4d07      	ldr	r5, [pc, #28]	@ (800424c <_lseek_r+0x20>)
 8004230:	4604      	mov	r4, r0
 8004232:	4608      	mov	r0, r1
 8004234:	4611      	mov	r1, r2
 8004236:	2200      	movs	r2, #0
 8004238:	602a      	str	r2, [r5, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	f7fc fc54 	bl	8000ae8 <_lseek>
 8004240:	1c43      	adds	r3, r0, #1
 8004242:	d102      	bne.n	800424a <_lseek_r+0x1e>
 8004244:	682b      	ldr	r3, [r5, #0]
 8004246:	b103      	cbz	r3, 800424a <_lseek_r+0x1e>
 8004248:	6023      	str	r3, [r4, #0]
 800424a:	bd38      	pop	{r3, r4, r5, pc}
 800424c:	240002d8 	.word	0x240002d8

08004250 <_read_r>:
 8004250:	b538      	push	{r3, r4, r5, lr}
 8004252:	4d07      	ldr	r5, [pc, #28]	@ (8004270 <_read_r+0x20>)
 8004254:	4604      	mov	r4, r0
 8004256:	4608      	mov	r0, r1
 8004258:	4611      	mov	r1, r2
 800425a:	2200      	movs	r2, #0
 800425c:	602a      	str	r2, [r5, #0]
 800425e:	461a      	mov	r2, r3
 8004260:	f7fc fbe2 	bl	8000a28 <_read>
 8004264:	1c43      	adds	r3, r0, #1
 8004266:	d102      	bne.n	800426e <_read_r+0x1e>
 8004268:	682b      	ldr	r3, [r5, #0]
 800426a:	b103      	cbz	r3, 800426e <_read_r+0x1e>
 800426c:	6023      	str	r3, [r4, #0]
 800426e:	bd38      	pop	{r3, r4, r5, pc}
 8004270:	240002d8 	.word	0x240002d8

08004274 <_write_r>:
 8004274:	b538      	push	{r3, r4, r5, lr}
 8004276:	4d07      	ldr	r5, [pc, #28]	@ (8004294 <_write_r+0x20>)
 8004278:	4604      	mov	r4, r0
 800427a:	4608      	mov	r0, r1
 800427c:	4611      	mov	r1, r2
 800427e:	2200      	movs	r2, #0
 8004280:	602a      	str	r2, [r5, #0]
 8004282:	461a      	mov	r2, r3
 8004284:	f7fc fbed 	bl	8000a62 <_write>
 8004288:	1c43      	adds	r3, r0, #1
 800428a:	d102      	bne.n	8004292 <_write_r+0x1e>
 800428c:	682b      	ldr	r3, [r5, #0]
 800428e:	b103      	cbz	r3, 8004292 <_write_r+0x1e>
 8004290:	6023      	str	r3, [r4, #0]
 8004292:	bd38      	pop	{r3, r4, r5, pc}
 8004294:	240002d8 	.word	0x240002d8

08004298 <__errno>:
 8004298:	4b01      	ldr	r3, [pc, #4]	@ (80042a0 <__errno+0x8>)
 800429a:	6818      	ldr	r0, [r3, #0]
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	24000038 	.word	0x24000038

080042a4 <__libc_init_array>:
 80042a4:	b570      	push	{r4, r5, r6, lr}
 80042a6:	4d0d      	ldr	r5, [pc, #52]	@ (80042dc <__libc_init_array+0x38>)
 80042a8:	4c0d      	ldr	r4, [pc, #52]	@ (80042e0 <__libc_init_array+0x3c>)
 80042aa:	1b64      	subs	r4, r4, r5
 80042ac:	10a4      	asrs	r4, r4, #2
 80042ae:	2600      	movs	r6, #0
 80042b0:	42a6      	cmp	r6, r4
 80042b2:	d109      	bne.n	80042c8 <__libc_init_array+0x24>
 80042b4:	4d0b      	ldr	r5, [pc, #44]	@ (80042e4 <__libc_init_array+0x40>)
 80042b6:	4c0c      	ldr	r4, [pc, #48]	@ (80042e8 <__libc_init_array+0x44>)
 80042b8:	f000 ff6e 	bl	8005198 <_init>
 80042bc:	1b64      	subs	r4, r4, r5
 80042be:	10a4      	asrs	r4, r4, #2
 80042c0:	2600      	movs	r6, #0
 80042c2:	42a6      	cmp	r6, r4
 80042c4:	d105      	bne.n	80042d2 <__libc_init_array+0x2e>
 80042c6:	bd70      	pop	{r4, r5, r6, pc}
 80042c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80042cc:	4798      	blx	r3
 80042ce:	3601      	adds	r6, #1
 80042d0:	e7ee      	b.n	80042b0 <__libc_init_array+0xc>
 80042d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80042d6:	4798      	blx	r3
 80042d8:	3601      	adds	r6, #1
 80042da:	e7f2      	b.n	80042c2 <__libc_init_array+0x1e>
 80042dc:	08005254 	.word	0x08005254
 80042e0:	08005254 	.word	0x08005254
 80042e4:	08005254 	.word	0x08005254
 80042e8:	08005258 	.word	0x08005258

080042ec <__retarget_lock_init_recursive>:
 80042ec:	4770      	bx	lr

080042ee <__retarget_lock_acquire_recursive>:
 80042ee:	4770      	bx	lr

080042f0 <__retarget_lock_release_recursive>:
 80042f0:	4770      	bx	lr
	...

080042f4 <_free_r>:
 80042f4:	b538      	push	{r3, r4, r5, lr}
 80042f6:	4605      	mov	r5, r0
 80042f8:	2900      	cmp	r1, #0
 80042fa:	d041      	beq.n	8004380 <_free_r+0x8c>
 80042fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004300:	1f0c      	subs	r4, r1, #4
 8004302:	2b00      	cmp	r3, #0
 8004304:	bfb8      	it	lt
 8004306:	18e4      	addlt	r4, r4, r3
 8004308:	f000 f8e0 	bl	80044cc <__malloc_lock>
 800430c:	4a1d      	ldr	r2, [pc, #116]	@ (8004384 <_free_r+0x90>)
 800430e:	6813      	ldr	r3, [r2, #0]
 8004310:	b933      	cbnz	r3, 8004320 <_free_r+0x2c>
 8004312:	6063      	str	r3, [r4, #4]
 8004314:	6014      	str	r4, [r2, #0]
 8004316:	4628      	mov	r0, r5
 8004318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800431c:	f000 b8dc 	b.w	80044d8 <__malloc_unlock>
 8004320:	42a3      	cmp	r3, r4
 8004322:	d908      	bls.n	8004336 <_free_r+0x42>
 8004324:	6820      	ldr	r0, [r4, #0]
 8004326:	1821      	adds	r1, r4, r0
 8004328:	428b      	cmp	r3, r1
 800432a:	bf01      	itttt	eq
 800432c:	6819      	ldreq	r1, [r3, #0]
 800432e:	685b      	ldreq	r3, [r3, #4]
 8004330:	1809      	addeq	r1, r1, r0
 8004332:	6021      	streq	r1, [r4, #0]
 8004334:	e7ed      	b.n	8004312 <_free_r+0x1e>
 8004336:	461a      	mov	r2, r3
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	b10b      	cbz	r3, 8004340 <_free_r+0x4c>
 800433c:	42a3      	cmp	r3, r4
 800433e:	d9fa      	bls.n	8004336 <_free_r+0x42>
 8004340:	6811      	ldr	r1, [r2, #0]
 8004342:	1850      	adds	r0, r2, r1
 8004344:	42a0      	cmp	r0, r4
 8004346:	d10b      	bne.n	8004360 <_free_r+0x6c>
 8004348:	6820      	ldr	r0, [r4, #0]
 800434a:	4401      	add	r1, r0
 800434c:	1850      	adds	r0, r2, r1
 800434e:	4283      	cmp	r3, r0
 8004350:	6011      	str	r1, [r2, #0]
 8004352:	d1e0      	bne.n	8004316 <_free_r+0x22>
 8004354:	6818      	ldr	r0, [r3, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	6053      	str	r3, [r2, #4]
 800435a:	4408      	add	r0, r1
 800435c:	6010      	str	r0, [r2, #0]
 800435e:	e7da      	b.n	8004316 <_free_r+0x22>
 8004360:	d902      	bls.n	8004368 <_free_r+0x74>
 8004362:	230c      	movs	r3, #12
 8004364:	602b      	str	r3, [r5, #0]
 8004366:	e7d6      	b.n	8004316 <_free_r+0x22>
 8004368:	6820      	ldr	r0, [r4, #0]
 800436a:	1821      	adds	r1, r4, r0
 800436c:	428b      	cmp	r3, r1
 800436e:	bf04      	itt	eq
 8004370:	6819      	ldreq	r1, [r3, #0]
 8004372:	685b      	ldreq	r3, [r3, #4]
 8004374:	6063      	str	r3, [r4, #4]
 8004376:	bf04      	itt	eq
 8004378:	1809      	addeq	r1, r1, r0
 800437a:	6021      	streq	r1, [r4, #0]
 800437c:	6054      	str	r4, [r2, #4]
 800437e:	e7ca      	b.n	8004316 <_free_r+0x22>
 8004380:	bd38      	pop	{r3, r4, r5, pc}
 8004382:	bf00      	nop
 8004384:	240002e4 	.word	0x240002e4

08004388 <sbrk_aligned>:
 8004388:	b570      	push	{r4, r5, r6, lr}
 800438a:	4e0f      	ldr	r6, [pc, #60]	@ (80043c8 <sbrk_aligned+0x40>)
 800438c:	460c      	mov	r4, r1
 800438e:	6831      	ldr	r1, [r6, #0]
 8004390:	4605      	mov	r5, r0
 8004392:	b911      	cbnz	r1, 800439a <sbrk_aligned+0x12>
 8004394:	f000 fe28 	bl	8004fe8 <_sbrk_r>
 8004398:	6030      	str	r0, [r6, #0]
 800439a:	4621      	mov	r1, r4
 800439c:	4628      	mov	r0, r5
 800439e:	f000 fe23 	bl	8004fe8 <_sbrk_r>
 80043a2:	1c43      	adds	r3, r0, #1
 80043a4:	d103      	bne.n	80043ae <sbrk_aligned+0x26>
 80043a6:	f04f 34ff 	mov.w	r4, #4294967295
 80043aa:	4620      	mov	r0, r4
 80043ac:	bd70      	pop	{r4, r5, r6, pc}
 80043ae:	1cc4      	adds	r4, r0, #3
 80043b0:	f024 0403 	bic.w	r4, r4, #3
 80043b4:	42a0      	cmp	r0, r4
 80043b6:	d0f8      	beq.n	80043aa <sbrk_aligned+0x22>
 80043b8:	1a21      	subs	r1, r4, r0
 80043ba:	4628      	mov	r0, r5
 80043bc:	f000 fe14 	bl	8004fe8 <_sbrk_r>
 80043c0:	3001      	adds	r0, #1
 80043c2:	d1f2      	bne.n	80043aa <sbrk_aligned+0x22>
 80043c4:	e7ef      	b.n	80043a6 <sbrk_aligned+0x1e>
 80043c6:	bf00      	nop
 80043c8:	240002e0 	.word	0x240002e0

080043cc <_malloc_r>:
 80043cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043d0:	1ccd      	adds	r5, r1, #3
 80043d2:	f025 0503 	bic.w	r5, r5, #3
 80043d6:	3508      	adds	r5, #8
 80043d8:	2d0c      	cmp	r5, #12
 80043da:	bf38      	it	cc
 80043dc:	250c      	movcc	r5, #12
 80043de:	2d00      	cmp	r5, #0
 80043e0:	4606      	mov	r6, r0
 80043e2:	db01      	blt.n	80043e8 <_malloc_r+0x1c>
 80043e4:	42a9      	cmp	r1, r5
 80043e6:	d904      	bls.n	80043f2 <_malloc_r+0x26>
 80043e8:	230c      	movs	r3, #12
 80043ea:	6033      	str	r3, [r6, #0]
 80043ec:	2000      	movs	r0, #0
 80043ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80044c8 <_malloc_r+0xfc>
 80043f6:	f000 f869 	bl	80044cc <__malloc_lock>
 80043fa:	f8d8 3000 	ldr.w	r3, [r8]
 80043fe:	461c      	mov	r4, r3
 8004400:	bb44      	cbnz	r4, 8004454 <_malloc_r+0x88>
 8004402:	4629      	mov	r1, r5
 8004404:	4630      	mov	r0, r6
 8004406:	f7ff ffbf 	bl	8004388 <sbrk_aligned>
 800440a:	1c43      	adds	r3, r0, #1
 800440c:	4604      	mov	r4, r0
 800440e:	d158      	bne.n	80044c2 <_malloc_r+0xf6>
 8004410:	f8d8 4000 	ldr.w	r4, [r8]
 8004414:	4627      	mov	r7, r4
 8004416:	2f00      	cmp	r7, #0
 8004418:	d143      	bne.n	80044a2 <_malloc_r+0xd6>
 800441a:	2c00      	cmp	r4, #0
 800441c:	d04b      	beq.n	80044b6 <_malloc_r+0xea>
 800441e:	6823      	ldr	r3, [r4, #0]
 8004420:	4639      	mov	r1, r7
 8004422:	4630      	mov	r0, r6
 8004424:	eb04 0903 	add.w	r9, r4, r3
 8004428:	f000 fdde 	bl	8004fe8 <_sbrk_r>
 800442c:	4581      	cmp	r9, r0
 800442e:	d142      	bne.n	80044b6 <_malloc_r+0xea>
 8004430:	6821      	ldr	r1, [r4, #0]
 8004432:	1a6d      	subs	r5, r5, r1
 8004434:	4629      	mov	r1, r5
 8004436:	4630      	mov	r0, r6
 8004438:	f7ff ffa6 	bl	8004388 <sbrk_aligned>
 800443c:	3001      	adds	r0, #1
 800443e:	d03a      	beq.n	80044b6 <_malloc_r+0xea>
 8004440:	6823      	ldr	r3, [r4, #0]
 8004442:	442b      	add	r3, r5
 8004444:	6023      	str	r3, [r4, #0]
 8004446:	f8d8 3000 	ldr.w	r3, [r8]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	bb62      	cbnz	r2, 80044a8 <_malloc_r+0xdc>
 800444e:	f8c8 7000 	str.w	r7, [r8]
 8004452:	e00f      	b.n	8004474 <_malloc_r+0xa8>
 8004454:	6822      	ldr	r2, [r4, #0]
 8004456:	1b52      	subs	r2, r2, r5
 8004458:	d420      	bmi.n	800449c <_malloc_r+0xd0>
 800445a:	2a0b      	cmp	r2, #11
 800445c:	d917      	bls.n	800448e <_malloc_r+0xc2>
 800445e:	1961      	adds	r1, r4, r5
 8004460:	42a3      	cmp	r3, r4
 8004462:	6025      	str	r5, [r4, #0]
 8004464:	bf18      	it	ne
 8004466:	6059      	strne	r1, [r3, #4]
 8004468:	6863      	ldr	r3, [r4, #4]
 800446a:	bf08      	it	eq
 800446c:	f8c8 1000 	streq.w	r1, [r8]
 8004470:	5162      	str	r2, [r4, r5]
 8004472:	604b      	str	r3, [r1, #4]
 8004474:	4630      	mov	r0, r6
 8004476:	f000 f82f 	bl	80044d8 <__malloc_unlock>
 800447a:	f104 000b 	add.w	r0, r4, #11
 800447e:	1d23      	adds	r3, r4, #4
 8004480:	f020 0007 	bic.w	r0, r0, #7
 8004484:	1ac2      	subs	r2, r0, r3
 8004486:	bf1c      	itt	ne
 8004488:	1a1b      	subne	r3, r3, r0
 800448a:	50a3      	strne	r3, [r4, r2]
 800448c:	e7af      	b.n	80043ee <_malloc_r+0x22>
 800448e:	6862      	ldr	r2, [r4, #4]
 8004490:	42a3      	cmp	r3, r4
 8004492:	bf0c      	ite	eq
 8004494:	f8c8 2000 	streq.w	r2, [r8]
 8004498:	605a      	strne	r2, [r3, #4]
 800449a:	e7eb      	b.n	8004474 <_malloc_r+0xa8>
 800449c:	4623      	mov	r3, r4
 800449e:	6864      	ldr	r4, [r4, #4]
 80044a0:	e7ae      	b.n	8004400 <_malloc_r+0x34>
 80044a2:	463c      	mov	r4, r7
 80044a4:	687f      	ldr	r7, [r7, #4]
 80044a6:	e7b6      	b.n	8004416 <_malloc_r+0x4a>
 80044a8:	461a      	mov	r2, r3
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	42a3      	cmp	r3, r4
 80044ae:	d1fb      	bne.n	80044a8 <_malloc_r+0xdc>
 80044b0:	2300      	movs	r3, #0
 80044b2:	6053      	str	r3, [r2, #4]
 80044b4:	e7de      	b.n	8004474 <_malloc_r+0xa8>
 80044b6:	230c      	movs	r3, #12
 80044b8:	6033      	str	r3, [r6, #0]
 80044ba:	4630      	mov	r0, r6
 80044bc:	f000 f80c 	bl	80044d8 <__malloc_unlock>
 80044c0:	e794      	b.n	80043ec <_malloc_r+0x20>
 80044c2:	6005      	str	r5, [r0, #0]
 80044c4:	e7d6      	b.n	8004474 <_malloc_r+0xa8>
 80044c6:	bf00      	nop
 80044c8:	240002e4 	.word	0x240002e4

080044cc <__malloc_lock>:
 80044cc:	4801      	ldr	r0, [pc, #4]	@ (80044d4 <__malloc_lock+0x8>)
 80044ce:	f7ff bf0e 	b.w	80042ee <__retarget_lock_acquire_recursive>
 80044d2:	bf00      	nop
 80044d4:	240002dc 	.word	0x240002dc

080044d8 <__malloc_unlock>:
 80044d8:	4801      	ldr	r0, [pc, #4]	@ (80044e0 <__malloc_unlock+0x8>)
 80044da:	f7ff bf09 	b.w	80042f0 <__retarget_lock_release_recursive>
 80044de:	bf00      	nop
 80044e0:	240002dc 	.word	0x240002dc

080044e4 <__ssputs_r>:
 80044e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044e8:	688e      	ldr	r6, [r1, #8]
 80044ea:	461f      	mov	r7, r3
 80044ec:	42be      	cmp	r6, r7
 80044ee:	680b      	ldr	r3, [r1, #0]
 80044f0:	4682      	mov	sl, r0
 80044f2:	460c      	mov	r4, r1
 80044f4:	4690      	mov	r8, r2
 80044f6:	d82d      	bhi.n	8004554 <__ssputs_r+0x70>
 80044f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80044fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004500:	d026      	beq.n	8004550 <__ssputs_r+0x6c>
 8004502:	6965      	ldr	r5, [r4, #20]
 8004504:	6909      	ldr	r1, [r1, #16]
 8004506:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800450a:	eba3 0901 	sub.w	r9, r3, r1
 800450e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004512:	1c7b      	adds	r3, r7, #1
 8004514:	444b      	add	r3, r9
 8004516:	106d      	asrs	r5, r5, #1
 8004518:	429d      	cmp	r5, r3
 800451a:	bf38      	it	cc
 800451c:	461d      	movcc	r5, r3
 800451e:	0553      	lsls	r3, r2, #21
 8004520:	d527      	bpl.n	8004572 <__ssputs_r+0x8e>
 8004522:	4629      	mov	r1, r5
 8004524:	f7ff ff52 	bl	80043cc <_malloc_r>
 8004528:	4606      	mov	r6, r0
 800452a:	b360      	cbz	r0, 8004586 <__ssputs_r+0xa2>
 800452c:	6921      	ldr	r1, [r4, #16]
 800452e:	464a      	mov	r2, r9
 8004530:	f000 fd6a 	bl	8005008 <memcpy>
 8004534:	89a3      	ldrh	r3, [r4, #12]
 8004536:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800453a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800453e:	81a3      	strh	r3, [r4, #12]
 8004540:	6126      	str	r6, [r4, #16]
 8004542:	6165      	str	r5, [r4, #20]
 8004544:	444e      	add	r6, r9
 8004546:	eba5 0509 	sub.w	r5, r5, r9
 800454a:	6026      	str	r6, [r4, #0]
 800454c:	60a5      	str	r5, [r4, #8]
 800454e:	463e      	mov	r6, r7
 8004550:	42be      	cmp	r6, r7
 8004552:	d900      	bls.n	8004556 <__ssputs_r+0x72>
 8004554:	463e      	mov	r6, r7
 8004556:	6820      	ldr	r0, [r4, #0]
 8004558:	4632      	mov	r2, r6
 800455a:	4641      	mov	r1, r8
 800455c:	f000 fd2a 	bl	8004fb4 <memmove>
 8004560:	68a3      	ldr	r3, [r4, #8]
 8004562:	1b9b      	subs	r3, r3, r6
 8004564:	60a3      	str	r3, [r4, #8]
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	4433      	add	r3, r6
 800456a:	6023      	str	r3, [r4, #0]
 800456c:	2000      	movs	r0, #0
 800456e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004572:	462a      	mov	r2, r5
 8004574:	f000 fd56 	bl	8005024 <_realloc_r>
 8004578:	4606      	mov	r6, r0
 800457a:	2800      	cmp	r0, #0
 800457c:	d1e0      	bne.n	8004540 <__ssputs_r+0x5c>
 800457e:	6921      	ldr	r1, [r4, #16]
 8004580:	4650      	mov	r0, sl
 8004582:	f7ff feb7 	bl	80042f4 <_free_r>
 8004586:	230c      	movs	r3, #12
 8004588:	f8ca 3000 	str.w	r3, [sl]
 800458c:	89a3      	ldrh	r3, [r4, #12]
 800458e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004592:	81a3      	strh	r3, [r4, #12]
 8004594:	f04f 30ff 	mov.w	r0, #4294967295
 8004598:	e7e9      	b.n	800456e <__ssputs_r+0x8a>
	...

0800459c <_svfiprintf_r>:
 800459c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045a0:	4698      	mov	r8, r3
 80045a2:	898b      	ldrh	r3, [r1, #12]
 80045a4:	061b      	lsls	r3, r3, #24
 80045a6:	b09d      	sub	sp, #116	@ 0x74
 80045a8:	4607      	mov	r7, r0
 80045aa:	460d      	mov	r5, r1
 80045ac:	4614      	mov	r4, r2
 80045ae:	d510      	bpl.n	80045d2 <_svfiprintf_r+0x36>
 80045b0:	690b      	ldr	r3, [r1, #16]
 80045b2:	b973      	cbnz	r3, 80045d2 <_svfiprintf_r+0x36>
 80045b4:	2140      	movs	r1, #64	@ 0x40
 80045b6:	f7ff ff09 	bl	80043cc <_malloc_r>
 80045ba:	6028      	str	r0, [r5, #0]
 80045bc:	6128      	str	r0, [r5, #16]
 80045be:	b930      	cbnz	r0, 80045ce <_svfiprintf_r+0x32>
 80045c0:	230c      	movs	r3, #12
 80045c2:	603b      	str	r3, [r7, #0]
 80045c4:	f04f 30ff 	mov.w	r0, #4294967295
 80045c8:	b01d      	add	sp, #116	@ 0x74
 80045ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ce:	2340      	movs	r3, #64	@ 0x40
 80045d0:	616b      	str	r3, [r5, #20]
 80045d2:	2300      	movs	r3, #0
 80045d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80045d6:	2320      	movs	r3, #32
 80045d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80045dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80045e0:	2330      	movs	r3, #48	@ 0x30
 80045e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004780 <_svfiprintf_r+0x1e4>
 80045e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80045ea:	f04f 0901 	mov.w	r9, #1
 80045ee:	4623      	mov	r3, r4
 80045f0:	469a      	mov	sl, r3
 80045f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045f6:	b10a      	cbz	r2, 80045fc <_svfiprintf_r+0x60>
 80045f8:	2a25      	cmp	r2, #37	@ 0x25
 80045fa:	d1f9      	bne.n	80045f0 <_svfiprintf_r+0x54>
 80045fc:	ebba 0b04 	subs.w	fp, sl, r4
 8004600:	d00b      	beq.n	800461a <_svfiprintf_r+0x7e>
 8004602:	465b      	mov	r3, fp
 8004604:	4622      	mov	r2, r4
 8004606:	4629      	mov	r1, r5
 8004608:	4638      	mov	r0, r7
 800460a:	f7ff ff6b 	bl	80044e4 <__ssputs_r>
 800460e:	3001      	adds	r0, #1
 8004610:	f000 80a7 	beq.w	8004762 <_svfiprintf_r+0x1c6>
 8004614:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004616:	445a      	add	r2, fp
 8004618:	9209      	str	r2, [sp, #36]	@ 0x24
 800461a:	f89a 3000 	ldrb.w	r3, [sl]
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 809f 	beq.w	8004762 <_svfiprintf_r+0x1c6>
 8004624:	2300      	movs	r3, #0
 8004626:	f04f 32ff 	mov.w	r2, #4294967295
 800462a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800462e:	f10a 0a01 	add.w	sl, sl, #1
 8004632:	9304      	str	r3, [sp, #16]
 8004634:	9307      	str	r3, [sp, #28]
 8004636:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800463a:	931a      	str	r3, [sp, #104]	@ 0x68
 800463c:	4654      	mov	r4, sl
 800463e:	2205      	movs	r2, #5
 8004640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004644:	484e      	ldr	r0, [pc, #312]	@ (8004780 <_svfiprintf_r+0x1e4>)
 8004646:	f7fb fe4b 	bl	80002e0 <memchr>
 800464a:	9a04      	ldr	r2, [sp, #16]
 800464c:	b9d8      	cbnz	r0, 8004686 <_svfiprintf_r+0xea>
 800464e:	06d0      	lsls	r0, r2, #27
 8004650:	bf44      	itt	mi
 8004652:	2320      	movmi	r3, #32
 8004654:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004658:	0711      	lsls	r1, r2, #28
 800465a:	bf44      	itt	mi
 800465c:	232b      	movmi	r3, #43	@ 0x2b
 800465e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004662:	f89a 3000 	ldrb.w	r3, [sl]
 8004666:	2b2a      	cmp	r3, #42	@ 0x2a
 8004668:	d015      	beq.n	8004696 <_svfiprintf_r+0xfa>
 800466a:	9a07      	ldr	r2, [sp, #28]
 800466c:	4654      	mov	r4, sl
 800466e:	2000      	movs	r0, #0
 8004670:	f04f 0c0a 	mov.w	ip, #10
 8004674:	4621      	mov	r1, r4
 8004676:	f811 3b01 	ldrb.w	r3, [r1], #1
 800467a:	3b30      	subs	r3, #48	@ 0x30
 800467c:	2b09      	cmp	r3, #9
 800467e:	d94b      	bls.n	8004718 <_svfiprintf_r+0x17c>
 8004680:	b1b0      	cbz	r0, 80046b0 <_svfiprintf_r+0x114>
 8004682:	9207      	str	r2, [sp, #28]
 8004684:	e014      	b.n	80046b0 <_svfiprintf_r+0x114>
 8004686:	eba0 0308 	sub.w	r3, r0, r8
 800468a:	fa09 f303 	lsl.w	r3, r9, r3
 800468e:	4313      	orrs	r3, r2
 8004690:	9304      	str	r3, [sp, #16]
 8004692:	46a2      	mov	sl, r4
 8004694:	e7d2      	b.n	800463c <_svfiprintf_r+0xa0>
 8004696:	9b03      	ldr	r3, [sp, #12]
 8004698:	1d19      	adds	r1, r3, #4
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	9103      	str	r1, [sp, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	bfbb      	ittet	lt
 80046a2:	425b      	neglt	r3, r3
 80046a4:	f042 0202 	orrlt.w	r2, r2, #2
 80046a8:	9307      	strge	r3, [sp, #28]
 80046aa:	9307      	strlt	r3, [sp, #28]
 80046ac:	bfb8      	it	lt
 80046ae:	9204      	strlt	r2, [sp, #16]
 80046b0:	7823      	ldrb	r3, [r4, #0]
 80046b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80046b4:	d10a      	bne.n	80046cc <_svfiprintf_r+0x130>
 80046b6:	7863      	ldrb	r3, [r4, #1]
 80046b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80046ba:	d132      	bne.n	8004722 <_svfiprintf_r+0x186>
 80046bc:	9b03      	ldr	r3, [sp, #12]
 80046be:	1d1a      	adds	r2, r3, #4
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	9203      	str	r2, [sp, #12]
 80046c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80046c8:	3402      	adds	r4, #2
 80046ca:	9305      	str	r3, [sp, #20]
 80046cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004790 <_svfiprintf_r+0x1f4>
 80046d0:	7821      	ldrb	r1, [r4, #0]
 80046d2:	2203      	movs	r2, #3
 80046d4:	4650      	mov	r0, sl
 80046d6:	f7fb fe03 	bl	80002e0 <memchr>
 80046da:	b138      	cbz	r0, 80046ec <_svfiprintf_r+0x150>
 80046dc:	9b04      	ldr	r3, [sp, #16]
 80046de:	eba0 000a 	sub.w	r0, r0, sl
 80046e2:	2240      	movs	r2, #64	@ 0x40
 80046e4:	4082      	lsls	r2, r0
 80046e6:	4313      	orrs	r3, r2
 80046e8:	3401      	adds	r4, #1
 80046ea:	9304      	str	r3, [sp, #16]
 80046ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046f0:	4824      	ldr	r0, [pc, #144]	@ (8004784 <_svfiprintf_r+0x1e8>)
 80046f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80046f6:	2206      	movs	r2, #6
 80046f8:	f7fb fdf2 	bl	80002e0 <memchr>
 80046fc:	2800      	cmp	r0, #0
 80046fe:	d036      	beq.n	800476e <_svfiprintf_r+0x1d2>
 8004700:	4b21      	ldr	r3, [pc, #132]	@ (8004788 <_svfiprintf_r+0x1ec>)
 8004702:	bb1b      	cbnz	r3, 800474c <_svfiprintf_r+0x1b0>
 8004704:	9b03      	ldr	r3, [sp, #12]
 8004706:	3307      	adds	r3, #7
 8004708:	f023 0307 	bic.w	r3, r3, #7
 800470c:	3308      	adds	r3, #8
 800470e:	9303      	str	r3, [sp, #12]
 8004710:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004712:	4433      	add	r3, r6
 8004714:	9309      	str	r3, [sp, #36]	@ 0x24
 8004716:	e76a      	b.n	80045ee <_svfiprintf_r+0x52>
 8004718:	fb0c 3202 	mla	r2, ip, r2, r3
 800471c:	460c      	mov	r4, r1
 800471e:	2001      	movs	r0, #1
 8004720:	e7a8      	b.n	8004674 <_svfiprintf_r+0xd8>
 8004722:	2300      	movs	r3, #0
 8004724:	3401      	adds	r4, #1
 8004726:	9305      	str	r3, [sp, #20]
 8004728:	4619      	mov	r1, r3
 800472a:	f04f 0c0a 	mov.w	ip, #10
 800472e:	4620      	mov	r0, r4
 8004730:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004734:	3a30      	subs	r2, #48	@ 0x30
 8004736:	2a09      	cmp	r2, #9
 8004738:	d903      	bls.n	8004742 <_svfiprintf_r+0x1a6>
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0c6      	beq.n	80046cc <_svfiprintf_r+0x130>
 800473e:	9105      	str	r1, [sp, #20]
 8004740:	e7c4      	b.n	80046cc <_svfiprintf_r+0x130>
 8004742:	fb0c 2101 	mla	r1, ip, r1, r2
 8004746:	4604      	mov	r4, r0
 8004748:	2301      	movs	r3, #1
 800474a:	e7f0      	b.n	800472e <_svfiprintf_r+0x192>
 800474c:	ab03      	add	r3, sp, #12
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	462a      	mov	r2, r5
 8004752:	4b0e      	ldr	r3, [pc, #56]	@ (800478c <_svfiprintf_r+0x1f0>)
 8004754:	a904      	add	r1, sp, #16
 8004756:	4638      	mov	r0, r7
 8004758:	f3af 8000 	nop.w
 800475c:	1c42      	adds	r2, r0, #1
 800475e:	4606      	mov	r6, r0
 8004760:	d1d6      	bne.n	8004710 <_svfiprintf_r+0x174>
 8004762:	89ab      	ldrh	r3, [r5, #12]
 8004764:	065b      	lsls	r3, r3, #25
 8004766:	f53f af2d 	bmi.w	80045c4 <_svfiprintf_r+0x28>
 800476a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800476c:	e72c      	b.n	80045c8 <_svfiprintf_r+0x2c>
 800476e:	ab03      	add	r3, sp, #12
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	462a      	mov	r2, r5
 8004774:	4b05      	ldr	r3, [pc, #20]	@ (800478c <_svfiprintf_r+0x1f0>)
 8004776:	a904      	add	r1, sp, #16
 8004778:	4638      	mov	r0, r7
 800477a:	f000 f9bb 	bl	8004af4 <_printf_i>
 800477e:	e7ed      	b.n	800475c <_svfiprintf_r+0x1c0>
 8004780:	08005218 	.word	0x08005218
 8004784:	08005222 	.word	0x08005222
 8004788:	00000000 	.word	0x00000000
 800478c:	080044e5 	.word	0x080044e5
 8004790:	0800521e 	.word	0x0800521e

08004794 <__sfputc_r>:
 8004794:	6893      	ldr	r3, [r2, #8]
 8004796:	3b01      	subs	r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	b410      	push	{r4}
 800479c:	6093      	str	r3, [r2, #8]
 800479e:	da08      	bge.n	80047b2 <__sfputc_r+0x1e>
 80047a0:	6994      	ldr	r4, [r2, #24]
 80047a2:	42a3      	cmp	r3, r4
 80047a4:	db01      	blt.n	80047aa <__sfputc_r+0x16>
 80047a6:	290a      	cmp	r1, #10
 80047a8:	d103      	bne.n	80047b2 <__sfputc_r+0x1e>
 80047aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047ae:	f000 bb6d 	b.w	8004e8c <__swbuf_r>
 80047b2:	6813      	ldr	r3, [r2, #0]
 80047b4:	1c58      	adds	r0, r3, #1
 80047b6:	6010      	str	r0, [r2, #0]
 80047b8:	7019      	strb	r1, [r3, #0]
 80047ba:	4608      	mov	r0, r1
 80047bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <__sfputs_r>:
 80047c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c4:	4606      	mov	r6, r0
 80047c6:	460f      	mov	r7, r1
 80047c8:	4614      	mov	r4, r2
 80047ca:	18d5      	adds	r5, r2, r3
 80047cc:	42ac      	cmp	r4, r5
 80047ce:	d101      	bne.n	80047d4 <__sfputs_r+0x12>
 80047d0:	2000      	movs	r0, #0
 80047d2:	e007      	b.n	80047e4 <__sfputs_r+0x22>
 80047d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047d8:	463a      	mov	r2, r7
 80047da:	4630      	mov	r0, r6
 80047dc:	f7ff ffda 	bl	8004794 <__sfputc_r>
 80047e0:	1c43      	adds	r3, r0, #1
 80047e2:	d1f3      	bne.n	80047cc <__sfputs_r+0xa>
 80047e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080047e8 <_vfiprintf_r>:
 80047e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ec:	460d      	mov	r5, r1
 80047ee:	b09d      	sub	sp, #116	@ 0x74
 80047f0:	4614      	mov	r4, r2
 80047f2:	4698      	mov	r8, r3
 80047f4:	4606      	mov	r6, r0
 80047f6:	b118      	cbz	r0, 8004800 <_vfiprintf_r+0x18>
 80047f8:	6a03      	ldr	r3, [r0, #32]
 80047fa:	b90b      	cbnz	r3, 8004800 <_vfiprintf_r+0x18>
 80047fc:	f7ff fc52 	bl	80040a4 <__sinit>
 8004800:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004802:	07d9      	lsls	r1, r3, #31
 8004804:	d405      	bmi.n	8004812 <_vfiprintf_r+0x2a>
 8004806:	89ab      	ldrh	r3, [r5, #12]
 8004808:	059a      	lsls	r2, r3, #22
 800480a:	d402      	bmi.n	8004812 <_vfiprintf_r+0x2a>
 800480c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800480e:	f7ff fd6e 	bl	80042ee <__retarget_lock_acquire_recursive>
 8004812:	89ab      	ldrh	r3, [r5, #12]
 8004814:	071b      	lsls	r3, r3, #28
 8004816:	d501      	bpl.n	800481c <_vfiprintf_r+0x34>
 8004818:	692b      	ldr	r3, [r5, #16]
 800481a:	b99b      	cbnz	r3, 8004844 <_vfiprintf_r+0x5c>
 800481c:	4629      	mov	r1, r5
 800481e:	4630      	mov	r0, r6
 8004820:	f000 fb72 	bl	8004f08 <__swsetup_r>
 8004824:	b170      	cbz	r0, 8004844 <_vfiprintf_r+0x5c>
 8004826:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004828:	07dc      	lsls	r4, r3, #31
 800482a:	d504      	bpl.n	8004836 <_vfiprintf_r+0x4e>
 800482c:	f04f 30ff 	mov.w	r0, #4294967295
 8004830:	b01d      	add	sp, #116	@ 0x74
 8004832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004836:	89ab      	ldrh	r3, [r5, #12]
 8004838:	0598      	lsls	r0, r3, #22
 800483a:	d4f7      	bmi.n	800482c <_vfiprintf_r+0x44>
 800483c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800483e:	f7ff fd57 	bl	80042f0 <__retarget_lock_release_recursive>
 8004842:	e7f3      	b.n	800482c <_vfiprintf_r+0x44>
 8004844:	2300      	movs	r3, #0
 8004846:	9309      	str	r3, [sp, #36]	@ 0x24
 8004848:	2320      	movs	r3, #32
 800484a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800484e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004852:	2330      	movs	r3, #48	@ 0x30
 8004854:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004a04 <_vfiprintf_r+0x21c>
 8004858:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800485c:	f04f 0901 	mov.w	r9, #1
 8004860:	4623      	mov	r3, r4
 8004862:	469a      	mov	sl, r3
 8004864:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004868:	b10a      	cbz	r2, 800486e <_vfiprintf_r+0x86>
 800486a:	2a25      	cmp	r2, #37	@ 0x25
 800486c:	d1f9      	bne.n	8004862 <_vfiprintf_r+0x7a>
 800486e:	ebba 0b04 	subs.w	fp, sl, r4
 8004872:	d00b      	beq.n	800488c <_vfiprintf_r+0xa4>
 8004874:	465b      	mov	r3, fp
 8004876:	4622      	mov	r2, r4
 8004878:	4629      	mov	r1, r5
 800487a:	4630      	mov	r0, r6
 800487c:	f7ff ffa1 	bl	80047c2 <__sfputs_r>
 8004880:	3001      	adds	r0, #1
 8004882:	f000 80a7 	beq.w	80049d4 <_vfiprintf_r+0x1ec>
 8004886:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004888:	445a      	add	r2, fp
 800488a:	9209      	str	r2, [sp, #36]	@ 0x24
 800488c:	f89a 3000 	ldrb.w	r3, [sl]
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 809f 	beq.w	80049d4 <_vfiprintf_r+0x1ec>
 8004896:	2300      	movs	r3, #0
 8004898:	f04f 32ff 	mov.w	r2, #4294967295
 800489c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048a0:	f10a 0a01 	add.w	sl, sl, #1
 80048a4:	9304      	str	r3, [sp, #16]
 80048a6:	9307      	str	r3, [sp, #28]
 80048a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80048ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80048ae:	4654      	mov	r4, sl
 80048b0:	2205      	movs	r2, #5
 80048b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048b6:	4853      	ldr	r0, [pc, #332]	@ (8004a04 <_vfiprintf_r+0x21c>)
 80048b8:	f7fb fd12 	bl	80002e0 <memchr>
 80048bc:	9a04      	ldr	r2, [sp, #16]
 80048be:	b9d8      	cbnz	r0, 80048f8 <_vfiprintf_r+0x110>
 80048c0:	06d1      	lsls	r1, r2, #27
 80048c2:	bf44      	itt	mi
 80048c4:	2320      	movmi	r3, #32
 80048c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048ca:	0713      	lsls	r3, r2, #28
 80048cc:	bf44      	itt	mi
 80048ce:	232b      	movmi	r3, #43	@ 0x2b
 80048d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048d4:	f89a 3000 	ldrb.w	r3, [sl]
 80048d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80048da:	d015      	beq.n	8004908 <_vfiprintf_r+0x120>
 80048dc:	9a07      	ldr	r2, [sp, #28]
 80048de:	4654      	mov	r4, sl
 80048e0:	2000      	movs	r0, #0
 80048e2:	f04f 0c0a 	mov.w	ip, #10
 80048e6:	4621      	mov	r1, r4
 80048e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048ec:	3b30      	subs	r3, #48	@ 0x30
 80048ee:	2b09      	cmp	r3, #9
 80048f0:	d94b      	bls.n	800498a <_vfiprintf_r+0x1a2>
 80048f2:	b1b0      	cbz	r0, 8004922 <_vfiprintf_r+0x13a>
 80048f4:	9207      	str	r2, [sp, #28]
 80048f6:	e014      	b.n	8004922 <_vfiprintf_r+0x13a>
 80048f8:	eba0 0308 	sub.w	r3, r0, r8
 80048fc:	fa09 f303 	lsl.w	r3, r9, r3
 8004900:	4313      	orrs	r3, r2
 8004902:	9304      	str	r3, [sp, #16]
 8004904:	46a2      	mov	sl, r4
 8004906:	e7d2      	b.n	80048ae <_vfiprintf_r+0xc6>
 8004908:	9b03      	ldr	r3, [sp, #12]
 800490a:	1d19      	adds	r1, r3, #4
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	9103      	str	r1, [sp, #12]
 8004910:	2b00      	cmp	r3, #0
 8004912:	bfbb      	ittet	lt
 8004914:	425b      	neglt	r3, r3
 8004916:	f042 0202 	orrlt.w	r2, r2, #2
 800491a:	9307      	strge	r3, [sp, #28]
 800491c:	9307      	strlt	r3, [sp, #28]
 800491e:	bfb8      	it	lt
 8004920:	9204      	strlt	r2, [sp, #16]
 8004922:	7823      	ldrb	r3, [r4, #0]
 8004924:	2b2e      	cmp	r3, #46	@ 0x2e
 8004926:	d10a      	bne.n	800493e <_vfiprintf_r+0x156>
 8004928:	7863      	ldrb	r3, [r4, #1]
 800492a:	2b2a      	cmp	r3, #42	@ 0x2a
 800492c:	d132      	bne.n	8004994 <_vfiprintf_r+0x1ac>
 800492e:	9b03      	ldr	r3, [sp, #12]
 8004930:	1d1a      	adds	r2, r3, #4
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	9203      	str	r2, [sp, #12]
 8004936:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800493a:	3402      	adds	r4, #2
 800493c:	9305      	str	r3, [sp, #20]
 800493e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004a14 <_vfiprintf_r+0x22c>
 8004942:	7821      	ldrb	r1, [r4, #0]
 8004944:	2203      	movs	r2, #3
 8004946:	4650      	mov	r0, sl
 8004948:	f7fb fcca 	bl	80002e0 <memchr>
 800494c:	b138      	cbz	r0, 800495e <_vfiprintf_r+0x176>
 800494e:	9b04      	ldr	r3, [sp, #16]
 8004950:	eba0 000a 	sub.w	r0, r0, sl
 8004954:	2240      	movs	r2, #64	@ 0x40
 8004956:	4082      	lsls	r2, r0
 8004958:	4313      	orrs	r3, r2
 800495a:	3401      	adds	r4, #1
 800495c:	9304      	str	r3, [sp, #16]
 800495e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004962:	4829      	ldr	r0, [pc, #164]	@ (8004a08 <_vfiprintf_r+0x220>)
 8004964:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004968:	2206      	movs	r2, #6
 800496a:	f7fb fcb9 	bl	80002e0 <memchr>
 800496e:	2800      	cmp	r0, #0
 8004970:	d03f      	beq.n	80049f2 <_vfiprintf_r+0x20a>
 8004972:	4b26      	ldr	r3, [pc, #152]	@ (8004a0c <_vfiprintf_r+0x224>)
 8004974:	bb1b      	cbnz	r3, 80049be <_vfiprintf_r+0x1d6>
 8004976:	9b03      	ldr	r3, [sp, #12]
 8004978:	3307      	adds	r3, #7
 800497a:	f023 0307 	bic.w	r3, r3, #7
 800497e:	3308      	adds	r3, #8
 8004980:	9303      	str	r3, [sp, #12]
 8004982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004984:	443b      	add	r3, r7
 8004986:	9309      	str	r3, [sp, #36]	@ 0x24
 8004988:	e76a      	b.n	8004860 <_vfiprintf_r+0x78>
 800498a:	fb0c 3202 	mla	r2, ip, r2, r3
 800498e:	460c      	mov	r4, r1
 8004990:	2001      	movs	r0, #1
 8004992:	e7a8      	b.n	80048e6 <_vfiprintf_r+0xfe>
 8004994:	2300      	movs	r3, #0
 8004996:	3401      	adds	r4, #1
 8004998:	9305      	str	r3, [sp, #20]
 800499a:	4619      	mov	r1, r3
 800499c:	f04f 0c0a 	mov.w	ip, #10
 80049a0:	4620      	mov	r0, r4
 80049a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049a6:	3a30      	subs	r2, #48	@ 0x30
 80049a8:	2a09      	cmp	r2, #9
 80049aa:	d903      	bls.n	80049b4 <_vfiprintf_r+0x1cc>
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0c6      	beq.n	800493e <_vfiprintf_r+0x156>
 80049b0:	9105      	str	r1, [sp, #20]
 80049b2:	e7c4      	b.n	800493e <_vfiprintf_r+0x156>
 80049b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80049b8:	4604      	mov	r4, r0
 80049ba:	2301      	movs	r3, #1
 80049bc:	e7f0      	b.n	80049a0 <_vfiprintf_r+0x1b8>
 80049be:	ab03      	add	r3, sp, #12
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	462a      	mov	r2, r5
 80049c4:	4b12      	ldr	r3, [pc, #72]	@ (8004a10 <_vfiprintf_r+0x228>)
 80049c6:	a904      	add	r1, sp, #16
 80049c8:	4630      	mov	r0, r6
 80049ca:	f3af 8000 	nop.w
 80049ce:	4607      	mov	r7, r0
 80049d0:	1c78      	adds	r0, r7, #1
 80049d2:	d1d6      	bne.n	8004982 <_vfiprintf_r+0x19a>
 80049d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80049d6:	07d9      	lsls	r1, r3, #31
 80049d8:	d405      	bmi.n	80049e6 <_vfiprintf_r+0x1fe>
 80049da:	89ab      	ldrh	r3, [r5, #12]
 80049dc:	059a      	lsls	r2, r3, #22
 80049de:	d402      	bmi.n	80049e6 <_vfiprintf_r+0x1fe>
 80049e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80049e2:	f7ff fc85 	bl	80042f0 <__retarget_lock_release_recursive>
 80049e6:	89ab      	ldrh	r3, [r5, #12]
 80049e8:	065b      	lsls	r3, r3, #25
 80049ea:	f53f af1f 	bmi.w	800482c <_vfiprintf_r+0x44>
 80049ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80049f0:	e71e      	b.n	8004830 <_vfiprintf_r+0x48>
 80049f2:	ab03      	add	r3, sp, #12
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	462a      	mov	r2, r5
 80049f8:	4b05      	ldr	r3, [pc, #20]	@ (8004a10 <_vfiprintf_r+0x228>)
 80049fa:	a904      	add	r1, sp, #16
 80049fc:	4630      	mov	r0, r6
 80049fe:	f000 f879 	bl	8004af4 <_printf_i>
 8004a02:	e7e4      	b.n	80049ce <_vfiprintf_r+0x1e6>
 8004a04:	08005218 	.word	0x08005218
 8004a08:	08005222 	.word	0x08005222
 8004a0c:	00000000 	.word	0x00000000
 8004a10:	080047c3 	.word	0x080047c3
 8004a14:	0800521e 	.word	0x0800521e

08004a18 <_printf_common>:
 8004a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a1c:	4616      	mov	r6, r2
 8004a1e:	4698      	mov	r8, r3
 8004a20:	688a      	ldr	r2, [r1, #8]
 8004a22:	690b      	ldr	r3, [r1, #16]
 8004a24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	bfb8      	it	lt
 8004a2c:	4613      	movlt	r3, r2
 8004a2e:	6033      	str	r3, [r6, #0]
 8004a30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a34:	4607      	mov	r7, r0
 8004a36:	460c      	mov	r4, r1
 8004a38:	b10a      	cbz	r2, 8004a3e <_printf_common+0x26>
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	6033      	str	r3, [r6, #0]
 8004a3e:	6823      	ldr	r3, [r4, #0]
 8004a40:	0699      	lsls	r1, r3, #26
 8004a42:	bf42      	ittt	mi
 8004a44:	6833      	ldrmi	r3, [r6, #0]
 8004a46:	3302      	addmi	r3, #2
 8004a48:	6033      	strmi	r3, [r6, #0]
 8004a4a:	6825      	ldr	r5, [r4, #0]
 8004a4c:	f015 0506 	ands.w	r5, r5, #6
 8004a50:	d106      	bne.n	8004a60 <_printf_common+0x48>
 8004a52:	f104 0a19 	add.w	sl, r4, #25
 8004a56:	68e3      	ldr	r3, [r4, #12]
 8004a58:	6832      	ldr	r2, [r6, #0]
 8004a5a:	1a9b      	subs	r3, r3, r2
 8004a5c:	42ab      	cmp	r3, r5
 8004a5e:	dc26      	bgt.n	8004aae <_printf_common+0x96>
 8004a60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004a64:	6822      	ldr	r2, [r4, #0]
 8004a66:	3b00      	subs	r3, #0
 8004a68:	bf18      	it	ne
 8004a6a:	2301      	movne	r3, #1
 8004a6c:	0692      	lsls	r2, r2, #26
 8004a6e:	d42b      	bmi.n	8004ac8 <_printf_common+0xb0>
 8004a70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004a74:	4641      	mov	r1, r8
 8004a76:	4638      	mov	r0, r7
 8004a78:	47c8      	blx	r9
 8004a7a:	3001      	adds	r0, #1
 8004a7c:	d01e      	beq.n	8004abc <_printf_common+0xa4>
 8004a7e:	6823      	ldr	r3, [r4, #0]
 8004a80:	6922      	ldr	r2, [r4, #16]
 8004a82:	f003 0306 	and.w	r3, r3, #6
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	bf02      	ittt	eq
 8004a8a:	68e5      	ldreq	r5, [r4, #12]
 8004a8c:	6833      	ldreq	r3, [r6, #0]
 8004a8e:	1aed      	subeq	r5, r5, r3
 8004a90:	68a3      	ldr	r3, [r4, #8]
 8004a92:	bf0c      	ite	eq
 8004a94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a98:	2500      	movne	r5, #0
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	bfc4      	itt	gt
 8004a9e:	1a9b      	subgt	r3, r3, r2
 8004aa0:	18ed      	addgt	r5, r5, r3
 8004aa2:	2600      	movs	r6, #0
 8004aa4:	341a      	adds	r4, #26
 8004aa6:	42b5      	cmp	r5, r6
 8004aa8:	d11a      	bne.n	8004ae0 <_printf_common+0xc8>
 8004aaa:	2000      	movs	r0, #0
 8004aac:	e008      	b.n	8004ac0 <_printf_common+0xa8>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	4652      	mov	r2, sl
 8004ab2:	4641      	mov	r1, r8
 8004ab4:	4638      	mov	r0, r7
 8004ab6:	47c8      	blx	r9
 8004ab8:	3001      	adds	r0, #1
 8004aba:	d103      	bne.n	8004ac4 <_printf_common+0xac>
 8004abc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac4:	3501      	adds	r5, #1
 8004ac6:	e7c6      	b.n	8004a56 <_printf_common+0x3e>
 8004ac8:	18e1      	adds	r1, r4, r3
 8004aca:	1c5a      	adds	r2, r3, #1
 8004acc:	2030      	movs	r0, #48	@ 0x30
 8004ace:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ad2:	4422      	add	r2, r4
 8004ad4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ad8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004adc:	3302      	adds	r3, #2
 8004ade:	e7c7      	b.n	8004a70 <_printf_common+0x58>
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	4622      	mov	r2, r4
 8004ae4:	4641      	mov	r1, r8
 8004ae6:	4638      	mov	r0, r7
 8004ae8:	47c8      	blx	r9
 8004aea:	3001      	adds	r0, #1
 8004aec:	d0e6      	beq.n	8004abc <_printf_common+0xa4>
 8004aee:	3601      	adds	r6, #1
 8004af0:	e7d9      	b.n	8004aa6 <_printf_common+0x8e>
	...

08004af4 <_printf_i>:
 8004af4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004af8:	7e0f      	ldrb	r7, [r1, #24]
 8004afa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004afc:	2f78      	cmp	r7, #120	@ 0x78
 8004afe:	4691      	mov	r9, r2
 8004b00:	4680      	mov	r8, r0
 8004b02:	460c      	mov	r4, r1
 8004b04:	469a      	mov	sl, r3
 8004b06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b0a:	d807      	bhi.n	8004b1c <_printf_i+0x28>
 8004b0c:	2f62      	cmp	r7, #98	@ 0x62
 8004b0e:	d80a      	bhi.n	8004b26 <_printf_i+0x32>
 8004b10:	2f00      	cmp	r7, #0
 8004b12:	f000 80d2 	beq.w	8004cba <_printf_i+0x1c6>
 8004b16:	2f58      	cmp	r7, #88	@ 0x58
 8004b18:	f000 80b9 	beq.w	8004c8e <_printf_i+0x19a>
 8004b1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b24:	e03a      	b.n	8004b9c <_printf_i+0xa8>
 8004b26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b2a:	2b15      	cmp	r3, #21
 8004b2c:	d8f6      	bhi.n	8004b1c <_printf_i+0x28>
 8004b2e:	a101      	add	r1, pc, #4	@ (adr r1, 8004b34 <_printf_i+0x40>)
 8004b30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b34:	08004b8d 	.word	0x08004b8d
 8004b38:	08004ba1 	.word	0x08004ba1
 8004b3c:	08004b1d 	.word	0x08004b1d
 8004b40:	08004b1d 	.word	0x08004b1d
 8004b44:	08004b1d 	.word	0x08004b1d
 8004b48:	08004b1d 	.word	0x08004b1d
 8004b4c:	08004ba1 	.word	0x08004ba1
 8004b50:	08004b1d 	.word	0x08004b1d
 8004b54:	08004b1d 	.word	0x08004b1d
 8004b58:	08004b1d 	.word	0x08004b1d
 8004b5c:	08004b1d 	.word	0x08004b1d
 8004b60:	08004ca1 	.word	0x08004ca1
 8004b64:	08004bcb 	.word	0x08004bcb
 8004b68:	08004c5b 	.word	0x08004c5b
 8004b6c:	08004b1d 	.word	0x08004b1d
 8004b70:	08004b1d 	.word	0x08004b1d
 8004b74:	08004cc3 	.word	0x08004cc3
 8004b78:	08004b1d 	.word	0x08004b1d
 8004b7c:	08004bcb 	.word	0x08004bcb
 8004b80:	08004b1d 	.word	0x08004b1d
 8004b84:	08004b1d 	.word	0x08004b1d
 8004b88:	08004c63 	.word	0x08004c63
 8004b8c:	6833      	ldr	r3, [r6, #0]
 8004b8e:	1d1a      	adds	r2, r3, #4
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6032      	str	r2, [r6, #0]
 8004b94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e09d      	b.n	8004cdc <_printf_i+0x1e8>
 8004ba0:	6833      	ldr	r3, [r6, #0]
 8004ba2:	6820      	ldr	r0, [r4, #0]
 8004ba4:	1d19      	adds	r1, r3, #4
 8004ba6:	6031      	str	r1, [r6, #0]
 8004ba8:	0606      	lsls	r6, r0, #24
 8004baa:	d501      	bpl.n	8004bb0 <_printf_i+0xbc>
 8004bac:	681d      	ldr	r5, [r3, #0]
 8004bae:	e003      	b.n	8004bb8 <_printf_i+0xc4>
 8004bb0:	0645      	lsls	r5, r0, #25
 8004bb2:	d5fb      	bpl.n	8004bac <_printf_i+0xb8>
 8004bb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004bb8:	2d00      	cmp	r5, #0
 8004bba:	da03      	bge.n	8004bc4 <_printf_i+0xd0>
 8004bbc:	232d      	movs	r3, #45	@ 0x2d
 8004bbe:	426d      	negs	r5, r5
 8004bc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bc4:	4859      	ldr	r0, [pc, #356]	@ (8004d2c <_printf_i+0x238>)
 8004bc6:	230a      	movs	r3, #10
 8004bc8:	e011      	b.n	8004bee <_printf_i+0xfa>
 8004bca:	6821      	ldr	r1, [r4, #0]
 8004bcc:	6833      	ldr	r3, [r6, #0]
 8004bce:	0608      	lsls	r0, r1, #24
 8004bd0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004bd4:	d402      	bmi.n	8004bdc <_printf_i+0xe8>
 8004bd6:	0649      	lsls	r1, r1, #25
 8004bd8:	bf48      	it	mi
 8004bda:	b2ad      	uxthmi	r5, r5
 8004bdc:	2f6f      	cmp	r7, #111	@ 0x6f
 8004bde:	4853      	ldr	r0, [pc, #332]	@ (8004d2c <_printf_i+0x238>)
 8004be0:	6033      	str	r3, [r6, #0]
 8004be2:	bf14      	ite	ne
 8004be4:	230a      	movne	r3, #10
 8004be6:	2308      	moveq	r3, #8
 8004be8:	2100      	movs	r1, #0
 8004bea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004bee:	6866      	ldr	r6, [r4, #4]
 8004bf0:	60a6      	str	r6, [r4, #8]
 8004bf2:	2e00      	cmp	r6, #0
 8004bf4:	bfa2      	ittt	ge
 8004bf6:	6821      	ldrge	r1, [r4, #0]
 8004bf8:	f021 0104 	bicge.w	r1, r1, #4
 8004bfc:	6021      	strge	r1, [r4, #0]
 8004bfe:	b90d      	cbnz	r5, 8004c04 <_printf_i+0x110>
 8004c00:	2e00      	cmp	r6, #0
 8004c02:	d04b      	beq.n	8004c9c <_printf_i+0x1a8>
 8004c04:	4616      	mov	r6, r2
 8004c06:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c0a:	fb03 5711 	mls	r7, r3, r1, r5
 8004c0e:	5dc7      	ldrb	r7, [r0, r7]
 8004c10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c14:	462f      	mov	r7, r5
 8004c16:	42bb      	cmp	r3, r7
 8004c18:	460d      	mov	r5, r1
 8004c1a:	d9f4      	bls.n	8004c06 <_printf_i+0x112>
 8004c1c:	2b08      	cmp	r3, #8
 8004c1e:	d10b      	bne.n	8004c38 <_printf_i+0x144>
 8004c20:	6823      	ldr	r3, [r4, #0]
 8004c22:	07df      	lsls	r7, r3, #31
 8004c24:	d508      	bpl.n	8004c38 <_printf_i+0x144>
 8004c26:	6923      	ldr	r3, [r4, #16]
 8004c28:	6861      	ldr	r1, [r4, #4]
 8004c2a:	4299      	cmp	r1, r3
 8004c2c:	bfde      	ittt	le
 8004c2e:	2330      	movle	r3, #48	@ 0x30
 8004c30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c38:	1b92      	subs	r2, r2, r6
 8004c3a:	6122      	str	r2, [r4, #16]
 8004c3c:	f8cd a000 	str.w	sl, [sp]
 8004c40:	464b      	mov	r3, r9
 8004c42:	aa03      	add	r2, sp, #12
 8004c44:	4621      	mov	r1, r4
 8004c46:	4640      	mov	r0, r8
 8004c48:	f7ff fee6 	bl	8004a18 <_printf_common>
 8004c4c:	3001      	adds	r0, #1
 8004c4e:	d14a      	bne.n	8004ce6 <_printf_i+0x1f2>
 8004c50:	f04f 30ff 	mov.w	r0, #4294967295
 8004c54:	b004      	add	sp, #16
 8004c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c5a:	6823      	ldr	r3, [r4, #0]
 8004c5c:	f043 0320 	orr.w	r3, r3, #32
 8004c60:	6023      	str	r3, [r4, #0]
 8004c62:	4833      	ldr	r0, [pc, #204]	@ (8004d30 <_printf_i+0x23c>)
 8004c64:	2778      	movs	r7, #120	@ 0x78
 8004c66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004c6a:	6823      	ldr	r3, [r4, #0]
 8004c6c:	6831      	ldr	r1, [r6, #0]
 8004c6e:	061f      	lsls	r7, r3, #24
 8004c70:	f851 5b04 	ldr.w	r5, [r1], #4
 8004c74:	d402      	bmi.n	8004c7c <_printf_i+0x188>
 8004c76:	065f      	lsls	r7, r3, #25
 8004c78:	bf48      	it	mi
 8004c7a:	b2ad      	uxthmi	r5, r5
 8004c7c:	6031      	str	r1, [r6, #0]
 8004c7e:	07d9      	lsls	r1, r3, #31
 8004c80:	bf44      	itt	mi
 8004c82:	f043 0320 	orrmi.w	r3, r3, #32
 8004c86:	6023      	strmi	r3, [r4, #0]
 8004c88:	b11d      	cbz	r5, 8004c92 <_printf_i+0x19e>
 8004c8a:	2310      	movs	r3, #16
 8004c8c:	e7ac      	b.n	8004be8 <_printf_i+0xf4>
 8004c8e:	4827      	ldr	r0, [pc, #156]	@ (8004d2c <_printf_i+0x238>)
 8004c90:	e7e9      	b.n	8004c66 <_printf_i+0x172>
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	f023 0320 	bic.w	r3, r3, #32
 8004c98:	6023      	str	r3, [r4, #0]
 8004c9a:	e7f6      	b.n	8004c8a <_printf_i+0x196>
 8004c9c:	4616      	mov	r6, r2
 8004c9e:	e7bd      	b.n	8004c1c <_printf_i+0x128>
 8004ca0:	6833      	ldr	r3, [r6, #0]
 8004ca2:	6825      	ldr	r5, [r4, #0]
 8004ca4:	6961      	ldr	r1, [r4, #20]
 8004ca6:	1d18      	adds	r0, r3, #4
 8004ca8:	6030      	str	r0, [r6, #0]
 8004caa:	062e      	lsls	r6, r5, #24
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	d501      	bpl.n	8004cb4 <_printf_i+0x1c0>
 8004cb0:	6019      	str	r1, [r3, #0]
 8004cb2:	e002      	b.n	8004cba <_printf_i+0x1c6>
 8004cb4:	0668      	lsls	r0, r5, #25
 8004cb6:	d5fb      	bpl.n	8004cb0 <_printf_i+0x1bc>
 8004cb8:	8019      	strh	r1, [r3, #0]
 8004cba:	2300      	movs	r3, #0
 8004cbc:	6123      	str	r3, [r4, #16]
 8004cbe:	4616      	mov	r6, r2
 8004cc0:	e7bc      	b.n	8004c3c <_printf_i+0x148>
 8004cc2:	6833      	ldr	r3, [r6, #0]
 8004cc4:	1d1a      	adds	r2, r3, #4
 8004cc6:	6032      	str	r2, [r6, #0]
 8004cc8:	681e      	ldr	r6, [r3, #0]
 8004cca:	6862      	ldr	r2, [r4, #4]
 8004ccc:	2100      	movs	r1, #0
 8004cce:	4630      	mov	r0, r6
 8004cd0:	f7fb fb06 	bl	80002e0 <memchr>
 8004cd4:	b108      	cbz	r0, 8004cda <_printf_i+0x1e6>
 8004cd6:	1b80      	subs	r0, r0, r6
 8004cd8:	6060      	str	r0, [r4, #4]
 8004cda:	6863      	ldr	r3, [r4, #4]
 8004cdc:	6123      	str	r3, [r4, #16]
 8004cde:	2300      	movs	r3, #0
 8004ce0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ce4:	e7aa      	b.n	8004c3c <_printf_i+0x148>
 8004ce6:	6923      	ldr	r3, [r4, #16]
 8004ce8:	4632      	mov	r2, r6
 8004cea:	4649      	mov	r1, r9
 8004cec:	4640      	mov	r0, r8
 8004cee:	47d0      	blx	sl
 8004cf0:	3001      	adds	r0, #1
 8004cf2:	d0ad      	beq.n	8004c50 <_printf_i+0x15c>
 8004cf4:	6823      	ldr	r3, [r4, #0]
 8004cf6:	079b      	lsls	r3, r3, #30
 8004cf8:	d413      	bmi.n	8004d22 <_printf_i+0x22e>
 8004cfa:	68e0      	ldr	r0, [r4, #12]
 8004cfc:	9b03      	ldr	r3, [sp, #12]
 8004cfe:	4298      	cmp	r0, r3
 8004d00:	bfb8      	it	lt
 8004d02:	4618      	movlt	r0, r3
 8004d04:	e7a6      	b.n	8004c54 <_printf_i+0x160>
 8004d06:	2301      	movs	r3, #1
 8004d08:	4632      	mov	r2, r6
 8004d0a:	4649      	mov	r1, r9
 8004d0c:	4640      	mov	r0, r8
 8004d0e:	47d0      	blx	sl
 8004d10:	3001      	adds	r0, #1
 8004d12:	d09d      	beq.n	8004c50 <_printf_i+0x15c>
 8004d14:	3501      	adds	r5, #1
 8004d16:	68e3      	ldr	r3, [r4, #12]
 8004d18:	9903      	ldr	r1, [sp, #12]
 8004d1a:	1a5b      	subs	r3, r3, r1
 8004d1c:	42ab      	cmp	r3, r5
 8004d1e:	dcf2      	bgt.n	8004d06 <_printf_i+0x212>
 8004d20:	e7eb      	b.n	8004cfa <_printf_i+0x206>
 8004d22:	2500      	movs	r5, #0
 8004d24:	f104 0619 	add.w	r6, r4, #25
 8004d28:	e7f5      	b.n	8004d16 <_printf_i+0x222>
 8004d2a:	bf00      	nop
 8004d2c:	08005229 	.word	0x08005229
 8004d30:	0800523a 	.word	0x0800523a

08004d34 <__sflush_r>:
 8004d34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d3c:	0716      	lsls	r6, r2, #28
 8004d3e:	4605      	mov	r5, r0
 8004d40:	460c      	mov	r4, r1
 8004d42:	d454      	bmi.n	8004dee <__sflush_r+0xba>
 8004d44:	684b      	ldr	r3, [r1, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	dc02      	bgt.n	8004d50 <__sflush_r+0x1c>
 8004d4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	dd48      	ble.n	8004de2 <__sflush_r+0xae>
 8004d50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004d52:	2e00      	cmp	r6, #0
 8004d54:	d045      	beq.n	8004de2 <__sflush_r+0xae>
 8004d56:	2300      	movs	r3, #0
 8004d58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004d5c:	682f      	ldr	r7, [r5, #0]
 8004d5e:	6a21      	ldr	r1, [r4, #32]
 8004d60:	602b      	str	r3, [r5, #0]
 8004d62:	d030      	beq.n	8004dc6 <__sflush_r+0x92>
 8004d64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004d66:	89a3      	ldrh	r3, [r4, #12]
 8004d68:	0759      	lsls	r1, r3, #29
 8004d6a:	d505      	bpl.n	8004d78 <__sflush_r+0x44>
 8004d6c:	6863      	ldr	r3, [r4, #4]
 8004d6e:	1ad2      	subs	r2, r2, r3
 8004d70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004d72:	b10b      	cbz	r3, 8004d78 <__sflush_r+0x44>
 8004d74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004d76:	1ad2      	subs	r2, r2, r3
 8004d78:	2300      	movs	r3, #0
 8004d7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004d7c:	6a21      	ldr	r1, [r4, #32]
 8004d7e:	4628      	mov	r0, r5
 8004d80:	47b0      	blx	r6
 8004d82:	1c43      	adds	r3, r0, #1
 8004d84:	89a3      	ldrh	r3, [r4, #12]
 8004d86:	d106      	bne.n	8004d96 <__sflush_r+0x62>
 8004d88:	6829      	ldr	r1, [r5, #0]
 8004d8a:	291d      	cmp	r1, #29
 8004d8c:	d82b      	bhi.n	8004de6 <__sflush_r+0xb2>
 8004d8e:	4a2a      	ldr	r2, [pc, #168]	@ (8004e38 <__sflush_r+0x104>)
 8004d90:	410a      	asrs	r2, r1
 8004d92:	07d6      	lsls	r6, r2, #31
 8004d94:	d427      	bmi.n	8004de6 <__sflush_r+0xb2>
 8004d96:	2200      	movs	r2, #0
 8004d98:	6062      	str	r2, [r4, #4]
 8004d9a:	04d9      	lsls	r1, r3, #19
 8004d9c:	6922      	ldr	r2, [r4, #16]
 8004d9e:	6022      	str	r2, [r4, #0]
 8004da0:	d504      	bpl.n	8004dac <__sflush_r+0x78>
 8004da2:	1c42      	adds	r2, r0, #1
 8004da4:	d101      	bne.n	8004daa <__sflush_r+0x76>
 8004da6:	682b      	ldr	r3, [r5, #0]
 8004da8:	b903      	cbnz	r3, 8004dac <__sflush_r+0x78>
 8004daa:	6560      	str	r0, [r4, #84]	@ 0x54
 8004dac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004dae:	602f      	str	r7, [r5, #0]
 8004db0:	b1b9      	cbz	r1, 8004de2 <__sflush_r+0xae>
 8004db2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004db6:	4299      	cmp	r1, r3
 8004db8:	d002      	beq.n	8004dc0 <__sflush_r+0x8c>
 8004dba:	4628      	mov	r0, r5
 8004dbc:	f7ff fa9a 	bl	80042f4 <_free_r>
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	6363      	str	r3, [r4, #52]	@ 0x34
 8004dc4:	e00d      	b.n	8004de2 <__sflush_r+0xae>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	4628      	mov	r0, r5
 8004dca:	47b0      	blx	r6
 8004dcc:	4602      	mov	r2, r0
 8004dce:	1c50      	adds	r0, r2, #1
 8004dd0:	d1c9      	bne.n	8004d66 <__sflush_r+0x32>
 8004dd2:	682b      	ldr	r3, [r5, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0c6      	beq.n	8004d66 <__sflush_r+0x32>
 8004dd8:	2b1d      	cmp	r3, #29
 8004dda:	d001      	beq.n	8004de0 <__sflush_r+0xac>
 8004ddc:	2b16      	cmp	r3, #22
 8004dde:	d11e      	bne.n	8004e1e <__sflush_r+0xea>
 8004de0:	602f      	str	r7, [r5, #0]
 8004de2:	2000      	movs	r0, #0
 8004de4:	e022      	b.n	8004e2c <__sflush_r+0xf8>
 8004de6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004dea:	b21b      	sxth	r3, r3
 8004dec:	e01b      	b.n	8004e26 <__sflush_r+0xf2>
 8004dee:	690f      	ldr	r7, [r1, #16]
 8004df0:	2f00      	cmp	r7, #0
 8004df2:	d0f6      	beq.n	8004de2 <__sflush_r+0xae>
 8004df4:	0793      	lsls	r3, r2, #30
 8004df6:	680e      	ldr	r6, [r1, #0]
 8004df8:	bf08      	it	eq
 8004dfa:	694b      	ldreq	r3, [r1, #20]
 8004dfc:	600f      	str	r7, [r1, #0]
 8004dfe:	bf18      	it	ne
 8004e00:	2300      	movne	r3, #0
 8004e02:	eba6 0807 	sub.w	r8, r6, r7
 8004e06:	608b      	str	r3, [r1, #8]
 8004e08:	f1b8 0f00 	cmp.w	r8, #0
 8004e0c:	dde9      	ble.n	8004de2 <__sflush_r+0xae>
 8004e0e:	6a21      	ldr	r1, [r4, #32]
 8004e10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004e12:	4643      	mov	r3, r8
 8004e14:	463a      	mov	r2, r7
 8004e16:	4628      	mov	r0, r5
 8004e18:	47b0      	blx	r6
 8004e1a:	2800      	cmp	r0, #0
 8004e1c:	dc08      	bgt.n	8004e30 <__sflush_r+0xfc>
 8004e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e26:	81a3      	strh	r3, [r4, #12]
 8004e28:	f04f 30ff 	mov.w	r0, #4294967295
 8004e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e30:	4407      	add	r7, r0
 8004e32:	eba8 0800 	sub.w	r8, r8, r0
 8004e36:	e7e7      	b.n	8004e08 <__sflush_r+0xd4>
 8004e38:	dfbffffe 	.word	0xdfbffffe

08004e3c <_fflush_r>:
 8004e3c:	b538      	push	{r3, r4, r5, lr}
 8004e3e:	690b      	ldr	r3, [r1, #16]
 8004e40:	4605      	mov	r5, r0
 8004e42:	460c      	mov	r4, r1
 8004e44:	b913      	cbnz	r3, 8004e4c <_fflush_r+0x10>
 8004e46:	2500      	movs	r5, #0
 8004e48:	4628      	mov	r0, r5
 8004e4a:	bd38      	pop	{r3, r4, r5, pc}
 8004e4c:	b118      	cbz	r0, 8004e56 <_fflush_r+0x1a>
 8004e4e:	6a03      	ldr	r3, [r0, #32]
 8004e50:	b90b      	cbnz	r3, 8004e56 <_fflush_r+0x1a>
 8004e52:	f7ff f927 	bl	80040a4 <__sinit>
 8004e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d0f3      	beq.n	8004e46 <_fflush_r+0xa>
 8004e5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004e60:	07d0      	lsls	r0, r2, #31
 8004e62:	d404      	bmi.n	8004e6e <_fflush_r+0x32>
 8004e64:	0599      	lsls	r1, r3, #22
 8004e66:	d402      	bmi.n	8004e6e <_fflush_r+0x32>
 8004e68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e6a:	f7ff fa40 	bl	80042ee <__retarget_lock_acquire_recursive>
 8004e6e:	4628      	mov	r0, r5
 8004e70:	4621      	mov	r1, r4
 8004e72:	f7ff ff5f 	bl	8004d34 <__sflush_r>
 8004e76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e78:	07da      	lsls	r2, r3, #31
 8004e7a:	4605      	mov	r5, r0
 8004e7c:	d4e4      	bmi.n	8004e48 <_fflush_r+0xc>
 8004e7e:	89a3      	ldrh	r3, [r4, #12]
 8004e80:	059b      	lsls	r3, r3, #22
 8004e82:	d4e1      	bmi.n	8004e48 <_fflush_r+0xc>
 8004e84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e86:	f7ff fa33 	bl	80042f0 <__retarget_lock_release_recursive>
 8004e8a:	e7dd      	b.n	8004e48 <_fflush_r+0xc>

08004e8c <__swbuf_r>:
 8004e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8e:	460e      	mov	r6, r1
 8004e90:	4614      	mov	r4, r2
 8004e92:	4605      	mov	r5, r0
 8004e94:	b118      	cbz	r0, 8004e9e <__swbuf_r+0x12>
 8004e96:	6a03      	ldr	r3, [r0, #32]
 8004e98:	b90b      	cbnz	r3, 8004e9e <__swbuf_r+0x12>
 8004e9a:	f7ff f903 	bl	80040a4 <__sinit>
 8004e9e:	69a3      	ldr	r3, [r4, #24]
 8004ea0:	60a3      	str	r3, [r4, #8]
 8004ea2:	89a3      	ldrh	r3, [r4, #12]
 8004ea4:	071a      	lsls	r2, r3, #28
 8004ea6:	d501      	bpl.n	8004eac <__swbuf_r+0x20>
 8004ea8:	6923      	ldr	r3, [r4, #16]
 8004eaa:	b943      	cbnz	r3, 8004ebe <__swbuf_r+0x32>
 8004eac:	4621      	mov	r1, r4
 8004eae:	4628      	mov	r0, r5
 8004eb0:	f000 f82a 	bl	8004f08 <__swsetup_r>
 8004eb4:	b118      	cbz	r0, 8004ebe <__swbuf_r+0x32>
 8004eb6:	f04f 37ff 	mov.w	r7, #4294967295
 8004eba:	4638      	mov	r0, r7
 8004ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	6922      	ldr	r2, [r4, #16]
 8004ec2:	1a98      	subs	r0, r3, r2
 8004ec4:	6963      	ldr	r3, [r4, #20]
 8004ec6:	b2f6      	uxtb	r6, r6
 8004ec8:	4283      	cmp	r3, r0
 8004eca:	4637      	mov	r7, r6
 8004ecc:	dc05      	bgt.n	8004eda <__swbuf_r+0x4e>
 8004ece:	4621      	mov	r1, r4
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	f7ff ffb3 	bl	8004e3c <_fflush_r>
 8004ed6:	2800      	cmp	r0, #0
 8004ed8:	d1ed      	bne.n	8004eb6 <__swbuf_r+0x2a>
 8004eda:	68a3      	ldr	r3, [r4, #8]
 8004edc:	3b01      	subs	r3, #1
 8004ede:	60a3      	str	r3, [r4, #8]
 8004ee0:	6823      	ldr	r3, [r4, #0]
 8004ee2:	1c5a      	adds	r2, r3, #1
 8004ee4:	6022      	str	r2, [r4, #0]
 8004ee6:	701e      	strb	r6, [r3, #0]
 8004ee8:	6962      	ldr	r2, [r4, #20]
 8004eea:	1c43      	adds	r3, r0, #1
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d004      	beq.n	8004efa <__swbuf_r+0x6e>
 8004ef0:	89a3      	ldrh	r3, [r4, #12]
 8004ef2:	07db      	lsls	r3, r3, #31
 8004ef4:	d5e1      	bpl.n	8004eba <__swbuf_r+0x2e>
 8004ef6:	2e0a      	cmp	r6, #10
 8004ef8:	d1df      	bne.n	8004eba <__swbuf_r+0x2e>
 8004efa:	4621      	mov	r1, r4
 8004efc:	4628      	mov	r0, r5
 8004efe:	f7ff ff9d 	bl	8004e3c <_fflush_r>
 8004f02:	2800      	cmp	r0, #0
 8004f04:	d0d9      	beq.n	8004eba <__swbuf_r+0x2e>
 8004f06:	e7d6      	b.n	8004eb6 <__swbuf_r+0x2a>

08004f08 <__swsetup_r>:
 8004f08:	b538      	push	{r3, r4, r5, lr}
 8004f0a:	4b29      	ldr	r3, [pc, #164]	@ (8004fb0 <__swsetup_r+0xa8>)
 8004f0c:	4605      	mov	r5, r0
 8004f0e:	6818      	ldr	r0, [r3, #0]
 8004f10:	460c      	mov	r4, r1
 8004f12:	b118      	cbz	r0, 8004f1c <__swsetup_r+0x14>
 8004f14:	6a03      	ldr	r3, [r0, #32]
 8004f16:	b90b      	cbnz	r3, 8004f1c <__swsetup_r+0x14>
 8004f18:	f7ff f8c4 	bl	80040a4 <__sinit>
 8004f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f20:	0719      	lsls	r1, r3, #28
 8004f22:	d422      	bmi.n	8004f6a <__swsetup_r+0x62>
 8004f24:	06da      	lsls	r2, r3, #27
 8004f26:	d407      	bmi.n	8004f38 <__swsetup_r+0x30>
 8004f28:	2209      	movs	r2, #9
 8004f2a:	602a      	str	r2, [r5, #0]
 8004f2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f30:	81a3      	strh	r3, [r4, #12]
 8004f32:	f04f 30ff 	mov.w	r0, #4294967295
 8004f36:	e033      	b.n	8004fa0 <__swsetup_r+0x98>
 8004f38:	0758      	lsls	r0, r3, #29
 8004f3a:	d512      	bpl.n	8004f62 <__swsetup_r+0x5a>
 8004f3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f3e:	b141      	cbz	r1, 8004f52 <__swsetup_r+0x4a>
 8004f40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f44:	4299      	cmp	r1, r3
 8004f46:	d002      	beq.n	8004f4e <__swsetup_r+0x46>
 8004f48:	4628      	mov	r0, r5
 8004f4a:	f7ff f9d3 	bl	80042f4 <_free_r>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f52:	89a3      	ldrh	r3, [r4, #12]
 8004f54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004f58:	81a3      	strh	r3, [r4, #12]
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	6063      	str	r3, [r4, #4]
 8004f5e:	6923      	ldr	r3, [r4, #16]
 8004f60:	6023      	str	r3, [r4, #0]
 8004f62:	89a3      	ldrh	r3, [r4, #12]
 8004f64:	f043 0308 	orr.w	r3, r3, #8
 8004f68:	81a3      	strh	r3, [r4, #12]
 8004f6a:	6923      	ldr	r3, [r4, #16]
 8004f6c:	b94b      	cbnz	r3, 8004f82 <__swsetup_r+0x7a>
 8004f6e:	89a3      	ldrh	r3, [r4, #12]
 8004f70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004f74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f78:	d003      	beq.n	8004f82 <__swsetup_r+0x7a>
 8004f7a:	4621      	mov	r1, r4
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	f000 f8a5 	bl	80050cc <__smakebuf_r>
 8004f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f86:	f013 0201 	ands.w	r2, r3, #1
 8004f8a:	d00a      	beq.n	8004fa2 <__swsetup_r+0x9a>
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	60a2      	str	r2, [r4, #8]
 8004f90:	6962      	ldr	r2, [r4, #20]
 8004f92:	4252      	negs	r2, r2
 8004f94:	61a2      	str	r2, [r4, #24]
 8004f96:	6922      	ldr	r2, [r4, #16]
 8004f98:	b942      	cbnz	r2, 8004fac <__swsetup_r+0xa4>
 8004f9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004f9e:	d1c5      	bne.n	8004f2c <__swsetup_r+0x24>
 8004fa0:	bd38      	pop	{r3, r4, r5, pc}
 8004fa2:	0799      	lsls	r1, r3, #30
 8004fa4:	bf58      	it	pl
 8004fa6:	6962      	ldrpl	r2, [r4, #20]
 8004fa8:	60a2      	str	r2, [r4, #8]
 8004faa:	e7f4      	b.n	8004f96 <__swsetup_r+0x8e>
 8004fac:	2000      	movs	r0, #0
 8004fae:	e7f7      	b.n	8004fa0 <__swsetup_r+0x98>
 8004fb0:	24000038 	.word	0x24000038

08004fb4 <memmove>:
 8004fb4:	4288      	cmp	r0, r1
 8004fb6:	b510      	push	{r4, lr}
 8004fb8:	eb01 0402 	add.w	r4, r1, r2
 8004fbc:	d902      	bls.n	8004fc4 <memmove+0x10>
 8004fbe:	4284      	cmp	r4, r0
 8004fc0:	4623      	mov	r3, r4
 8004fc2:	d807      	bhi.n	8004fd4 <memmove+0x20>
 8004fc4:	1e43      	subs	r3, r0, #1
 8004fc6:	42a1      	cmp	r1, r4
 8004fc8:	d008      	beq.n	8004fdc <memmove+0x28>
 8004fca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004fd2:	e7f8      	b.n	8004fc6 <memmove+0x12>
 8004fd4:	4402      	add	r2, r0
 8004fd6:	4601      	mov	r1, r0
 8004fd8:	428a      	cmp	r2, r1
 8004fda:	d100      	bne.n	8004fde <memmove+0x2a>
 8004fdc:	bd10      	pop	{r4, pc}
 8004fde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004fe2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004fe6:	e7f7      	b.n	8004fd8 <memmove+0x24>

08004fe8 <_sbrk_r>:
 8004fe8:	b538      	push	{r3, r4, r5, lr}
 8004fea:	4d06      	ldr	r5, [pc, #24]	@ (8005004 <_sbrk_r+0x1c>)
 8004fec:	2300      	movs	r3, #0
 8004fee:	4604      	mov	r4, r0
 8004ff0:	4608      	mov	r0, r1
 8004ff2:	602b      	str	r3, [r5, #0]
 8004ff4:	f7fb fd86 	bl	8000b04 <_sbrk>
 8004ff8:	1c43      	adds	r3, r0, #1
 8004ffa:	d102      	bne.n	8005002 <_sbrk_r+0x1a>
 8004ffc:	682b      	ldr	r3, [r5, #0]
 8004ffe:	b103      	cbz	r3, 8005002 <_sbrk_r+0x1a>
 8005000:	6023      	str	r3, [r4, #0]
 8005002:	bd38      	pop	{r3, r4, r5, pc}
 8005004:	240002d8 	.word	0x240002d8

08005008 <memcpy>:
 8005008:	440a      	add	r2, r1
 800500a:	4291      	cmp	r1, r2
 800500c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005010:	d100      	bne.n	8005014 <memcpy+0xc>
 8005012:	4770      	bx	lr
 8005014:	b510      	push	{r4, lr}
 8005016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800501a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800501e:	4291      	cmp	r1, r2
 8005020:	d1f9      	bne.n	8005016 <memcpy+0xe>
 8005022:	bd10      	pop	{r4, pc}

08005024 <_realloc_r>:
 8005024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005028:	4680      	mov	r8, r0
 800502a:	4615      	mov	r5, r2
 800502c:	460c      	mov	r4, r1
 800502e:	b921      	cbnz	r1, 800503a <_realloc_r+0x16>
 8005030:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005034:	4611      	mov	r1, r2
 8005036:	f7ff b9c9 	b.w	80043cc <_malloc_r>
 800503a:	b92a      	cbnz	r2, 8005048 <_realloc_r+0x24>
 800503c:	f7ff f95a 	bl	80042f4 <_free_r>
 8005040:	2400      	movs	r4, #0
 8005042:	4620      	mov	r0, r4
 8005044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005048:	f000 f89e 	bl	8005188 <_malloc_usable_size_r>
 800504c:	4285      	cmp	r5, r0
 800504e:	4606      	mov	r6, r0
 8005050:	d802      	bhi.n	8005058 <_realloc_r+0x34>
 8005052:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005056:	d8f4      	bhi.n	8005042 <_realloc_r+0x1e>
 8005058:	4629      	mov	r1, r5
 800505a:	4640      	mov	r0, r8
 800505c:	f7ff f9b6 	bl	80043cc <_malloc_r>
 8005060:	4607      	mov	r7, r0
 8005062:	2800      	cmp	r0, #0
 8005064:	d0ec      	beq.n	8005040 <_realloc_r+0x1c>
 8005066:	42b5      	cmp	r5, r6
 8005068:	462a      	mov	r2, r5
 800506a:	4621      	mov	r1, r4
 800506c:	bf28      	it	cs
 800506e:	4632      	movcs	r2, r6
 8005070:	f7ff ffca 	bl	8005008 <memcpy>
 8005074:	4621      	mov	r1, r4
 8005076:	4640      	mov	r0, r8
 8005078:	f7ff f93c 	bl	80042f4 <_free_r>
 800507c:	463c      	mov	r4, r7
 800507e:	e7e0      	b.n	8005042 <_realloc_r+0x1e>

08005080 <__swhatbuf_r>:
 8005080:	b570      	push	{r4, r5, r6, lr}
 8005082:	460c      	mov	r4, r1
 8005084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005088:	2900      	cmp	r1, #0
 800508a:	b096      	sub	sp, #88	@ 0x58
 800508c:	4615      	mov	r5, r2
 800508e:	461e      	mov	r6, r3
 8005090:	da0d      	bge.n	80050ae <__swhatbuf_r+0x2e>
 8005092:	89a3      	ldrh	r3, [r4, #12]
 8005094:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005098:	f04f 0100 	mov.w	r1, #0
 800509c:	bf14      	ite	ne
 800509e:	2340      	movne	r3, #64	@ 0x40
 80050a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80050a4:	2000      	movs	r0, #0
 80050a6:	6031      	str	r1, [r6, #0]
 80050a8:	602b      	str	r3, [r5, #0]
 80050aa:	b016      	add	sp, #88	@ 0x58
 80050ac:	bd70      	pop	{r4, r5, r6, pc}
 80050ae:	466a      	mov	r2, sp
 80050b0:	f000 f848 	bl	8005144 <_fstat_r>
 80050b4:	2800      	cmp	r0, #0
 80050b6:	dbec      	blt.n	8005092 <__swhatbuf_r+0x12>
 80050b8:	9901      	ldr	r1, [sp, #4]
 80050ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80050be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80050c2:	4259      	negs	r1, r3
 80050c4:	4159      	adcs	r1, r3
 80050c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050ca:	e7eb      	b.n	80050a4 <__swhatbuf_r+0x24>

080050cc <__smakebuf_r>:
 80050cc:	898b      	ldrh	r3, [r1, #12]
 80050ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050d0:	079d      	lsls	r5, r3, #30
 80050d2:	4606      	mov	r6, r0
 80050d4:	460c      	mov	r4, r1
 80050d6:	d507      	bpl.n	80050e8 <__smakebuf_r+0x1c>
 80050d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80050dc:	6023      	str	r3, [r4, #0]
 80050de:	6123      	str	r3, [r4, #16]
 80050e0:	2301      	movs	r3, #1
 80050e2:	6163      	str	r3, [r4, #20]
 80050e4:	b003      	add	sp, #12
 80050e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050e8:	ab01      	add	r3, sp, #4
 80050ea:	466a      	mov	r2, sp
 80050ec:	f7ff ffc8 	bl	8005080 <__swhatbuf_r>
 80050f0:	9f00      	ldr	r7, [sp, #0]
 80050f2:	4605      	mov	r5, r0
 80050f4:	4639      	mov	r1, r7
 80050f6:	4630      	mov	r0, r6
 80050f8:	f7ff f968 	bl	80043cc <_malloc_r>
 80050fc:	b948      	cbnz	r0, 8005112 <__smakebuf_r+0x46>
 80050fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005102:	059a      	lsls	r2, r3, #22
 8005104:	d4ee      	bmi.n	80050e4 <__smakebuf_r+0x18>
 8005106:	f023 0303 	bic.w	r3, r3, #3
 800510a:	f043 0302 	orr.w	r3, r3, #2
 800510e:	81a3      	strh	r3, [r4, #12]
 8005110:	e7e2      	b.n	80050d8 <__smakebuf_r+0xc>
 8005112:	89a3      	ldrh	r3, [r4, #12]
 8005114:	6020      	str	r0, [r4, #0]
 8005116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800511a:	81a3      	strh	r3, [r4, #12]
 800511c:	9b01      	ldr	r3, [sp, #4]
 800511e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005122:	b15b      	cbz	r3, 800513c <__smakebuf_r+0x70>
 8005124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005128:	4630      	mov	r0, r6
 800512a:	f000 f81d 	bl	8005168 <_isatty_r>
 800512e:	b128      	cbz	r0, 800513c <__smakebuf_r+0x70>
 8005130:	89a3      	ldrh	r3, [r4, #12]
 8005132:	f023 0303 	bic.w	r3, r3, #3
 8005136:	f043 0301 	orr.w	r3, r3, #1
 800513a:	81a3      	strh	r3, [r4, #12]
 800513c:	89a3      	ldrh	r3, [r4, #12]
 800513e:	431d      	orrs	r5, r3
 8005140:	81a5      	strh	r5, [r4, #12]
 8005142:	e7cf      	b.n	80050e4 <__smakebuf_r+0x18>

08005144 <_fstat_r>:
 8005144:	b538      	push	{r3, r4, r5, lr}
 8005146:	4d07      	ldr	r5, [pc, #28]	@ (8005164 <_fstat_r+0x20>)
 8005148:	2300      	movs	r3, #0
 800514a:	4604      	mov	r4, r0
 800514c:	4608      	mov	r0, r1
 800514e:	4611      	mov	r1, r2
 8005150:	602b      	str	r3, [r5, #0]
 8005152:	f7fb fcae 	bl	8000ab2 <_fstat>
 8005156:	1c43      	adds	r3, r0, #1
 8005158:	d102      	bne.n	8005160 <_fstat_r+0x1c>
 800515a:	682b      	ldr	r3, [r5, #0]
 800515c:	b103      	cbz	r3, 8005160 <_fstat_r+0x1c>
 800515e:	6023      	str	r3, [r4, #0]
 8005160:	bd38      	pop	{r3, r4, r5, pc}
 8005162:	bf00      	nop
 8005164:	240002d8 	.word	0x240002d8

08005168 <_isatty_r>:
 8005168:	b538      	push	{r3, r4, r5, lr}
 800516a:	4d06      	ldr	r5, [pc, #24]	@ (8005184 <_isatty_r+0x1c>)
 800516c:	2300      	movs	r3, #0
 800516e:	4604      	mov	r4, r0
 8005170:	4608      	mov	r0, r1
 8005172:	602b      	str	r3, [r5, #0]
 8005174:	f7fb fcad 	bl	8000ad2 <_isatty>
 8005178:	1c43      	adds	r3, r0, #1
 800517a:	d102      	bne.n	8005182 <_isatty_r+0x1a>
 800517c:	682b      	ldr	r3, [r5, #0]
 800517e:	b103      	cbz	r3, 8005182 <_isatty_r+0x1a>
 8005180:	6023      	str	r3, [r4, #0]
 8005182:	bd38      	pop	{r3, r4, r5, pc}
 8005184:	240002d8 	.word	0x240002d8

08005188 <_malloc_usable_size_r>:
 8005188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800518c:	1f18      	subs	r0, r3, #4
 800518e:	2b00      	cmp	r3, #0
 8005190:	bfbc      	itt	lt
 8005192:	580b      	ldrlt	r3, [r1, r0]
 8005194:	18c0      	addlt	r0, r0, r3
 8005196:	4770      	bx	lr

08005198 <_init>:
 8005198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800519a:	bf00      	nop
 800519c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800519e:	bc08      	pop	{r3}
 80051a0:	469e      	mov	lr, r3
 80051a2:	4770      	bx	lr

080051a4 <_fini>:
 80051a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a6:	bf00      	nop
 80051a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051aa:	bc08      	pop	{r3}
 80051ac:	469e      	mov	lr, r3
 80051ae:	4770      	bx	lr
